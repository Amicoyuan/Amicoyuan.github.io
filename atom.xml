<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xingyuanjie.top</id>
    <title>Amicoyuan</title>
    <link href="https://xingyuanjie.top" />
    <updated>2023-03-06T11:00:34.000Z</updated>
    <category term="AVX" />
    <category term="Data Structure" />
    <category term="String" />
    <category term="Find" />
    <category term="STL" />
    <category term="C++" />
    <category term="Set" />
    <category term="团体程序设计天梯赛" />
    <category term="Sort" />
    <category term="Graph" />
    <category term="邻接表" />
    <category term="Vector" />
    <category term="LinkList" />
    <category term="双向链表" />
    <category term="模拟" />
    <category term="Binary tree" />
    <category term="BFS" />
    <category term="结构体" />
    <category term="贪心" />
    <category term="邻接矩阵" />
    <category term="DFS" />
    <category term="Double类型相等比较" />
    <category term="并查集" />
    <category term="Map" />
    <category term="Pair" />
    <category term="Linux" />
    <category term="MPI" />
    <category term="Tensorflow" />
    <category term="Machine Learning" />
    <category term="Matrix" />
    <category term="GEMM" />
    <category term="AVX2" />
    <category term="dgemm" />
    <category term="Cache" />
    <category term="Blocking" />
    <category term="CUDA" />
    <category term="Intel" />
    <category term="LeetCode" />
    <category term="双指针" />
    <category term="数组翻转" />
    <category term="哈希表" />
    <category term="前缀和" />
    <category term="Mirror" />
    <category term="牛客" />
    <category term="Numactl" />
    <category term="OpenMP" />
    <category term="Slurm" />
    <category term="C/C++" />
    <category term="register" />
    <category term="性能分析工具" />
    <category term="gcov" />
    <category term="bool" />
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/ML001/</id>
        <title>线性回归模型</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/ML001/"/>
        <content type="html">&lt;h2 id=&#34;线性回归模型&#34;&gt;&lt;a href=&#34;#线性回归模型&#34; class=&#34;headerlink&#34; title=&#34;线性回归模型&#34;&gt;&lt;/a&gt;线性回归模型&lt;/h2&gt;&lt;h3 id=&#34;MOdel-Representation&#34;&gt;&lt;a href=&#34;#MOdel-Representation&#34; class=&#34;headerlink&#34; title=&#34;MOdel Representation&#34;&gt;&lt;/a&gt;MOdel Representation&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306195956356.png&#34; alt=&#34;image-20230306195956356&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Goals&#34;&gt;&lt;a href=&#34;#Goals&#34; class=&#34;headerlink&#34; title=&#34;Goals&#34;&gt;&lt;/a&gt;Goals&lt;/h3&gt;&lt;p&gt;In this lab you will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;learn to implement the model f_{w,b} for linear regression with one variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Notation&#34;&gt;&lt;a href=&#34;#Notation&#34; class=&#34;headerlink&#34; title=&#34;Notation&#34;&gt;&lt;/a&gt;Notation&lt;/h3&gt;&lt;p&gt;Here is a summary of some of the notation you will encounter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306200250050.png&#34; alt=&#34;image-20230306200250050&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Tools&#34;&gt;&lt;a href=&#34;#Tools&#34; class=&#34;headerlink&#34; title=&#34;Tools&#34;&gt;&lt;/a&gt;Tools&lt;/h3&gt;&lt;p&gt;In this lab you will make use of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NumPy,a popular library for scientific computing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Matplotlib,a popular library for plotting data&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; np&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; plt&lt;br&gt;plt.style.use(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./deeplearning.mpstyle&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Problem-Statement&#34;&gt;&lt;a href=&#34;#Problem-Statement&#34; class=&#34;headerlink&#34; title=&#34;Problem Statement&#34;&gt;&lt;/a&gt;Problem Statement&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306200642937.png&#34; alt=&#34;image-20230306200642937&#34;&gt;&lt;/p&gt;
&lt;p&gt;As in the lecture,you will use the motivating example of housing price prediction. This lab will use a simple data set with only two data points - a house with 1000 square feet(sqft) sold for $300,000 and a house with 2000 square feet sold for $500,000.These two points will constitute our data or training set. In this lab, the units of size are 1000 sqft and the units of price are 1000s of dollars.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Size (1000 sqft)&lt;/th&gt;
&lt;th&gt;Price (1000s of dollars)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;You would like to fit a linear regression model(shown above as the blue straight line)through these two points, so you can then predict price for other houses - say, a house with 1200 sqft.&lt;/p&gt;
&lt;p&gt;Please run the following code cell to create your x_train and y_train variables. The data is stored in one-dimensional NumPy arrays.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#x_train is the input variable (size in 1000 square feet)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#y_train is the target (price in 1000s of dollars)&lt;/span&gt;&lt;br&gt;x_train = np.array([&lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;])&lt;br&gt;y_train = np.array([&lt;span class=&#34;hljs-number&#34;&gt;300.0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;500.0&lt;/span&gt;])&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;x_train = &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;x_train&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;y_train = &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;y_train&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Number-of-training-examples-m&#34;&gt;&lt;a href=&#34;#Number-of-training-examples-m&#34; class=&#34;headerlink&#34; title=&#34;Number of training examples m&#34;&gt;&lt;/a&gt;Number of training examples m&lt;/h3&gt;&lt;p&gt;you will use m to denote the number of training examples. Numpy arrays have a .shape parameter. x_train.shape return a python tuple with an entry for each dimension. x_train.shape[0] is the length of the array and number of examples as shown below.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# m is the number of training examples&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;x_train.shape: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;x_train.shape&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;m = x_train.shape[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;Number of training example is: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;m&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;x.train.shape: (2,)&lt;/p&gt;
&lt;p&gt;Number of training examples is: 2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One can also use the Python len() function as shown below.&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# m is the number of training examples&lt;/span&gt;&lt;br&gt;m = &lt;span class=&#34;hljs-built_in&#34;&gt;len&lt;/span&gt;(x_train)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;Number of training example is: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;m&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Number of training examples  is:	2&lt;/p&gt;
&lt;h3 id=&#34;Training-example-x-i-y-i&#34;&gt;&lt;a href=&#34;#Training-example-x-i-y-i&#34; class=&#34;headerlink&#34; title=&#34;Training example x_i, y_i&#34;&gt;&lt;/a&gt;Training example x_i, y_i&lt;/h3&gt;&lt;p&gt;You will use (x(𝑖), y(𝑖)) to denote the 𝑖(th) training example. Since Python is zero indexed, (x(0), y(0) is (1.0, 300.0) and (x(1), y(1) is (2.0, 500.0).&lt;/p&gt;
&lt;p&gt;To access a value in a Numpy array, one indexes the array with the desired offset. For example the syntax to access location zero of x_train is x_train[0]. Run the next code block below to get the i(th) training example.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#Change this to 1 to see (x^1,y^1)&lt;/span&gt;&lt;br&gt;&lt;br&gt;x_i = x_train[i]&lt;br&gt;y_i = y_train[i]&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;(x^(&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;i&amp;#125;&lt;/span&gt;), y^(&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;i&amp;#125;&lt;/span&gt;)) = (&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;x_i&amp;#125;&lt;/span&gt;, &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;y_i&amp;#125;&lt;/span&gt;)&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;(x^(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;), y^(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)) = (&lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;300.0&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Plotting-the-data&#34;&gt;&lt;a href=&#34;#Plotting-the-data&#34; class=&#34;headerlink&#34; title=&#34;Plotting the data&#34;&gt;&lt;/a&gt;Plotting the data&lt;/h3&gt;&lt;p&gt;You can plot these two points using the scatter() function is the matplotlib library,as shown in the cell below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The function arguments marker and c show the points as red crosses(the default is blue dots.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use other functions in the matplotlib library to set title and labels to display.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Plot the data points&lt;/span&gt;&lt;br&gt;plt.scatter(x_train, y_train, marker=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt; c=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the title&lt;/span&gt;&lt;br&gt;plt.title(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Housing Prices&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the y-axis label&lt;/span&gt;&lt;br&gt;plt.ylabel(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Price (in 1000s of dollars)&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the x-axis lbel&lt;/span&gt;&lt;br&gt;plt.xlabel(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Size (1000 sqft)&amp;#x27;&lt;/span&gt;)&lt;br&gt;plt.show()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306204822102.png&#34; alt=&#34;image-20230306204822102&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Model-function&#34;&gt;&lt;a href=&#34;#Model-function&#34; class=&#34;headerlink&#34; title=&#34;Model function&#34;&gt;&lt;/a&gt;Model function&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306204918585.png&#34; alt=&#34;image-20230306204918585&#34;&gt;&lt;/p&gt;
&lt;p&gt;As described in lecture, the model function for linear regression (which is a function that maps from x to y)is represented as&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306205107527.png&#34; alt=&#34;image-20230306205107527&#34;&gt;&lt;/p&gt;
&lt;p&gt;The formula above is how you can represent straight lines - different values of w and b give you different straight lines on the plot.&lt;/p&gt;
&lt;p&gt;Let’s try to get a better intuition for this through the code blocks below. Let’s start with w &amp;#x3D; 100 and b &amp;#x3D;100.&lt;/p&gt;
&lt;p&gt;Note: You can come back to this cell to adjust the model’s w and b parameters.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;w = &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;b = &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;w: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;w&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;b: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;b&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;w:	&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;b:	&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now,let’s compute the value of f_{w,b}(x^i) for your two data points. You can explicitly write this out for each data poins as -&lt;/p&gt;
&lt;p&gt;for x(0),f_wb &amp;#x3D; w * x[0] + b&lt;/p&gt;
&lt;p&gt;for x(1),f_wb &amp;#x3D; w * x[1] + b&lt;/p&gt;
&lt;p&gt;For a large number of data points, this can get unwieldy and repetitive. So instead, you can calculate the function output in a for loop as shown in the compute_model_output function below.&lt;/p&gt;
&lt;p&gt;Note:The argument description (ndarray (m,)) describes a Numpy n-dimensional array of shape (m,). (scalar) describes an argument without dimensions, just a magnitude.&lt;/p&gt;
&lt;p&gt;Note: np.zero(n) will return a one-dimensional numpy array with n entries&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;compute_model_output&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x, w, b&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Computes the prediction of a linear model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Args:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	x (ndarray (m,)):Data, m examples&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	w,b (scalar)	:model parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Returns&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	y (ndarray (m,)):target values&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    m = x.shape[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;    f_wb = np.zeros(m)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(m)&lt;br&gt;    	f_wb[i] = w * x[i] + b&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; f_wb&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s call the compute_model_output function and plot the output.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;tmp_f_wb = compute_model_output(x_train, w, b,)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Plot our model prediction&lt;/span&gt;&lt;br&gt;plt.plot(x_train, tmp_f_wb, c=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;,label=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Our Prediction&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Plot the data points&lt;/span&gt;&lt;br&gt;plt.scatter(x_train, y_train, marker=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;, c=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;,label=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Actual Values&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the title&lt;/span&gt;&lt;br&gt;plt.title(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Housing Prices&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the y-axis label&lt;/span&gt;&lt;br&gt;plt.ylabel(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Price (in 1000s of dollars)&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the x-axis label&lt;/span&gt;&lt;br&gt;plt.xlabel(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Size (1000 sqft)&amp;#x27;&lt;/span&gt;)&lt;br&gt;plt.legend()&lt;br&gt;plt.show()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306211337338.png&#34; alt=&#34;image-20230306211337338&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, setting w &amp;#x3D; 100 and b &amp;#x3D; 100 does not result in a line that fits our data.&lt;/p&gt;
&lt;h3 id=&#34;Challenge&#34;&gt;&lt;a href=&#34;#Challenge&#34; class=&#34;headerlink&#34; title=&#34;Challenge&#34;&gt;&lt;/a&gt;Challenge&lt;/h3&gt;&lt;p&gt;Try experimenting with different values of w and b. What should the values be for a line that fits our data?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use  your mouse to click on the triangle to the left of the green “Hints” below to reveal some hints for choosing b and w.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;Prediction&#34;&gt;&lt;a href=&#34;#Prediction&#34; class=&#34;headerlink&#34; title=&#34;Prediction&#34;&gt;&lt;/a&gt;Prediction&lt;/h3&gt;&lt;p&gt;Now that we have a model, we can use it to make our original prediction. Let’s predict the price of a house with 1200 sqft. Since the units of x are in 1000’s of sqft, x is 1.2.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;w = &lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;&lt;br&gt;b = &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;x_i = &lt;span class=&#34;hljs-number&#34;&gt;1.2&lt;/span&gt;&lt;br&gt;cost_1200sqft = w * x_i + b&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;$&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;cost_1200sqft:&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt;f&amp;#125;&lt;/span&gt; thousand dollars&amp;quot;&lt;/span&gt; )&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;$&lt;span class=&#34;hljs-number&#34;&gt;340&lt;/span&gt; thousand dollars&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Congratulations&#34;&gt;&lt;a href=&#34;#Congratulations&#34; class=&#34;headerlink&#34; title=&#34;Congratulations!&#34;&gt;&lt;/a&gt;Congratulations!&lt;/h3&gt;&lt;p&gt;In this lab you have learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear regression bulids a model which establishes a relationship between features and targets&lt;/li&gt;
&lt;li&gt;In the example above, the feature was house size and the target was house price&lt;/li&gt;
&lt;li&gt;for simple linear regression, the model has two parameters w and b whose calue are ‘fit’ using training data.&lt;/li&gt;
&lt;li&gt;once a model’s parameters have been determined, the model can be used to make predictions on novel data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;amp;vd_source=3ae32e36058f58c5b85935fca9b77797&#34;&gt;https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;amp;vd_source=3ae32e36058f58c5b85935fca9b77797&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kaieye/2022-Machine-Learning-Specialization&#34;&gt;kaieye&amp;#x2F;2022-Machine-Learning-Specialization (github.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Tensorflow" />
        <category term="Machine Learning" />
        <updated>2023-03-06T11:00:34.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/cuda011/</id>
        <title>CUDA编译与执行</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/cuda011/"/>
        <content type="html">&lt;h2 id=&#34;CUDA编译与执行&#34;&gt;&lt;a href=&#34;#CUDA编译与执行&#34; class=&#34;headerlink&#34; title=&#34;CUDA编译与执行&#34;&gt;&lt;/a&gt;CUDA编译与执行&lt;/h2&gt;&lt;p&gt;现在把所有的代码放在一个文件名为sumArraysOnGPU-small-case.cu的文件中，如代码清单2-4所示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码清单2-4		基于GPU的向量加法（sumArraysOnGPU-small-case.cu）&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;cuda_runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#define CHECK(call)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    const cudaError_t error = call;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    if(error != cudaSuccess)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;        printf(&amp;quot;Error:%s:%d, &amp;quot;, __FILE__, __LINE__);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;        printf(&amp;quot;code:%d, reason: %s\n&amp;quot;, error, cudaGetErrorString(error));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;checkResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *hostRef, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *gpuRef, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; N)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; epsilon = &lt;span class=&#34;hljs-number&#34;&gt;1.0E-8&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; match = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ;i &amp;lt; N; i++)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;abs&lt;/span&gt;(hostRef[i] - gpuRef[i]) &amp;gt; epsilon)&amp;#123;&lt;br&gt;            match = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Arrays do not match!\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;host %5.2f gpu %5.2f at current %d\n&amp;quot;&lt;/span&gt;,hostRef[i],gpuRef[i],i);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(match) &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Arrays match.\n\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;initialData&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *ip,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; size)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//generate different seed for random number&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;time_t&lt;/span&gt; t;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;srand&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;unsigned&lt;/span&gt;) &lt;span class=&#34;hljs-built_in&#34;&gt;time&lt;/span&gt;(&amp;amp;t));&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;size;i++)&amp;#123;&lt;br&gt;        ip[i] = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;)(&lt;span class=&#34;hljs-built_in&#34;&gt;rand&lt;/span&gt;() &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xFF&lt;/span&gt;) /&lt;span class=&#34;hljs-number&#34;&gt;10.0f&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArraysOnHost&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A,&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = threadIdx.x;&lt;br&gt;    C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;__gloal__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArraysOnGPU&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = threadIdx.x;&lt;br&gt;    C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; argc,&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s Starting...\n&amp;quot;&lt;/span&gt;,argv[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dev = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaSetDevice&lt;/span&gt;(dev);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up data size of vectors&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nElem = &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Vector size %d\n&amp;quot;&lt;/span&gt;,nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt; nBytes = nElem * &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *h_A, *h_B, *hostRef, *gpuRef;&lt;br&gt;    h_A = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    h_B = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    hostRef = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    gpuRef = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//initialize data at host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialData&lt;/span&gt;(h_A, nElem);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialData&lt;/span&gt;(h_B, nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(hostRef, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ,nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(gpuRef, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ,nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc device global memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *d_A, *d_B, *d_C;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_A, nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_B, nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_C, nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//transfer data from host to device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_A, h_A, nBytes, cudaMemcpyHostTodevice);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_B, h_B, nBytes, cudaMemcpyHostTodevice);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//invoke kernel at host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem/block.x)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(d_A, d_B, d_C);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;pritnf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Execution configuration &amp;lt;&amp;lt;&amp;lt;%d, %d&amp;gt;&amp;gt;&amp;gt;\n&amp;quot;&lt;/span&gt;,grid.x,block.x);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//copy kernel result back to host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//add vector at host side for result checks&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;sumArraysOnHost&lt;/span&gt;(h_A, h_B, hostRef, nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//check device results&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;checkResult&lt;/span&gt;(hostRef, gpuRef, nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free device global memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_A);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_B);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_C);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_A);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_B);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(hostRef);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(gpuRef);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这段代码中，向量大小被设置为32，如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nElem = &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行配置被放入一个块内，其中包含32个元素：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem/block.x)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用以下命令编译和执行该带啊吗：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nvcc sumArraysOnGPU-small-case.cu -o addvector&lt;br&gt;./addvector&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;系统报告如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;./addvector Starting...&lt;br&gt;Vector size 32&lt;br&gt;Execution configuration &amp;lt;&amp;lt;&amp;lt;1,32&amp;gt;&amp;gt;&amp;gt;&lt;br&gt;Arrays match.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果你将执行配置重新定义为32个块，每个块只有一个元素，如下所示；&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么就需要在代码清单2-4中对核函数sumArraysOnGPU进行修改：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;用&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = threadIdx.x;    替换&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = blockIdx.x;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一般情况下，可以基于给定的一维网格和块的信息来计算全局数据访问的唯一索引：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;__gloal__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArraysOnGPU&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = blockIdx.x * blockDim.x * threadIdx.x;&lt;br&gt;    C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你需要确保一般情况下进行更改所产生结果的正确性。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-06T08:18:09.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/cuda010/</id>
        <title>CUDA处理错误</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/cuda010/"/>
        <content type="html">&lt;h2 id=&#34;CUDA处理错误&#34;&gt;&lt;a href=&#34;#CUDA处理错误&#34; class=&#34;headerlink&#34; title=&#34;CUDA处理错误&#34;&gt;&lt;/a&gt;CUDA处理错误&lt;/h2&gt;&lt;p&gt;由于许多CUDA调用是异步的，所以有时可能很难确定某个错误是由哪一步程序引起的。定义一个错误处理宏封装所有的CUDA API调用，这简化了错误检查过程：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; CHECK(call)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; cudaError_t error = call;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(error != cudaSuccess)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Error:%s:%d, &amp;quot;&lt;/span&gt;, __FILE__, __LINE__);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code:%d, reason: %s\n&amp;quot;&lt;/span&gt;, error, &lt;span class=&#34;hljs-built_in&#34;&gt;cudaGetErrorString&lt;/span&gt;(error));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;例如，你可以在以下代码中使用宏：&lt;/p&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;&lt;span class=&#34;hljs-constructor&#34;&gt;CHECK(&lt;span class=&#34;hljs-params&#34;&gt;cudaMemcpy&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;d_C&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;gpuRef&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;nBytes&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;cudaMemcpyHostToDevice&lt;/span&gt;)&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果内存拷贝或之前的异步操作产生了错误，这个宏会报告错误代码，并输出一个可读信息，然后停止程序。也可以用下述方法，在核函数调用后检查核函数错误：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kernel_function&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;CHECK&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;cudaDeviceSynchronize&lt;/span&gt;());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;CHECK(cudaDeviceSynchronize())会阻塞主机端线程的运行直到设备端所有的请求任务都结束，并确保最后的核函数启动部分不会出错。以上仅是以调试为目的的，因为在核函数启动后添加这个检查点会阻塞主机端线程，使该检查点成为全局屏障。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-06T08:17:59.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/cuda009/</id>
        <title>CUDA验证核函数</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/cuda009/"/>
        <content type="html">&lt;h2 id=&#34;CUDA验证核函数&#34;&gt;&lt;a href=&#34;#CUDA验证核函数&#34; class=&#34;headerlink&#34; title=&#34;CUDA验证核函数&#34;&gt;&lt;/a&gt;CUDA验证核函数&lt;/h2&gt;&lt;p&gt;既然你已经编写了核函数，你如何能知道它是否正确运行？你需要一个主机函数来验证核函数的结果。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;checkResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *hostRef, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *gpuRef, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; N)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; epsilon = &lt;span class=&#34;hljs-number&#34;&gt;1.0E-8&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; match = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ;i &amp;lt; N; i++)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;abs&lt;/span&gt;(hostRef[i] - gpuRef[i]) &amp;gt; epsilon)&amp;#123;&lt;br&gt;            match = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Arrays do not match!\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;host %5.2f gpu %5.2f at current %d\n&amp;quot;&lt;/span&gt;,hostRef[i],gpuRef[i],i);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(match) &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Arrays match.\n\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;验证核函数代码&#34;&gt;&lt;a href=&#34;#验证核函数代码&#34; class=&#34;headerlink&#34; title=&#34;验证核函数代码&#34;&gt;&lt;/a&gt;验证核函数代码&lt;/h3&gt;&lt;p&gt;除了许多可用的调试工具外，还有两个非常简单实用的方法可以验证核函数。&lt;/p&gt;
&lt;p&gt;首先，你可以在Fermi及更高版本的设备端的核函数中使用printf函数。&lt;/p&gt;
&lt;p&gt;其次，可以将执行参数设置为&amp;lt;&amp;lt;&amp;lt;1,1&amp;gt;&amp;gt;&amp;gt;，因此强制用一个块和一个线程执行核函数，这模拟了串行执行程序。这对于调试和验证结果是否正确是非常有用的，而且，如果你遇到了运算次序的问题，这有助于你对比验证数值结果是否是按位精确的。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-06T08:06:35.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/cuda008/</id>
        <title>CUDA编写核函数</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/cuda008/"/>
        <content type="html">&lt;h2 id=&#34;编写核函数&#34;&gt;&lt;a href=&#34;#编写核函数&#34; class=&#34;headerlink&#34; title=&#34;编写核函数&#34;&gt;&lt;/a&gt;编写核函数&lt;/h2&gt;&lt;p&gt;核函数是在设备端执行的代码。在核函数中，需要为一个线程规定要进行的计算以及要进行的数据访问。当核函数被调用时，许多不同的CUDA线程并行执行同一个计算任务。以下是用_&lt;em&gt;global&lt;/em&gt;_&lt;/p&gt;
&lt;p&gt;声明定义核函数：&lt;/p&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;__global__  void kernel&lt;span class=&#34;hljs-constructor&#34;&gt;_name(&lt;span class=&#34;hljs-params&#34;&gt;argument&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;list&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;核函数必须有一个void返回类型。&lt;/p&gt;
&lt;p&gt;表2-2总结了CUDA C程序中的函数类型限定符。函数类型限定符指定一个函数在主机上执行还是在设备上执行，以及可被主机调用还是被设备调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/06/cuda008/image-20230306155126122.png&#34; alt=&#34;image-20230306155126122&#34;&gt;&lt;/p&gt;
&lt;p&gt;_&lt;em&gt;device&lt;/em&gt;_   和 __host__限定符可以一齐使用，这样函数可以同时在主机和设备端进行编译。&lt;/p&gt;
&lt;h3 id=&#34;CUDA核函数的限制&#34;&gt;&lt;a href=&#34;#CUDA核函数的限制&#34; class=&#34;headerlink&#34; title=&#34;CUDA核函数的限制&#34;&gt;&lt;/a&gt;CUDA核函数的限制&lt;/h3&gt;&lt;p&gt;以下限制适用于所有核函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能访问设备内存&lt;/li&gt;
&lt;li&gt;必须具有void返回类型&lt;/li&gt;
&lt;li&gt;不支持可变数量的参数&lt;/li&gt;
&lt;li&gt;不支持静态变量&lt;/li&gt;
&lt;li&gt;显示异步行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑一个简单的例子：将两个大小为N的向量A和B相加，主机端的向量加法C代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArrayOnHost&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; N)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i &amp;lt; N; i++)&lt;br&gt;        C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是一个迭代N次的串行程序，循环结束后将产生以下核函数：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;__global__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArrayOnHost&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = threadIdx.x;&lt;br&gt;        C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;C函数和核函数之间有什么不同？你可能已经注意到循环体消失了，内置的线程坐标变量替换了数组索引，由于N是被隐式定义用来启动N个线程的，所以N没有什么参考价值。&lt;/p&gt;
&lt;p&gt;假设有一个长度为32个元素的向量，你可以按以下方法用32个线程来调用核函数：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-06T07:46:00.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/cuda007/</id>
        <title>启动一个CUDA核函数</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/cuda007/"/>
        <content type="html">&lt;h2 id=&#34;启动一个CUDA核函数&#34;&gt;&lt;a href=&#34;#启动一个CUDA核函数&#34; class=&#34;headerlink&#34; title=&#34;启动一个CUDA核函数&#34;&gt;&lt;/a&gt;启动一个CUDA核函数&lt;/h2&gt;&lt;p&gt;你应该对下列C语言函数调用语句很熟悉：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;function_name&lt;/span&gt; (argument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;CUDA内核调用是对C语言函数调用语句的延申，&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;运算符内是核函数的执行配置。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kerbel_name&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(srgument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;正如上一节所述，CUDA编程模型揭示了线程层次结构。利用执行配置可以指定线程在GPU上调度运行的方式。执行配置的第一个值是网格维度，也就是启动块的数目。第二个值是块维度，也就是每个块中线程的数目。通过指定网格和块的维度，你可以进行一下配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核中线程的数目&lt;/li&gt;
&lt;li&gt;内核中使用的线程布局&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同一个块中的线程之间可以相互协作，不同块内的线程不能协作。对于一个给定的问题，可以使用不同的网格和块布局来组织你的线程。例如，假设你有32个数据元素用于计算，每8个元素一个块，需要启动4个块：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kernel_name&amp;lt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/03/06/cuda007/image-20230306140924311.png&#34; alt=&#34;image-20230306140924311&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于数据在全局内存中是线性存储的，因此可以用变量blockIdx.x和threadIdx.x来进行以下操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在网格中标识一个唯一的线程&lt;/li&gt;
&lt;li&gt;建立线程和数据元素之间的映射关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果把32个元素放到一个块里，那么只会得到一个块：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kernel_name&amp;lt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果每个块只含一个元素，那么会有32个块：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kernel_name&amp;lt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;核函数的调用与主机线程是异步的。核函数调用结束后，控制权立刻返回给主机端。你可以调用以下函数来强制主机端程序等待所有的核函数执行结束：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;cudaError_t &lt;span class=&#34;hljs-title&#34;&gt;cudaDeviceSynchronize&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一些CUDA运行时API在主机和设备之间是隐式同步的。当使用cudaMemcpy函数在主机和设备之间拷贝数据时，主机端隐式同步，即主机端程序必须等待数据拷贝完成后才能继续执行程序。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;cudaError_t &lt;span class=&#34;hljs-title&#34;&gt;cudaMemcpy&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;* dst, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;* src, &lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt; count, cudaMemcpyKind kind)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;之前所有的核函数调用完成后开始拷贝数据。当拷贝完成后，控制权立刻返回给主机端。&lt;/p&gt;
&lt;h3 id=&#34;异步行为&#34;&gt;&lt;a href=&#34;#异步行为&#34; class=&#34;headerlink&#34; title=&#34;异步行为&#34;&gt;&lt;/a&gt;异步行为&lt;/h3&gt;&lt;p&gt;不同于C语言的函数调用，所有的CUDA核函数的启动都是异步的。CUDA内核调用完成后，控制权立刻返回给CPU。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-06T05:59:18.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/02/leetcode205/</id>
        <title>205.同构字符串</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/02/leetcode205/"/>
        <content type="html">&lt;h2 id=&#34;205-同构字符串&#34;&gt;&lt;a href=&#34;#205-同构字符串&#34; class=&#34;headerlink&#34; title=&#34;205.同构字符串&#34;&gt;&lt;/a&gt;205.同构字符串&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/isomorphic-strings/&#34;&gt;205. 同构字符串 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;isIsomorphic&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(string s, string t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        string ss;&lt;br&gt;        string st;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; hash[&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; index=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(hash, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(hash));&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;s.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();i++)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(s[i])]==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;            &amp;#123;&lt;br&gt;                index++;&lt;br&gt;                hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(s[i])]=index;&lt;br&gt;                ss.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(index+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;                ss.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(s[i])]+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;        index=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(hash, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(hash));&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;t.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();i++)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(t[i])]==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;            &amp;#123;&lt;br&gt;                index++;&lt;br&gt;                hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(t[i])]=index;&lt;br&gt;                st.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(index+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;                st.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(t[i])]+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ans = ss.&lt;span class=&#34;hljs-built_in&#34;&gt;compare&lt;/span&gt;(st);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(ans==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考代码&#34;&gt;&lt;a href=&#34;#参考代码&#34; class=&#34;headerlink&#34; title=&#34;参考代码&#34;&gt;&lt;/a&gt;参考代码&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/02/leetcode205/image-20230302204605581.png&#34; alt=&#34;image-20230302204605581&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;isIsomorphic&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(string s, string t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        unordered_map&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; s2t;&lt;br&gt;        unordered_map&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; t2s;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; len = s.&lt;span class=&#34;hljs-built_in&#34;&gt;length&lt;/span&gt;();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; len; ++i) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; x = s[i], y = t[i];&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ((s2t.&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;(x) &amp;amp;&amp;amp; s2t[x] != y) || (t2s.&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;(y) &amp;amp;&amp;amp; t2s[y] != x)) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;            &amp;#125;&lt;br&gt;            s2t[x] = y;&lt;br&gt;            t2s[y] = x;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a href=&#34;#参考链接&#34; class=&#34;headerlink&#34; title=&#34;参考链接&#34;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/isomorphic-strings/solution/tong-gou-zi-fu-chuan-by-leetcode-solutio-s6fd/&#34;&gt;同构字符串 - 同构字符串 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="LeetCode" />
        <category term="哈希表" />
        <updated>2023-03-02T12:44:27.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/02/leetcode189/</id>
        <title>189.轮转数组</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/02/leetcode189/"/>
        <content type="html">&lt;h2 id=&#34;189-轮转数组&#34;&gt;&lt;a href=&#34;#189-轮转数组&#34; class=&#34;headerlink&#34; title=&#34;189.轮转数组&#34;&gt;&lt;/a&gt;189.轮转数组&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/rotate-array/&#34;&gt;189. 轮转数组 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/02/leetcode189/image-20230302200538871.png&#34; alt=&#34;image-20230302200538871&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; begin,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; end)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(begin&amp;lt;end)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;swap&lt;/span&gt;(nums[begin], nums[end]);&lt;br&gt;            begin++;&lt;br&gt;            end--;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//数组翻转&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = k%nums.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;reverse&lt;/span&gt;(nums,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,nums.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;()&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;reverse&lt;/span&gt;(nums,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,p&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;reverse&lt;/span&gt;(nums,p,nums.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;()&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/&#34;&gt;旋转数组 - 轮转数组 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="LeetCode" />
        <category term="数组翻转" />
        <updated>2023-03-02T12:03:32.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/01/leetcode724/</id>
        <title>724.寻找数组的中心下标</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/01/leetcode724/"/>
        <content type="html">&lt;h1 id=&#34;724-寻找数组的中心下标&#34;&gt;&lt;a href=&#34;#724-寻找数组的中心下标&#34; class=&#34;headerlink&#34; title=&#34;724.寻找数组的中心下标&#34;&gt;&lt;/a&gt;724.寻找数组的中心下标&lt;/h1&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-pivot-index/&#34;&gt;724. 寻找数组的中心下标 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/01/leetcode724/image-20230301173931031.png&#34; alt=&#34;image-20230301173931031&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;pivotIndex&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; total=&lt;span class=&#34;hljs-built_in&#34;&gt;accumulate&lt;/span&gt;(nums.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;(), nums.&lt;span class=&#34;hljs-built_in&#34;&gt;end&lt;/span&gt;(),&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);	&lt;span class=&#34;hljs-comment&#34;&gt;//第三个形参是累加的初始值&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; sum=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;nums.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();i++)&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;*sum+nums[i] == total)&amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; i;&lt;br&gt;            &amp;#125;&lt;br&gt;            sum+=nums[i];&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-pivot-index/solution/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/&#34;&gt;寻找数组的中心索引 - 寻找数组的中心下标 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="LeetCode" />
        <category term="前缀和" />
        <updated>2023-03-01T09:35:03.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/28/vectorbool/</id>
        <title>vector&lt;bool&gt;与vector&lt;T&gt;</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/28/vectorbool/"/>
        <content type="html">&lt;h1 id=&#34;vector-lt-bool-gt-与vector-lt-T-gt&#34;&gt;&lt;a href=&#34;#vector-lt-bool-gt-与vector-lt-T-gt&#34; class=&#34;headerlink&#34; title=&#34;vector&amp;lt;bool&amp;gt;与vector&amp;lt;T&amp;gt;&#34;&gt;&lt;/a&gt;vector&amp;lt;bool&amp;gt;与vector&amp;lt;T&amp;gt;&lt;/h1&gt;&lt;p&gt;vector&amp;lt;bool&amp;gt; 不像其他容器一样按Byte存储的，它是按bit存储的，也就是说一个正常的bool类型的空间可以存放vector&amp;lt;bool&amp;gt;中的8个，空间上确实优化了很多，然而，c++是不能直接取对bit操作的（因为C++的最小可寻址值通常以byte为单位），对其使用operator[]其实返回的不是bool的引用而是一个”proxy reference”是”std::vector&amp;lt; bool&amp;gt;:reference”类型的对象。&lt;/p&gt;
&lt;p&gt;正因为如此，vector&amp;lt;bool&amp;gt;通过代理对象进行存取访问时需要执行逐位处理，访问通常比int之类的普通类型操作要慢很多。&lt;/p&gt;
&lt;p&gt;因此，对vecotr&amp;lt;bool&amp;gt;的使用需慎重考虑以下几点：&lt;br&gt;(1)是否需要牺牲速度来获取空间上的优化&lt;br&gt;(2)算法中会否有对vecotr地址进行解引用操作的可能。&lt;/p&gt;
&lt;p&gt;如果不满足以上条件，建议使用deque&amp;lt;bool&amp;gt;来取代vector&amp;lt;bool&amp;gt;，功能基本相同，但deque&amp;lt;bool&amp;gt;未对其进行特殊处理。&lt;/p&gt;
&lt;p&gt;下面是vector&amp;lt;bool&amp;gt;与vector&amp;lt;T&amp;gt;简单的对比例子：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;	vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; ch;&lt;br&gt;	vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; in;&lt;br&gt;	vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt;&amp;gt; bo;&lt;br&gt; &lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m = &lt;span class=&#34;hljs-number&#34;&gt;1e6&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;clock_t&lt;/span&gt; t1, t2, t3;&lt;br&gt; &lt;br&gt;	t1 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;		ch.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	t1 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;() - t1;&lt;br&gt; &lt;br&gt;	t2 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;		in.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	t2 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;() - t2;&lt;br&gt; &lt;br&gt;	t3 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;		bo.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	t3 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;() - t3;&lt;br&gt; &lt;br&gt;	cout &amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;vector&amp;lt;char&amp;gt; &amp;quot;&lt;/span&gt;&amp;lt;&amp;lt; t1 &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\n vector&amp;lt;int&amp;gt; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; t2 &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\nvector&amp;lt;bool&amp;gt; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; t3 &amp;lt;&amp;lt; endl;&lt;br&gt;	cout &amp;lt;&amp;lt; endl;&lt;br&gt; &lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;216&lt;/span&gt;&lt;br&gt;vextor&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;229&lt;/span&gt;&lt;br&gt;vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;16535&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里发现vector&amp;lt;bool&amp;gt;相较于其他vector&amp;lt;T&amp;gt;速度要慢的多！&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_52134928/article/details/121066304?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121066304-blog-86603050.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121066304-blog-86603050.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=1&#34;&gt;(65条消息) 【C++】vector＜bool＞的特别之处_小陶同学_的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u013249689/article/details/25297657&#34;&gt;(65条消息) 不使用vector的原因和替代方法_jackycmu的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="STL" />
        <category term="Vector" />
        <category term="C/C++" />
        <category term="bool" />
        <updated>2023-02-28T12:59:01.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/28/Linux004/</id>
        <title>C/C++关键字之restrict</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/28/Linux004/"/>
        <content type="html">&lt;h1 id=&#34;C-x2F-C-关键字之restrict&#34;&gt;&lt;a href=&#34;#C-x2F-C-关键字之restrict&#34; class=&#34;headerlink&#34; title=&#34;C&amp;#x2F;C++关键字之restrict&#34;&gt;&lt;/a&gt;C&amp;#x2F;C++关键字之restrict&lt;/h1&gt;&lt;p&gt;在C语言中，restrict关键字用于修饰指针（C99标准）。通过加上restrict关键字，程序员可提示编译器：在该指针的生命周期内，其指向的对象不会被别的指针所引用。&lt;/p&gt;
&lt;p&gt;需要注意的是，在C++中，并无明确统一的标准支持restrict关键字。但是很多编译器实现了功能相同的关键字，例如gcc和clang中的__restrict关键字。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;add1函数的返回值会永远是10 + 12 &amp;#x3D; 22吗？&lt;/p&gt;
&lt;p&gt;答案是不一定。在指针a和b的地址不同时，返回22没有问题。但是当指针a与b指向的是同一个int对象时，该对象先被赋值为10，后被赋值为12，因此a和b都返回12，因此add1函数最终返回24。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* c;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* d;&lt;br&gt;    d=(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)*&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    c=(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)*&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    *c=&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *d=&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    *d=&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c:&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;*c&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d:&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;*d&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;When Pointers a and b have different addresses&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;add1&lt;/span&gt;(c,d)&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;When Pointers a and b have the same address&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;add1&lt;/span&gt;(c,c)&amp;lt;&amp;lt;endl;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;程序输出：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;c:&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;d:&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;When Pointers a &lt;span class=&#34;hljs-keyword&#34;&gt;and&lt;/span&gt; b have different addresses&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;&lt;br&gt;When Pointers a &lt;span class=&#34;hljs-keyword&#34;&gt;and&lt;/span&gt; b have the same address&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;开启-O3优化，add1对应的汇编代码如下:&lt;/p&gt;
&lt;p&gt;为了得到&lt;code&gt;*a&lt;/code&gt;的值访问了1次内存，而不管在何种条件下(&lt;code&gt;a == b&lt;/code&gt; or &lt;code&gt;a != b&lt;/code&gt;)，&lt;code&gt;*b&lt;/code&gt;的值都是12。因此编译器将&lt;code&gt;*a&lt;/code&gt;的值载入&lt;code&gt;eax&lt;/code&gt;寄存器后，直接加上立即数12，而无需再访问内存获取&lt;code&gt;*b&lt;/code&gt;的值。在无法确定指针a和b是否相同的情况下，编译器只能帮你优化到这里了。&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000000000400&lt;/span&gt;a10 &amp;lt;_Z4add1PiS_&amp;gt;:&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a10:   c7 &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;a &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xa,(%rdi) ; *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a16:   c7 &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xc,(%rsi) ; *b = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a1c:   &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;b &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt;                   mov    (%rdi),%eax ; 结果 = *a&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a1e:   &lt;span class=&#34;hljs-number&#34;&gt;83&lt;/span&gt; c0 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c                add    $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xc,%eax   ; 结果 += &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt; &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a21:   c3                      retq&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;加上了restrict关键字过后，同样开启-O3优化，add1对应的汇编代码如下：&lt;/p&gt;
&lt;p&gt;加上关键字restrict后，编译器能够确认指针a和b不可能指向同一个内存地址，因此在求*a + *b时，无虚访问内存，因为*a必然等于立即数10，*b必然等于立即数12。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* __restrict  a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* __restrict b)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b ;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000000000400&lt;/span&gt;a30 &amp;lt;_Z4add2PiS_&amp;gt;:&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a30:   c7 &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;a &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0xa&lt;/span&gt;,(%rdi) ; *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a36:   b8 &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;          mov    $&lt;span class=&#34;hljs-number&#34;&gt;0x16&lt;/span&gt;,%eax  ; 结果 = &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a3b:   c7 &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0xc&lt;/span&gt;,(%rsi) ; *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a41:   c3  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有无restrict关键字的两种情况下的汇编指令可看到，后者比前者少访问一次内存，且少执行一条指令。就是因为没加restruct关键字时，编译器不能确定别的地方是不是会修改此值，所以会去相应的地址查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样当我们明确知道两个指针不可能指向同一个地址时，我们就可以通过使用restrict关键字来进行性能优化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意使用restrict的时候，程序员必须确保不会出现&lt;strong&gt;pointer aliasing&lt;/strong&gt;，即同一块内存无法通过两个或以上的指针变量名访问。不满足这个条件强行指定restrict，将会出现&lt;strong&gt;underfined behavior&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常编写代码时会忽略pointer aliasing的问题。更常见是在性能分析时，通过反汇编看到很多冗余的读取指令，才会想到加入restrict关键字来提升性能。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/349726808&#34;&gt;C&amp;#x2F;C++关键字之restrict - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ClickHouse/ClickHouse/pull/19946&#34;&gt;Improve performance of aggregate functions by alexey-milovidov · Pull Request #19946 · ClickHouse&amp;#x2F;ClickHouse (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/c/language/restrict&#34;&gt;restrict type qualifier - cppreference.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/41653775/answer/2535730128&#34;&gt;如何理解C语言关键字restrict？ - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41822235/article/details/83479562&#34;&gt;(65条消息) 关键字_restrict___restrict_楚楚可薇的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41950508/article/details/126619881?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126619881-blog-102577325.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126619881-blog-102577325.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=1&#34;&gt;(65条消息) 【C++】关键字restrict的作用_restrict关键字的作用_不知所措的渣渣辉的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2023-02-28T11:45:09.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/26/intel001/</id>
        <title>unroll_and_jam/nounroll_and_jam</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/26/intel001/"/>
        <content type="html">&lt;h1 id=&#34;unroll-and-jam-x2F-nounroll-and-jam&#34;&gt;&lt;a href=&#34;#unroll-and-jam-x2F-nounroll-and-jam&#34; class=&#34;headerlink&#34; title=&#34;unroll_and_jam&amp;#x2F;nounroll_and_jam&#34;&gt;&lt;/a&gt;unroll_and_jam&amp;#x2F;nounroll_and_jam&lt;/h1&gt;&lt;p&gt;启用或禁用循环展开和阻塞。这些指令只能应用于迭代for循环。&lt;/p&gt;
&lt;h2 id=&#34;Syntax&#34;&gt;&lt;a href=&#34;#Syntax&#34; class=&#34;headerlink&#34; title=&#34;Syntax&#34;&gt;&lt;/a&gt;Syntax&lt;/h2&gt;&lt;p&gt;#pragma unroll_and_jam	#pragma unroll_and_jam (n)	#pragma nounroll_and_jam&lt;/p&gt;
&lt;h2 id=&#34;Arguments&#34;&gt;&lt;a href=&#34;#Arguments&#34; class=&#34;headerlink&#34; title=&#34;Arguments&#34;&gt;&lt;/a&gt;Arguments&lt;/h2&gt;&lt;p&gt;展开因子，表示展开循环的次数;必须是0到255之间的整数常数&lt;/p&gt;
&lt;h2 id=&#34;Description&#34;&gt;&lt;a href=&#34;#Description&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;unroll_and_jam指令部分展开套中比最内层循环更高的一个或多个循环，并将结果循环融合&amp;#x2F;阻塞回一起。这种转换允许在循环中进行更多的重用。&lt;/p&gt;
&lt;p&gt;此pragma对最内层循环无效。确保紧随其后的循环不是编译器发起的交换完成后的最内层循环。&lt;/p&gt;
&lt;p&gt;指定此pragma是向编译器提示展开和阻塞序列是合法且有利可图的。编译器会在任何可能的情况下启用这种转换。&lt;/p&gt;
&lt;p&gt;对于它影响的每个for循环，unroll_and_jam指令必须在for语句之前。如果指定了n，优化器将展开循环n次。如果n被省略或超出允许的范围，优化器将分配展开循环的次数。编译器通过比较n和循环计数生成正确的代码。&lt;/p&gt;
&lt;p&gt;只有在设置了编译器选项O3时，才支持此pragma。unroll_and_jam指令将覆盖从命令行展开循环的任何设置。&lt;/p&gt;
&lt;p&gt;当展开循环会增加寄存器压力和代码大小时，可能需要防止展开嵌套循环或不完美的嵌套循环。在这种情况下，使用nounroll_and_jam编译指令。nounroll_and_jam pragma提示编译器不要展开指定的循环。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use the unroll_and_jam pragma:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;]; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; b[&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;]; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;]; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;]; &lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;unroll&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,k;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;pragma&lt;/span&gt; unroll_and_jam (6)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;br&gt;       &lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;pragma&lt;/span&gt; unroll_and_jam (6)&lt;/span&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (j = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (k = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; k &amp;lt; n; k++)&amp;#123;&lt;br&gt;            a[i][j] += b[i][k]*c[k][j];&lt;br&gt;            &amp;#125;&lt;br&gt;       &amp;#125;&lt;br&gt;    &amp;#125; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/pragmas/intel-specific-pragma-reference/unroll-and-jam-nounroll-and-jam.html&#34;&gt;unroll_and_jam nounroll_and_jam (intel.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="Intel" />
        <updated>2023-02-26T11:12:51.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/26/cache001/</id>
        <title>Cache Blocking Techniques【个人翻译】</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/26/cache001/"/>
        <content type="html">&lt;h2 id=&#34;Cache-Blocking-Techniques&#34;&gt;&lt;a href=&#34;#Cache-Blocking-Techniques&#34; class=&#34;headerlink&#34; title=&#34;Cache Blocking Techniques&#34;&gt;&lt;/a&gt;Cache Blocking Techniques&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;文章来源：&lt;/strong&gt;&lt;a href=&#34;https://www.intel.cn/content/www/cn/zh/developer/articles/technical/cache-blocking-techniques.html&#34;&gt;Cache Blocking Techniques (intel.cn)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文章作者：&lt;/strong&gt;&lt;a href=&#34;https://community.intel.com/cipcp26785/plugins/custom/intel/intel/custom.userprofile?id=3UpJu61CDTyShonSVJNwDw==&amp;iv=8843887237217530&#34;&gt;Amanda K Sharp&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Overview&#34;&gt;&lt;a href=&#34;#Overview&#34; class=&#34;headerlink&#34; title=&#34;Overview&#34;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;一类重要的算法更改涉及分块数据结构以适应缓存。通过组织数据内存访问，可以用一个大得多的数据集的一个小子集加载缓存。接下来的想法是在缓存中处理这个数据块。通过在缓存中使用&amp;#x2F;重用这些数据，我们减少了访问内存的需要(减少内存带宽压力)。&lt;/p&gt;
&lt;h3 id=&#34;Topic&#34;&gt;&lt;a href=&#34;#Topic&#34; class=&#34;headerlink&#34; title=&#34;Topic&#34;&gt;&lt;/a&gt;Topic&lt;/h3&gt;&lt;p&gt;分块是一种著名的优化技术，可以帮助避免许多应用程序中的内存带宽瓶颈。分块背后的关键思想是利用应用程序中固有的数据重用，确保数据在多个用途之间保持在缓存中。分块可以在1-D、2-D或3-D空间数据结构上执行。一些迭代应用程序可以进一步受益于多次迭代的分块(通常称为时间分块)，以进一步缓解带宽瓶颈。就代码更改而言，分块通常涉及循环分割和交换的组合。在大多数应用程序代码中，通过对分块因子进行一些参数化，对源进行正确的更改，用户可以最好地执行分块。&lt;/p&gt;
&lt;h3 id=&#34;Original-Source&#34;&gt;&lt;a href=&#34;#Original-Source&#34; class=&#34;headerlink&#34; title=&#34;Original Source&#34;&gt;&lt;/a&gt;Original Source&lt;/h3&gt;&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;for (body1 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body1 &amp;lt; NBODIES; body1 ++) &amp;#123;&lt;br&gt;   for (body2=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body2 &amp;lt; NBODIES; body2++) &amp;#123;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;OUT&lt;/span&gt;[body1] += compute(body1, body2);&lt;br&gt;   &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在本例中，数据(body2)来自内存。假设NBODIES很大，我们将无法在缓存中重用。此应用程序受内存带宽限制。应用程序将以内存到CPU的速度运行，而不是最佳速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Modified Source (with 1-D blocking):&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;for (body2 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body2 &amp;lt; NBODIES; body2 += &lt;span class=&#34;hljs-keyword&#34;&gt;BLOCK&lt;/span&gt;) &amp;#123;&lt;br&gt;   for (body1=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body1 &amp;lt; NBODIES; body1 ++) &amp;#123;&lt;br&gt;      for (body22=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body22 &amp;lt; &lt;span class=&#34;hljs-keyword&#34;&gt;BLOCK&lt;/span&gt;; body22 ++) &amp;#123;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;OUT&lt;/span&gt;[body1] += compute(body1, body2 + body22);&lt;br&gt;      &amp;#125;&lt;br&gt;   &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在修改后的代码中，数据(body22)在缓存中被保留和重用，从而获得更好的性能。&lt;/p&gt;
&lt;p&gt;例如，上面的代码片段显示了一个分块NBody代码的示例。有两个循环(body1和body2)遍历所有主体。顶部的原始代码流经内部循环中的整个主体集，并且必须在每次迭代中从内存中加载body2值。底部的分块代码是通过将body2循环分解为一个迭代多个BLOCK中的body的外部循环和一个迭代BLOCK中的元素的内部body22循环，并交织body1和body2循环来获得的。这段代码在body1循环的多次迭代中重用了一组BLOCK body2值。如果BLOCK被选中，使得这组值适合缓存，内存流量就会降低一个BLOCK的因子。&lt;/p&gt;
&lt;p&gt;以下是来自OpenMP*版本的NBody基准测试的相关代码片段(使用CHUNK_SIZE因子进行分块应用)。&lt;/p&gt;
&lt;p&gt;在这种情况下，循环展开-阻塞转换被表示为一个pragma，并由编译器完成。在这种情况下，研究-opt-report的输出可以确认编译器确实为你的循环执行了展开阻塞优化。&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;#define CHUNK_SIZE &lt;span class=&#34;hljs-number&#34;&gt;8192&lt;/span&gt;&lt;br&gt;&lt;br&gt;#pragma omp parallel &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;(body_start_index)&lt;br&gt;  for(body_start_index = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body_start_index &amp;lt; global_number_of_bodies; body_start_index += CHUNK_SIZE) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; i;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; body_end_index = body_start_index + CHUNK_SIZE;&lt;br&gt;&lt;br&gt;    #pragma omp for &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;(i) schedule(guided)&lt;br&gt;    #pragma unroll_and_jam (&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&lt;br&gt;    for(i=starting_index; i&amp;lt;ending_index; i++) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; j;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; acc_x_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, acc_y_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, acc_z_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;      for(j=body_start_index; j&amp;lt;body_end_index; j+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_x_0 = Input_Position_X[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_X[i];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_y_0 = Input_Position_Y[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_Y[i];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_z_0 = Input_Position_Z[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_Z[i];&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; gamma_0 = delta_x_0*delta_x_0 + delta_y_0*delta_y_0 + delta_z_0*delta_z_0 + epsilon_sqr;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; s_0 = Mass[j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]/(gamma_0 * &lt;span class=&#34;hljs-built_in&#34;&gt;SQRT&lt;/span&gt;(gamma_0));&lt;br&gt;        acc_x_0 += s_0*delta_x_0;&lt;br&gt;        acc_y_0 += s_0*delta_y_0;&lt;br&gt;        acc_z_0 += s_0*delta_z_0;&lt;br&gt;      &amp;#125;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] += acc_x_0;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] += acc_y_0;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] += acc_z_0;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是Fortran中的一个矩阵乘法代码示例，其中用户执行高级块展开-分块转换(在修改版本中)，涉及本地复制数组以获得最佳性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fortran Source Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; j=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; k = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;      c(i,j) = c(i,j) + a(i,k) * b(k,j)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Modified Fortran Source:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; JJ = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TJ&lt;br&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; KK = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TK&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; jjj = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tj,N-jj+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)                     &lt;span class=&#34;hljs-comment&#34;&gt;! BCOPY - no transpose&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; kkk = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tk,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;             p(kkk,jjj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = B(kk+kkk-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, jj+jjj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; II = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TI&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; iii = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;             &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(ti,N-ii+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)                   &lt;span class=&#34;hljs-comment&#34;&gt;!ACOPY - transpose&lt;/span&gt;&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; kkk = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tk,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;                Q(kkk,iii) = A(ii+iii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, kk+kkk-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; J = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tj,N-jj+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; I = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(ti,N-ii+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;                t1 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t2 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t5 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t6 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t9 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t10 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t13 =&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t14 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;!DIR$ vector aligned                      !DIR$ unroll(2)&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; K = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(TK,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)      &lt;span class=&#34;hljs-comment&#34;&gt;! Innermost loop, vectorized and unrolled by 2 after that&lt;/span&gt;&lt;br&gt;                   qi = Q(K,I)           ;    qi1 = Q(K,I+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)  &lt;br&gt;                   t1 = t1+qi*P(K,J)     ;    t2 = t2+ qi1*P(K,J)&lt;br&gt;                   t5 = t5+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)  ;    t6 = t6+ qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;                   t9 = t9+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)  ;    t10 = t10+ qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;                   t13 = t13+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);    t14 = t14+qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) +t1          ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t2&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t5     ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t6&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t9     ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t10&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t13    ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t14&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Take-Aways&#34;&gt;&lt;a href=&#34;#Take-Aways&#34; class=&#34;headerlink&#34; title=&#34;Take Aways&#34;&gt;&lt;/a&gt;Take Aways&lt;/h3&gt;&lt;p&gt;缓存分块是一种重新安排数据访问的技术，将数据子集(块)拉入缓存，并对这个块进行操作，以避免不得不重复从主存中获取数据。正如上面的示例所示，可以以这种方式手动分块循环数据以重用缓存。&lt;/p&gt;
&lt;p&gt;对于性能关键的循环，其中性能分析表明内存带宽限制，而-opt-report显示编译器没有以最佳方式分块循环，您可以考虑手动展开循环，以便更好地分块数据以实现缓存重用。&lt;/p&gt;
&lt;h3 id=&#34;NEXT-STEPS&#34;&gt;&lt;a href=&#34;#NEXT-STEPS&#34; class=&#34;headerlink&#34; title=&#34;NEXT STEPS&#34;&gt;&lt;/a&gt;NEXT STEPS&lt;/h3&gt;&lt;p&gt;您必须从头到尾阅读本指南，使用内置的超链接来指导您在Intel®Xeon处理器上成功地移植和调优应用程序。本指南中提供的路径反映了获得最佳应用程序性能所需的步骤。&lt;/p&gt;
</content>
        <category term="Cache" />
        <category term="Blocking" />
        <updated>2023-02-26T10:02:29.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/26/openmp008/</id>
        <title>OpenMP:Internal Control Variables</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/26/openmp008/"/>
        <content type="html">&lt;h2 id=&#34;2-5-Internal-Control-Variables&#34;&gt;&lt;a href=&#34;#2-5-Internal-Control-Variables&#34; class=&#34;headerlink&#34; title=&#34;2.5 Internal Control Variables&#34;&gt;&lt;/a&gt;2.5 Internal Control Variables&lt;/h2&gt;&lt;p&gt;OpenMP实现必须像内部控制变量(icv)一样控制OpenMP程序的行为。这些icv存储的信息包括用于未来并行区域的线程数、用于工作共享循环的调度以及是否启用嵌套并行。在程序执行期间，icv在不同的时间被赋予值(如下所述)。它们是由实现本身初始化的，并且可以通过OpenMP环境变量和调用OpenMP API例程来赋值。程序只能通过OpenMP API例程检索这些icv的值。&lt;/p&gt;
&lt;p&gt;出于说明的目的，本文档使用特定的名称来引用icv，但是实现不需要使用这些名称，也不需要提供访问变量的任何方法，除非通过第&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2&#34;&gt;189&lt;/a&gt;页第&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2&#34;&gt;2.5.2节&lt;/a&gt;所示的方法。&lt;/p&gt;
&lt;p&gt;2.5.1 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu30.html#x49-670002.5.1&#34;&gt;ICV Descriptions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.5.2 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2&#34;&gt;ICV Initialization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.5.3 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu32.html#x51-710002.5.3&#34;&gt;Modifying and Retrieving ICV Values&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.5.4 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu33.html#x52-740002.5.4&#34;&gt;How ICVs are Scoped&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​		 2.5.4.1 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu33.html#x52-760002.5.4.1&#34;&gt;How the Per-Data Environment ICVs Work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.5.5 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu34.html#x53-770002.5.5&#34;&gt;ICV Override Relationships&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpse13.html#x48-660002.5&#34;&gt;Internal Control Variables (openmp.org)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="OpenMP" />
        <updated>2023-02-26T09:36:54.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/26/openmp007/</id>
        <title>OpenMP线程绑定【未完结】</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/26/openmp007/"/>
        <content type="html">&lt;h2 id=&#34;OpenMP线程绑定&#34;&gt;&lt;a href=&#34;#OpenMP线程绑定&#34; class=&#34;headerlink&#34; title=&#34;OpenMP线程绑定&#34;&gt;&lt;/a&gt;OpenMP线程绑定&lt;/h2&gt;&lt;h3 id=&#34;OpenMP相关环境变量与指令&#34;&gt;&lt;a href=&#34;#OpenMP相关环境变量与指令&#34; class=&#34;headerlink&#34; title=&#34;OpenMP相关环境变量与指令&#34;&gt;&lt;/a&gt;OpenMP相关环境变量与指令&lt;/h3&gt;&lt;h4 id=&#34;OMP-PROC-BIND&#34;&gt;&lt;a href=&#34;#OMP-PROC-BIND&#34; class=&#34;headerlink&#34; title=&#34;OMP_PROC_BIND&#34;&gt;&lt;/a&gt;OMP_PROC_BIND&lt;/h4&gt;&lt;p&gt;OMP_PROC_BIND环境变量设置bind-var ICV的初始值。这个环境变量的值可以是true、false，或者用逗号分隔的master、close或spread列表。列表的值设置了对应嵌套级别的并行区域要使用的线程亲和策略。&lt;/p&gt;
&lt;p&gt;如果环境变量设置为false，则执行环境可能会在OpenMP位置之间移动OpenMP线程，线程相关性将被禁用，并行构造上的proc_bind子句将被忽略。&lt;/p&gt;
&lt;p&gt;否则，执行环境不应该在OpenMP位置之间移动OpenMP线程，线程亲和性被启用，并且初始线程被绑定到OpenMP位置列表中的第一个位置，先于第一个活动并行区域。&lt;/p&gt;
&lt;p&gt;如果OMP_PROC_BIND环境变量中的值不是true、false或master、close或spread的逗号分隔列表，则程序的行为是实现定义的。如果初始线程不能绑定到OpenMP位置列表中的第一个位置，则该行为也是实现定义的。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;setenv OMP_PROC_BIND false&lt;br&gt;setenv OMP_PROC_BIND &amp;quot;spread,	spread, close&amp;quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://harrychen.xyz/2022/05/08/numa-processor-and-cpu-binding/&#34;&gt;NUMA 处理器与进程绑定 - Harry Chen’s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpse52.html&#34;&gt;OMP_PROC_BIND (openmp.org)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu36.html#x56-900002.6.2&#34;&gt;Controlling OpenMP Thread Affinity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpse53.html&#34;&gt;OMP_PLACES (openmp.org)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/optimization-and-programming/openmp-support/openmp-library-support/thread-affinity-interface.html&#34;&gt;Thread Affinity Interface (intel.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="OpenMP" />
        <updated>2023-02-26T09:06:59.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/24/Linux003/</id>
        <title>基于GDB的程序调试</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/24/Linux003/"/>
        <content type="html">&lt;h2 id=&#34;基于GDB的程序调试&#34;&gt;&lt;a href=&#34;#基于GDB的程序调试&#34; class=&#34;headerlink&#34; title=&#34;基于GDB的程序调试&#34;&gt;&lt;/a&gt;基于GDB的程序调试&lt;/h2&gt;&lt;h3 id=&#34;程序调试工具GDB&#34;&gt;&lt;a href=&#34;#程序调试工具GDB&#34; class=&#34;headerlink&#34; title=&#34;程序调试工具GDB&#34;&gt;&lt;/a&gt;程序调试工具GDB&lt;/h3&gt;&lt;p&gt;编译器GCC，项目构建工具Make（又称gmake），以及GDB。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224165344672.png&#34; alt=&#34;image-20230224165344672&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GDB：GNU symbolic debugger是Linux下常用的程序调试器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB可以做什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224165606636.png&#34; alt=&#34;image-20230224165606636&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB官网：&lt;/strong&gt;&lt;a href=&#34;https://www.sourceware.org/gdb/&#34;&gt;GDB: The GNU Project Debugger (sourceware.org)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试案例一&#34;&gt;&lt;a href=&#34;#调试案例一&#34; class=&#34;headerlink&#34; title=&#34;调试案例一&#34;&gt;&lt;/a&gt;调试案例一&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n,sum;&lt;br&gt;    n = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    sum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;( n &amp;lt;= &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        sum = sum + n;&lt;br&gt;        n = n + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在编译程序的时候，需要加调试选项： -g&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;gcc gdb001.c -g -o ex1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用gdb启动程序：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;gdb ./ex1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;进入gdb调试环境&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170419171.png&#34; alt=&#34;image-20230224170419171&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在调试环境中：使用l选项会显示带行号的源代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170620617.png&#34; alt=&#34;image-20230224170620617&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是默认情况下，l选项只显示10行源代码，如果查看后续代码，在调试界面Enter回车即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170804048.png&#34; alt=&#34;image-20230224170804048&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在第7行源代码处打断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224171858691.png&#34; alt=&#34;image-20230224171858691&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行程序，遇到断点停止：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172105514.png&#34; alt=&#34;image-20230224172105514&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看代码中变量n的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172200662.png&#34; alt=&#34;image-20230224172200662&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前n的值为1，$1表示该变量所在存储区的名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在程序第12行处打断点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172321002.png&#34; alt=&#34;image-20230224172321002&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继续执行程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172356622.png&#34; alt=&#34;image-20230224172356622&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看当前n变量的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172422998.png&#34; alt=&#34;image-20230224172422998&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前n的值为101&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;退出调试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172456626.png&#34; alt=&#34;image-20230224172456626&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看调试环境所有断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172650422.png&#34; alt=&#34;image-20230224172650422&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除第7行的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172745323.png&#34; alt=&#34;image-20230224172745323&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;禁用编号为2的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172832507.png&#34; alt=&#34;image-20230224172832507&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意断点状态Enb(enable)由y变成n，代表禁用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;恢复编号为2的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224173006975.png&#34; alt=&#34;image-20230224173006975&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;GDB有三种调试模式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试执行程序：&lt;/strong&gt;（前面的案例），注意编译加调试信息(-g)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试core文件   ：&lt;/strong&gt;需要对系统设置的core文件大小作调整（ulimit - c unlimlited），否则可能无法							  产生core文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试正在执行的程序（gdb attach） ：&lt;/strong&gt;Top找到进程编号pid，Gdb attach pid&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB结构组成：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224173613247.png&#34; alt=&#34;image-20230224173613247&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;常用调试指令：&#34;&gt;&lt;a href=&#34;#常用调试指令：&#34; class=&#34;headerlink&#34; title=&#34;常用调试指令：&#34;&gt;&lt;/a&gt;常用调试指令：&lt;/h3&gt;&lt;h4 id=&#34;启动指令&#34;&gt;&lt;a href=&#34;#启动指令&#34; class=&#34;headerlink&#34; title=&#34;启动指令&#34;&gt;&lt;/a&gt;启动指令&lt;/h4&gt;&lt;p&gt;调试程序：gdb program&lt;/p&gt;
&lt;p&gt;根据core文件调试程序：gdb program corefile&lt;/p&gt;
&lt;p&gt;跟踪调试进程：gdb attach pid&lt;/p&gt;
&lt;h4 id=&#34;程序运行&#34;&gt;&lt;a href=&#34;#程序运行&#34; class=&#34;headerlink&#34; title=&#34;程序运行&#34;&gt;&lt;/a&gt;程序运行&lt;/h4&gt;&lt;p&gt;run，该命令会运行至程序结束，除非遇到断点或报错&lt;/p&gt;
&lt;h4 id=&#34;单步执行&#34;&gt;&lt;a href=&#34;#单步执行&#34; class=&#34;headerlink&#34; title=&#34;单步执行&#34;&gt;&lt;/a&gt;单步执行&lt;/h4&gt;&lt;p&gt;步进执行不进栈？next&lt;/p&gt;
&lt;p&gt;步进执行，进栈step&lt;/p&gt;
&lt;h4 id=&#34;代码查看&#34;&gt;&lt;a href=&#34;#代码查看&#34; class=&#34;headerlink&#34; title=&#34;代码查看&#34;&gt;&lt;/a&gt;代码查看&lt;/h4&gt;&lt;p&gt;列出断点附近或程序所有代码list&lt;/p&gt;
&lt;p&gt;设置现实代码的行数 set listsize &amp;lt;n&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;退出调试&#34;&gt;&lt;a href=&#34;#退出调试&#34; class=&#34;headerlink&#34; title=&#34;退出调试&#34;&gt;&lt;/a&gt;退出调试&lt;/h4&gt;&lt;p&gt;quit&lt;/p&gt;
&lt;h4 id=&#34;查看栈信息&#34;&gt;&lt;a href=&#34;#查看栈信息&#34; class=&#34;headerlink&#34; title=&#34;查看栈信息&#34;&gt;&lt;/a&gt;查看栈信息&lt;/h4&gt;&lt;p&gt;bt	打印当前的函数调用栈的所有信息&lt;/p&gt;
&lt;p&gt;bt &amp;lt;n&amp;gt;	n是一个正整数，表示只打印栈顶上n层的栈信息&lt;/p&gt;
&lt;p&gt;bt &amp;lt;-n&amp;gt;	表示只打印栈底下n层的栈信息&lt;/p&gt;
&lt;h4 id=&#34;设置断点&#34;&gt;&lt;a href=&#34;#设置断点&#34; class=&#34;headerlink&#34; title=&#34;设置断点&#34;&gt;&lt;/a&gt;设置断点&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;代码断点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;break lineNumber | functionName&lt;/li&gt;
&lt;li&gt;break lineNumber | functionName if condition&lt;/li&gt;
&lt;li&gt;tbreak lineNumber | functionName  临时断点，仅能使用一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内存断点（观察点）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控内存值改变 watch expr [if condition]&lt;/li&gt;
&lt;li&gt;监控内存值被读取 rwatch expr [if condition]&lt;/li&gt;
&lt;li&gt;监控内存值被读取和写入 awatch wxpr [if condition]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;事件断点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ exception，使用catch exception [name]&lt;/li&gt;
&lt;li&gt;Ada exception，使用catch handlers [name]&lt;/li&gt;
&lt;li&gt;exec事件，使用catch exec&lt;/li&gt;
&lt;li&gt;fork事件，使用catch fork 或者 catch vfork&lt;/li&gt;
&lt;li&gt;加载和卸载动态so事件，使用catch load|unload [regexp]&lt;/li&gt;
&lt;li&gt;监听系统信号，使用catch signal [signal]&lt;/li&gt;
&lt;li&gt;监听系统调用，使用catch syscall[name|number|group:groupname|g:groupname]…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;打印变量：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Print [file | func]::variable 查看局部变量或全局变量&lt;/li&gt;
&lt;li&gt;Print *array@len  数组首地址@查看长度&lt;/li&gt;
&lt;li&gt;x&amp;#x2F;[n | u] &amp;lt;addr&amp;gt;	x命令查看内存地址钟的值，n：表示显示内存的长度，u：表示从当前地址往后请求的字节数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;打印寄存器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;info register	查看寄存器（除了浮点寄存器）&lt;/p&gt;
&lt;p&gt;all-registers	查看所有寄存器&lt;/p&gt;
&lt;p&gt;info registers &amp;lt;reg_name …&amp;gt;查看所指定寄存器&lt;/p&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;来源培训PPT 作者：Relax  邮箱：&lt;a href=&#34;mailto:&amp;#119;&amp;#97;&amp;#x6e;&amp;#103;&amp;#119;&amp;#x31;&amp;#x31;&amp;#49;&amp;#x40;&amp;#x69;&amp;#x63;&amp;#x6c;&amp;#111;&amp;#x75;&amp;#x64;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&#34;&gt;&amp;#119;&amp;#97;&amp;#x6e;&amp;#103;&amp;#119;&amp;#x31;&amp;#x31;&amp;#49;&amp;#x40;&amp;#x69;&amp;#x63;&amp;#x6c;&amp;#111;&amp;#x75;&amp;#x64;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2023-02-24T08:50:20.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/19/Matrix002/</id>
        <title>矩阵乘法计算拆分展示</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/19/Matrix002/"/>
        <content type="html">&lt;h2 id=&#34;矩阵乘法计算拆分展示&#34;&gt;&lt;a href=&#34;#矩阵乘法计算拆分展示&#34; class=&#34;headerlink&#34; title=&#34;矩阵乘法计算拆分展示&#34;&gt;&lt;/a&gt;矩阵乘法计算拆分展示&lt;/h2&gt;&lt;h3 id=&#34;通用矩阵乘概念&#34;&gt;&lt;a href=&#34;#通用矩阵乘概念&#34; class=&#34;headerlink&#34; title=&#34;通用矩阵乘概念&#34;&gt;&lt;/a&gt;通用矩阵乘概念&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/19/Matrix002/image-20230219171156738.png&#34; alt=&#34;image-20230219171156738&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵各行，其行数与A的行数相等 &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵i行j列&lt;/span&gt;&lt;br&gt;        c[i][j] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p &amp;lt; k; p++)&amp;#123;		&lt;span class=&#34;hljs-comment&#34;&gt;//用p循环累加和计算C[i][j] &lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//计算区域&lt;/span&gt;&lt;br&gt;           C[i][j] += A[i][p] * B[p][j];		&lt;span class=&#34;hljs-comment&#34;&gt;//遍历A矩阵各行与B矩阵各列&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;计算拆分展示&#34;&gt;&lt;a href=&#34;#计算拆分展示&#34; class=&#34;headerlink&#34; title=&#34;计算拆分展示&#34;&gt;&lt;/a&gt;计算拆分展示&lt;/h3&gt;&lt;p&gt;图四将输出计算拆分为 &lt;strong&gt;1 × 4&lt;/strong&gt; 的小块，即将 &lt;strong&gt;N&lt;/strong&gt; 维度拆分为两部分。计算该块输出时，需要使用 &lt;strong&gt;A&lt;/strong&gt; 矩阵的1行，和 &lt;strong&gt;B&lt;/strong&gt; 矩阵的4列 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/19/Matrix002/image-20230219171904249.png&#34; alt=&#34;image-20230219171904249&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵各行，其行数与A的行数相等 &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j +=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵j-j+3列&lt;/span&gt;&lt;br&gt;        c[i][j + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i][j + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i][j + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i][j + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p &amp;lt; k; p++)&amp;#123;		&lt;span class=&#34;hljs-comment&#34;&gt;//用p循环累加和计算C[i][j] &lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//计算区域&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//遍历A矩阵各行与B矩阵各列&lt;/span&gt;&lt;br&gt;           C[i][j + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] += A[i][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];    &lt;br&gt;           C[i][j + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] += A[i][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];&lt;br&gt;           C[i][j + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] += A[i][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;           C[i][j + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] += A[i][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;];&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最内侧计算使用的矩阵&lt;strong&gt;A&lt;/strong&gt;的元素是一致的。因此可以将**A[i][p]**读取到寄存器中，从而实现4次数据复用。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; temp = A[i][p];&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一般将最内侧循环称作计算核(micro kernel)&lt;/p&gt;
&lt;p&gt;类似地，我们可以继续拆分输出&lt;strong&gt;M&lt;/strong&gt;维度，从而在内测循环中计算 &lt;strong&gt;4 × 4&lt;/strong&gt; 输出，如图五。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/19/Matrix002/image-20230219174355047.png&#34; alt=&#34;image-20230219174355047&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样的，将计算核心展开，可以得到下面的伪代码。这里我们将 &lt;strong&gt;1 × 4&lt;/strong&gt; 中展示过的N维度的计算简化表示。这种拆分可看成是&lt;strong&gt;4 × 1 × 4&lt;/strong&gt;，这样A和B的访存均可复用四次。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵i-i+3行，其行数与A的行数相等 &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j +=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵第j-j+3列&lt;/span&gt;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p &amp;lt; k; p++)&amp;#123;		&lt;span class=&#34;hljs-comment&#34;&gt;//用p循环累加和计算C[i][j] &lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//计算区域&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//遍历A矩阵各行与B矩阵各列&lt;/span&gt;&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];    &lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;到目前为止。我们都是在输出的两个维度上展开，而整个计算还包含一个规约(Reduction)维度K。图六展示了在计算&lt;strong&gt;4 × 4&lt;/strong&gt;输出时，将维度K拆分，从而每次最内侧循环计算出输出矩阵C的&lt;strong&gt;4&amp;#x2F;K&lt;/strong&gt;的部分和。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/19/Matrix002/image-20230219180147184.png&#34; alt=&#34;image-20230219180147184&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面展示的是这部分计算的展开伪代码，其中维度M和N已经被简写。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵i-i+3行，其行数与A的行数相等 &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j +=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵第j-j+3列&lt;/span&gt;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p &amp;lt; k; p+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;		&lt;span class=&#34;hljs-comment&#34;&gt;//用p循环累加和计算C[i][j] &lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//计算区域&lt;/span&gt;&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][p + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] * B[p + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];    &lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][p + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] * B[p + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][p + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] * B[p + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][p + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] * B[p + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在对M和N展开式，我们可以分别复用B和A的数据；在对K展开时，其局部使用的C的内存是一致的，那么K迭代时可以将部分和累加在寄存器中——最内层循环整个迭代一次写到C的内存中。&lt;/p&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://zhenhuaw.me/blog/2019/gemm-optimization.html&#34;&gt;通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Matrix" />
        <category term="GEMM" />
        <updated>2023-02-19T09:04:23.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/18/leetcode11/</id>
        <title>11. 盛最多水的容器</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/18/leetcode11/"/>
        <content type="html">&lt;h2 id=&#34;11-盛最多水的容器&#34;&gt;&lt;a href=&#34;#11-盛最多水的容器&#34; class=&#34;headerlink&#34; title=&#34;11.盛最多水的容器&#34;&gt;&lt;/a&gt;11.盛最多水的容器&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;h4 id=&#34;11-盛最多水的容器-1&#34;&gt;&lt;a href=&#34;#11-盛最多水的容器-1&#34; class=&#34;headerlink&#34; title=&#34;11. 盛最多水的容器&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/container-with-most-water/&#34;&gt;11. 盛最多水的容器&lt;/a&gt;&lt;/h4&gt;&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;maxArea&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; height)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//双指针；&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ans =&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; left=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; right=height.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;()&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(left&amp;lt;right)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; temp=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(height[left]&amp;lt;=height[right])&amp;#123;&lt;br&gt;                temp = height[left]*(right-left);&lt;br&gt;                ans = std::&lt;span class=&#34;hljs-built_in&#34;&gt;max&lt;/span&gt;(ans,temp);&lt;br&gt;                left++;&lt;br&gt;            &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;                temp = height[right]*(right-left);&lt;br&gt;                ans = std::&lt;span class=&#34;hljs-built_in&#34;&gt;max&lt;/span&gt;(ans,temp);&lt;br&gt;                right--;&lt;br&gt;            &amp;#125;&lt;br&gt;            &lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ans;&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/&#34;&gt;盛最多水的容器 - 盛最多水的容器 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="LeetCode" />
        <category term="双指针" />
        <updated>2023-02-18T08:27:01.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/17/leetcode001/</id>
        <title>146.LRU cache</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/17/leetcode001/"/>
        <content type="html">&lt;h2 id=&#34;146-LRU-cache&#34;&gt;&lt;a href=&#34;#146-LRU-cache&#34; class=&#34;headerlink&#34; title=&#34;146.LRU cache&#34;&gt;&lt;/a&gt;146.LRU cache&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/lru-cache/&#34;&gt;146. LRU 缓存 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LRUCache&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; cap=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    list&amp;lt;pair&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; lru;   &lt;span class=&#34;hljs-comment&#34;&gt;//真正的cache&lt;/span&gt;&lt;br&gt;    unordered_map&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,list&amp;lt;pair&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;::iterator&amp;gt; mp;   &lt;span class=&#34;hljs-comment&#34;&gt;//主要用处就是查找&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;LRUCache&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; capacity) &amp;#123;&lt;br&gt;        cap = capacity;						&lt;span class=&#34;hljs-comment&#34;&gt;//容量&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;						&lt;span class=&#34;hljs-comment&#34;&gt;//作为就是把最近访问的放在表头&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(mp.&lt;span class=&#34;hljs-built_in&#34;&gt;find&lt;/span&gt;(key)!=mp.&lt;span class=&#34;hljs-built_in&#34;&gt;end&lt;/span&gt;())&amp;#123;							&lt;span class=&#34;hljs-comment&#34;&gt;//有这个元素&lt;/span&gt;&lt;br&gt;            lru.&lt;span class=&#34;hljs-built_in&#34;&gt;splice&lt;/span&gt;(lru.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;(),lru,mp[key]);			&lt;span class=&#34;hljs-comment&#34;&gt;//将一个 list 容器中的元素插入到另一个容器的指定位置&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; lru.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;()-&amp;gt;second;				&lt;span class=&#34;hljs-comment&#34;&gt;//返回元素&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;								&lt;span class=&#34;hljs-comment&#34;&gt;//没有这个元素&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; key, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt;(key)!=&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//cache中有key，调用get后自动插入到表头【key存在】&lt;/span&gt;&lt;br&gt;            lru.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;()-&amp;gt;second = value;&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//【key不存在】&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(lru.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;()==cap)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//如果容量满了&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; delkey = lru.&lt;span class=&#34;hljs-built_in&#34;&gt;back&lt;/span&gt;().first;		 &lt;span class=&#34;hljs-comment&#34;&gt;//记录最久未访问的key&lt;/span&gt;&lt;br&gt;                lru.&lt;span class=&#34;hljs-built_in&#34;&gt;pop_back&lt;/span&gt;();						 &lt;span class=&#34;hljs-comment&#34;&gt;//pop掉，置换&lt;/span&gt;&lt;br&gt;                mp.&lt;span class=&#34;hljs-built_in&#34;&gt;erase&lt;/span&gt;(delkey);					 &lt;span class=&#34;hljs-comment&#34;&gt;//查找表中也删除	&lt;/span&gt;&lt;br&gt;            &amp;#125;&lt;br&gt;            lru.&lt;span class=&#34;hljs-built_in&#34;&gt;emplace_front&lt;/span&gt;(key,value);			&lt;span class=&#34;hljs-comment&#34;&gt;//头部生成一个元素&lt;/span&gt;&lt;br&gt;            mp[key]=lru.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;();					&lt;span class=&#34;hljs-comment&#34;&gt;//加入查找表&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * Your LRUCache object will be instantiated and called as such:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * LRUCache* obj = new LRUCache(capacity);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * int param_1 = obj-&amp;gt;get(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * obj-&amp;gt;put(key,value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/bbea4b2410e6&#34;&gt;C++实现LRU缓存——LeetCode146 - 简书 (jianshu.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="LeetCode" />
        <updated>2023-02-17T06:31:45.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/15/blislab003/</id>
        <title>BLISlab中C矩阵初始化速度测试</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/15/blislab003/"/>
        <content type="html">&lt;h2 id=&#34;BLISlab中C矩阵初始化速度测试&#34;&gt;&lt;a href=&#34;#BLISlab中C矩阵初始化速度测试&#34; class=&#34;headerlink&#34; title=&#34;BLISlab中C矩阵初始化速度测试&#34;&gt;&lt;/a&gt;BLISlab中C矩阵初始化速度测试&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;假设我们想把C中的所有元素都设为0。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统一编译命令：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;g++  xxx.cpp -O0 -std=c++11 -o xxx&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本一：&#34;&gt;&lt;a href=&#34;#版本一：&#34; class=&#34;headerlink&#34; title=&#34;版本一：&#34;&gt;&lt;/a&gt;版本一：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;    		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123; &lt;br&gt;        		&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(i,j) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;   		 	&amp;#125;&lt;br&gt;		&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：&#34;&gt;&lt;a href=&#34;#实测结果：&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776901341&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776901&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本二：&#34;&gt;&lt;a href=&#34;#版本二：&#34; class=&#34;headerlink&#34; title=&#34;版本二：&#34;&gt;&lt;/a&gt;版本二：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j*ldc ];			&lt;span class=&#34;hljs-comment&#34;&gt;//point cp to top of ith column&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;        	*cp++ = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;		&lt;span class=&#34;hljs-comment&#34;&gt;//set element that cp points to to zero and&lt;/span&gt;&lt;br&gt;    	&amp;#125;		&lt;span class=&#34;hljs-comment&#34;&gt;//advance the pointer&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-1&#34;&gt;&lt;a href=&#34;#实测结果：-1&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455968000&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455968&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本三：&#34;&gt;&lt;a href=&#34;#版本三：&#34; class=&#34;headerlink&#34; title=&#34;版本三：&#34;&gt;&lt;/a&gt;版本三：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;       		*(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;   		&amp;#125;&lt;br&gt;	&amp;#125;	&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-2&#34;&gt;&lt;a href=&#34;#实测结果：-2&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581347801&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581347&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本四：&#34;&gt;&lt;a href=&#34;#版本四：&#34; class=&#34;headerlink&#34; title=&#34;版本四：&#34;&gt;&lt;/a&gt;版本四：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; c0 =&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c1=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c2=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c3=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = c0;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c1;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = c2;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = c3;&lt;br&gt;        	cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;   		 &amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-3&#34;&gt;&lt;a href=&#34;#实测结果：-3&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269606428&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269606&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;参考资料：&#34;&gt;&lt;a href=&#34;#参考资料：&#34; class=&#34;headerlink&#34; title=&#34;参考资料：&#34;&gt;&lt;/a&gt;参考资料：&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://gukaifeng.cn/posts/c-11-chrono-gao-jing-du-ji-shi-fang-fa/&#34;&gt;C++11 chrono 高精度计时方法 | GuKaifeng’s Blog&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="dgemm" />
        <updated>2023-02-15T03:48:16.000Z</updated>
    </entry>
</feed>
