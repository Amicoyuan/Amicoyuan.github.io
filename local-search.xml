<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AVX向量化学习(五)-INT型数组相加操作</title>
    <link href="/2022/01/17/AVX005/"/>
    <url>/2022/01/17/AVX005/</url>
    
    <content type="html"><![CDATA[<h1 id="AVX向量化学习-五-INT型数组相加操作"><a href="#AVX向量化学习-五-INT型数组相加操作" class="headerlink" title="AVX向量化学习(五)-INT型数组相加操作"></a>AVX向量化学习(五)-INT型数组相加操作</h1><p>使用AVX指令集进行2个INT型的数组相加操作</p><h2 id="使用到的AVX函数介绍"><a href="#使用到的AVX函数介绍" class="headerlink" title="使用到的AVX函数介绍"></a>使用到的AVX函数介绍</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256i _mm256_loadu_si256 (__m256i <span class="hljs-keyword">const</span> * mem_addr)<br></code></pre></td></tr></table></figure><p><strong>Synopsis</strong></p><p>m256i _mm256_loadu_si256 (m256i const * mem_addr)<br>#include &lt;immintrin.h&gt;<br>Instruction: vmovdqu ymm, m256<br>CPUID Flags: AVX</p><p><strong>Description</strong></p><p>Load 256-bits of integer data from memory into dst. mem_addr does not need to be aligned on any particular boundary.</p><p><strong>Operation</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">dst[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] := MEM[mem_addr+<span class="hljs-number">255</span>:mem_addr] <br>dst[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>Performance</strong></p><table><thead><tr><th align="left">Architecture</th><th align="center">Latency</th><th align="center">Throughput (CPI)</th></tr></thead><tbody><tr><td align="left">Icelake</td><td align="center">7</td><td align="center">0.5</td></tr><tr><td align="left">Skylake</td><td align="center">7</td><td align="center">0.5</td></tr><tr><td align="left">Broadwell</td><td align="center">1</td><td align="center">0.25</td></tr><tr><td align="left">Haswell</td><td align="center">1</td><td align="center">0.25</td></tr><tr><td align="left">Ivy Bridge</td><td align="center">1</td><td align="center">0.5</td></tr></tbody></table><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256i _mm256_add_epi32 (__m256i a, __m256i b)<br></code></pre></td></tr></table></figure><p><strong>Synopsis</strong></p><p>m256i _mm256_add_epi32 (m256i a, __m256i b)<br>#include &lt;immintrin.h&gt;<br>Instruction: vpaddd ymm, ymm, ymm<br>CPUID Flags: AVX2</p><p><strong>Description</strong></p><p>Add packed 32-bit integers in a and b, and store the results in dst.</p><p><strong>Operation</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FOR</span> j := <span class="hljs-number">0</span> to <span class="hljs-number">7</span> <br>     <span class="hljs-attribute">i</span> := j*<span class="hljs-number">32</span> <br>     <span class="hljs-attribute">dst</span>[i+<span class="hljs-number">31</span>:i] := a[i+<span class="hljs-number">31</span>:i] + b[i+<span class="hljs-number">31</span>:i] <br><span class="hljs-attribute">ENDFOR</span> <br><span class="hljs-attribute">dst</span>[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>Performance</strong></p><table><thead><tr><th align="left">Architecture</th><th align="center">Latency</th><th align="center">Throughput (CPI)</th></tr></thead><tbody><tr><td align="left">Icelake</td><td align="center">1</td><td align="center">0.33</td></tr><tr><td align="left">Skylake</td><td align="center">1</td><td align="center">0.33</td></tr><tr><td align="left">Broadwell</td><td align="center">1</td><td align="center">0.5</td></tr><tr><td align="left">Haswell</td><td align="center">1</td><td align="center">0.5</td></tr></tbody></table><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;immintrin.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">40</span>];<br><span class="hljs-keyword">int</span> b[<span class="hljs-number">40</span>];<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> ans1[<span class="hljs-number">40</span>];    <span class="hljs-comment">//记录串行结果 </span><br><span class="hljs-keyword">int</span> ans2[<span class="hljs-number">40</span>]; <span class="hljs-comment">//记录AVX向量化后的结果</span><br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">40</span>;i++)<br>&#123;<br>a[i]=i;<br>b[i]=<span class="hljs-number">2</span>*i;<br>&#125;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">40</span>;i++)<br>&#123;<br>ans1[i]=a[i]+b[i];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;串行计算结果：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">40</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ans1[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>__m256i v0;<br>__m256i v1;<br>__m256i v2;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">40</span><span class="hljs-number">-8</span>;i+=<span class="hljs-number">8</span>)<br>&#123;<br>v0 = _mm256_loadu_si256((<span class="hljs-keyword">const</span> __m256i*)(a+i)); <span class="hljs-comment">//强制类型转换</span><br>v1 = _mm256_loadu_si256((<span class="hljs-keyword">const</span> __m256i*)(b+i)); <span class="hljs-comment">//强制类型转化</span><br>v2 = _mm256_add_epi32(v0,v1);     <span class="hljs-comment">//v0+v1</span><br>_mm256_storeu_si256((__m256i*)(ans2+i),v2);<br><br>&#125;<span class="hljs-comment">//边界处理</span><br><span class="hljs-keyword">for</span> (;i&lt;<span class="hljs-number">40</span>;i++)<br>&#123;<br>ans2[i]=a[i]+b[i];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;并行计算结果：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">40</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ans2[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="程序输出"><a href="#程序输出" class="headerlink" title="程序输出"></a>程序输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">串行计算结果：<br><span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">12</span> <span class="hljs-number">15</span> <span class="hljs-number">18</span> <span class="hljs-number">21</span> <span class="hljs-number">24</span> <span class="hljs-number">27</span> <span class="hljs-number">30</span> <span class="hljs-number">33</span> <span class="hljs-number">36</span> <span class="hljs-number">39</span> <span class="hljs-number">42</span> <span class="hljs-number">45</span> <span class="hljs-number">48</span> <span class="hljs-number">51</span> <span class="hljs-number">54</span> <span class="hljs-number">57</span> <span class="hljs-number">60</span> <span class="hljs-number">63</span> <span class="hljs-number">66</span> <span class="hljs-number">69</span> <span class="hljs-number">72</span> <span class="hljs-number">75</span> <span class="hljs-number">78</span> <span class="hljs-number">81</span> <span class="hljs-number">84</span> <span class="hljs-number">87</span> <span class="hljs-number">90</span> <span class="hljs-number">93</span> <span class="hljs-number">96</span> <span class="hljs-number">99</span> <span class="hljs-number">102</span> <span class="hljs-number">105</span> <span class="hljs-number">108</span> <span class="hljs-number">111</span> <span class="hljs-number">114</span> <span class="hljs-number">117</span><br>并行计算结果：<br><span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">12</span> <span class="hljs-number">15</span> <span class="hljs-number">18</span> <span class="hljs-number">21</span> <span class="hljs-number">24</span> <span class="hljs-number">27</span> <span class="hljs-number">30</span> <span class="hljs-number">33</span> <span class="hljs-number">36</span> <span class="hljs-number">39</span> <span class="hljs-number">42</span> <span class="hljs-number">45</span> <span class="hljs-number">48</span> <span class="hljs-number">51</span> <span class="hljs-number">54</span> <span class="hljs-number">57</span> <span class="hljs-number">60</span> <span class="hljs-number">63</span> <span class="hljs-number">66</span> <span class="hljs-number">69</span> <span class="hljs-number">72</span> <span class="hljs-number">75</span> <span class="hljs-number">78</span> <span class="hljs-number">81</span> <span class="hljs-number">84</span> <span class="hljs-number">87</span> <span class="hljs-number">90</span> <span class="hljs-number">93</span> <span class="hljs-number">96</span> <span class="hljs-number">99</span> <span class="hljs-number">102</span> <span class="hljs-number">105</span> <span class="hljs-number">108</span> <span class="hljs-number">111</span> <span class="hljs-number">114</span> <span class="hljs-number">117</span><br></code></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/]">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>:     “ Intel® Intrinsics Guide”</p>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AVX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AVX向量化学习(四)-INT类型转化成DOUBLE类型</title>
    <link href="/2022/01/17/AVX004/"/>
    <url>/2022/01/17/AVX004/</url>
    
    <content type="html"><![CDATA[<h1 id="AVX向量化学习-四-INT类型转化成DOUBLE类型"><a href="#AVX向量化学习-四-INT类型转化成DOUBLE类型" class="headerlink" title="AVX向量化学习(四)-INT类型转化成DOUBLE类型"></a>AVX向量化学习(四)-INT类型转化成DOUBLE类型</h1><p>使用AVX指令集把INT类型转化为DOUBLE类型</p><h2 id="使用到的AVX函数介绍"><a href="#使用到的AVX函数介绍" class="headerlink" title="使用到的AVX函数介绍"></a>使用到的AVX函数介绍</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m128i _mm_setr_epi32 (<span class="hljs-keyword">int</span> e3, <span class="hljs-keyword">int</span> e2, <span class="hljs-keyword">int</span> e1, <span class="hljs-keyword">int</span> e0)<br></code></pre></td></tr></table></figure><p><strong>Synopsis</strong></p><p>__m128i _mm_setr_epi32 (int e3, int e2, int e1, int e0)<br>#include &lt;emmintrin.h&gt;<br>Instruction: <strong>Sequence</strong><br>CPUID Flags: SSE2</p><p><strong>Description</strong></p><p>Set packed 32-bit integers in dst with the supplied values in reverse order.</p><p><strong>Operation</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">dst[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] := e3 <br>dst[<span class="hljs-number">63</span>:<span class="hljs-number">32</span>] := e2 <br>dst[<span class="hljs-number">95</span>:<span class="hljs-number">64</span>] := e1 <br>dst[<span class="hljs-number">127</span>:<span class="hljs-number">96</span>] := e0<br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256d _mm256_cvtepi32_pd (__m128i a)<br></code></pre></td></tr></table></figure><p><strong>Synopsis</strong></p><p>m256d _mm256_cvtepi32_pd (m128i a)<br>#include &lt;immintrin.h&gt;<br>Instruction: vcvtdq2pd ymm, xmm<br>CPUID Flags: AVX</p><p><strong>Description</strong></p><p>Convert packed signed 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst.</p><p><strong>Operation</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">FOR j := <span class="hljs-number">0</span> to <span class="hljs-number">3</span> <br>    i := j*<span class="hljs-number">32</span> <br>    m := j*<span class="hljs-number">64</span> <br>    dst[m+<span class="hljs-number">63</span>:m] := <span class="hljs-built_in">Convert_Int32_To_FP64</span>(a[i+<span class="hljs-number">31</span>:i]) <br>ENDFOR <br>dst[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>Performance</strong></p><table><thead><tr><th align="left">Architecture</th><th align="center">Latency</th><th align="center">Throughput (CPI)</th></tr></thead><tbody><tr><td align="left">Icelake</td><td align="center">7</td><td align="center">1</td></tr><tr><td align="left">Skylake</td><td align="center">7</td><td align="center">1</td></tr><tr><td align="left">Broadwell</td><td align="center">6</td><td align="center">1</td></tr><tr><td align="left">Haswell</td><td align="center">6</td><td align="center">1</td></tr><tr><td align="left">Ivy Bridge</td><td align="center">4</td><td align="center">1</td></tr></tbody></table><h2 id="程序运行平台"><a href="#程序运行平台" class="headerlink" title="程序运行平台"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><p>g++ int_to_double.cpp -msse2 -mavx -o test01</p><h2 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h2><p>./test01</p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;immintrin.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">double</span> b[<span class="hljs-number">9</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    __m128i x = _mm_setr_epi32(a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>],a[<span class="hljs-number">3</span>]);   <span class="hljs-comment">//load</span><br> __m256d v5=_mm256_cvtepi32_pd(x);       <span class="hljs-comment">//convert</span><br>    _mm256_storeu_pd(b,v5);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>    &#123;<br>    cout&lt;&lt;b[i]&lt;&lt;endl;<br>&#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="程序输出"><a href="#程序输出" class="headerlink" title="程序输出"></a>程序输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/]">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>:     “ Intel® Intrinsics Guide”</p>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AVX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gprof、gprof2dot.py、dot使用方法简介</title>
    <link href="/2022/01/09/tool001/"/>
    <url>/2022/01/09/tool001/</url>
    
    <content type="html"><![CDATA[<h1 id="gprof、gprof2dot-py、dot使用方法简介"><a href="#gprof、gprof2dot-py、dot使用方法简介" class="headerlink" title="gprof、gprof2dot.py、dot使用方法简介"></a>gprof、gprof2dot.py、dot使用方法简介</h1><h2 id="1-：gprof使用步骤如下，以SLIC为例："><a href="#1-：gprof使用步骤如下，以SLIC为例：" class="headerlink" title="(1)：gprof使用步骤如下，以SLIC为例："></a>(1)：gprof使用步骤如下，以SLIC为例：</h2><h3 id="1-在编译过程中添加-pg选项，命令如下："><a href="#1-在编译过程中添加-pg选项，命令如下：" class="headerlink" title="1 在编译过程中添加-pg选项，命令如下："></a>1 在编译过程中添加-pg选项，命令如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">gcc -pg SLIC.cpp -o SLIC<br></code></pre></td></tr></table></figure><h3 id="2-运行程序，运行结束之后会形成文件gmon-out，命令如下"><a href="#2-运行程序，运行结束之后会形成文件gmon-out，命令如下" class="headerlink" title="2 运行程序，运行结束之后会形成文件gmon.out，命令如下:"></a>2 运行程序，运行结束之后会形成文件gmon.out，命令如下:</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./SLIC</span><br></code></pre></td></tr></table></figure><h3 id="3-使用gprof再次执行程序，并将结果重定位到prof-log中，命令如下："><a href="#3-使用gprof再次执行程序，并将结果重定位到prof-log中，命令如下：" class="headerlink" title="3 使用gprof再次执行程序，并将结果重定位到prof.log中，命令如下："></a>3 使用gprof再次执行程序，并将结果重定位到prof.log中，命令如下：</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">gprof ./SLIC &gt; <span class="hljs-keyword">prof</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>分析prof.log就可以获得程序的调用关系、函数执行时间等信息。对gprof的分析方法见以下blog</p><p><a href="http://blog.csdn.net/macky0668/article/details/6839517">http://blog.csdn.net/macky0668/article/details/6839517</a></p><h2 id="2-：配合gprof2dot-py与dot工具的使用-我是安装在了Win10平台"><a href="#2-：配合gprof2dot-py与dot工具的使用-我是安装在了Win10平台" class="headerlink" title="(2)：配合gprof2dot.py与dot工具的使用(我是安装在了Win10平台)"></a>(2)：配合<em>gprof2dot.py</em>与dot工具的使用(我是安装在了Win10平台)</h2><p>以上方法仍然存在一个问题就是分析结果不够直观，特别是函数的调用关系。因此为解决以上问题，可以配合<em>gprof2dot.py</em>与dot工具的使用。</p><h3 id="1-安装gprof2dot-py与dot"><a href="#1-安装gprof2dot-py与dot" class="headerlink" title="1.安装gprof2dot.py与dot"></a>1.安装<em>gprof2dot.py</em>与dot</h3><p><a href="https://github.com/jrfonseca/gprof2dot">GitHub - jrfonseca/gprof2dot: Converts profiling output to a dot graph.</a></p><h3 id="2-通过以下地址可获得graphviz，安装graphviz后可使用dot工具"><a href="#2-通过以下地址可获得graphviz，安装graphviz后可使用dot工具" class="headerlink" title="2.通过以下地址可获得graphviz，安装graphviz后可使用dot工具"></a>2.通过以下地址可获得graphviz，安装graphviz后可使用dot工具</h3><p><a href="https://graphviz.org/download/source/">Source Code | Graphviz</a></p><p>在使用上述工具前，还需要先产生prof.log文件，prof.log文件的产生方法见上文。</p><h3 id="3-首先通过命令行进入你安装gprof2dot-py的根目录："><a href="#3-首先通过命令行进入你安装gprof2dot-py的根目录：" class="headerlink" title="3.首先通过命令行进入你安装gprof2dot.py的根目录："></a>3.首先通过命令行进入你安装gprof2dot.py的根目录：</h3><p><img src="/2022/01/09/tool001/image-20220109165659998.png"></p><h3 id="4-通过以下命令即可得到函数调用图："><a href="#4-通过以下命令即可得到函数调用图：" class="headerlink" title="4.通过以下命令即可得到函数调用图："></a>4.通过以下命令即可得到函数调用图：</h3><p><img src="/2022/01/09/tool001/image-20220109170212157.png"></p><h3 id="5-结果如下："><a href="#5-结果如下：" class="headerlink" title="5.结果如下："></a>5.结果如下：</h3><p><img src="/2022/01/09/tool001/image-20220109170315471.png"></p><h2 id="3-：接上文补充几点可能无法产生gmon-out文件的情况："><a href="#3-：接上文补充几点可能无法产生gmon-out文件的情况：" class="headerlink" title="(3)：接上文补充几点可能无法产生gmon.out文件的情况："></a>(3)：接上文补充几点可能无法产生gmon.out文件的情况：</h2><p>  1.程序不是从main return或exit()退出，则可能不生成gmon.out。<br>  2.程序如果崩溃，可能不生成gmon.out。<br>  3.测试发现在虚拟机上运行，可能不生成gmon.out。<br>  4.程序忽略SIGPROF信号！一定不能捕获、忽略SIGPROF信号。man手册对SIGPROF的解释是：profiling timer expired. 如果忽略这个信号，gprof的输出则是：Each sample counts as 0.01 seconds. no time accumulated.<br>  5.如果程序运行时间非常短，则gprof可能无效</p><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p><a href="https://blog.csdn.net/u012927281/article/details/51132064">(4条消息) gprof、gprof2dot.py、dot使用方法简介_Andy.Wang的博客-CSDN博客_gprof2dot</a></p>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能分析工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2022/01/04/Algorithm004/"/>
    <url>/2022/01/04/Algorithm004/</url>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>并查集（Disjoint Set）是一种非常精巧而实用的数据结构。用于处理不相交集合的合并问题。</p><p>并查集用来管理元素分组情况。并查集可以高效地进行如下操作。</p><p>1.查询元素 a和元素 b是否属于同一组。<br>2.合并元素 a和元素 b所在的组。<br><img src="/2022/01/04/Algorithm004/20191114081139557.png"></p><p><img src="/2022/01/04/Algorithm004/20191114081642983-16413015433853.png"></p><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h2><p>我们准备 n个节点来表示 n个元素。最开始时没有边。</p><p><img src="/2022/01/04/Algorithm004/20191114081846480.png"></p><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><p>为了查询两个节点是否属于同一组，我们需要沿着树向上走，来查询包含这个元素的树的根是谁。如果两个节点走到了同一个根，那么就可以知道它们属于同一组。</p><p>在下图中，元素 2 和元素 5都走到了元素 1，因此它们属于同一组。另一方面，由于元素 7 走到的是元素 6，因此同元素 2或元素 5 属于不同组。</p><p><img src="/2022/01/04/Algorithm004/20191114082935860.png"></p><h2 id="3-合并"><a href="#3-合并" class="headerlink" title="3.合并"></a>3.合并</h2><p>像下图一样，从一个组的根向另一个组的根连边，这样两棵树就变成了一棵树， 也就把两个组合并为一个组了。</p><p><img src="/2022/01/04/Algorithm004/20191114082505100.png"></p><h2 id="4-路径压缩"><a href="#4-路径压缩" class="headerlink" title="4.路径压缩"></a>4.路径压缩</h2><p>上面的查询程序 find() 沿着搜索路径找到根结点，这条路径可能很长。</p><p>优化：沿路径返回时，顺便把 i 所属的集改成根结点。下次再搜，复杂度是 O(1)。</p><p>这种方法称为路径压缩，在递归过程中，整个搜索路径上的元素所属的集都被改为根结点。</p><p>路径压缩的思想是，我们只关心每个结点的父结点，而并不太关心树的真正的结构。路径压缩不仅优化了下次查询，而且也优化了合并，因为合并时也用到了查询。<br><img src="/2022/01/04/Algorithm004/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODE1MTg4,size_16,color_FFFFFF,t_70.png"><img src="/2022/01/04/Algorithm004/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODE1MTg4,size_16,color_FFFFFF,t_70-16413019286669.png"></p><h2 id="5-按秩合并"><a href="#5-按秩合并" class="headerlink" title="5.按秩合并"></a>5.按秩合并</h2><p>合并元素 x 和 y 时，先搜到它们的根结点；<br>合并这两个根结点：把一个根结点的集改成另一个根结点。<br>这两个根结点的高度不同，把高度较小的集合并到较大的集上，能减少树的高度。</p><p><img src="/2022/01/04/Algorithm004/20191114090118888.png"></p><p>这样，在初始化时就要用一个数组定义元素 i的高度，在合并时更改。</p><p>下面代码加入了上述两个优化，我们用编号代表每个元素。数组 par[ ]表示的是父亲的编号，par[ x ] = = x  时，x 是所在的树的根。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> par[N];   <span class="hljs-comment">//父亲</span><br><span class="hljs-keyword">int</span> rank[N];  <span class="hljs-comment">//树的高度</span><br><br><span class="hljs-comment">// 初始化n个元素</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>par[i] = i;<br>rank[i] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 查询树的根（路径压缩）</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(par[x] == x)<br><span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> par[x] = <span class="hljs-built_in">find</span>(par[x]);<br>&#125;<br><br><span class="hljs-comment">// 合并x和y所属的集合（按秩合并）</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unite</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>x = <span class="hljs-built_in">find</span>(x);<br>y = <span class="hljs-built_in">find</span>(y);<br><span class="hljs-keyword">if</span>(x == y)  <span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">if</span>(rank[x] &lt; rank[y])<br>par[x] = y;<br><span class="hljs-keyword">else</span><br>&#123;<br>par[y] = x;<br><span class="hljs-keyword">if</span>(rank[x] == rank[y])rank[x]++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="样题一：L2-024-部落-25-分"><a href="#样题一：L2-024-部落-25-分" class="headerlink" title="样题一：L2-024 部落 (25 分)"></a>样题一：<strong>L2-024 部落 (25 分)</strong></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>在一个社区里，每个人都有自己的小圈子，还可能同时属于很多不同的朋友圈。我们认为朋友的朋友都算在一个部落里，于是要请你统计一下，在一个给定社区中，到底有多少个互不相交的部落？并且检查任意两个人是否属于同一个部落。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出一个正整数<em>N</em>（≤104），是已知小圈子的个数。随后<em>N</em>行，每行按下列格式给出一个小圈子里的人：</p><p><em>K</em> <em>P</em>[1] <em>P</em>[2] ⋯ <em>P</em>[<em>K</em>]</p><p>其中<em>K</em>是小圈子里的人数，<em>P</em>[<em>i</em>]（<em>i</em>=1,⋯,<em>K</em>）是小圈子里每个人的编号。这里所有人的编号从1开始连续编号，最大编号不会超过104。</p><p>之后一行给出一个非负整数<em>Q</em>（≤104），是查询次数。随后<em>Q</em>行，每行给出一对被查询的人的编号。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先在一行中输出这个社区的总人数、以及互不相交的部落的个数。随后对每一次查询，如果他们属于同一个部落，则在一行中输出<code>Y</code>，否则输出<code>N</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs in">4<br>3 10 1 2<br>2 3 4<br>4 1 5 7 8<br>3 9 6 4<br>2<br>10 5<br>3 7结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">10 2<br>Y<br>N结尾无空行<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>  N=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">int</span> par[N];       <span class="hljs-comment">//父亲</span><br><span class="hljs-keyword">int</span> deep[N];      <span class="hljs-comment">//树的高度</span><br><span class="hljs-keyword">int</span> isroot[N];    <span class="hljs-comment">//用来记录互不相交的部落的个数。如果同属于一个部落，那个这个部落的元素的根节点都是一样的。</span><br>                  <span class="hljs-comment">//所以只要统计有多少个根节点就可以知道有多少个互不相交的部落个数</span><br>set&lt;<span class="hljs-keyword">int</span>&gt; st;      <span class="hljs-comment">//集合能很好的过滤到重复元素，可以很方便的用来统计不是重复元素的个数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        par[i] = i;<br>        deep[i] =<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(par[x] == x ) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> par[x] = <span class="hljs-built_in">find</span>(par[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unite</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    x=<span class="hljs-built_in">find</span>(x);<br>    y=<span class="hljs-built_in">find</span>(y);<br>    <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(deep[x]&lt;deep[y])<br>    &#123;<br>        par[x]=y;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        par[y]=x;<br>        <span class="hljs-keyword">if</span>(deep[x]==deep[y]) deep[x]++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">init</span>(<span class="hljs-number">10005</span>);<br>    <span class="hljs-built_in">memset</span>(isroot,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(isroot));<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n ; ++i) &#123;<br>        <span class="hljs-keyword">int</span> num,first;<br>        cin&gt;&gt;num&gt;&gt;first;<br>        st.<span class="hljs-built_in">insert</span>(first);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;num ; ++j) &#123;<br>            <span class="hljs-keyword">int</span> next;<br>            cin&gt;&gt;next;<br>            st.<span class="hljs-built_in">insert</span>(next);<br>            <span class="hljs-built_in">unite</span>(first,next);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//寻找互不相交的部落</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;=st.<span class="hljs-built_in">size</span>() ; ++l) &#123;<br>        isroot[<span class="hljs-built_in">find</span>(l)]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span>; m &lt;=st.<span class="hljs-built_in">size</span>() ; ++m) &#123;<br>        ans+=isroot[m];<br>    &#125;<br>    cout&lt;&lt;st.<span class="hljs-built_in">size</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">int</span> time;<br>    cin&gt;&gt;time;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;time ; ++k) &#123;<br>        <span class="hljs-keyword">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b))<br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;Y&quot;</span>&lt;&lt;endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;N&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h2><p><a href="https://blog.csdn.net/qq_42815188/article/details/86769629">(3条消息) 并查集_早睡身体好hh-CSDN博客_并查集</a>：早睡身体好hh-并查集(CSDN)</p><h2 id="样题链接："><a href="#样题链接：" class="headerlink" title="样题链接："></a>样题链接：</h2><p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805056736444416">题目详情 - L2-024 部落 (25 分) (pintia.cn)</a>：L2-024 部落 (25 分)</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最短路径-Floyed和Dijkstra</title>
    <link href="/2022/01/03/Algorithm003/"/>
    <url>/2022/01/03/Algorithm003/</url>
    
    <content type="html"><![CDATA[<h1 id="最短路径-Floyed和Dijkstra"><a href="#最短路径-Floyed和Dijkstra" class="headerlink" title="最短路径-Floyed和Dijkstra"></a>最短路径-Floyed和Dijkstra</h1><h2 id="Floyed"><a href="#Floyed" class="headerlink" title="Floyed"></a>Floyed</h2><h3 id="样题一：P1364-医院设置"><a href="#样题一：P1364-医院设置" class="headerlink" title="样题一：P1364 医院设置"></a>样题一：P1364 医院设置</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>设有一棵二叉树，如图：</p><p><img src="/2022/01/03/Algorithm003/166.png"></p><p>其中，圈中的数字表示结点中居民的人口。圈边上数字表示结点编号，现在要求在某个结点上建立一个医院，使所有居民所走的路程之和为最小，同时约定，相邻接点之间的距离为 11。如上图中，若医院建在1 处，则距离和 =4+12+2\times20+2\times40=136=4+12+2×20+2×40=136；若医院建在 33 处，则距离和 =4\times2+13+20+40=81=4×2+13+20+40=81。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>第一行一个整数 n<em>n</em>，表示树的结点数。</p><p>接下来的 n<em>n</em> 行每行描述了一个结点的状况，包含三个整数 w, u, v<em>w</em>,<em>u</em>,<em>v</em>，其中 w<em>w</em> 为居民人口数，u<em>u</em> 为左链接（为 00 表示无链接），v<em>v</em> 为右链接（为 00 表示无链接）。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>一个整数，表示最小距离和。</p><h4 id="输入输出样例："><a href="#输入输出样例：" class="headerlink" title="输入输出样例："></a>输入输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">13 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">12 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">40 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">81<br></code></pre></td></tr></table></figure><h4 id="程序源代码："><a href="#程序源代码：" class="headerlink" title="程序源代码："></a>程序源代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> tree[<span class="hljs-number">1000</span>][<span class="hljs-number">1000</span>];   <span class="hljs-comment">//tree的作用邻接矩阵建树</span><br><span class="hljs-keyword">int</span> w[<span class="hljs-number">1000</span>],l,r;  <span class="hljs-comment">//w每个结点的居民人口数</span><br><span class="hljs-keyword">int</span> mindis;       <span class="hljs-comment">//最小记录和</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            tree[i][j]=<span class="hljs-number">0X3FFFFFFF</span>;    <span class="hljs-comment">//初始化邻接矩阵</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n ; ++i) &#123;<br>        tree[i][i]=<span class="hljs-number">0</span>;    <span class="hljs-comment">//初始化</span><br>        cin&gt;&gt;w[i]&gt;&gt;l&gt;&gt;r;  <span class="hljs-comment">//读入数据</span><br>        <span class="hljs-keyword">if</span>(l&gt;<span class="hljs-number">0</span>) tree[i][l]=tree[l][i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(r&gt;<span class="hljs-number">0</span>) tree[i][r]=tree[r][i]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;=n ; ++k) <span class="hljs-comment">//用Floyed求任意两结点之间的最短路径</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n ; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(i!=k)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; ++j) &#123;<br>                    <span class="hljs-keyword">if</span>(i!=j&amp;&amp;j!=k&amp;&amp;tree[i][k]+tree[k][j]&lt;tree[i][j])<br>                    &#123;<br>                        tree[i][j]=tree[i][k]+tree[k][j];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    mindis=INT_MAX;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-comment">//穷举医院建在N个结点，找出最短距离</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> sum =<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            sum+=tree[i][j]*w[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(sum&lt;mindis) mindis=sum;<br>    &#125;<br>    cout&lt;&lt;mindis&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><h3 id="样题二："><a href="#样题二：" class="headerlink" title="样题二："></a>样题二：</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p><img src="/2022/01/03/Algorithm003/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x5bm5fbWc=,size_16,color_FFFFFF,t_70.png"></p><p>输入n和m，代表n个节点，m条边，然后是m行输入，每行有x,y,z，代表x到y的路距离为z。<br>问题：从1出发到各点的最短路径</p><h4 id="测试样例："><a href="#测试样例：" class="headerlink" title="测试样例："></a>测试样例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">7</span> <span class="hljs-number">12</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">20</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">50</span><br><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">30</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">25</span><br><span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">70</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">40</span><br><span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">50</span><br><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">25</span><br><span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">55</span><br><span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span><br><span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">70</span><br><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">50</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5</span><br><span class="hljs-attribute">70</span><br></code></pre></td></tr></table></figure><h4 id="程序源代码：-1"><a href="#程序源代码：-1" class="headerlink" title="程序源代码："></a>程序源代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> mapdis[maxn][maxn];  <span class="hljs-comment">//表示x-&gt;y的距离(有向)</span><br><span class="hljs-keyword">int</span> dis[maxn];  <span class="hljs-comment">//代表最短路径长</span><br><span class="hljs-keyword">int</span> path[maxn];  <span class="hljs-comment">//记录前驱节点</span><br><span class="hljs-keyword">int</span> vis[maxn]; <span class="hljs-comment">//用来记录该点是否已经是最短路径的点</span><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    <span class="hljs-built_in">memset</span>(path,<span class="hljs-number">-1</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(path));<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <br>    dis[s]=<span class="hljs-number">0</span>;   <span class="hljs-comment">//自身到自身的距离是0</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; <span class="hljs-comment">//用来记录当轮的起始点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(!vis[i]&amp;&amp;dis[i]&lt;dis[k])     <span class="hljs-comment">//如果这个点还不为最短路径的点，并且这个点的路径是现在所有点中最小的</span><br>            &#123;<br>                k=i;      <span class="hljs-comment">//那么就记录这个点为当轮的起始点</span><br>                  <span class="hljs-comment">//特殊的这里第一次找到的是起点，及s=1。</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!k) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">//所有点已经为最短路径的点，则返回</span><br>        vis[k]=<span class="hljs-number">1</span>;       <span class="hljs-comment">//标记该点为最短路径的点</span><br>        <span class="hljs-comment">//松弛操作</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; ++j) &#123;   <br>            <span class="hljs-comment">//第一次循环只有起点的邻接点的距离被更新</span><br>            <span class="hljs-comment">//每次都更新找到，新找到的点的邻接点(新找到的点也就是当轮的起始点)</span><br>            <span class="hljs-keyword">if</span>(dis[j]&gt;dis[k]+mapdis[k][j])  <span class="hljs-comment">//最短路是由最短路+某一条固定路组成</span><br>            &#123;<br>                dis[j]=dis[k]+mapdis[k][j];<span class="hljs-comment">//路径被改变</span><br>                path[j]=k;<span class="hljs-comment">//重新记录前驱，最短路是由最短路+某一条固定路组成，所以前驱是有效的</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> <span class="hljs-comment">//递归打印</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">print</span>(path[x]);<br>    cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-built_in">memset</span>(mapdis,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(mapdis));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;m ; ++i) &#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        <span class="hljs-comment">//记录x-&gt;y的距离</span><br>        mapdis[x][y]=z;<br>    &#125;<br>    <span class="hljs-built_in">Dijkstra</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//求1出发到各点的最短路径</span><br>    <span class="hljs-keyword">int</span> order;    <span class="hljs-comment">//读入终点</span><br>    cin&gt;&gt;order;<br>    <span class="hljs-built_in">print</span>(path[order]);  <span class="hljs-comment">//打印最短路径</span><br>    cout&lt;&lt;order&lt;&lt;endl;<br>    cout&lt;&lt;dis[order];    <span class="hljs-comment">//最短路径长</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="样题三：L2-001-紧急救援-25-分"><a href="#样题三：L2-001-紧急救援-25-分" class="headerlink" title="样题三：L2-001 紧急救援 (25 分)"></a>样题三：<strong>L2-001 紧急救援 (25 分)</strong></h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><p>作为一个城市的应急救援队伍的负责人，你有一张特殊的全国地图。在地图上显示有多个分散的城市和一些连接城市的快速道路。每个城市的救援队数量和每一条连接两个城市的快速道路长度都标在地图上。当其他城市有紧急求助电话给你的时候，你的任务是带领你的救援队尽快赶往事发地，同时，一路上召集尽可能多的救援队。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第一行给出4个正整数<em>N</em>、<em>M</em>、<em>S</em>、<em>D</em>，其中<em>N</em>（2≤<em>N</em>≤500）是城市的个数，顺便假设城市的编号为0 ~ (<em>N</em>−1)；<em>M</em>是快速道路的条数；<em>S</em>是出发地的城市编号；<em>D</em>是目的地的城市编号。</p><p>第二行给出<em>N</em>个正整数，其中第<em>i</em>个数是第<em>i</em>个城市的救援队的数目，数字间以空格分隔。随后的<em>M</em>行中，每行给出一条快速道路的信息，分别是：城市1、城市2、快速道路的长度，中间用空格分开，数字均为整数且不超过500。输入保证救援可行且最优解唯一。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>第一行输出最短路径的条数和能够召集的最多的救援队数量。第二行输出从<em>S</em>到<em>D</em>的路径中经过的城市编号。数字间以空格分隔，输出结尾不能有多余空格。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span><br><span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">10</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span>结尾无空行<br></code></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">2</span> <span class="hljs-number">60</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>结尾无空行<br></code></pre></td></tr></table></figure><h4 id="最短路径条数："><a href="#最短路径条数：" class="headerlink" title="最短路径条数："></a>最短路径条数：</h4><p>如果通过 <strong>index</strong> 点能把最短路径更新，那么最短路径条数就是从起点到<strong>index</strong>的最短路径条数。</p><p><img src="/2022/01/03/Algorithm003/134d3eff026ab567e3a337c45dda5d61.png"></p><p>例如这张图，如果<strong>index</strong>可以更新当前的最短路径，并且s通过1和2到达index点的距离都相等，那么从s到d的最短路径条数其实就是从s到index的最短路径条数，由此可以得到第一个式子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">num[i]=num[index];<br></code></pre></td></tr></table></figure><p>如果通过index点的周转，距离不变（依然是最小值），这说明通过index周转使得最短路径条数又多出了一部分，只需要用之前得到的最短路径条数加上num[index]即可，由此得出第二个式子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">num[i]+=num[index];<br></code></pre></td></tr></table></figure><h4 id="程序源代码：-2"><a href="#程序源代码：-2" class="headerlink" title="程序源代码："></a>程序源代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n,m,s,d;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">505</span>;<br><span class="hljs-keyword">int</span> arr[maxn];   <span class="hljs-comment">//记录每个城市的援兵数</span><br><span class="hljs-keyword">int</span> dismap[maxn][maxn];    <span class="hljs-comment">//储存X-Y的长度</span><br><span class="hljs-keyword">int</span> path[maxn];    <span class="hljs-comment">//前驱节点</span><br><span class="hljs-keyword">int</span> dis[maxn];     <span class="hljs-comment">//最短路径</span><br><span class="hljs-keyword">int</span> cost[maxn];    <span class="hljs-comment">//最大救援队数量</span><br><span class="hljs-keyword">int</span> vis[maxn];     <span class="hljs-comment">//用来记录该点是否已经是最短路径的点</span><br><span class="hljs-keyword">int</span> num[maxn];     <span class="hljs-comment">//最短路径的条数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(path,<span class="hljs-number">-1</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(path));<br>    <span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    <span class="hljs-built_in">memset</span>(cost,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(cost));<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <span class="hljs-built_in">memset</span>(num,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(num));<br>    dis[s]=<span class="hljs-number">0</span>;<br>    cost[s]=arr[s];   <span class="hljs-comment">//此时救援队数量等于出发点的救援队数量</span><br>    num[s]=<span class="hljs-number">1</span>;         <span class="hljs-comment">//一条最短路径</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> k=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> maxt =<span class="hljs-number">0x3f</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(!vis[i]&amp;&amp;dis[i]&lt;maxt)<br>            &#123;<br>                k=i;<br>                maxt=dis[i];<br>            &#125;<br>        &#125;<br>        vis[k]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br><br>            <span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;dis[j]&gt;dis[k]+dismap[k][j])&#123;<br>                dis[j]=dis[k]+dismap[k][j];<br>                path[j]=k;<br>                num[j]=num[k];   <span class="hljs-comment">//如果能更新，说明产生了新的最短路径，num[i]变为从s到k的路径条数</span><br>                cost[j] = cost[k]+arr[j];  <span class="hljs-comment">//产生了新的最短路径,人数为cost[k]+arr[j]</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!vis[j]&amp;&amp;dis[j]==dis[k]+dismap[k][j])&#123; <span class="hljs-comment">//存在新的最短路径</span><br>                num[j]+=num[k];   <span class="hljs-comment">//最短路径条数更新</span><br>                <span class="hljs-comment">//无论援兵量是否能更新，既然已经有了另一条路与当前最短路长度相同</span><br><span class="hljs-comment">//就说明多了一些最短路条数</span><br>                <span class="hljs-keyword">if</span>(cost[j]&lt;cost[k]+arr[j])   <span class="hljs-comment">//援兵量能更新</span><br>                &#123;<br>                    cost[j]=cost[k]+arr[j];<br>                    path[j]=k;<br><br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">print</span>(path[x]);<br>    cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;d;<br>    <span class="hljs-built_in">memset</span>(arr,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(arr));<br>    <span class="hljs-built_in">memset</span>(dismap,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dismap));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;n ; ++j) &#123;<br>        cin&gt;&gt;arr[j];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;m ; ++i) &#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        <span class="hljs-comment">//此题是无向图</span><br>        dismap[x][y]=z;<br>        dismap[y][x]=z;<br>    &#125;<br>    <span class="hljs-built_in">dijk</span>(s);<br>    cout&lt;&lt;num[d]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;cost[d]&lt;&lt;endl;<span class="hljs-comment">//打印最短路径条数和最大援兵数</span><br>    <span class="hljs-built_in">print</span>(path[d]);<br>    cout&lt;&lt;d&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="相关题目链接："><a href="#相关题目链接：" class="headerlink" title="相关题目链接："></a>相关题目链接：</h2><p>[<a href="https://www.luogu.com.cn/problem/P2404"><a href="https://www.luogu.com.cn/problem/P1364">P1364 医院设置 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></a>]:     “ 样题一：P1364 医院设置”</p><p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805073643683840">题目详情 - L2-001 紧急救援 (25 分) (pintia.cn)</a> ：样题三：L2-001 紧急救援 (25 分)</p><p><a href="https://www.freesion.com/article/8556971489/">L2-001 紧急救援 (25 分)&amp;&amp;dijkstra - 灰信网（软件开发博客聚合） (freesion.com)</a>：样题三参考资料</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPI学习(五)-环形拓扑上利用MPI进行通信</title>
    <link href="/2022/01/01/mpi005/"/>
    <url>/2022/01/01/mpi005/</url>
    
    <content type="html"><![CDATA[<h1 id="MPI学习-五-环形拓扑上利用MPI进行通信"><a href="#MPI学习-五-环形拓扑上利用MPI进行通信" class="headerlink" title="MPI学习(五)-环形拓扑上利用MPI进行通信"></a>MPI学习(五)-环形拓扑上利用MPI进行通信</h1><p>这里，我们演示了一个简单的MPI程序，它使用阻塞通信原语send和receive来进行广播操作：</p><h2 id="程序运行平台"><a href="#程序运行平台" class="headerlink" title="程序运行平台"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>mpi/intel/2017.5</p><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><p>mpic++ mpi005.cpp -o mpi005</p><h2 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h2><p>srun -p amd_256 -N 1 -n  4   ./mpi005(使用SLURM任务调度系统)</p><p>1个分区，核数为4</p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mpi.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> rank, value, size;<br>MPI_Status status;<br><span class="hljs-built_in">MPI_Init</span>(&amp;argc, &amp;argv);<br><span class="hljs-built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;rank);<br><span class="hljs-built_in">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;size);<br><br><span class="hljs-keyword">if</span>(rank == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;value );<br><span class="hljs-comment">/*Master node sends out the value*/</span><br><span class="hljs-built_in">MPI_Send</span>(&amp;value, <span class="hljs-number">1</span>, MPI_INT, rank + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, MPI_COMM_WORLD);&#125;<span class="hljs-comment">//</span><br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">/*Slave nodes block on receive the send on the value*/</span><br>        <span class="hljs-comment">//接受上一个进程发送的消息</span><br><span class="hljs-built_in">MPI_Recv</span>(&amp;value, <span class="hljs-number">1</span>, MPI_INT, rank - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,MPI_COMM_WORLD, &amp;status);<br><br><span class="hljs-keyword">if</span>(rank &lt; size<span class="hljs-number">-1</span>)<br>&#123;<br>            <span class="hljs-comment">//向下一个进程发送消息</span><br><span class="hljs-built_in">MPI_Send</span>(&amp;value, <span class="hljs-number">1</span>, MPI_INT, rank + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, MPI_COMM_WORLD);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;process %d got %d\n&quot;</span>, rank, value);<br>&#125;<br><span class="hljs-built_in">MPI_Finalize</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br><br></code></pre></td></tr></table></figure><h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//5 5为读入的value值</span><br>process <span class="hljs-number">1</span> got <span class="hljs-number">5</span><br>process <span class="hljs-number">2</span> got <span class="hljs-number">5</span><br>process <span class="hljs-number">3</span> got <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graph-Data Structure</title>
    <link href="/2021/12/22/algorithm002/"/>
    <url>/2021/12/22/algorithm002/</url>
    
    <content type="html"><![CDATA[<h1 id="Graph-Data-Structure"><a href="#Graph-Data-Structure" class="headerlink" title="Graph-Data Structure"></a>Graph-Data Structure</h1><h2 id="1-邻接表的应用"><a href="#1-邻接表的应用" class="headerlink" title="1.邻接表的应用"></a>1.邻接表的应用</h2><h3 id="样题一：L2-025-分而治之-25-分"><a href="#样题一：L2-025-分而治之-25-分" class="headerlink" title="样题一：L2-025 分而治之 (25 分)"></a>样题一：L2-025 分而治之 (25 分)</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>分而治之，各个击破是兵家常用的策略之一。在战争中，我们希望首先攻下敌方的部分城市，使其剩余的城市变成孤立无援，然后再分头各个击破。为此参谋部提供了若干打击方案。本题就请你编写程序，判断每个方案的可行性。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在第一行给出两个正整数 N 和 M（均不超过10 000），分别为敌方城市个数（于是默认城市从 1 到 N 编号）和连接两城市的通路条数。随后 M 行，每行给出一条通路所连接的两个城市的编号，其间以一个空格分隔。在城市信息之后给出参谋部的系列方案，即一个正整数 K （≤ 100）和随后的 K 行方案，每行按以下格式给出：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Np v<span class="hljs-selector-attr">[1]</span> v<span class="hljs-selector-attr">[2]</span> ... v<span class="hljs-selector-attr">[Np]</span><br></code></pre></td></tr></table></figure><p>其中 <code>Np</code> 是该方案中计划攻下的城市数量，后面的系列 <code>v[i]</code> 是计划攻下的城市编号。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每一套方案，如果可行就输出<code>YES</code>，否则输出<code>NO</code>。</p><h4 id="程序源代码："><a href="#程序源代码：" class="headerlink" title="程序源代码："></a>程序源代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; v[<span class="hljs-number">10005</span>]; <span class="hljs-comment">//声明邻接表</span><br>    <span class="hljs-keyword">int</span> n,num;<br>    cin&gt;&gt;n&gt;&gt;num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;num ; ++i) &#123;<br>        <span class="hljs-keyword">int</span> start,end;<br>        cin&gt;&gt;start&gt;&gt;end;<br>        <span class="hljs-comment">//创建邻接表</span><br>        v[start].<span class="hljs-built_in">push_back</span>(end); <br>        v[end].<span class="hljs-built_in">push_back</span>(start);<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> k;<br>    cin&gt;&gt;k;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;k ; ++j) &#123;<br>        <span class="hljs-keyword">int</span> np;<br>        cin&gt;&gt;np;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> book[<span class="hljs-number">10005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//每轮炸毁城市初始化</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=np ; ++i) &#123;<br>            <span class="hljs-keyword">int</span> dead;<br>            cin&gt;&gt;dead;<br>            book[dead]=<span class="hljs-number">1</span>; <span class="hljs-comment">//被炸毁的城市标记为1</span><br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;=n ; ++l) &#123;<br>            <br>            <span class="hljs-keyword">if</span>(book[l]==<span class="hljs-number">0</span>)<span class="hljs-comment">//没有被炸毁的城市</span><br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;v[l].<span class="hljs-built_in">size</span>() ; ++i) &#123; <span class="hljs-comment">//遍历该城市的邻接表</span><br>                    <br>                    <span class="hljs-keyword">if</span>(book[v[l][i]]==<span class="hljs-number">0</span>) <span class="hljs-comment">//存在着还连通的城市</span><br>                    &#123;<br>                        flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//说明方案不可行</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="程序输入："><a href="#程序输入：" class="headerlink" title="程序输入："></a>程序输入：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">10</span> <span class="hljs-number">11</span><br><span class="hljs-number">8</span> <span class="hljs-number">7</span><br><span class="hljs-number">6</span> <span class="hljs-number">8</span><br><span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-number">8</span> <span class="hljs-number">4</span><br><span class="hljs-number">8</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-number">9</span> <span class="hljs-number">8</span><br><span class="hljs-number">9</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">10</span><br><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">4</span> <span class="hljs-number">10</span> <span class="hljs-number">3</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br><span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span><br><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">8</span><br><span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="程序输出："><a href="#程序输出：" class="headerlink" title="程序输出："></a>程序输出：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">NO<br>YES<br>YES<br>NO<br>NO<br></code></pre></td></tr></table></figure><h2 id="题目相关链接："><a href="#题目相关链接：" class="headerlink" title="题目相关链接："></a>题目相关链接：</h2><p>[<a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805056195379200]">https://pintia.cn/problem-sets/994805046380707840/problems/994805056195379200]</a>:     “样例一:L2-025 分而治之 (25 分)”</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>Graph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DFS-深度优先搜索</title>
    <link href="/2021/12/21/algorithm001/"/>
    <url>/2021/12/21/algorithm001/</url>
    
    <content type="html"><![CDATA[<h1 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS-深度优先搜索"></a>DFS-深度优先搜索</h1><h2 id="样题1-全排列"><a href="#样题1-全排列" class="headerlink" title="样题1-全排列"></a>样题1-全排列</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>输入一个数n，输出n的全排列</p><h3 id="程序源代码："><a href="#程序源代码：" class="headerlink" title="程序源代码："></a>程序源代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> book[<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> step)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span>(step==n+<span class="hljs-number">1</span>)  <span class="hljs-comment">//这里表示dfs结束,没有可以排的数字了</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>;  i&lt;=n ; i++) &#123;<br>            cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(book[i]==<span class="hljs-number">0</span>)  <span class="hljs-comment">//说明数字i还没有被使用,可以用来排列</span><br>        &#123;<br>            a[step]=i;<span class="hljs-comment">//排列数字i</span><br>            book[i]=<span class="hljs-number">1</span>;<span class="hljs-comment">//标记数字i为已使用</span><br>            <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//继续排列没有使用的数字</span><br>            book[i]=<span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//这里表示dfs调用结束了,意思是数字i已经全部排列完了，但还需要</span><br>            <span class="hljs-comment">//按照顺序将数字i收回，重新排列。</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//dfs函数的开始</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="程序输入："><a href="#程序输入：" class="headerlink" title="程序输入："></a>程序输入：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="程序输出："><a href="#程序输出：" class="headerlink" title="程序输出："></a>程序输出：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="样题二-自然数的拆分问题"><a href="#样题二-自然数的拆分问题" class="headerlink" title="样题二-自然数的拆分问题"></a>样题二-自然数的拆分问题</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p>任何一个大于1的自然数n，总可以拆分成若干个小于n的自然数之和。现在给你一个自然数n，要求你求出n的拆分成一些数字的和。每个拆分后的序列中的数字从小到大排序。然后你需要输出这些序列，其中字典序小的序列需要优先输出。</p><h3 id="程序源代码：-1"><a href="#程序源代码：-1" class="headerlink" title="程序源代码："></a>程序源代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> num;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100000</span>]=&#123;<span class="hljs-number">1</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t<span class="hljs-number">-1</span>;i++)<span class="hljs-comment">//输出一种拆分方案</span><br><br>            <span class="hljs-keyword">if</span>(i!=t<span class="hljs-number">-1</span>) cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>;<br>            <span class="hljs-keyword">else</span> cout&lt;&lt;a[i];<br>        cout&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=a[t<span class="hljs-number">-1</span>];i&lt;=n;i++) &#123;<br>        <span class="hljs-keyword">if</span>(i&lt;num)<span class="hljs-comment">//当前数i要大于等于前一位数，且不超过n</span><br>        &#123;<br>            a[t]=i;<span class="hljs-comment">//保存当前拆分的数i</span><br>            n-=i;<span class="hljs-comment">//n减去数i，n的值将继续拆分</span><br>            <span class="hljs-built_in">dfs</span>(n,t+<span class="hljs-number">1</span>);<br>            n+=i;<span class="hljs-comment">//回溯：加上拆分的数，以便产生所有可能的拆分</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;num;<br>    <span class="hljs-built_in">dfs</span>(num,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="程序输入：-1"><a href="#程序输入：-1" class="headerlink" title="程序输入："></a>程序输入：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h3 id="程序输出：-1"><a href="#程序输出：-1" class="headerlink" title="程序输出："></a>程序输出：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span><br><span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">2</span><br><span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">3</span><br><span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">2</span><br><span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">4</span><br><span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span><br><span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">5</span><br><span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">2</span>+<span class="hljs-number">2</span><br><span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">4</span><br><span class="hljs-number">1</span>+<span class="hljs-number">3</span>+<span class="hljs-number">3</span><br><span class="hljs-number">1</span>+<span class="hljs-number">6</span><br><span class="hljs-number">2</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span><br><span class="hljs-number">2</span>+<span class="hljs-number">5</span><br><span class="hljs-number">3</span>+<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="样例三：L2-038-病毒溯源-25-分"><a href="#样例三：L2-038-病毒溯源-25-分" class="headerlink" title="样例三：L2-038 病毒溯源 (25 分)"></a>样例三：<strong>L2-038 病毒溯源 (25 分)</strong></h2><h3 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h3><p>病毒容易发生变异。某种病毒可以通过突变产生若干变异的毒株，而这些变异的病毒又可能被诱发突变产生第二代变异，如此继续不断变化。</p><p>现给定一些病毒之间的变异关系，要求你找出其中最长的一条变异链。</p><p>在此假设给出的变异都是由突变引起的，不考虑复杂的基因重组变异问题 —— 即每一种病毒都是由唯一的一种病毒突变而来，并且不存在循环变异的情况。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行中给出一个正整数 <em>N</em>（≤104），即病毒种类的总数。于是我们将所有病毒从 0 到 <em>N</em>−1 进行编号。</p><p>随后 <em>N</em> 行，每行按以下格式描述一种病毒的变异情况：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">k</span> 变异株<span class="hljs-number">1</span> …… 变异株k<br></code></pre></td></tr></table></figure><p>其中 <code>k</code> 是该病毒产生的变异毒株的种类数，后面跟着每种变异株的编号。第 <em>i</em> 行对应编号为 <em>i</em> 的病毒（0≤<em>i</em>&lt;<em>N</em>）。题目保证病毒源头有且仅有一个。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先输出从源头开始最长变异链的长度。</p><p>在第二行中输出从源头开始最长的一条变异链，编号间以 1 个空格分隔，行首尾不得有多余空格。如果最长链不唯一，则输出最小序列。</p><p>注：我们称序列 { <em>a</em>1,⋯,<em>a**n</em> } 比序列 { <em>b</em>1,⋯,<em>b**n</em> } “小”，如果存在 1≤<em>k</em>≤<em>n</em> 满足 <em>a**i</em>=<em>b**i</em> 对所有 <em>i</em>&lt;<em>k</em> 成立，且 <em>a**k</em>&lt;<em>b**k</em>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs in">10<br>3 6 4 8<br>0<br>0<br>0<br>2 5 9<br>0<br>1 7<br>1 2<br>0<br>2 3 1结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br>0 4 9 1结尾无空行<br></code></pre></td></tr></table></figure><h3 id="程序源代码：-2"><a href="#程序源代码：-2" class="headerlink" title="程序源代码："></a>程序源代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; ans, tmp;<br><span class="hljs-keyword">bool</span> a[<span class="hljs-number">10005</span>][<span class="hljs-number">10005</span>];<br><span class="hljs-keyword">bool</span> book[<span class="hljs-number">10005</span>];<br><span class="hljs-keyword">int</span> maxn;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(len&gt;maxn)<br>    &#123;<br>        maxn =len;<br>        ans = tmp;<br><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == maxn &amp;&amp; tmp &lt; ans)<br>    &#123;<br>        ans = tmp;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n ; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[root][i]) <span class="hljs-comment">//连通</span><br>        &#123;<br>            tmp.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-built_in">dfs</span>(i,len+<span class="hljs-number">1</span>);<br>            tmp.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> root=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n ; ++i) &#123;<br>        <span class="hljs-keyword">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;k ; ++j) &#123;<br>            <span class="hljs-keyword">int</span> x;<br>            cin&gt;&gt;x;<br>            book[x]=<span class="hljs-literal">true</span>;    <span class="hljs-comment">//用来判断谁是病毒源头，题目给出病毒源头有且仅有一个</span><br>            a[i][x]=<span class="hljs-literal">true</span>;    <span class="hljs-comment">//使用邻接矩阵来储存图，连通为true，否则为false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(book[root]) root++;  <span class="hljs-comment">//寻找病毒源头</span><br>    tmp.<span class="hljs-built_in">push_back</span>(root);<br>    <span class="hljs-built_in">dfs</span>(root,<span class="hljs-number">1</span>); <span class="hljs-comment">//从病毒源头开始dfs</span><br>    cout&lt;&lt;ans.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>    <span class="hljs-comment">//输出格式控制</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i &lt; ans.<span class="hljs-built_in">size</span>(); i++)&#123;<br>       <span class="hljs-keyword">if</span>(i!=ans.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)<br>       &#123;<br>           cout&lt;&lt;ans[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>       &#125;<br>       <span class="hljs-keyword">else</span><br>       &#123;<br>           cout&lt;&lt;ans[i];<br>       &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="样题四：L2-020-功夫传人-25-分"><a href="#样题四：L2-020-功夫传人-25-分" class="headerlink" title="样题四：L2-020 功夫传人 (25 分)"></a>样题四：<strong>L2-020 功夫传人 (25 分)</strong></h2><h3 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h3><p>一门武功能否传承久远并被发扬光大，是要看缘分的。一般来说，师傅传授给徒弟的武功总要打个折扣，于是越往后传，弟子们的功夫就越弱…… 直到某一支的某一代突然出现一个天分特别高的弟子（或者是吃到了灵丹、挖到了特别的秘笈），会将功夫的威力一下子放大N倍 —— 我们称这种弟子为“得道者”。</p><p>这里我们来考察某一位祖师爷门下的徒子徒孙家谱：假设家谱中的每个人只有1位师傅（除了祖师爷没有师傅）；每位师傅可以带很多徒弟；并且假设辈分严格有序，即祖师爷这门武功的每个第<code>i</code>代传人只能在第<code>i-1</code>代传人中拜1个师傅。我们假设已知祖师爷的功力值为<code>Z</code>，每向下传承一代，就会减弱<code>r%</code>，除非某一代弟子得道。现给出师门谱系关系，要求你算出所有得道者的功力总值。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出3个正整数，分别是：<em>N</em>（≤105）——整个师门的总人数（于是每个人从0到<em>N</em>−1编号，祖师爷的编号为0）；<em>Z</em>——祖师爷的功力值（不一定是整数，但起码是正数）；<em>r</em> ——每传一代功夫所打的折扣百分比值（不超过100的正数）。接下来有<em>N</em>行，第<em>i</em>行（<em>i</em>=0,⋯,<em>N</em>−1）描述编号为<em>i</em>的人所传的徒弟，格式为：</p><p><em>K**i</em> ID[1] ID[2] ⋯ ID[<em>K**i</em>]</p><p>其中<em>K**i</em>是徒弟的个数，后面跟的是各位徒弟的编号，数字间以空格间隔。<em>K**i</em>为零表示这是一位得道者，这时后面跟的一个数字表示其武功被放大的倍数。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出所有得道者的功力总值，只保留其整数部分。题目保证输入和正确的输出都不超过1010。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs in">10 18.0 1.00<br>3 2 3 5<br>1 9<br>1 4<br>1 7<br>0 7<br>2 6 1<br>1 8<br>0 9<br>0 4<br>0 3结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">404<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="程序源代码：-3"><a href="#程序源代码：-3" class="headerlink" title="程序源代码："></a>程序源代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; tree[<span class="hljs-number">100000</span>];  <span class="hljs-comment">//用于邻接表建树</span><br><span class="hljs-keyword">int</span> book[<span class="hljs-number">100000</span>];<br><span class="hljs-keyword">double</span> sum;<br><span class="hljs-keyword">double</span> r;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">double</span> power)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(book[index]) <span class="hljs-comment">//是得道者就乘他的倍数 </span><br>    &#123;<br>        sum += power * book[index];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;tree[index].<span class="hljs-built_in">size</span>();i++)  <span class="hljs-comment">//遍历整个树</span><br>    &#123;<br>        <span class="hljs-built_in">dfs</span>(tree[index][i],power*r);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">double</span> z;<br>    cin&gt;&gt;n&gt;&gt;z&gt;&gt;r;<br>    r=(<span class="hljs-number">100</span>-r)/<span class="hljs-number">100.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)   <span class="hljs-comment">//这个弟子是否为得道者</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> power;<br>            cin&gt;&gt;power;<br>            book[i]=power;   <span class="hljs-comment">//记录得道者放大倍数</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> id;<br>                cin&gt;&gt;id;<br>                tree[i].<span class="hljs-built_in">push_back</span>(id);      <span class="hljs-comment">//使用邻接表建树</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,z);<br>    cout&lt;&lt;(<span class="hljs-keyword">int</span>)sum&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目相关链接："><a href="#题目相关链接：" class="headerlink" title="题目相关链接："></a>题目相关链接：</h2><p>[<a href="https://www.luogu.com.cn/problem/P2404">P2404 自然数的拆分问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>]:     “ 样例二-自然数的拆分问题”</p><p>[<a href="https://www.luogu.com.cn/problem/P2404"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652361">题目详情 - L2-038 病毒溯源 (25 分) (pintia.cn)</a></a>]:     “ 样例三-L2-038 病毒溯源 (25 分)”</p><p>[<a href="https://www.luogu.com.cn/problem/P2404"><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805059118809088">题目详情 - L2-020 功夫传人 (25 分) (pintia.cn)</a></a>]:     “ 样例四-L2-020 功夫传人 (25 分)”</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning(一) 一个神经元网络-线性函数</title>
    <link href="/2021/12/09/tensorflow001/"/>
    <url>/2021/12/09/tensorflow001/</url>
    
    <content type="html"><![CDATA[<h1 id="一个神经元的网络-线性函数"><a href="#一个神经元的网络-线性函数" class="headerlink" title="一个神经元的网络(线性函数)"></a>一个神经元的网络(线性函数)</h1><p>线性函数 y = 2 * x -1 </p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tensorflow <span class="hljs-keyword">import</span> keras<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment">#构建模型</span><br>model = keras.Sequential([keras.layers.Dense(units=<span class="hljs-number">1</span>,input_shape=[<span class="hljs-number">1</span>])])<br>model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;sgd&#x27;</span>,loss=<span class="hljs-string">&#x27;mean_squared_error&#x27;</span>)<br><span class="hljs-comment">#准备训练数据</span><br>xs=np.array([-<span class="hljs-number">1.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">2.0</span>,<span class="hljs-number">3.0</span>,<span class="hljs-number">4.0</span>], dtype = <span class="hljs-built_in">float</span>)<br>ys=np.array([-<span class="hljs-number">3.0</span>,-<span class="hljs-number">1.0</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">3.0</span>,<span class="hljs-number">5.0</span>,<span class="hljs-number">7.0</span>], dtype = <span class="hljs-built_in">float</span>)<br><span class="hljs-comment">#训练模型</span><br>model.fit(xs,ys,epochs=<span class="hljs-number">500</span>)<br></code></pre></td></tr></table></figure><h2 id="训练模型过程-截取"><a href="#训练模型过程-截取" class="headerlink" title="训练模型过程(截取)"></a>训练模型过程(截取)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">Epoch <span class="hljs-number">1</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 388ms/step - loss: <span class="hljs-number">3.4976</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 3ms/step - loss: <span class="hljs-number">2.9127</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 3ms/step - loss: <span class="hljs-number">2.4493</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 3ms/step - loss: <span class="hljs-number">2.0814</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 4ms/step - loss: <span class="hljs-number">1.7888</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 4ms/step - loss: <span class="hljs-number">1.5555</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 4ms/step - loss: <span class="hljs-number">1.3689</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 4ms/step - loss: <span class="hljs-number">1.2191</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 3ms/step - loss: <span class="hljs-number">1.0983</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 4ms/step - loss: <span class="hljs-number">1.0005</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 4ms/step - loss: <span class="hljs-number">0.9207</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 2ms/step - loss: <span class="hljs-number">0.8551</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">500</span><br><span class="hljs-number">1</span>/<span class="hljs-number">1</span> [==============================] - 0s 5ms/step - loss: <span class="hljs-number">0.8009</span><br></code></pre></td></tr></table></figure><h2 id="使用模型"><a href="#使用模型" class="headerlink" title="使用模型"></a>使用模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用模型(输入)</span><br><span class="hljs-built_in">print</span>(model.predict([<span class="hljs-number">2021</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输出</span><br>[[<span class="hljs-number">4036.6035</span>]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入</span><br>model.predict([<span class="hljs-number">10.0</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输出</span><br>array([[<span class="hljs-number">18.984968</span>]], dtype=float32)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPI学习(四)-广播、散播、收集、归约和全归约的MPI语法</title>
    <link href="/2021/11/27/mpi004/"/>
    <url>/2021/11/27/mpi004/</url>
    
    <content type="html"><![CDATA[<h1 id="MPI-广播、散播、收集、归约和全归约的MPI语法"><a href="#MPI-广播、散播、收集、归约和全归约的MPI语法" class="headerlink" title="MPI-广播、散播、收集、归约和全归约的MPI语法"></a>MPI-广播、散播、收集、归约和全归约的MPI语法</h1><h2 id="广播：MPI-Bcast"><a href="#广播：MPI-Bcast" class="headerlink" title="广播：MPI_Bcast"></a>广播：MPI_Bcast</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MPI_Bcast</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *buffer, <span class="hljs-keyword">int</span> count, MPI_Datatype datatype, <span class="hljs-keyword">int</span> root, MPI_Comm comm)</span></span><br><span class="hljs-function"><span class="hljs-comment">//int root 广播数据的根进程的标识号(整型)</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/27/mpi004/mpi001.png"></p><h2 id="散播：MPI-Scatter"><a href="#散播：MPI-Scatter" class="headerlink" title="散播：MPI_Scatter"></a>散播：MPI_Scatter</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MPI_Scatter</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *sendbuf, <span class="hljs-keyword">int</span> sendcount, MPI_Datatype sendtype, <span class="hljs-keyword">void</span> *recvbuf, <span class="hljs-keyword">int</span> root, MPI_Comm comm)</span></span><br><span class="hljs-function"><span class="hljs-comment">//void *sendbuf 发送消息缓冲区的起始地址(可选数据类型)</span></span><br><span class="hljs-function"><span class="hljs-comment">//void *recvbuf 接收消息缓冲区的起始地址(可选数据类型)</span></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/27/mpi004/mpi002.png"></p><h2 id="收集：MPI-Gather"><a href="#收集：MPI-Gather" class="headerlink" title="收集：MPI_Gather"></a>收集：MPI_Gather</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MPI_Gather</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *sendbuf, <span class="hljs-keyword">int</span> sendcount, MPI_Datatype sendtype, <span class="hljs-keyword">void</span> *recvbuf, <span class="hljs-keyword">int</span> recvcount, MPI_Datatype recvtype, <span class="hljs-keyword">int</span> root, MPI_Comm comm)</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/27/mpi004/mpi003.png"></p><h2 id="归约：MPI-Reduce"><a href="#归约：MPI-Reduce" class="headerlink" title="归约：MPI_Reduce"></a>归约：MPI_Reduce</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MPI_Reduce</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *sendbuf, <span class="hljs-keyword">void</span> *recvbuf, <span class="hljs-keyword">int</span> count, MPI_Datatype datatype, MPI_Op op, <span class="hljs-keyword">int</span> root,  MPI_Comm comm)</span></span><br><span class="hljs-function"><span class="hljs-comment">//MPI_Op op  归约操作符(句柄)</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/27/mpi004/mpi004.png"></p><p><img src="/2021/11/27/mpi004/mpi005.png"></p><h2 id="全归约：MPI-Allreduce"><a href="#全归约：MPI-Allreduce" class="headerlink" title="全归约：MPI_Allreduce"></a>全归约：MPI_Allreduce</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MPI_Allreduce</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *sendbuf, <span class="hljs-keyword">void</span> *recvbuf, <span class="hljs-keyword">int</span> count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/27/mpi004/mpi006.png"></p>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPI学习(三)-通过OpenmMP使用MPI</title>
    <link href="/2021/11/26/mpi003/"/>
    <url>/2021/11/26/mpi003/</url>
    
    <content type="html"><![CDATA[<h1 id="MPI-通过OpenMP使用MPI"><a href="#MPI-通过OpenMP使用MPI" class="headerlink" title="MPI-通过OpenMP使用MPI"></a>MPI-通过OpenMP使用MPI</h1><p>OpenMP是另一种为基于共享内存的并行编程提供的应用编程接口。当人们想使用多核处理器时，通常使用OpenMP。下面是一个“Hello World”程序，使用了MPI和OpenMP的API。</p><h2 id="程序运行平台"><a href="#程序运行平台" class="headerlink" title="程序运行平台"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>mpi/intel/2017.5</p><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><p>mpic++    -fopenmp  mpi003.cpp -o mpi003</p><h2 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h2><p>srun -p amd_256 -N 2 -n  2   ./mpi003(使用SLURM任务调度系统)</p><p>2个分区，核数为2</p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span>  <span class="hljs-comment">//OpenMP所需要的头文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mpi.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> myid, numprocs;<br><span class="hljs-keyword">int</span> namelen;<br><span class="hljs-keyword">int</span> thread_id , nthreads;<br><span class="hljs-keyword">char</span> processor_name[MPI_MAX_PROCESSOR_NAME];<br><span class="hljs-built_in">MPI_Init</span>(&amp;argc, &amp;argv);<br><span class="hljs-built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;myid);<br><span class="hljs-built_in">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;numprocs);<br><span class="hljs-built_in">MPI_Get_processor_name</span>(processor_name, &amp;namelen);<br>    <span class="hljs-comment">//构造并行区</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel private(thread_id, nthreads) num_threads(8) <span class="hljs-comment">//设置线程数为8</span></span><br>&#123;<br>thread_id = <span class="hljs-built_in">omp_get_thread_num</span>();  <span class="hljs-comment">//获得当前线程的id</span><br>nthreads = <span class="hljs-built_in">omp_get_num_threads</span>();  <span class="hljs-comment">//获得总的线程数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread number %d (on %d) for the MPI process number %d (on %d) [%s]\n&quot;</span>,<br>thread_id, nthreads, myid, numprocs, processor_name);<br>&#125; <br><span class="hljs-built_in">MPI_Finalize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">Thread number <span class="hljs-number">0</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">1</span> (on <span class="hljs-number">2</span>) [eb1316.para.bscc]<br>Thread number <span class="hljs-number">4</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">1</span> (on <span class="hljs-number">2</span>) [eb1316.para.bscc]<br>Thread number <span class="hljs-number">3</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">1</span> (on <span class="hljs-number">2</span>) [eb1316.para.bscc]<br>Thread number <span class="hljs-number">5</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">1</span> (on <span class="hljs-number">2</span>) [eb1316.para.bscc]<br>Thread number <span class="hljs-number">2</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">1</span> (on <span class="hljs-number">2</span>) [eb1316.para.bscc]<br>Thread number <span class="hljs-number">6</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">1</span> (on <span class="hljs-number">2</span>) [eb1316.para.bscc]<br>Thread number <span class="hljs-number">0</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">0</span> (on <span class="hljs-number">2</span>) [eb1314.para.bscc]<br>Thread number <span class="hljs-number">1</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">0</span> (on <span class="hljs-number">2</span>) [eb1314.para.bscc]<br>Thread number <span class="hljs-number">2</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">0</span> (on <span class="hljs-number">2</span>) [eb1314.para.bscc]<br>Thread number <span class="hljs-number">5</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">0</span> (on <span class="hljs-number">2</span>) [eb1314.para.bscc]<br>Thread number <span class="hljs-number">1</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">1</span> (on <span class="hljs-number">2</span>) [eb1316.para.bscc]<br>Thread number <span class="hljs-number">7</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">1</span> (on <span class="hljs-number">2</span>) [eb1316.para.bscc]<br>Thread number <span class="hljs-number">3</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">0</span> (on <span class="hljs-number">2</span>) [eb1314.para.bscc]<br>Thread number <span class="hljs-number">4</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">0</span> (on <span class="hljs-number">2</span>) [eb1314.para.bscc]<br>Thread number <span class="hljs-number">6</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">0</span> (on <span class="hljs-number">2</span>) [eb1314.para.bscc]<br>Thread number <span class="hljs-number">7</span> (on <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> the MPI process number <span class="hljs-number">0</span> (on <span class="hljs-number">2</span>) [eb1314.para.bscc]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPI学习(二)-非阻塞通信程序(无缓冲)</title>
    <link href="/2021/11/26/mpi002/"/>
    <url>/2021/11/26/mpi002/</url>
    
    <content type="html"><![CDATA[<h1 id="MPI-非阻塞通信程序-无缓冲"><a href="#MPI-非阻塞通信程序-无缓冲" class="headerlink" title="MPI-非阻塞通信程序(无缓冲)"></a>MPI-非阻塞通信程序(无缓冲)</h1><p>非阻塞通信程序(无缓冲)是由MPI中的Isend和Ireceive来表示的，即异步通信。在这种情况下，发送进程发布一条“发送授权请求”(挂起的消息)的消息，并继续其程序的执行。当接收进程发布一个“同意发送”许可指令时，数据传输就启动了。所有的这些机制都是通过操作系统的信号进行内部管理的。当数据传输完成时，检查状态并指示进程是否可以安全地进行读/写数据。                                                                      需要注意的是原语MPI_Wait(&amp;request,&amp;status)等到数据传输完成(或中断后)，使用一个成为status的状态变量来指示数据传输是否已经成功。</p><h2 id="相关的MPI原语"><a href="#相关的MPI原语" class="headerlink" title="相关的MPI原语"></a>相关的MPI原语</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MPI_Isend</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *buf, <span class="hljs-keyword">int</span> count, MPI_Datatype datatype, <span class="hljs-keyword">int</span> dest, <span class="hljs-keyword">int</span> tag, MPI_comm comm, MPI_Request *req)</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MPI_Irecv</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *buf, <span class="hljs-keyword">int</span> count, MPI_Datatype datatype, <span class="hljs-keyword">int</span> src, <span class="hljs-keyword">int</span> tag, MPI_Comm comm, MPI_Request *req)</span></span><br></code></pre></td></tr></table></figure><p>MPI_Request结构中经常使用的：当*req操作完成时返回 *flag = 1,否则返回 0。</p><p>原语MPI_Wait一直等到*req所执行的操作完成。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MPI_Wait</span><span class="hljs-params">(MPI_Request *req, MPI_Status *status)</span></span><br></code></pre></td></tr></table></figure><h2 id="程序运行平台"><a href="#程序运行平台" class="headerlink" title="程序运行平台"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>mpi/intel/2017.5</p><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><p>mpicc  mpi002.cpp -o mpi002</p><h2 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h2><p>mpirun -np 10   ./mpi002(本地提交,采取10个进程)</p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mpi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> myid, numprocs;<br><span class="hljs-keyword">int</span> tag,source,destination,count;<br><span class="hljs-keyword">int</span> buffer;<br>MPI_Status status;<br>MPI_Request request;<br><span class="hljs-built_in">MPI_Init</span>(&amp;argc,&amp;argv);<br><span class="hljs-built_in">MPI_Comm_size</span>(MPI_COMM_WORLD,&amp;numprocs);<br><span class="hljs-built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD,&amp;myid);<br>tag =<span class="hljs-number">2021</span>; <span class="hljs-comment">/* any integer to tag messages */</span><br>source = <span class="hljs-number">0</span>;<br>count = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(myid != source )<br>&#123;<br>buffer =<span class="hljs-number">2077</span>;<br><span class="hljs-comment">//其他进程向0号进程发送消息</span><br><span class="hljs-built_in">MPI_Isend</span>(&amp;buffer,count,MPI_INT,source,tag,MPI_COMM_WORLD,&amp;request);<br><span class="hljs-built_in">MPI_Wait</span>(&amp;request,&amp;status);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;processor %d send %d to processor %d\n&quot;</span>,myid,buffer,source);<br>&#125;<br><br><span class="hljs-keyword">if</span>(myid == source )<br>&#123;<br><span class="hljs-comment">//0号进程接收来自其他进程的消息</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;numprocs;i++)<br>&#123;<br><span class="hljs-built_in">MPI_Irecv</span>(&amp;buffer,count,MPI_INT,i,tag,MPI_COMM_WORLD,&amp;request);<br><span class="hljs-built_in">MPI_Wait</span>(&amp;request,&amp;status);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;processor %d received %d from processor %d \n&quot;</span>,myid,buffer,i);<br>&#125;<br><br>&#125;<br><br><span class="hljs-built_in">MPI_Finalize</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="程序输出"><a href="#程序输出" class="headerlink" title="程序输出"></a>程序输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">processor <span class="hljs-number">2</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">3</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">5</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">6</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">7</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">8</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">9</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">4</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">1</span> send <span class="hljs-number">2077</span> to processor <span class="hljs-number">0</span><br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">1</span> <br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">2</span> <br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">3</span> <br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">4</span> <br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">5</span> <br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">6</span> <br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">7</span> <br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">8</span> <br>processor <span class="hljs-number">0</span> received <span class="hljs-number">2077</span> from processor <span class="hljs-number">9</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AVX向量化学习(三)-if判断的处理</title>
    <link href="/2021/11/24/AVX003/"/>
    <url>/2021/11/24/AVX003/</url>
    
    <content type="html"><![CDATA[<h1 id="AVX-if判断的处理"><a href="#AVX-if判断的处理" class="headerlink" title="AVX-if判断的处理"></a>AVX-if判断的处理</h1><p>使用AVX指令集对if判断进行处理</p><h2 id="使用到的AVX函数介绍"><a href="#使用到的AVX函数介绍" class="headerlink" title="使用到的AVX函数介绍"></a>使用到的AVX函数介绍</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256d _mm256_blendv_pd (__m256d a, __m256d b, __m256d mask)<br></code></pre></td></tr></table></figure><p><strong>Description</strong></p><p>Blend packed double-precision (64-bit) floating-point elements from a and b using mask, and store the results in dst.</p><p><strong>Operation</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">FOR j := <span class="hljs-number">0</span> to <span class="hljs-number">3</span><br>i := j*<span class="hljs-number">64</span><br>IF mask[i+<span class="hljs-number">63</span>]<br>dst[i+<span class="hljs-number">63</span>:i] := b[i+<span class="hljs-number">63</span>:i]<br>ELSE<br>dst[i+<span class="hljs-number">63</span>:i] := a[i+<span class="hljs-number">63</span>:i]<br>FI<br>ENDFOR<br>dst[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256d _mm256_cmp_pd (__m256d a, __m256d b, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> imm8)<br></code></pre></td></tr></table></figure><p><strong>Description</strong></p><p>Compare packed double-precision (64-bit) floating-point elements in a and b based on the comparison operand specified by imm8, and store the results in dst.</p><p><strong>Operation</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">CASE</span> (imm8[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>]) OF<br><span class="hljs-number">0</span>: OP := _CMP_EQ_OQ<br><span class="hljs-number">1</span>: OP := _CMP_LT_OS<br><span class="hljs-number">2</span>: OP := _CMP_LE_OS<br><span class="hljs-number">3</span>: OP := _CMP_UNORD_Q <br><span class="hljs-number">4</span>: OP := _CMP_NEQ_UQ<br><span class="hljs-number">5</span>: OP := _CMP_NLT_US<br><span class="hljs-number">6</span>: OP := _CMP_NLE_US<br><span class="hljs-number">7</span>: OP := _CMP_ORD_Q<br><span class="hljs-number">8</span>: OP := _CMP_EQ_UQ<br><span class="hljs-number">9</span>: OP := _CMP_NGE_US<br><span class="hljs-number">10</span>: OP := _CMP_NGT_US<br><span class="hljs-number">11</span>: OP := _CMP_FALSE_OQ<br><span class="hljs-number">12</span>: OP := _CMP_NEQ_OQ<br><span class="hljs-number">13</span>: OP := _CMP_GE_OS<br><span class="hljs-number">14</span>: OP := _CMP_GT_OS<br><span class="hljs-number">15</span>: OP := _CMP_TRUE_UQ<br><span class="hljs-number">16</span>: OP := _CMP_EQ_OS<br><span class="hljs-number">17</span>: OP := _CMP_LT_OQ<br><span class="hljs-number">18</span>: OP := _CMP_LE_OQ<br><span class="hljs-number">19</span>: OP := _CMP_UNORD_S<br><span class="hljs-number">20</span>: OP := _CMP_NEQ_US<br><span class="hljs-number">21</span>: OP := _CMP_NLT_UQ<br><span class="hljs-number">22</span>: OP := _CMP_NLE_UQ<br><span class="hljs-number">23</span>: OP := _CMP_ORD_S<br><span class="hljs-number">24</span>: OP := _CMP_EQ_US<br><span class="hljs-number">25</span>: OP := _CMP_NGE_UQ <br><span class="hljs-number">26</span>: OP := _CMP_NGT_UQ <br><span class="hljs-number">27</span>: OP := _CMP_FALSE_OS <br><span class="hljs-number">28</span>: OP := _CMP_NEQ_OS <br><span class="hljs-number">29</span>: OP := _CMP_GE_OQ<br><span class="hljs-number">30</span>: OP := _CMP_GT_OQ<br><span class="hljs-number">31</span>: OP := _CMP_TRUE_US<br>ESAC<br>FOR j := <span class="hljs-number">0</span> to <span class="hljs-number">3</span><br>i := j*<span class="hljs-number">64</span><br>dst[i+<span class="hljs-number">63</span>:i] := ( a[i+<span class="hljs-number">63</span>:i] OP b[i+<span class="hljs-number">63</span>:i] ) ? <span class="hljs-number">0xFFFFFFFFFFFFFFFF</span> : <span class="hljs-number">0</span><br>ENDFOR<br>dst[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;immintrin.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> a[<span class="hljs-number">9</span>]=&#123;<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">4.4</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.6</span>,<span class="hljs-number">7.7</span>,<span class="hljs-number">8.8</span>,<span class="hljs-number">2.1</span>&#125;;<br><span class="hljs-keyword">double</span> b[<span class="hljs-number">9</span>]=&#123;<span class="hljs-number">2.1</span>,<span class="hljs-number">3.2</span>,<span class="hljs-number">6.4</span>,<span class="hljs-number">8.6</span>,<span class="hljs-number">3.7</span>,<span class="hljs-number">9.9</span>,<span class="hljs-number">5.1</span>,<span class="hljs-number">4.2</span>,<span class="hljs-number">6.6</span>&#125;;<br><span class="hljs-keyword">double</span> d[<span class="hljs-number">9</span>]=&#123;<span class="hljs-number">0</span>&#125;;     <span class="hljs-comment">//记录原始if判断后的值</span><br><span class="hljs-keyword">double</span> e[<span class="hljs-number">9</span>]=&#123;<span class="hljs-number">0</span>&#125;;     <span class="hljs-comment">//记录AVX-if判断后的值</span><br><br>__m256d v0;<br>__m256d v1;<br>__m256d v2,v3;<br>__m256d v4;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;b[i])<br>&#123;<br>d[i] = a[i];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>d[i]=b[i];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(;i&lt;<span class="hljs-number">9</span><span class="hljs-number">-4</span>;i+=<span class="hljs-number">4</span>)<br>&#123;<br>v0 = _mm256_loadu_pd(a+i);<br>v1 = _mm256_loadu_pd(b+i);<br>v2=_mm256_add_pd(v0,v1);<br>v3 =_mm256_blendv_pd(v0,v1,_mm256_cmp_pd(v0,v1,_CMP_LE_OQ));<br>_mm256_storeu_pd(e+i,v3);<br><br>&#125;<br>    <br><span class="hljs-keyword">for</span>(;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;b[i])<br>&#123;<br>e[i] = a[i];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>e[i]=b[i];<br>&#125;<br>&#125;<br>    <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is d.\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>,d[i]);<br>&#125;<br>    <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is e with AVX.\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>,e[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure><h2 id="程序输出"><a href="#程序输出" class="headerlink" title="程序输出"></a>程序输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">this</span> is d.<br><span class="hljs-number">2.100000</span><br><span class="hljs-number">3.200000</span><br><span class="hljs-number">6.400000</span><br><span class="hljs-number">8.600000</span><br><span class="hljs-number">5.500000</span><br><span class="hljs-number">9.900000</span><br><span class="hljs-number">7.700000</span><br><span class="hljs-number">8.800000</span><br><span class="hljs-number">6.600000</span><br><span class="hljs-keyword">this</span> is e with AVX.<br><span class="hljs-number">2.100000</span><br><span class="hljs-number">3.200000</span><br><span class="hljs-number">6.400000</span><br><span class="hljs-number">8.600000</span><br><span class="hljs-number">5.500000</span><br><span class="hljs-number">9.900000</span><br><span class="hljs-number">7.700000</span><br><span class="hljs-number">8.800000</span><br><span class="hljs-number">6.600000</span><br></code></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/]">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>:     “ Intel® Intrinsics Guide”</p><p>[<a href="https://stackoverflow.com/questions/16988199/how-to-choose-avx-compare-predicate-variants">simd - How to choose AVX compare predicate variants - Stack Overflow</a>]:     “Stack Overflow”</p><p>[<a href="https://www.officedaytime.com/simd512e/simdimg/si.php?f=blendvpd">blendvpd (officedaytime.com)</a>]:     “_mm256_Blendv_pd()原理解释”</p>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AVX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPI学习(一)-简单的发送接收</title>
    <link href="/2021/11/23/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/"/>
    <url>/2021/11/23/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="MPI-简单的发送接收"><a href="#MPI-简单的发送接收" class="headerlink" title="MPI-简单的发送接收"></a>MPI-简单的发送接收</h1><p>打印来自进程问候语句的MPI程序</p><h2 id="所使用的MPI原语"><a href="#所使用的MPI原语" class="headerlink" title="所使用的MPI原语"></a>所使用的MPI原语</h2><p><img src="/2021/11/23/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/mpi001.png"></p><p><img src="/2021/11/23/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/mpi002.png"></p><h2 id="程序运行平台"><a href="#程序运行平台" class="headerlink" title="程序运行平台"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>mpi/intel/2017.5</p><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><p>mpicc  3.1.cpp -o 3.1</p><h2 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h2><p>mpirun -np 4 ./3.1(本地提交,采取4个进程)</p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mpi.h&gt;</span>   <span class="hljs-comment">//头文件</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX_STRING = <span class="hljs-number">100</span> ;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> greeting[MAX_STRING];<br><span class="hljs-keyword">int</span> comm_sz;<br><span class="hljs-keyword">int</span> my_rank;<br>MPI_Status status;<br><br><span class="hljs-built_in">MPI_Init</span>(&amp;argc,&amp;argv);<br><br><span class="hljs-built_in">MPI_Comm_size</span>(MPI_COMM_WORLD,&amp;comm_sz);<br><span class="hljs-built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD,&amp;my_rank);<br><br><span class="hljs-keyword">if</span>(my_rank != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//其他进程向0号进程发消息</span><br><span class="hljs-built_in">sprintf</span>(greeting,<span class="hljs-string">&quot;Greetings from process %d of %d!&quot;</span>,my_rank,comm_sz);<br><span class="hljs-built_in">MPI_Send</span>(greeting,<span class="hljs-built_in">strlen</span>(greeting)+<span class="hljs-number">1</span>,MPI_CHAR,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,MPI_COMM_WORLD); <br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Greetings from process %d of %d!\n&quot;</span>,my_rank,comm_sz);<br><span class="hljs-comment">//0号进程接受来自其他进程的消息并输出</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> q=<span class="hljs-number">1</span>;q&lt;comm_sz;q++)<br>&#123;<br><span class="hljs-built_in">MPI_Recv</span>(greeting,MAX_STRING,MPI_CHAR,q,<span class="hljs-number">0</span>,MPI_COMM_WORLD,&amp;status);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,greeting);<br>&#125;<br>&#125;<br><span class="hljs-built_in">MPI_Finalize</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Greetings from process <span class="hljs-number">0</span> of <span class="hljs-number">4</span>!<br>Greetings from process <span class="hljs-number">1</span> of <span class="hljs-number">4</span>!<br>Greetings from process <span class="hljs-number">2</span> of <span class="hljs-number">4</span>!<br>Greetings from process <span class="hljs-number">3</span> of <span class="hljs-number">4</span>!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AVX向量化学习(二)-内存对齐的应用</title>
    <link href="/2021/11/15/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2021/11/15/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="AVX指令集的简单操作-内存对齐版"><a href="#AVX指令集的简单操作-内存对齐版" class="headerlink" title="AVX指令集的简单操作(内存对齐版)"></a>AVX指令集的简单操作(内存对齐版)</h1><p>使用AVX指令集进行2个double型的数组相加操作</p><h2 id="常用的内存对齐函数"><a href="#常用的内存对齐函数" class="headerlink" title="常用的内存对齐函数"></a>常用的内存对齐函数</h2><p>因为AVX中要求mem__addr必须在32字节边界上对齐，否则可能会产生通用保护异常。  </p><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">double</span>*a =(<span class="hljs-keyword">double</span>*)<span class="hljs-built_in">memalign</span>(<span class="hljs-number">32</span>,<span class="hljs-number">9</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>));<br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">double</span>*a =(<span class="hljs-keyword">double</span>*)_mm_malloc(<span class="hljs-number">9</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>),<span class="hljs-number">32</span>);<br></code></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">double</span>*a =(<span class="hljs-keyword">double</span>*)<span class="hljs-built_in">aligned_alloc</span>(<span class="hljs-number">32</span>,<span class="hljs-number">9</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>));<br></code></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__attribute__ ((<span class="hljs-built_in">aligned</span>(<span class="hljs-number">32</span>)))<span class="hljs-keyword">double</span> a[<span class="hljs-number">9</span>]  =&#123;<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">4.4</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.6</span>,<span class="hljs-number">7.7</span>,<span class="hljs-number">8.8</span>,<span class="hljs-number">2.1</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="使用到的AVX函数介绍"><a href="#使用到的AVX函数介绍" class="headerlink" title="使用到的AVX函数介绍"></a>使用到的AVX函数介绍</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256d _mm256_load_pd (<span class="hljs-keyword">double</span> <span class="hljs-keyword">const</span> * mem_addr)<br></code></pre></td></tr></table></figure><p><strong>Description</strong></p><p>Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into dst. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.</p><p><strong>Operation</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">dst[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] := MEM[mem_addr+<span class="hljs-number">255</span>:mem_addr]<br>dst[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256 _mm256_add_ps (__m256 a, __m256 b)<br></code></pre></td></tr></table></figure><p><strong>Description</strong></p><p>Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.</p><p><strong>Operation</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FOR</span> j := <span class="hljs-number">0</span> to <span class="hljs-number">7</span><br><span class="hljs-attribute">i</span> := j*<span class="hljs-number">32</span><br><span class="hljs-attribute">dst</span>[i+<span class="hljs-number">31</span>:i] := a[i+<span class="hljs-number">31</span>:i] + b[i+<span class="hljs-number">31</span>:i]<br><span class="hljs-attribute">ENDFOR</span><br><span class="hljs-attribute">dst</span>[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="3-stream的作用：绕过缓存直接写入内存"><a href="#3-stream的作用：绕过缓存直接写入内存" class="headerlink" title="3.stream的作用：绕过缓存直接写入内存"></a>3.stream的作用：绕过缓存直接写入内存</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">void</span> _mm256_stream_pd (<span class="hljs-keyword">double</span> * mem_addr, __m256d a)<br></code></pre></td></tr></table></figure><p><strong>Description</strong></p><p>Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory using a non-temporal memory hint. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.</p><p><strong>Operation</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">MEM[mem_addr+<span class="hljs-number">255</span>:mem_addr] := a[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="样例程序举例："><a href="#样例程序举例：" class="headerlink" title="样例程序举例："></a>样例程序举例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;immintrin.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span>*a =(<span class="hljs-keyword">double</span>*)<span class="hljs-built_in">memalign</span>(<span class="hljs-number">32</span>,<span class="hljs-number">9</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>));<br><span class="hljs-keyword">double</span>*b =(<span class="hljs-keyword">double</span>*)<span class="hljs-built_in">memalign</span>(<span class="hljs-number">32</span>,<span class="hljs-number">4</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>));<br><span class="hljs-keyword">double</span> af[<span class="hljs-number">9</span>]=&#123;<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">4.4</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.6</span>,<span class="hljs-number">7.7</span>,<span class="hljs-number">8.8</span>,<span class="hljs-number">2.1</span>&#125; ;<br><span class="hljs-keyword">double</span> bf[<span class="hljs-number">9</span>]=&#123;<span class="hljs-number">2.1</span>,<span class="hljs-number">3.2</span>,<span class="hljs-number">6.4</span>,<span class="hljs-number">8.6</span>,<span class="hljs-number">3.7</span>,<span class="hljs-number">9.9</span>,<span class="hljs-number">5.1</span>,<span class="hljs-number">4.2</span>,<span class="hljs-number">6.6</span>&#125;;<br><span class="hljs-keyword">double</span>*c =(<span class="hljs-keyword">double</span>*)<span class="hljs-built_in">memalign</span>(<span class="hljs-number">32</span>,<span class="hljs-number">4</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br>a[i]=af[i];<br>b[i]=bf[i];<br>&#125;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>__m256d v0;<br>__m256d v1;<br>__m256d v2;<br><span class="hljs-keyword">for</span>(;i&lt;<span class="hljs-number">9</span><span class="hljs-number">-4</span>;i+=<span class="hljs-number">4</span>)<br>&#123;<br>v0 = _mm256_load_pd(a+i);<br>v1 = _mm256_load_pd(b+i);<br>v2=_mm256_add_pd(v0,v1);<br> _mm256_stream_pd(c+i,v2);<br><br>&#125;<br><span class="hljs-keyword">for</span>(;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br>c[i]=a[i]+b[i];<br><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is c.\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>,c[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure><h2 id="样例程序输出："><a href="#样例程序输出：" class="headerlink" title="样例程序输出："></a>样例程序输出：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">this</span> is c.<br><span class="hljs-number">3.200000</span><br><span class="hljs-number">5.400000</span><br><span class="hljs-number">9.700000</span><br><span class="hljs-number">13.000000</span><br><span class="hljs-number">9.200000</span><br><span class="hljs-number">16.500000</span><br><span class="hljs-number">12.800000</span><br><span class="hljs-number">13.000000</span><br><span class="hljs-number">8.700000</span><br></code></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/]">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>:     “Intel® Intrinsics Guide”</p>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AVX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存对齐</title>
    <link href="/2021/10/24/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    <url>/2021/10/24/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</url>
    
    <content type="html"><![CDATA[<h1 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h1><h2 id="CPU读取内存的方式"><a href="#CPU读取内存的方式" class="headerlink" title="CPU读取内存的方式"></a>CPU读取内存的方式</h2><p>CPU读取内存的方式其实非常复杂，为了更进一步的了解相关的原理，需要对计算机组成原理进行深度学习。</p><h3 id="Memory-access-granularity-内存读取粒度"><a href="#Memory-access-granularity-内存读取粒度" class="headerlink" title="Memory access granularity(内存读取粒度)"></a>Memory access granularity(内存读取粒度)</h3><p>However, your computer’s processor does not read from and write to memory in byte-sized chunks. Instead, it accesses memory in two-, four-, eight- 16- or even 32-byte chunks. We’ll call the size in which a processor accesses memory its memory access granularity.</p><p>CPU把内存当成是一块一块的，块的大小可以是2，4，8，16字节大小，因此CPU在读取内存时是一块一块进行读取的。块大小成为<em>memory access granularity（粒度）</em> 本人把它翻译为“内存读取粒度” 。</p><p><a href="https://www.cnblogs.com/feng9exe/p/10059543.html">https://www.cnblogs.com/feng9exe/p/10059543.html</a> ”内存对齐“</p><h2 id="内存对齐举例"><a href="#内存对齐举例" class="headerlink" title="内存对齐举例"></a>内存对齐举例</h2><p>假设此计算机的内存读取粒度是4。</p><h3 id="如果内存对齐时"><a href="#如果内存对齐时" class="headerlink" title="如果内存对齐时"></a>如果内存对齐时</h3><p>前提知识：</p><p>1 Byte = 8bit </p><p>1 int8 占用 1 Byte</p><p>1 int16 占用 2 Byte</p><p>1 int32 占用 4 Byte</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//一个结构体的定义如下</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br>    int8 a;<br>    int32 b;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th align="center">4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th></tr></thead><tbody><tr><td>int8 a</td><td></td><td></td><td></td><td align="center">int32 b</td><td>int32 b</td><td>int32 b</td><td>int32 b</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>我们可以发现int8 a储存在0号内存上，占用1个Byte，1-3号内存空下了3个Byte。int32 b储存在了4-7号内存，一共4个Byte。</p><p>由于此计算机的内存读取粒度时是4</p><p>当需要读取a(0号内存)时，计算机会读取0-3号一组内存，然后去掉1-3号内存。访问次数1次。</p><p>当需要读取b(4-7号内存时)，计算机会读取4-7号内存，访问次数1次。</p><h3 id="如果内存没有对齐时"><a href="#如果内存没有对齐时" class="headerlink" title="如果内存没有对齐时"></a>如果内存没有对齐时</h3><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th></tr></thead><tbody><tr><td>int8 a</td><td>int32 b</td><td>int32 b</td><td>int32 b</td><td>int32 b</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>我们可以发现int8 a储存在0号内存上，占用了1个Byte。int32 b储存在1-4号内存上，一共4个Byte。</p><p>由于此计算机的内存读取粒度时是4</p><p>当需要读取a(0号内存)时，计算机会读取0-3号一组内存，然后去掉1-3号内存。访问次数1次。</p><p>当需要读取b(1-4号内存)时，计算机会先读取0-3号一组内存，去掉0号内存，再读取4-7号一组内存，去掉5-7号内存，随后再拼接1-3号内存和4号内存组成完整的b。访问次数2次。</p><h2 id="内存对齐的目的"><a href="#内存对齐的目的" class="headerlink" title="内存对齐的目的"></a>内存对齐的目的</h2><p>合理的内存对齐可以高效的利用硬件性能，减少处理器内存访问次数。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.bilibili.com/video/BV1Vt4y1m7DP?from=search&amp;amp;seid=13964421962700904405&amp;amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1Vt4y1m7DP?from=search&amp;amp;seid=13964421962700904405&amp;amp;spm_id_from=333.337.0.0</a> “内存对齐”</p><p><a href="https://www.bilibili.com/video/BV1v64y1X7YP?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1v64y1X7YP?spm_id_from=333.999.0.0</a> “内存对齐对程序性能的影响”</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AVX向量化学习(一)</title>
    <link href="/2021/10/23/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
    <url>/2021/10/23/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="AVX指令集的简单操作"><a href="#AVX指令集的简单操作" class="headerlink" title="AVX指令集的简单操作"></a>AVX指令集的简单操作</h1><p>使用AVX指令集进行2个double型的数组相加操作</p><h2 id="使用到的AVX函数介绍"><a href="#使用到的AVX函数介绍" class="headerlink" title="使用到的AVX函数介绍"></a>使用到的AVX函数介绍</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256 _mm256_loadu_ps (<span class="hljs-keyword">float</span> <span class="hljs-keyword">const</span> * mem_addr)<br></code></pre></td></tr></table></figure><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into dst. mem_addr does not need to be aligned on any particular boundary.</p><h3 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">dst[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>] := MEM[mem_addr+<span class="hljs-number">255</span>:mem_addr]<br>dst[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">__m256d _mm256_add_pd (__m256d a, __m256d b)<br></code></pre></td></tr></table></figure><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.</p><h3 id="Operation-1"><a href="#Operation-1" class="headerlink" title="Operation"></a>Operation</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">FOR j := <span class="hljs-number">0</span> to <span class="hljs-number">3</span><br>i := j*<span class="hljs-number">64</span><br>dst[i+<span class="hljs-number">63</span>:i] := a[i+<span class="hljs-number">63</span>:i] + b[i+<span class="hljs-number">63</span>:i]<br>ENDFOR<br>dst[MAX:<span class="hljs-number">256</span>] := <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">void</span> _mm256_storeu_pd (<span class="hljs-keyword">double</span> * mem_addr, __m256d a)<br></code></pre></td></tr></table></figure><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory. mem_addr does not need to be aligned on any particular boundary.</p><h3 id="Operation-2"><a href="#Operation-2" class="headerlink" title="Operation"></a>Operation</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">MEM[mem_addr+<span class="hljs-number">255</span>:mem_addr] := a[<span class="hljs-number">255</span>:<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="未进行AVX向量化的情况"><a href="#未进行AVX向量化的情况" class="headerlink" title="未进行AVX向量化的情况"></a>未进行AVX向量化的情况</h2><h3 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> a[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">4.4</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.6</span>,<span class="hljs-number">7.7</span>,<span class="hljs-number">8.8</span>,<span class="hljs-number">2.1</span>&#125;;<br><span class="hljs-keyword">double</span> b[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">2.1</span>,<span class="hljs-number">3.2</span>,<span class="hljs-number">6.4</span>,<span class="hljs-number">8.6</span>,<span class="hljs-number">3.7</span>,<span class="hljs-number">9.9</span>,<span class="hljs-number">5.1</span>,<span class="hljs-number">4.2</span>,<span class="hljs-number">6.6</span>&#125;;<br><span class="hljs-keyword">double</span> c[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br>c[i]=a[i]+b[i];<br><br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is c.\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>,c[i]);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure><h3 id="程序输出"><a href="#程序输出" class="headerlink" title="程序输出"></a>程序输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">this</span> is c.<br><span class="hljs-number">3.200000</span><br><span class="hljs-number">5.400000</span><br><span class="hljs-number">9.700000</span><br><span class="hljs-number">13.000000</span><br><span class="hljs-number">9.200000</span><br><span class="hljs-number">16.500000</span><br><span class="hljs-number">12.800000</span><br><span class="hljs-number">13.000000</span><br><span class="hljs-number">8.700000</span><br></code></pre></td></tr></table></figure><h2 id="进行AVX向量化的情况"><a href="#进行AVX向量化的情况" class="headerlink" title="进行AVX向量化的情况"></a>进行AVX向量化的情况</h2><h3 id="程序源代码-1"><a href="#程序源代码-1" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;immintrin.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> a[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">4.4</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.6</span>,<span class="hljs-number">7.7</span>,<span class="hljs-number">8.8</span>,<span class="hljs-number">2.1</span>&#125;;<br><span class="hljs-keyword">double</span> b[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">2.1</span>,<span class="hljs-number">3.2</span>,<span class="hljs-number">6.4</span>,<span class="hljs-number">8.6</span>,<span class="hljs-number">3.7</span>,<span class="hljs-number">9.9</span>,<span class="hljs-number">5.1</span>,<span class="hljs-number">4.2</span>,<span class="hljs-number">6.6</span>&#125;;<br><span class="hljs-keyword">double</span> c[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>__m256d v0;<br>__m256d v1;<br>__m256d v2;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(;i&lt;<span class="hljs-number">9</span><span class="hljs-number">-4</span>;i+=<span class="hljs-number">4</span>)<br>&#123;<br>v0 = _mm256_loadu_pd(a+i);<br>v1 = _mm256_loadu_pd(b+i);<br>v2=_mm256_add_pd(v0,v1);<br> _mm256_storeu_pd(c+i,v2);<br><br>&#125;<br><span class="hljs-keyword">for</span>(;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br>c[i]=a[i]+b[i];<br><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is c with AVX.\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>,c[i]);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure><h3 id="程序输出-1"><a href="#程序输出-1" class="headerlink" title="程序输出"></a>程序输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">this</span> is c with AVX.<br><span class="hljs-number">3.200000</span><br><span class="hljs-number">5.400000</span><br><span class="hljs-number">9.700000</span><br><span class="hljs-number">13.000000</span><br><span class="hljs-number">9.200000</span><br><span class="hljs-number">16.500000</span><br><span class="hljs-number">12.800000</span><br><span class="hljs-number">13.000000</span><br><span class="hljs-number">8.700000</span><br></code></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/]">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>:     “ Intel® Intrinsics Guide”</p>]]></content>
    
    
    <categories>
      
      <category>HPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AVX</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
