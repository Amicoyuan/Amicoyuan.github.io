<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Amicoyuan • Posts by &#34;blocking&#34; tag</title>
        <link>https://xingyuanjie.top</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 26 Feb 2023 18:02:29 +0800</pubDate>
        <lastBuildDate>Sun, 26 Feb 2023 18:02:29 +0800</lastBuildDate>
        <category>AVX</category>
        <category>Data Structure</category>
        <category>String</category>
        <category>Find</category>
        <category>STL</category>
        <category>C++</category>
        <category>Set</category>
        <category>团体程序设计天梯赛</category>
        <category>Sort</category>
        <category>LinkList</category>
        <category>双向链表</category>
        <category>Graph</category>
        <category>邻接表</category>
        <category>Vector</category>
        <category>Binary tree</category>
        <category>BFS</category>
        <category>模拟</category>
        <category>邻接矩阵</category>
        <category>DFS</category>
        <category>结构体</category>
        <category>贪心</category>
        <category>Double类型相等比较</category>
        <category>并查集</category>
        <category>Map</category>
        <category>Pair</category>
        <category>CMU</category>
        <category>CSAPP</category>
        <category>CUDA</category>
        <category>Linux</category>
        <category>Tensorflow</category>
        <category>Machine Learning</category>
        <category>MPI</category>
        <category>Matrix</category>
        <category>GEMM</category>
        <category>AVX2</category>
        <category>dgemm</category>
        <category>Cache</category>
        <category>Blocking</category>
        <category>Intel</category>
        <category>LeetCode</category>
        <category>双指针</category>
        <category>数组翻转</category>
        <category>哈希表</category>
        <category>Travel</category>
        <category>前缀和</category>
        <category>Mirror</category>
        <category>牛客</category>
        <category>Numactl</category>
        <category>OpenMP</category>
        <category>C/C++</category>
        <category>register</category>
        <category>Slurm</category>
        <category>性能分析工具</category>
        <category>gcov</category>
        <category>bool</category>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/26/cache001/</guid>
            <title>Cache Blocking Techniques【个人翻译】</title>
            <link>https://xingyuanjie.top/2023/02/26/cache001/</link>
            <category>Cache</category>
            <category>Blocking</category>
            <pubDate>Sun, 26 Feb 2023 18:02:29 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;Cache-Blocking-Techniques&#34;&gt;&lt;a href=&#34;#Cache-Blocking-Techniques&#34; class=&#34;headerlink&#34; title=&#34;Cache Blocking Techniques&#34;&gt;&lt;/a&gt;Cache Blocking Techniques&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;文章来源：&lt;/strong&gt;&lt;a href=&#34;https://www.intel.cn/content/www/cn/zh/developer/articles/technical/cache-blocking-techniques.html&#34;&gt;Cache Blocking Techniques (intel.cn)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文章作者：&lt;/strong&gt;&lt;a href=&#34;https://community.intel.com/cipcp26785/plugins/custom/intel/intel/custom.userprofile?id=3UpJu61CDTyShonSVJNwDw==&amp;iv=8843887237217530&#34;&gt;Amanda K Sharp&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Overview&#34;&gt;&lt;a href=&#34;#Overview&#34; class=&#34;headerlink&#34; title=&#34;Overview&#34;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;一类重要的算法更改涉及分块数据结构以适应缓存。通过组织数据内存访问，可以用一个大得多的数据集的一个小子集加载缓存。接下来的想法是在缓存中处理这个数据块。通过在缓存中使用&amp;#x2F;重用这些数据，我们减少了访问内存的需要(减少内存带宽压力)。&lt;/p&gt;
&lt;h3 id=&#34;Topic&#34;&gt;&lt;a href=&#34;#Topic&#34; class=&#34;headerlink&#34; title=&#34;Topic&#34;&gt;&lt;/a&gt;Topic&lt;/h3&gt;&lt;p&gt;分块是一种著名的优化技术，可以帮助避免许多应用程序中的内存带宽瓶颈。分块背后的关键思想是利用应用程序中固有的数据重用，确保数据在多个用途之间保持在缓存中。分块可以在1-D、2-D或3-D空间数据结构上执行。一些迭代应用程序可以进一步受益于多次迭代的分块(通常称为时间分块)，以进一步缓解带宽瓶颈。就代码更改而言，分块通常涉及循环分割和交换的组合。在大多数应用程序代码中，通过对分块因子进行一些参数化，对源进行正确的更改，用户可以最好地执行分块。&lt;/p&gt;
&lt;h3 id=&#34;Original-Source&#34;&gt;&lt;a href=&#34;#Original-Source&#34; class=&#34;headerlink&#34; title=&#34;Original Source&#34;&gt;&lt;/a&gt;Original Source&lt;/h3&gt;&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;for (body1 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body1 &amp;lt; NBODIES; body1 ++) &amp;#123;&lt;br&gt;   for (body2=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body2 &amp;lt; NBODIES; body2++) &amp;#123;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;OUT&lt;/span&gt;[body1] += compute(body1, body2);&lt;br&gt;   &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在本例中，数据(body2)来自内存。假设NBODIES很大，我们将无法在缓存中重用。此应用程序受内存带宽限制。应用程序将以内存到CPU的速度运行，而不是最佳速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Modified Source (with 1-D blocking):&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;for (body2 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body2 &amp;lt; NBODIES; body2 += &lt;span class=&#34;hljs-keyword&#34;&gt;BLOCK&lt;/span&gt;) &amp;#123;&lt;br&gt;   for (body1=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body1 &amp;lt; NBODIES; body1 ++) &amp;#123;&lt;br&gt;      for (body22=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body22 &amp;lt; &lt;span class=&#34;hljs-keyword&#34;&gt;BLOCK&lt;/span&gt;; body22 ++) &amp;#123;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;OUT&lt;/span&gt;[body1] += compute(body1, body2 + body22);&lt;br&gt;      &amp;#125;&lt;br&gt;   &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在修改后的代码中，数据(body22)在缓存中被保留和重用，从而获得更好的性能。&lt;/p&gt;
&lt;p&gt;例如，上面的代码片段显示了一个分块NBody代码的示例。有两个循环(body1和body2)遍历所有主体。顶部的原始代码流经内部循环中的整个主体集，并且必须在每次迭代中从内存中加载body2值。底部的分块代码是通过将body2循环分解为一个迭代多个BLOCK中的body的外部循环和一个迭代BLOCK中的元素的内部body22循环，并交织body1和body2循环来获得的。这段代码在body1循环的多次迭代中重用了一组BLOCK body2值。如果BLOCK被选中，使得这组值适合缓存，内存流量就会降低一个BLOCK的因子。&lt;/p&gt;
&lt;p&gt;以下是来自OpenMP*版本的NBody基准测试的相关代码片段(使用CHUNK_SIZE因子进行分块应用)。&lt;/p&gt;
&lt;p&gt;在这种情况下，循环展开-阻塞转换被表示为一个pragma，并由编译器完成。在这种情况下，研究-opt-report的输出可以确认编译器确实为你的循环执行了展开阻塞优化。&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;#define CHUNK_SIZE &lt;span class=&#34;hljs-number&#34;&gt;8192&lt;/span&gt;&lt;br&gt;&lt;br&gt;#pragma omp parallel &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;(body_start_index)&lt;br&gt;  for(body_start_index = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body_start_index &amp;lt; global_number_of_bodies; body_start_index += CHUNK_SIZE) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; i;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; body_end_index = body_start_index + CHUNK_SIZE;&lt;br&gt;&lt;br&gt;    #pragma omp for &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;(i) schedule(guided)&lt;br&gt;    #pragma unroll_and_jam (&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&lt;br&gt;    for(i=starting_index; i&amp;lt;ending_index; i++) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; j;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; acc_x_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, acc_y_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, acc_z_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;      for(j=body_start_index; j&amp;lt;body_end_index; j+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_x_0 = Input_Position_X[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_X[i];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_y_0 = Input_Position_Y[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_Y[i];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_z_0 = Input_Position_Z[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_Z[i];&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; gamma_0 = delta_x_0*delta_x_0 + delta_y_0*delta_y_0 + delta_z_0*delta_z_0 + epsilon_sqr;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; s_0 = Mass[j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]/(gamma_0 * &lt;span class=&#34;hljs-built_in&#34;&gt;SQRT&lt;/span&gt;(gamma_0));&lt;br&gt;        acc_x_0 += s_0*delta_x_0;&lt;br&gt;        acc_y_0 += s_0*delta_y_0;&lt;br&gt;        acc_z_0 += s_0*delta_z_0;&lt;br&gt;      &amp;#125;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] += acc_x_0;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] += acc_y_0;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] += acc_z_0;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是Fortran中的一个矩阵乘法代码示例，其中用户执行高级块展开-分块转换(在修改版本中)，涉及本地复制数组以获得最佳性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fortran Source Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; j=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; k = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;      c(i,j) = c(i,j) + a(i,k) * b(k,j)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Modified Fortran Source:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; JJ = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TJ&lt;br&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; KK = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TK&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; jjj = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tj,N-jj+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)                     &lt;span class=&#34;hljs-comment&#34;&gt;! BCOPY - no transpose&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; kkk = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tk,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;             p(kkk,jjj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = B(kk+kkk-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, jj+jjj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; II = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TI&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; iii = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;             &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(ti,N-ii+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)                   &lt;span class=&#34;hljs-comment&#34;&gt;!ACOPY - transpose&lt;/span&gt;&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; kkk = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tk,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;                Q(kkk,iii) = A(ii+iii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, kk+kkk-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; J = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tj,N-jj+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; I = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(ti,N-ii+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;                t1 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t2 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t5 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t6 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t9 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t10 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t13 =&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t14 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;!DIR$ vector aligned                      !DIR$ unroll(2)&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; K = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(TK,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)      &lt;span class=&#34;hljs-comment&#34;&gt;! Innermost loop, vectorized and unrolled by 2 after that&lt;/span&gt;&lt;br&gt;                   qi = Q(K,I)           ;    qi1 = Q(K,I+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)  &lt;br&gt;                   t1 = t1+qi*P(K,J)     ;    t2 = t2+ qi1*P(K,J)&lt;br&gt;                   t5 = t5+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)  ;    t6 = t6+ qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;                   t9 = t9+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)  ;    t10 = t10+ qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;                   t13 = t13+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);    t14 = t14+qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) +t1          ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t2&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t5     ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t6&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t9     ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t10&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t13    ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t14&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Take-Aways&#34;&gt;&lt;a href=&#34;#Take-Aways&#34; class=&#34;headerlink&#34; title=&#34;Take Aways&#34;&gt;&lt;/a&gt;Take Aways&lt;/h3&gt;&lt;p&gt;缓存分块是一种重新安排数据访问的技术，将数据子集(块)拉入缓存，并对这个块进行操作，以避免不得不重复从主存中获取数据。正如上面的示例所示，可以以这种方式手动分块循环数据以重用缓存。&lt;/p&gt;
&lt;p&gt;对于性能关键的循环，其中性能分析表明内存带宽限制，而-opt-report显示编译器没有以最佳方式分块循环，您可以考虑手动展开循环，以便更好地分块数据以实现缓存重用。&lt;/p&gt;
&lt;h3 id=&#34;NEXT-STEPS&#34;&gt;&lt;a href=&#34;#NEXT-STEPS&#34; class=&#34;headerlink&#34; title=&#34;NEXT STEPS&#34;&gt;&lt;/a&gt;NEXT STEPS&lt;/h3&gt;&lt;p&gt;您必须从头到尾阅读本指南，使用内置的超链接来指导您在Intel®Xeon处理器上成功地移植和调优应用程序。本指南中提供的路径反映了获得最佳应用程序性能所需的步骤。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
