{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"sort\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/23/Algorithm031/",
            "url": "http://example.com/2022/04/23/Algorithm031/",
            "title": "L2-039 清点代码库 (25 分)",
            "date_published": "2022-04-23T13:44:47.000Z",
            "content_html": "<h2 id=\"L2-039-清点代码库-25-分\"><a href=\"#L2-039-清点代码库-25-分\" class=\"headerlink\" title=\"L2-039 清点代码库 (25 分)\"></a>L2-039 清点代码库 (25 分)</h2><p><img src=\"/2022/04/23/Algorithm031/58e6a034-993d-4049-8deb-23d769c8597e.jpg\" alt=\"code.jpg\"></p>\n<p>上图转自新浪微博：“阿里代码库有几亿行代码，但其中有很多功能重复的代码，比如单单快排就被重写了几百遍。请设计一个程序，能够将代码库中所有功能重复的代码找出。各位大佬有啥想法，我当时就懵了，然后就挂了。。。”</p>\n<p>这里我们把问题简化一下：首先假设两个功能模块如果接受同样的输入，总是给出同样的输出，则它们就是功能重复的；其次我们把每个模块的输出都简化为一个整数（在 <strong>int</strong> 范围内）。于是我们可以设计一系列输入，检查所有功能模块的对应输出，从而查出功能重复的代码。你的任务就是设计并实现这个简化问题的解决方案。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出 2 个正整数，依次为 <em>N</em>（≤104）和 <em>M</em>（≤102），对应功能模块的个数和系列测试输入的个数。</p>\n<p>随后 <em>N</em> 行，每行给出一个功能模块的 <em>M</em> 个对应输出，数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在第一行输出不同功能的个数 <em>K</em>。随后 <em>K</em> 行，每行给出具有这个功能的模块的个数，以及这个功能的对应输出。数字间以 1 个空格分隔，行首尾不得有多余空格。输出首先按模块个数非递增顺序，如果有并列，则按输出序列的递增序给出。</p>\n<p>注：所谓数列 { <em>A</em>1, …, <em>A</em>M } 比 { <em>B</em>1, …, <em>B</em>M } 大，是指存在 1≤i&lt;*M*，使得 *A*1&#x3D;*B*1，…，*Ai*&#x3D;*Bi* 成立，且 *Ai*+1&gt;<em>B</em>+1。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre class=\"line-numbers language-in\"><code class=\"language-in\">7 3\n35 28 74\n-1 -1 22\n28 74 35\n-1 -1 22\n11 66 0\n35 28 74\n35 28 74\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre class=\"line-numbers language-out\"><code class=\"language-out\">4\n3 35 28 74\n2 -1 -1 22\n1 11 66 0\n1 28 74 35\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>利用map的映射关系</strong></p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<bits/stdc++.h>\nusing namespace std;\nmap<vector<int>,int> mp;   //key，value\nvector<int> tmp;\nint n,m;\nbool cmp(pair<vector<int>,int> a,pair<vector<int>,int> b)\n&#123;\n    if(a.second==b.second)\n    &#123;\n        return a.first<b.first;\n    &#125;\n    return a.second>b.second;\n\n&#125;\nint main()\n&#123;\n    cin>>n>>m;\n    for (int i = 0; i <n ; ++i) &#123;\n        for (int j = 0; j < m; ++j) &#123;\n            int num;\n            cin>>num;\n            tmp.push_back(num);\n        &#125;\n        mp[tmp]++;\n        tmp.clear();\n    &#125;\n    vector<pair<vector<int>,int>> v(mp.begin(),mp.end());\t\t//把map类型转化成vector\n    cout<<v.size()<<endl;\n    sort(v.begin(),v.end(),cmp);\t\t\t\t\t\t\t\t//sort排序，注意终点和起点\n    for (int k = 0; k <v.size() ; ++k) &#123;\n        cout<<v[k].second<<\" \";\n        for (int i = 0; i <m ; ++i) &#123;\n            if(i!=m-1)&#123;\n                cout<<v[k].first[i]<<\" \";\n            &#125; else&#123;\n                cout<<v[k].first[i]<<endl;\n            &#125;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652362\">题目详情 - L2-039 清点代码库 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "Vector",
                "Map",
                "Pair"
            ]
        },
        {
            "id": "http://example.com/2022/04/16/Algorithm027/",
            "url": "http://example.com/2022/04/16/Algorithm027/",
            "title": "L2-009 抢红包 (25 分)",
            "date_published": "2022-04-16T06:57:38.000Z",
            "content_html": "<h2 id=\"L2-009-抢红包-25-分\"><a href=\"#L2-009-抢红包-25-分\" class=\"headerlink\" title=\"L2-009 抢红包 (25 分)\"></a><strong>L2-009 抢红包 (25 分)</strong></h2><p>没有人没抢过红包吧…… 这里给出<em>N</em>个人之间互相发红包、抢红包的记录，请你统计一下他们抢红包的收获。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤104），即参与发红包和抢红包的总人数，则这些人从1到<em>N</em>编号。随后<em>N</em>行，第<em>i</em>行给出编号为<em>i</em>的人发红包的记录，格式如下：</p>\n<p><em>K     N</em>1 <em>P</em>1⋯ NK PK</p>\n<p>其中<em>K</em>（0≤<em>K</em>≤20）是发出去的红包个数，<em>N</em>i<em>是抢到红包的人的编号，</em>Pi（&gt;0）是其抢到的红包金额（以分为单位）。注意：对于同一个人发出的红包，每人最多只能抢1次，不能重复抢。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>按照收入金额从高到低的递减顺序输出每个人的编号和收入金额（以元为单位，输出小数点后2位）。每个人的信息占一行，两数字间有1个空格。如果收入金额有并列，则按抢到红包的个数递减输出；如果还有并列，则按个人编号递增输出。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre class=\"line-numbers language-in\"><code class=\"language-in\">10\n3 2 22 10 58 8 125\n5 1 345 3 211 5 233 7 13 8 101\n1 7 8800\n2 1 1000 2 1000\n2 4 250 10 320\n6 5 11 9 22 8 33 7 44 10 55 4 2\n1 3 8800\n2 1 23 2 123\n1 8 250\n4 2 121 4 516 7 112 9 10\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre class=\"line-numbers language-out\"><code class=\"language-out\">1 11.63\n2 3.63\n8 3.63\n3 2.11\n7 1.69\n6 -1.67\n9 -2.18\n10 -3.26\n5 -3.26\n4 -12.32\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>结构体 + Sort</strong></p>\n<p><strong>需要注意的就是double类型相等的比较</strong></p>\n<p><strong>首先，浮点数在计算机中并不能精确的表示，所以在判断两个double类型的数时需要其他的手段，而不是直接 a&#x3D;&#x3D; b</strong></p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<bits/stdc++.h>\nusing namespace std;\nstruct student&#123;\n    int id=0;\n    double money=0;\n    int cnt=0;\n&#125;;\ndouble dis=1e-6;\t\t\t\t//定义一个误差\nbool cmp(student a,student b)&#123;\n    if(abs(a.money-b.money)<dis)&#123;\t\t\t\t//如果两个double型相减在误差的范围内，我们认定这两个double类型相等\n        if(a.cnt==b.cnt)&#123;\n            return a.id<b.id;\n        &#125;else&#123;\n            return a.cnt>b.cnt;\n        &#125;\n    &#125;\n    return a.money>b.money;\n&#125;\nint main()\n&#123;\n    int n;\n    cin>>n;\n    student st[n+5];\n    for (int i = 0; i <n ; ++i) &#123;\n        int time;\n        cin>>time;\n        st[i].id=i+1;\n        for (int j = 0; j <time ; ++j) &#123;\n            int p;\n            double x;\n            cin>>p>>x;\n            st[p-1].money+=x/100;\n            st[i].money-=x/100;\n            st[p-1].cnt++;\t\t\t\t\t//记录抢到的红包数\n        &#125;\n    &#125;\n    sort(st,st+n,cmp);\t\t\t\t\t\t//sort从数组下标0开始排序，左闭右开\n    for (int k = 0; k <n ; ++k) &#123;\n        printf(\"%d %.2lf\\n\",st[k].id,st[k].money);\n    &#125;\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/dingpiao190/article/details/73512811?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=1\">(20条消息) double类型是否相等的判断方法_dingpiao190的博客-CSDN博客_double判断相等</a></p>\n<p><a href=\"https://blog.csdn.net/patrick_star_cowboy/article/details/82083392\">(20条消息) 如何判断两个double类型的数是否相等？_Patrick-Star的博客-CSDN博客_两个double怎么判断相等</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066890854400\">题目详情 - L2-009 抢红包 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "结构体",
                "Double类型相等比较"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/Algorithm026/",
            "url": "http://example.com/2022/04/15/Algorithm026/",
            "title": "L2-003 月饼 (25 分)",
            "date_published": "2022-04-15T14:03:52.000Z",
            "content_html": "<h2 id=\"L2-003-月饼-25-分\"><a href=\"#L2-003-月饼-25-分\" class=\"headerlink\" title=\"L2-003 月饼 (25 分)\"></a>L2-003 月饼 (25 分)</h2><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p>\n<p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45&#x2F;2 &#x3D; 94.5（亿元）。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em> 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 <em>D</em> 表示市场最大需求量。随后一行给出 <em>N</em> 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 <em>N</em> 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre class=\"line-numbers language-in\"><code class=\"language-in\">3 20\n18 15 10\n75 72 45\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre class=\"line-numbers language-out\"><code class=\"language-out\">94.50\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>贪心 + Sort</strong></p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<bits/stdc++.h>\nusing namespace std;\nstruct mooncake&#123;\n    double pow;\n    double price;\n&#125;;\nbool cmp(mooncake a,mooncake b)&#123;\n    return a.price*1.0/a.pow>b.price*1.0/b.pow;\t\t\t\t//返回单价高的\n&#125;\nint main()\n&#123;\n    int n;\n    double d;\n    cin>>n>>d;\n    mooncake m[n];\n    for (int i = 0; i < n; ++i) &#123;\n        cin>>m[i].pow;\n    &#125;\n    for (int j = 0; j <n ; ++j) &#123;\n        cin>>m[j].price;\n    &#125;\n    sort(m,m+n,cmp);\n    double price=0.0;\n    double tmpd=d;\n    for (int k = 0; k <n ; ++k) &#123;\t\t\t\t\t\t//模拟求解\n        if(m[k].pow<=tmpd)&#123;\n            tmpd-=m[k].pow;\n            price+=m[k].price;\n        &#125;else if(m[k].pow>tmpd)&#123;\n            price+=tmpd*(m[k].price/m[k].pow);\n            break;\n        &#125;\n    &#125;\n    printf(\"%.2f\\n\",price);\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805071789801472\">题目详情 - L2-003 月饼 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "结构体",
                "贪心"
            ]
        },
        {
            "id": "http://example.com/2022/04/13/Algorithm020/",
            "url": "http://example.com/2022/04/13/Algorithm020/",
            "title": "L2-027 名人堂与代金券 (25 分)",
            "date_published": "2022-04-13T01:45:55.000Z",
            "content_html": "<h2 id=\"L2-027-名人堂与代金券-25-分\"><a href=\"#L2-027-名人堂与代金券-25-分\" class=\"headerlink\" title=\"L2-027 名人堂与代金券 (25 分)\"></a>L2-027 名人堂与代金券 (25 分)</h2><p>对于在中国大学MOOC（<a href=\"http://www.icourse163.org/\">http://www.icourse163.org/</a> ）学习“数据结构”课程的学生，想要获得一张合格证书，总评成绩必须达到 60 分及以上，并且有另加福利：总评分在 [G, 100] 区间内者，可以得到 50 元 PAT 代金券；在 [60, G) 区间内者，可以得到 20 元PAT代金券。全国考点通用，一年有效。同时任课老师还会把总评成绩前 K 名的学生列入课程“名人堂”。本题就请你编写程序，帮助老师列出名人堂的学生，并统计一共发出了面值多少元的 PAT 代金券。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出 3 个整数，分别是 N（不超过 10 000 的正整数，为学生总数）、G（在 (60,100) 区间内的整数，为题面中描述的代金券等级分界线）、K（不超过 100 且不超过 N 的正整数，为进入名人堂的最低名次）。接下来 N 行，每行给出一位学生的账号（长度不超过15位、不带空格的字符串）和总评成绩（区间 [0, 100] 内的整数），其间以空格分隔。题目保证没有重复的账号。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在一行中输出发出的 PAT 代金券的总面值。然后按总评成绩非升序输出进入名人堂的学生的名次、账号和成绩，其间以 1 个空格分隔。需要注意的是：成绩相同的学生享有并列的排名，排名并列时，按账号的字母序升序输出。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre class=\"line-numbers language-in\"><code class=\"language-in\">10 80 5\ncy@zju.edu.cn 78\ncy@pat-edu.com 87\n1001@qq.com 65\nuh-oh@163.com 96\ntest@126.com 39\nanyone@qq.com 87\nzoe@mit.edu 80\njack@ucla.edu 88\nbob@cmu.edu 80\nken@163.com 70\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre class=\"line-numbers language-out\"><code class=\"language-out\">360\n1 uh-oh@163.com 96\n2 jack@ucla.edu 88\n3 anyone@qq.com 87\n3 cy@pat-edu.com 87\n5 bob@cmu.edu 80\n5 zoe@mit.edu 80\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>结构体数组+sort排序，需要注意输出格式控制</strong></p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include <bits/stdc++.h>\nusing namespace std;\nstruct student&#123;\n    int score=0;\n    string email;\n&#125;;\nbool cmp(student a,student b)&#123;\n    if(a.score==b.score) return a.email<b.email;\t\t//如果分数相同返回字典序小的\n    return a.score>b.score;\t\t\t\t//返回分数最大的\n&#125;\nint main()\n&#123;\n    int n,g,k;\n    cin>>n>>g>>k;\n    student st[n];\n    int money=0;\n    for (int i = 0; i <n ; ++i) &#123;\t\t\t\t\t//输入加存钱\n        cin>>st[i].email>>st[i].score;\n        if(g<=st[i].score&&st[i].score<=100)&#123;\n            money+=50;\n        &#125;\n        if(60<=st[i].score&&st[i].score<g)&#123;\n            money+=20;\n        &#125;\n    &#125;\n    sort(st,st+n,cmp);\t\t\t\t\t\t\t\t//排序\n    cout<<money<<endl;\n    int cnt =1;\t\t\t\t\t\t\t\t\t\t//用来判断用否超过名人堂个数\n    int i=0;\t\t\t\t\t\t\t\t\t\t//遍历st结构体数组\n    int same=1;\t\t\t\t\t\t\t\t\t\t//分数相同的个数\n    int fscore=st[0].score;\t\t\t\t\t\t\t//用来判断分数是否相同\n    //这道题就格式输出需要注意下！\n    while(true) &#123;\n\n        if(fscore==st[i].score)&#123;\n            cout<<cnt<<\" \"<<st[i].email<<\" \"<<st[i].score<<endl;\t//相同即输出\n            if(i!=0) same++;\t\t//不为0号，则same++。\n        &#125;\n        if(fscore>st[i].score)&#123;\n            cnt=cnt+same;\t\t\t//不等，更新cnt值\n            same=1;\t\t\t\t\t//更新same值\n            if(cnt>k)&#123; break;&#125;\t\t//大于名人堂个数结束\n            cout<<cnt<<\" \"<<st[i].email<<\" \"<<st[i].score<<endl;\n            fscore=st[i].score;\t\t//更新用来判断分数是否相同的fscore\n\n        &#125;\n        i++;\n\n    &#125;\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805055176163328\">题目详情 - L2-027 名人堂与代金券 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort"
            ]
        },
        {
            "id": "http://example.com/2022/04/11/Algorithm016/",
            "url": "http://example.com/2022/04/11/Algorithm016/",
            "title": "L2-021 点赞狂魔 (25 分)",
            "date_published": "2022-04-11T11:21:06.000Z",
            "content_html": "<h1 id=\"L2-021-点赞狂魔-25-分\"><a href=\"#L2-021-点赞狂魔-25-分\" class=\"headerlink\" title=\"L2-021 点赞狂魔 (25 分)\"></a>L2-021 点赞狂魔 (25 分)</h1><p>微博上有个“点赞”功能，你可以为你喜欢的博文点个赞表示支持。每篇博文都有一些刻画其特性的标签，而你点赞的博文的类型，也间接刻画了你的特性。然而有这么一种人，他们会通过给自己看到的一切内容点赞来狂刷存在感，这种人就被称为“点赞狂魔”。他们点赞的标签非常分散，无法体现出明显的特性。本题就要求你写个程序，通过统计每个人点赞的不同标签的数量，找出前3名点赞狂魔。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出一个正整数<em>N</em>（≤100），是待统计的用户数。随后<em>N</em>行，每行列出一位用户的点赞标签。格式为“<code>Name</code> <em>K</em> <em>F</em>1⋯<em>F**K</em>”，其中<code>Name</code>是不超过8个英文小写字母的非空用户名，1≤<em>K</em>≤1000，<em>F**i</em>（<em>i</em>&#x3D;1,⋯,<em>K</em>）是特性标签的编号，我们将所有特性标签从 1 到 107 编号。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>统计每个人点赞的不同标签的数量，找出数量最大的前3名，在一行中顺序输出他们的用户名,其间以1个空格分隔,且行末不得有多余空格。如果有并列，则输出标签出现次数平均值最小的那个，题目保证这样的用户没有并列。若不足3人，则用<code>-</code>补齐缺失，例如<code>mike jenny -</code>就表示只有2人。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre class=\"line-numbers language-in\"><code class=\"language-in\">5\nbob 11 101 102 103 104 105 106 107 108 108 107 107\npeter 8 1 2 3 4 3 2 5 1\nchris 12 1 2 3 4 5 6 7 8 9 1 2 3\njohn 10 8 7 6 5 4 3 2 1 7 5\njack 9 6 7 8 9 10 11 12 13 14\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre class=\"line-numbers language-out\"><code class=\"language-out\">jack chris john\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><p><strong>结构体数组 + sort排序</strong></p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include <bits/stdc++.h>\nusing namespace std;\nstruct person&#123;\n    char name[10];\n    set<int> s;\t\t\t\t//set容器中的每个元素值唯一\n    int all=0;\t\t\t\t//记录点赞次数\n&#125;;\nbool cmp(person a,person b)&#123;\n    if(a.s.size()==b.s.size()) return a.all<b.all;\t\t\t//如果有并列，则输出标签出现次数平均值最小的那个\n    return a.s.size()>b.s.size();\t\t\t\t\t\t\t//点赞的不同标签的数量最多的\n&#125;\nint main()\n&#123;\n    int n;\n    cin>>n;\n    person p[n];\n    for (int i = 0; i <n ; ++i) &#123;\n        cin>>p[i].name;\n        int time;\n        cin>>time;\n        p[i].all=time;\t\t\t\t\t\t\t\t\t\t//记录点赞次数\n        for (int j = 0; j < time; ++j) &#123;\n            int tmp;\n            cin>>tmp;\n            p[i].s.insert(tmp);\t\t\t\t\t\t\t\t//插入set容器\n        &#125;\n    &#125;\n    sort(p,p+n,cmp);\t\t\t\t\t\t\t\t\t\t//排序\n    if(n>=3)&#123;\n        cout<<p[0].name<<\" \"<<p[1].name<<\" \"<<p[2].name<<endl;\n    &#125; else if(n==2)&#123;\n        cout<<p[0].name<<\" \"<<p[1].name<<\" \"<<\"-\"<<endl;\n    &#125;else if(n==1)&#123;\n        cout<<p[0].name<<\" \"<<\"-\"<<\" \"<<\"-\"<<endl;\n    &#125;\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805058485469184\">题目详情 - L2-021 点赞狂魔 (25 分) (pintia.cn)</a></p>\n<p><a href=\"https://blog.csdn.net/changjiale110/article/details/79108447\">(19条消息) STL中的set使用方法详细！！！！_知足–常乐的博客-CSDN博客_set stl</a></p>\n",
            "tags": [
                "STL",
                "C++",
                "Set",
                "团体程序设计天梯赛",
                "Sort"
            ]
        }
    ]
}