<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Amicoyuan • Posts by &#34;find&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-04-08T11:18:57.000Z</updated>
    <category term="AVX" />
    <category term="Data Structure" />
    <category term="String" />
    <category term="Find" />
    <category term="STL" />
    <category term="C++" />
    <category term="Set" />
    <category term="团体程序设计天梯赛" />
    <category term="Sort" />
    <category term="LinkList" />
    <category term="双向链表" />
    <category term="Graph" />
    <category term="邻接表" />
    <category term="Vector" />
    <category term="Binary tree" />
    <category term="BFS" />
    <category term="模拟" />
    <category term="邻接矩阵" />
    <category term="DFS" />
    <category term="结构体" />
    <category term="贪心" />
    <category term="Double类型相等比较" />
    <category term="Map" />
    <category term="并查集" />
    <category term="Pair" />
    <category term="线索二叉树" />
    <category term="KMP" />
    <category term="Tree" />
    <category term="森林" />
    <category term="Linux" />
    <category term="MPI" />
    <category term="Numactl" />
    <category term="Slurm" />
    <category term="Tensorflow" />
    <category term="性能分析工具" />
    <category term="gcov" />
    <entry>
        <id>http://example.com/2022/04/08/Algorithm015/</id>
        <title>C++的STL中字符串string自带方法find查找</title>
        <link rel="alternate" href="http://example.com/2022/04/08/Algorithm015/"/>
        <content type="html">&lt;h1 id=&#34;C-的STL中字符串string自带方法find查找&#34;&gt;&lt;a href=&#34;#C-的STL中字符串string自带方法find查找&#34; class=&#34;headerlink&#34; title=&#34;C++的STL中字符串string自带方法find查找&#34;&gt;&lt;/a&gt;C++的STL中字符串string自带方法find查找&lt;/h1&gt;&lt;h2 id=&#34;用法&#34;&gt;&lt;a href=&#34;#用法&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;pre class=&#34; language-c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;string str = &#34;abcd&#34;;
    cout &lt;&lt; str.find(&#39;a&#39;);
    //返回的是下标的值而不是指针或是迭代器
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34; language-c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;string str = &#34;abcd&#34;
string sub = &#34;cd&#34;
if(str.find(sub)!=string::npos)&amp;#123;
    cout&lt;&lt;&#34;找到了&#34;&lt;&lt;endl;
&amp;#125;else&amp;#123;
    cout&lt;&lt;&#34;没有找到&#34;&lt;&lt;endl;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要是没有找到，返回的是str::npos&lt;br&gt;注意，只有string的find方法是返回的下标，因为string是顺序索引，set,map,multiset,multimap都不是顺序索引的数据结构，所以返回的是迭代器。&lt;/p&gt;
&lt;h2 id=&#34;样例一-L1-070-吃火锅-15-分&#34;&gt;&lt;a href=&#34;#样例一-L1-070-吃火锅-15-分&#34; class=&#34;headerlink&#34; title=&#34;样例一:L1-070 吃火锅 (15 分)&#34;&gt;&lt;/a&gt;样例一:&lt;strong&gt;L1-070 吃火锅 (15 分)&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;题目链接：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053&#34;&gt;https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/08/Algorithm015/68518b64-f2f7-4694-aaeb-d32afe657f7b.jpg&#34; alt=&#34;chg.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上图片来自微信朋友圈：这种天气你有什么破事打电话给我基本没用。但是如果你说“吃火锅”，那就厉害了，我们的故事就开始了。&lt;/p&gt;
&lt;p&gt;本题要求你实现一个程序，自动检查你朋友给你发来的信息里有没有 &lt;code&gt;chi1 huo3 guo1&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;输入格式：&#34;&gt;&lt;a href=&#34;#输入格式：&#34; class=&#34;headerlink&#34; title=&#34;输入格式：&#34;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入每行给出一句不超过 80 个字符的、以回车结尾的朋友信息，信息为非空字符串，仅包括字母、数字、空格、可见的半角标点符号。当读到某一行只有一个英文句点 &lt;code&gt;.&lt;/code&gt; 时，输入结束，此行不算在朋友信息里。&lt;/p&gt;
&lt;h3 id=&#34;输出格式：&#34;&gt;&lt;a href=&#34;#输出格式：&#34; class=&#34;headerlink&#34; title=&#34;输出格式：&#34;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;首先在一行中输出朋友信息的总条数。然后对朋友的每一行信息，检查其中是否包含 &lt;code&gt;chi1 huo3 guo1&lt;/code&gt;，并且统计这样厉害的信息有多少条。在第二行中首先输出第一次出现 &lt;code&gt;chi1 huo3 guo1&lt;/code&gt; 的信息是第几条（从 1 开始计数），然后输出这类信息的总条数，其间以一个空格分隔。题目保证输出的所有数字不超过 100。&lt;/p&gt;
&lt;p&gt;如果朋友从头到尾都没提 &lt;code&gt;chi1 huo3 guo1&lt;/code&gt; 这个关键词，则在第二行输出一个表情 &lt;code&gt;-_-#&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;输入样例-1：&#34;&gt;&lt;a href=&#34;#输入样例-1：&#34; class=&#34;headerlink&#34; title=&#34;输入样例 1：&#34;&gt;&lt;/a&gt;输入样例 1：&lt;/h3&gt;&lt;pre class=&#34; language-in&#34;&gt;&lt;code class=&#34;language-in&#34;&gt;Hello!
are you there?
wantta chi1 huo3 guo1?
that&#39;s so li hai le
our story begins from chi1 huo3 guo1 le
.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-1：&#34;&gt;&lt;a href=&#34;#输出样例-1：&#34; class=&#34;headerlink&#34; title=&#34;输出样例 1：&#34;&gt;&lt;/a&gt;输出样例 1：&lt;/h3&gt;&lt;pre class=&#34; language-out&#34;&gt;&lt;code class=&#34;language-out&#34;&gt;5
3 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输入样例-2：&#34;&gt;&lt;a href=&#34;#输入样例-2：&#34; class=&#34;headerlink&#34; title=&#34;输入样例 2：&#34;&gt;&lt;/a&gt;输入样例 2：&lt;/h3&gt;&lt;pre class=&#34; language-in&#34;&gt;&lt;code class=&#34;language-in&#34;&gt;Hello!
are you there?
wantta qi huo3 guo1 chi1huo3guo1?
that&#39;s so li hai le
our story begins from ci1 huo4 guo2 le
.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;输出样例-2：&#34;&gt;&lt;a href=&#34;#输出样例-2：&#34; class=&#34;headerlink&#34; title=&#34;输出样例 2：&#34;&gt;&lt;/a&gt;输出样例 2：&lt;/h3&gt;&lt;pre class=&#34; language-out&#34;&gt;&lt;code class=&#34;language-out&#34;&gt;5
-_-#
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;程序源代码&#34;&gt;&lt;a href=&#34;#程序源代码&#34; class=&#34;headerlink&#34; title=&#34;程序源代码&#34;&gt;&lt;/a&gt;程序源代码&lt;/h3&gt;&lt;pre class=&#34; language-c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &lt;bits/stdc++.h&gt;
using namespace std;
int main()
&amp;#123;
    int flag=0;					//用来判断是否是第一次找到吃火锅
    int cnt=0;					//用来记录总行数
    int count=0;				//用来记录有多少个吃火锅
    int firstp=0;				//用来记录第一次出现吃火锅的位置
    string cmp=&#34;chi1 huo3 guo1&#34;;
    while (true)
    &amp;#123;
        string s;
        s.clear();
        getline(cin,s);
        if(s.size()==1&amp;&amp;s==&#34;.&#34;)&amp;#123;
            break;
        &amp;#125;
        string tmp =s;
        if(tmp.find(cmp)!=string::npos)&amp;#123;
            if(flag==0) &amp;#123;
                flag =1;
                firstp = cnt+1;
            &amp;#125;
            count=count+1;
        &amp;#125;
        cnt=cnt+1;

    &amp;#125;
    if(count==0)&amp;#123;
        cout&lt;&lt;cnt&lt;&lt;endl;
        cout&lt;&lt;&#34;-_-#&#34;&lt;&lt;endl;
    &amp;#125; else&amp;#123;
        cout&lt;&lt;cnt&lt;&lt;endl;
        cout&lt;&lt;firstp&lt;&lt;&#34; &#34;&lt;&lt;count&lt;&lt;endl;
    &amp;#125;

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_50675813/article/details/113313343&#34;&gt;(18条消息) c++STL中的find()函数 有两种使用方法_我们不生产代码，只是代码的搬运工的博客-CSDN博客_c++中find函数的使用方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053&#34;&gt;https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="String" />
        <category term="Find" />
        <category term="STL" />
        <category term="C++" />
        <updated>2022-04-08T11:18:57.000Z</updated>
    </entry>
</feed>
