{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"tensorflow\" tag",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/03/12/ML002/",
            "url": "https://xingyuanjie.top/2023/03/12/ML002/",
            "title": "代价函数",
            "date_published": "2023-03-12T08:33:17.000Z",
            "content_html": "<h2 id=\"代价函数\"><a href=\"#代价函数\" class=\"headerlink\" title=\"代价函数\"></a>代价函数</h2><p><img src=\"/2023/03/12/ML002/image-20230312164306128.png\" alt=\"image-20230312164306128\"></p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>在本实验中，你将:</p>\n<ul>\n<li>你将实现和探索成本函数的线性回归伴随一个变量。</li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>在本实验室中，我们将使用:</p>\n<ul>\n<li>NumPy，一个用于科学计算的流行库</li>\n<li>Matplotlib，用于绘制数据的流行库</li>\n<li>本地目录的lab_utils_uni.py文件中的本地绘图例程</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> nunpy <span class=\"hljs-keyword\">as</span> np<br>%matplotlib widget<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">from</span> lab_utils_uni <span class=\"hljs-keyword\">import</span> plt_intuition, plt_stationary, plt_updata_onclick, soup_bowl<br>plt.style.use(<span class=\"hljs-string\">&#x27;./deeplearning.mplstyle&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"问题意境\"><a href=\"#问题意境\" class=\"headerlink\" title=\"问题意境\"></a>问题意境</h2><p>你想要一个模型，它可以根据房子的大小预测房价。让我们使用与上一个实验室之前相同的两个数据点——一个1000平方英尺的房子卖了30万美元，一个2000平方英尺的房子卖了50万美元。</p>\n<table>\n<thead>\n<tr>\n<th>Size(1000 sqft)</th>\n<th>Price(1000s of dollars)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">x_train = np.array([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>])   <span class=\"hljs-comment\">#(size in 1000 square feet)</span><br>y_train = np.zrray([<span class=\"hljs-number\">300.0</span>, <span class=\"hljs-number\">500.0</span>])\t<span class=\"hljs-comment\">#(price in 1000s of dollars)</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"计算代价\"><a href=\"#计算代价\" class=\"headerlink\" title=\"计算代价\"></a>计算代价</h2><p>这个作业中的术语“成本”可能会让人有点困惑，因为数据是住房成本。在这里，成本是衡量我们的模型预测房子目标价格的好坏。“价格”一词指的是住房数据。</p>\n<p>含一个变量的成本方程为:</p>\n<p><img src=\"/2023/03/12/ML002/image-20230312165434160.png\" alt=\"image-20230312165434160\"></p>\n<p>在这里</p>\n<p><img src=\"/2023/03/12/ML002/image-20230312165503613.png\" alt=\"image-20230312165503613\"></p>\n<ul>\n<li>f_w,b(x^i)是我们使用参数w,b来预测例子i。</li>\n<li>（f_w,b(x^i) - y^i）^2  是目标值与预测值之间的差的平方</li>\n<li>这些差异被加在所有m例子上，再除以2m，得到代价函数 <strong>J（w,b）</strong></li>\n</ul>\n<p>注意，在讲座中，总和的范围通常是从1到m，而代码将从0到m-1。</p>\n<p>下面的代码通过遍历每个示例来计算成本。在每个循环中:</p>\n<ul>\n<li>f_wb，计算一个预测</li>\n<li>目标和预测之间的差值被计算和平方。</li>\n<li>这被加到总成本中。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">compute_cost</span>(<span class=\"hljs-params\">x, y, w, b</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Computes the cost function for linear regression</span><br><span class=\"hljs-string\">    </span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">    \tx (ndarray (m,)):Data, m examples</span><br><span class=\"hljs-string\">    \ty (ndarray (m,)):target values</span><br><span class=\"hljs-string\">    \tw,b (scalar)\t:model parameters</span><br><span class=\"hljs-string\">    </span><br><span class=\"hljs-string\">    Returns</span><br><span class=\"hljs-string\">    \ttotal_cost (float):The cost of using w,b as the parameters for linear regression to fit the data points in x and y</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-comment\">#number of training examples</span><br>    m = x.shape[<span class=\"hljs-number\">0</span>]<br>    <br>    cost_sum = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):<br>        f_wb = w * x[i] + b<br>        cost = (f_wb - y[i])**<span class=\"hljs-number\">2</span><br>        cost_sum = cost_sum + cost<br>    total_cost = (<span class=\"hljs-number\">1</span>/(<span class=\"hljs-number\">2</span>*m)) * cost_sum<br>    <br>    <span class=\"hljs-keyword\">return</span> total_cost<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Cost-Function-Intuition\"><a href=\"#Cost-Function-Intuition\" class=\"headerlink\" title=\"Cost Function Intuition\"></a>Cost Function Intuition</h2><p><img src=\"/2023/03/12/ML002/image-20230312172325465.png\" alt=\"image-20230312172325465\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt_intuition(x_train, y_train)<br></code></pre></div></td></tr></table></figure>\n\n<p>情节中有几点值得一提。</p>\n<ul>\n<li>当𝑤&#x3D;200时，成本最小化，这与之前实验室的结果相吻合。</li>\n<li>因为在成本方程中，目标和预测之间的差异是平方，当𝑤时，成本迅速增加不是太大就是太小。</li>\n<li>使用通过最小化成本选择的w和b，可以得到与数据完美匹配的直线。</li>\n</ul>\n<h2 id=\"Cost-Function-Visualiztion-3D\"><a href=\"#Cost-Function-Visualiztion-3D\" class=\"headerlink\" title=\"Cost Function Visualiztion-3D\"></a>Cost Function Visualiztion-3D</h2><p>你可以通过三维绘图或等高线图看到成本是如何随w和b变化的。</p>\n<p>值得注意的是，这门课的一些情节会变得相当复杂。本文提供了绘图例程，虽然通读代码以熟悉这些方法是有指导意义的，但要成功完成课程并不需要这样做。例程在本地目录lab_utils_uni.py中。</p>\n<h2 id=\"Larger-Data-Set\"><a href=\"#Larger-Data-Set\" class=\"headerlink\" title=\"Larger Data Set\"></a>Larger Data Set</h2><p>较大的数据集用更多的数据点来观察一个场景是很有指导意义的。该数据集包括不在同一线上的数据点。这对成本方程意味着什么?我们能找到𝑤、𝑏那样使得代价是0?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">x_train = np.array([<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">1.7</span>,<span class=\"hljs-number\">2.0</span>,<span class=\"hljs-number\">2.5</span>,<span class=\"hljs-number\">3.0</span>,<span class=\"hljs-number\">3.2</span>])<br>y_train = np.array([<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">300</span>,<span class=\"hljs-number\">480</span>,<span class=\"hljs-number\">430</span>,<span class=\"hljs-number\">630</span>,<span class=\"hljs-number\">730</span>])<br></code></pre></div></td></tr></table></figure>\n\n<p>在等高线图中，点击一个点，选择w和b，以达到最低的成本。使用轮廓来指导你的选择。注意，更新图形可能需要几秒钟的时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt.close(<span class=\"hljs-string\">&#x27;all&#x27;</span>)<br>fig, ax ,dyn_items = plt_stationary(x_train, y_train)<br>updater = plt_update_onclick(fig, ax, x_train,y_train,dyn_items)<br></code></pre></div></td></tr></table></figure>\n\n<p>上面，注意左边图中的虚线。这些代表了你的训练集中每个例子所贡献的代价的部分。在本例中，值约为𝑤&#x3D;209和𝑏&#x3D; 2.4提供低代价。请注意，因为我们的训练示例不在一条线上，所以最小代价不为零。</p>\n<h2 id=\"Convex-Cost-surface\"><a href=\"#Convex-Cost-surface\" class=\"headerlink\" title=\"Convex Cost surface\"></a>Convex Cost surface</h2><p>成本函数平方损失的事实确保了“误差曲面”像汤碗一样凸出。它总是有一个最小值，可以通过在所有维度上跟随梯度来达到。在前面的图中，因为𝑤和𝑏尺寸比例不同，这是不容易识别的。下图，其中𝑤和𝑏都是对称的，在讲座中展示过:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">soup_bowl()<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Congratulations\"><a href=\"#Congratulations\" class=\"headerlink\" title=\"Congratulations!\"></a>Congratulations!</h2><p>您已经学习了以下内容:</p>\n<ul>\n<li>成本方程提供了一种衡量预测与训练数据匹配程度的方法。</li>\n<li>最小化成本可以提供𝑤和b的最优值。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797\">https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797</a></p>\n<p><a href=\"https://github.com/kaieye/2022-Machine-Learning-Specialization\">kaieye&#x2F;2022-Machine-Learning-Specialization (github.com)</a></p>\n",
            "tags": [
                "Tensorflow",
                "Machine Learning"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/06/ML001/",
            "url": "https://xingyuanjie.top/2023/03/06/ML001/",
            "title": "线性回归模型",
            "date_published": "2023-03-06T11:00:34.000Z",
            "content_html": "<h2 id=\"线性回归模型\"><a href=\"#线性回归模型\" class=\"headerlink\" title=\"线性回归模型\"></a>线性回归模型</h2><h3 id=\"MOdel-Representation\"><a href=\"#MOdel-Representation\" class=\"headerlink\" title=\"MOdel Representation\"></a>MOdel Representation</h3><p><img src=\"/2023/03/06/ML001/image-20230306195956356.png\" alt=\"image-20230306195956356\"></p>\n<h3 id=\"Goals\"><a href=\"#Goals\" class=\"headerlink\" title=\"Goals\"></a>Goals</h3><p>In this lab you will:</p>\n<ul>\n<li>learn to implement the model f_{w,b} for linear regression with one variable</li>\n</ul>\n<h3 id=\"Notation\"><a href=\"#Notation\" class=\"headerlink\" title=\"Notation\"></a>Notation</h3><p>Here is a summary of some of the notation you will encounter.</p>\n<p><img src=\"/2023/03/06/ML001/image-20230306200250050.png\" alt=\"image-20230306200250050\"></p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p>In this lab you will make use of:</p>\n<ul>\n<li><p>NumPy,a popular library for scientific computing</p>\n</li>\n<li><p>Matplotlib,a popular library for plotting data</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br>plt.style.use(<span class=\"hljs-string\">&#x27;./deeplearning.mpstyle&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Problem-Statement\"><a href=\"#Problem-Statement\" class=\"headerlink\" title=\"Problem Statement\"></a>Problem Statement</h3><p><img src=\"/2023/03/06/ML001/image-20230306200642937.png\" alt=\"image-20230306200642937\"></p>\n<p>As in the lecture,you will use the motivating example of housing price prediction. This lab will use a simple data set with only two data points - a house with 1000 square feet(sqft) sold for $300,000 and a house with 2000 square feet sold for $500,000.These two points will constitute our data or training set. In this lab, the units of size are 1000 sqft and the units of price are 1000s of dollars.</p>\n<table>\n<thead>\n<tr>\n<th>Size (1000 sqft)</th>\n<th>Price (1000s of dollars)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.0</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2.0</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<p>You would like to fit a linear regression model(shown above as the blue straight line)through these two points, so you can then predict price for other houses - say, a house with 1200 sqft.</p>\n<p>Please run the following code cell to create your x_train and y_train variables. The data is stored in one-dimensional NumPy arrays.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#x_train is the input variable (size in 1000 square feet)</span><br><span class=\"hljs-comment\">#y_train is the target (price in 1000s of dollars)</span><br>x_train = np.array([<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">2.0</span>])<br>y_train = np.array([<span class=\"hljs-number\">300.0</span>,<span class=\"hljs-number\">500.0</span>])<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;x_train = <span class=\"hljs-subst\">&#123;x_train&#125;</span>&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;y_train = <span class=\"hljs-subst\">&#123;y_train&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Number-of-training-examples-m\"><a href=\"#Number-of-training-examples-m\" class=\"headerlink\" title=\"Number of training examples m\"></a>Number of training examples m</h3><p>you will use m to denote the number of training examples. Numpy arrays have a .shape parameter. x_train.shape return a python tuple with an entry for each dimension. x_train.shape[0] is the length of the array and number of examples as shown below.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># m is the number of training examples</span><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;x_train.shape: <span class=\"hljs-subst\">&#123;x_train.shape&#125;</span>&quot;</span>)<br>m = x_train.shape[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Number of training example is: <span class=\"hljs-subst\">&#123;m&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<p>x.train.shape: (2,)</p>\n<p>Number of training examples is: 2</p>\n<p><strong>One can also use the Python len() function as shown below.</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># m is the number of training examples</span><br>m = <span class=\"hljs-built_in\">len</span>(x_train)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Number of training example is: <span class=\"hljs-subst\">&#123;m&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<p>Number of training examples  is:\t2</p>\n<h3 id=\"Training-example-x-i-y-i\"><a href=\"#Training-example-x-i-y-i\" class=\"headerlink\" title=\"Training example x_i, y_i\"></a>Training example x_i, y_i</h3><p>You will use (x(𝑖), y(𝑖)) to denote the 𝑖(th) training example. Since Python is zero indexed, (x(0), y(0) is (1.0, 300.0) and (x(1), y(1) is (2.0, 500.0).</p>\n<p>To access a value in a Numpy array, one indexes the array with the desired offset. For example the syntax to access location zero of x_train is x_train[0]. Run the next code block below to get the i(th) training example.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">i = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">#Change this to 1 to see (x^1,y^1)</span><br><br>x_i = x_train[i]<br>y_i = y_train[i]<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;(x^(<span class=\"hljs-subst\">&#123;i&#125;</span>), y^(<span class=\"hljs-subst\">&#123;i&#125;</span>)) = (<span class=\"hljs-subst\">&#123;x_i&#125;</span>, <span class=\"hljs-subst\">&#123;y_i&#125;</span>)&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">(x^(<span class=\"hljs-number\">0</span>), y^(<span class=\"hljs-number\">0</span>)) = (<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">300.0</span>)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Plotting-the-data\"><a href=\"#Plotting-the-data\" class=\"headerlink\" title=\"Plotting the data\"></a>Plotting the data</h3><p>You can plot these two points using the scatter() function is the matplotlib library,as shown in the cell below.</p>\n<ul>\n<li>The function arguments marker and c show the points as red crosses(the default is blue dots.)</li>\n</ul>\n<p>You can use other functions in the matplotlib library to set title and labels to display.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#Plot the data points</span><br>plt.scatter(x_train, y_train, marker=<span class=\"hljs-string\">&#x27;x&#x27;</span> c=<span class=\"hljs-string\">&#x27;r&#x27;</span>)<br><span class=\"hljs-comment\">#Set the title</span><br>plt.title(<span class=\"hljs-string\">&quot;Housing Prices&quot;</span>)<br><span class=\"hljs-comment\">#Set the y-axis label</span><br>plt.ylabel(<span class=\"hljs-string\">&#x27;Price (in 1000s of dollars)&#x27;</span>)<br><span class=\"hljs-comment\">#Set the x-axis lbel</span><br>plt.xlabel(<span class=\"hljs-string\">&#x27;Size (1000 sqft)&#x27;</span>)<br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/06/ML001/image-20230306204822102.png\" alt=\"image-20230306204822102\"></p>\n<h3 id=\"Model-function\"><a href=\"#Model-function\" class=\"headerlink\" title=\"Model function\"></a>Model function</h3><p><img src=\"/2023/03/06/ML001/image-20230306204918585.png\" alt=\"image-20230306204918585\"></p>\n<p>As described in lecture, the model function for linear regression (which is a function that maps from x to y)is represented as</p>\n<p><img src=\"/2023/03/06/ML001/image-20230306205107527.png\" alt=\"image-20230306205107527\"></p>\n<p>The formula above is how you can represent straight lines - different values of w and b give you different straight lines on the plot.</p>\n<p>Let’s try to get a better intuition for this through the code blocks below. Let’s start with w &#x3D; 100 and b &#x3D;100.</p>\n<p>Note: You can come back to this cell to adjust the model’s w and b parameters.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">w = <span class=\"hljs-number\">100</span><br>b = <span class=\"hljs-number\">100</span><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;w: <span class=\"hljs-subst\">&#123;w&#125;</span>&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;b: <span class=\"hljs-subst\">&#123;b&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">w:\t<span class=\"hljs-number\">100</span><br>b:\t<span class=\"hljs-number\">100</span><br></code></pre></div></td></tr></table></figure>\n\n<p>Now,let’s compute the value of f_{w,b}(x^i) for your two data points. You can explicitly write this out for each data poins as -</p>\n<p>for x(0),f_wb &#x3D; w * x[0] + b</p>\n<p>for x(1),f_wb &#x3D; w * x[1] + b</p>\n<p>For a large number of data points, this can get unwieldy and repetitive. So instead, you can calculate the function output in a for loop as shown in the compute_model_output function below.</p>\n<p>Note:The argument description (ndarray (m,)) describes a Numpy n-dimensional array of shape (m,). (scalar) describes an argument without dimensions, just a magnitude.</p>\n<p>Note: np.zero(n) will return a one-dimensional numpy array with n entries</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">compute_model_output</span>(<span class=\"hljs-params\">x, w, b</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Computes the prediction of a linear model</span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">    \tx (ndarray (m,)):Data, m examples</span><br><span class=\"hljs-string\">    \tw,b (scalar)\t:model parameters</span><br><span class=\"hljs-string\">    Returns</span><br><span class=\"hljs-string\">    \ty (ndarray (m,)):target values</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <br>    m = x.shape[<span class=\"hljs-number\">0</span>]<br>    f_wb = np.zeros(m)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m)<br>    \tf_wb[i] = w * x[i] + b<br>    <br>    <span class=\"hljs-keyword\">return</span> f_wb<br></code></pre></div></td></tr></table></figure>\n\n<p>Now let’s call the compute_model_output function and plot the output.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">tmp_f_wb = compute_model_output(x_train, w, b,)<br><br><span class=\"hljs-comment\">#Plot our model prediction</span><br>plt.plot(x_train, tmp_f_wb, c=<span class=\"hljs-string\">&#x27;b&#x27;</span>,label=<span class=\"hljs-string\">&#x27;Our Prediction&#x27;</span>)<br><br><span class=\"hljs-comment\">#Plot the data points</span><br>plt.scatter(x_train, y_train, marker=<span class=\"hljs-string\">&#x27;x&#x27;</span>, c=<span class=\"hljs-string\">&#x27;r&#x27;</span>,label=<span class=\"hljs-string\">&#x27;Actual Values&#x27;</span>)<br><br><span class=\"hljs-comment\">#Set the title</span><br>plt.title(<span class=\"hljs-string\">&quot;Housing Prices&quot;</span>)<br><span class=\"hljs-comment\">#Set the y-axis label</span><br>plt.ylabel(<span class=\"hljs-string\">&#x27;Price (in 1000s of dollars)&#x27;</span>)<br><span class=\"hljs-comment\">#Set the x-axis label</span><br>plt.xlabel(<span class=\"hljs-string\">&#x27;Size (1000 sqft)&#x27;</span>)<br>plt.legend()<br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/06/ML001/image-20230306211337338.png\" alt=\"image-20230306211337338\"></p>\n<p>As you can see, setting w &#x3D; 100 and b &#x3D; 100 does not result in a line that fits our data.</p>\n<h3 id=\"Challenge\"><a href=\"#Challenge\" class=\"headerlink\" title=\"Challenge\"></a>Challenge</h3><p>Try experimenting with different values of w and b. What should the values be for a line that fits our data?</p>\n<p><strong>Tips:</strong></p>\n<p>You can use  your mouse to click on the triangle to the left of the green “Hints” below to reveal some hints for choosing b and w.</p>\n<p><strong>Hints</strong></p>\n<h3 id=\"Prediction\"><a href=\"#Prediction\" class=\"headerlink\" title=\"Prediction\"></a>Prediction</h3><p>Now that we have a model, we can use it to make our original prediction. Let’s predict the price of a house with 1200 sqft. Since the units of x are in 1000’s of sqft, x is 1.2.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">w = <span class=\"hljs-number\">200</span><br>b = <span class=\"hljs-number\">100</span><br>x_i = <span class=\"hljs-number\">1.2</span><br>cost_1200sqft = w * x_i + b<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;$<span class=\"hljs-subst\">&#123;cost_1200sqft:<span class=\"hljs-number\">.0</span>f&#125;</span> thousand dollars&quot;</span> )<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">$<span class=\"hljs-number\">340</span> thousand dollars<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Congratulations\"><a href=\"#Congratulations\" class=\"headerlink\" title=\"Congratulations!\"></a>Congratulations!</h3><p>In this lab you have learned:</p>\n<ul>\n<li>Linear regression bulids a model which establishes a relationship between features and targets</li>\n<li>In the example above, the feature was house size and the target was house price</li>\n<li>for simple linear regression, the model has two parameters w and b whose calue are ‘fit’ using training data.</li>\n<li>once a model’s parameters have been determined, the model can be used to make predictions on novel data.</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797\">https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797</a></p>\n<p><a href=\"https://github.com/kaieye/2022-Machine-Learning-Specialization\">kaieye&#x2F;2022-Machine-Learning-Specialization (github.com)</a></p>\n",
            "tags": [
                "Tensorflow",
                "Machine Learning"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2021/12/09/tensorflow001/",
            "url": "https://xingyuanjie.top/2021/12/09/tensorflow001/",
            "title": "Machine Learning(一) 一个神经元网络-线性函数",
            "date_published": "2021-12-09T06:59:11.000Z",
            "content_html": "<h1 id=\"一个神经元的网络-线性函数\"><a href=\"#一个神经元的网络-线性函数\" class=\"headerlink\" title=\"一个神经元的网络(线性函数)\"></a>一个神经元的网络(线性函数)</h1><p>线性函数 y &#x3D; 2 * x -1 </p>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> tensorflow <span class=\"hljs-keyword\">import</span> keras<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-comment\">#构建模型</span><br>model = keras.Sequential([keras.layers.Dense(units=<span class=\"hljs-number\">1</span>,input_shape=[<span class=\"hljs-number\">1</span>])])<br>model.<span class=\"hljs-built_in\">compile</span>(optimizer=<span class=\"hljs-string\">&#x27;sgd&#x27;</span>,loss=<span class=\"hljs-string\">&#x27;mean_squared_error&#x27;</span>)<br><span class=\"hljs-comment\">#准备训练数据</span><br>xs=np.array([-<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">0.0</span>,<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">2.0</span>,<span class=\"hljs-number\">3.0</span>,<span class=\"hljs-number\">4.0</span>], dtype = <span class=\"hljs-built_in\">float</span>)<br>ys=np.array([-<span class=\"hljs-number\">3.0</span>,-<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">3.0</span>,<span class=\"hljs-number\">5.0</span>,<span class=\"hljs-number\">7.0</span>], dtype = <span class=\"hljs-built_in\">float</span>)<br><span class=\"hljs-comment\">#训练模型</span><br>model.fit(xs,ys,epochs=<span class=\"hljs-number\">500</span>)<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"训练模型过程-截取\"><a href=\"#训练模型过程-截取\" class=\"headerlink\" title=\"训练模型过程(截取)\"></a>训练模型过程(截取)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">Epoch <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 388ms/step - loss: <span class=\"hljs-number\">3.4976</span><br>Epoch <span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 3ms/step - loss: <span class=\"hljs-number\">2.9127</span><br>Epoch <span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 3ms/step - loss: <span class=\"hljs-number\">2.4493</span><br>Epoch <span class=\"hljs-number\">4</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 3ms/step - loss: <span class=\"hljs-number\">2.0814</span><br>Epoch <span class=\"hljs-number\">5</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 4ms/step - loss: <span class=\"hljs-number\">1.7888</span><br>Epoch <span class=\"hljs-number\">6</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 4ms/step - loss: <span class=\"hljs-number\">1.5555</span><br>Epoch <span class=\"hljs-number\">7</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 4ms/step - loss: <span class=\"hljs-number\">1.3689</span><br>Epoch <span class=\"hljs-number\">8</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 4ms/step - loss: <span class=\"hljs-number\">1.2191</span><br>Epoch <span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 3ms/step - loss: <span class=\"hljs-number\">1.0983</span><br>Epoch <span class=\"hljs-number\">10</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 4ms/step - loss: <span class=\"hljs-number\">1.0005</span><br>Epoch <span class=\"hljs-number\">11</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 4ms/step - loss: <span class=\"hljs-number\">0.9207</span><br>Epoch <span class=\"hljs-number\">12</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 2ms/step - loss: <span class=\"hljs-number\">0.8551</span><br>Epoch <span class=\"hljs-number\">13</span>/<span class=\"hljs-number\">500</span><br><span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span> [==============================] - 0s 5ms/step - loss: <span class=\"hljs-number\">0.8009</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"使用模型\"><a href=\"#使用模型\" class=\"headerlink\" title=\"使用模型\"></a>使用模型</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#使用模型(输入)</span><br><span class=\"hljs-built_in\">print</span>(model.predict([<span class=\"hljs-number\">2021</span>]))<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#输出</span><br>[[<span class=\"hljs-number\">4036.6035</span>]]<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#输入</span><br>model.predict([<span class=\"hljs-number\">10.0</span>])<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#输出</span><br>array([[<span class=\"hljs-number\">18.984968</span>]], dtype=float32)<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Tensorflow"
            ]
        }
    ]
}