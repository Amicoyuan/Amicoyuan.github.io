<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Amicoyuan • Posts by &#34;tensorflow&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Thu, 09 Dec 2021 14:59:11 +0800</pubDate>
        <lastBuildDate>Thu, 09 Dec 2021 14:59:11 +0800</lastBuildDate>
        <category>AVX</category>
        <category>Data Structure</category>
        <category>String</category>
        <category>Find</category>
        <category>STL</category>
        <category>C++</category>
        <category>Set</category>
        <category>团体程序设计天梯赛</category>
        <category>Sort</category>
        <category>LinkList</category>
        <category>双向链表</category>
        <category>Graph</category>
        <category>邻接表</category>
        <category>Vector</category>
        <category>Binary tree</category>
        <category>BFS</category>
        <category>模拟</category>
        <category>邻接矩阵</category>
        <category>DFS</category>
        <category>结构体</category>
        <category>贪心</category>
        <category>Double类型相等比较</category>
        <category>并查集</category>
        <category>Map</category>
        <category>Pair</category>
        <category>KMP</category>
        <category>线索二叉树</category>
        <category>Tree</category>
        <category>森林</category>
        <category>Linux</category>
        <category>MPI</category>
        <category>Numactl</category>
        <category>Slurm</category>
        <category>Tensorflow</category>
        <category>性能分析工具</category>
        <category>gcov</category>
        <item>
            <guid isPermalink="true">http://example.com/2021/12/09/tensorflow001/</guid>
            <title>Machine Learning(一) 一个神经元网络-线性函数</title>
            <link>http://example.com/2021/12/09/tensorflow001/</link>
            <category>Tensorflow</category>
            <pubDate>Thu, 09 Dec 2021 14:59:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一个神经元的网络-线性函数&#34;&gt;&lt;a href=&#34;#一个神经元的网络-线性函数&#34; class=&#34;headerlink&#34; title=&#34;一个神经元的网络(线性函数)&#34;&gt;&lt;/a&gt;一个神经元的网络(线性函数)&lt;/h1&gt;&lt;p&gt;线性函数 y &amp;#x3D; 2 * x -1 &lt;/p&gt;
&lt;h2 id=&#34;程序源代码&#34;&gt;&lt;a href=&#34;#程序源代码&#34; class=&#34;headerlink&#34; title=&#34;程序源代码&#34;&gt;&lt;/a&gt;程序源代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from tensorflow import keras
import numpy as np
#构建模型
model = keras.Sequential([keras.layers.Dense(units=1,input_shape=[1])])
model.compile(optimizer=&amp;#39;sgd&amp;#39;,loss=&amp;#39;mean_squared_error&amp;#39;)
#准备训练数据
xs=np.array([-1.0,0.0,1.0,2.0,3.0,4.0], dtype = float)
ys=np.array([-3.0,-1.0,1.0,3.0,5.0,7.0], dtype = float)
#训练模型
model.fit(xs,ys,epochs=500)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;训练模型过程-截取&#34;&gt;&lt;a href=&#34;#训练模型过程-截取&#34; class=&#34;headerlink&#34; title=&#34;训练模型过程(截取)&#34;&gt;&lt;/a&gt;训练模型过程(截取)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;Epoch 1/500
1/1 [==============================] - 0s 388ms/step - loss: 3.4976
Epoch 2/500
1/1 [==============================] - 0s 3ms/step - loss: 2.9127
Epoch 3/500
1/1 [==============================] - 0s 3ms/step - loss: 2.4493
Epoch 4/500
1/1 [==============================] - 0s 3ms/step - loss: 2.0814
Epoch 5/500
1/1 [==============================] - 0s 4ms/step - loss: 1.7888
Epoch 6/500
1/1 [==============================] - 0s 4ms/step - loss: 1.5555
Epoch 7/500
1/1 [==============================] - 0s 4ms/step - loss: 1.3689
Epoch 8/500
1/1 [==============================] - 0s 4ms/step - loss: 1.2191
Epoch 9/500
1/1 [==============================] - 0s 3ms/step - loss: 1.0983
Epoch 10/500
1/1 [==============================] - 0s 4ms/step - loss: 1.0005
Epoch 11/500
1/1 [==============================] - 0s 4ms/step - loss: 0.9207
Epoch 12/500
1/1 [==============================] - 0s 2ms/step - loss: 0.8551
Epoch 13/500
1/1 [==============================] - 0s 5ms/step - loss: 0.8009
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用模型&#34;&gt;&lt;a href=&#34;#使用模型&#34; class=&#34;headerlink&#34; title=&#34;使用模型&#34;&gt;&lt;/a&gt;使用模型&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#使用模型(输入)
print(model.predict([2021]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#输出
[[4036.6035]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#输入
model.predict([10.0])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#输出
array([[18.984968]], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
