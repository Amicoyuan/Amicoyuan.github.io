{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"data structure\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/posts/57e5cdd2.html",
            "url": "http://example.com/posts/57e5cdd2.html",
            "title": "L2-036 网红点打卡攻略 (25 分)",
            "date_published": "2022-04-23T13:50:27.000Z",
            "content_html": "<h2 id=\"L2-036-网红点打卡攻略-25-分\"><a href=\"#L2-036-网红点打卡攻略-25-分\" class=\"headerlink\" title=\"L2-036 网红点打卡攻略 (25 分)\"></a>L2-036 网红点打卡攻略 (25 分)</h2><p>一个旅游景点，如果被带火了的话，就被称为“网红点”。大家来网红点游玩，俗称“打卡”。在各个网红点打卡的快（省）乐（钱）方法称为“攻略”。你的任务就是从一大堆攻略中，找出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>首先第一行给出两个正整数：网红点的个数 <em>N</em>（1&lt;<em>N</em>≤200）和网红点之间通路的条数 <em>M</em>。随后 <em>M</em> 行，每行给出有通路的两个网红点、以及这条路上的旅行花费（为正整数），格式为“网红点1 网红点2 费用”，其中网红点从 1 到 <em>N</em> 编号；同时也给出你家到某些网红点的花费，格式相同，其中你家的编号固定为 <code>0</code>。</p>\n<p>再下一行给出一个正整数 <em>K</em>，是待检验的攻略的数量。随后 <em>K</em> 行，每行给出一条待检攻略，格式为：</p>\n<p><em>n</em> <em>V</em>1 <em>V</em>2 ⋯ Vn</p>\n<p>其中 <em>n</em>(≤200) 是攻略中的网红点数，<em>Vi</em> 是路径上的网红点编号。这里假设你从家里出发，从 <em>V</em>1 开始打卡，最后从 <em>Vn</em> 回家。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在第一行输出满足要求的攻略的个数。</p>\n<p>在第二行中，首先输出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略的序号（从 1 开始），然后输出这个攻略的总路费，其间以一个空格分隔。如果这样的攻略不唯一，则输出序号最小的那个。</p>\n<p>题目保证至少存在一个有效攻略，并且总路费不超过 109。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">6 13<br>0 5 2<br>6 2 2<br>6 0 1<br>3 4 2<br>1 5 2<br>2 5 1<br>3 1 1<br>4 1 2<br>1 6 1<br>6 3 2<br>1 2 1<br>4 5 3<br>2 0 2<br>7<br>6 5 1 4 3 6 2<br>6 5 2 1 6 3 4<br>8 6 2 1 6 3 4 5 2<br>3 2 1 5<br>6 6 1 3 4 5 2<br>7 6 2 1 3 4 5 2<br>6 5 2 1 4 3 6<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">3<br>5 11<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"样例说明：\"><a href=\"#样例说明：\" class=\"headerlink\" title=\"样例说明：\"></a>样例说明：</h3><p>第 2、3、4、6 条都不满足攻略的基本要求，即不能做到从家里出发，在每个网红点打卡仅一次，且能回到家里。所以满足条件的攻略有 3 条。</p>\n<p>第 1 条攻略的总路费是：(0-&gt;5) 2 + (5-&gt;1) 2 + (1-&gt;4) 2 + (4-&gt;3) 2 + (3-&gt;6) 2 + (6-&gt;2) 2 + (2-&gt;0) 2 &#x3D; 14；</p>\n<p>第 5 条攻略的总路费同理可算得：1 + 1 + 1 + 2 + 3 + 1 + 2 &#x3D; 11，是一条更省钱的攻略；</p>\n<p>第 7 条攻略的总路费同理可算得：2 + 1 + 1 + 2 + 2 + 2 + 1 &#x3D; 11，与第 5 条花费相同，但序号较大，所以不输出。</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">205</span>][<span class=\"hljs-number\">205</span>];<br><span class=\"hljs-keyword\">int</span> minsize=INT_MAX;\t\t\t<span class=\"hljs-comment\">//初始化为INT_MAX</span><br><span class=\"hljs-keyword\">int</span> minid=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b,c;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=c;<br>        g[b][a]=c;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> time;<br>    cin&gt;&gt;time;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class=\"hljs-keyword\">int</span> roll[k+<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-keyword\">int</span> has[k+<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-built_in\">memset</span>(has,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(has));<br>        roll[<span class=\"hljs-number\">0</span>]=roll[k+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;\t\t\t\t\t<span class=\"hljs-comment\">//起点和终点必定是家</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=k ; ++i) &#123;<br>            cin&gt;&gt;roll[i];<br>            <span class=\"hljs-keyword\">if</span>(has[roll[i]]) has[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//每个打卡点仅能打卡一次</span><br>            <span class=\"hljs-keyword\">else</span> has[roll[i]]=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> flag=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">int</span> tmpsize=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span>(k!=n||has[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">continue</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=k+<span class=\"hljs-number\">1</span> ; ++l) &#123;<br>            <span class=\"hljs-keyword\">if</span>(g[roll[l<span class=\"hljs-number\">-1</span>]][roll[l]]==<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                flag=<span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            tmpsize+=g[roll[l<span class=\"hljs-number\">-1</span>]][roll[l]];<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(tmpsize&lt;minsize)&#123;<br>                minsize=tmpsize;<br>                minid=j+<span class=\"hljs-number\">1</span>;<br><br>            &#125;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt&lt;&lt;endl;<br>    cout&lt;&lt;minid&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;minsize&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482059\">题目详情 - L2-036 网红点打卡攻略 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵"
            ]
        },
        {
            "id": "http://example.com/posts/c3cc0bdb.html",
            "url": "http://example.com/posts/c3cc0bdb.html",
            "title": "L2-039 清点代码库 (25 分)",
            "date_published": "2022-04-23T13:44:47.000Z",
            "content_html": "<h2 id=\"L2-039-清点代码库-25-分\"><a href=\"#L2-039-清点代码库-25-分\" class=\"headerlink\" title=\"L2-039 清点代码库 (25 分)\"></a>L2-039 清点代码库 (25 分)</h2><p><img src=\"/posts/c3cc0bdb.htm/58e6a034-993d-4049-8deb-23d769c8597e.jpg\" alt=\"code.jpg\"></p>\n<p>上图转自新浪微博：“阿里代码库有几亿行代码，但其中有很多功能重复的代码，比如单单快排就被重写了几百遍。请设计一个程序，能够将代码库中所有功能重复的代码找出。各位大佬有啥想法，我当时就懵了，然后就挂了。。。”</p>\n<p>这里我们把问题简化一下：首先假设两个功能模块如果接受同样的输入，总是给出同样的输出，则它们就是功能重复的；其次我们把每个模块的输出都简化为一个整数（在 <strong>int</strong> 范围内）。于是我们可以设计一系列输入，检查所有功能模块的对应输出，从而查出功能重复的代码。你的任务就是设计并实现这个简化问题的解决方案。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出 2 个正整数，依次为 <em>N</em>（≤104）和 <em>M</em>（≤102），对应功能模块的个数和系列测试输入的个数。</p>\n<p>随后 <em>N</em> 行，每行给出一个功能模块的 <em>M</em> 个对应输出，数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在第一行输出不同功能的个数 <em>K</em>。随后 <em>K</em> 行，每行给出具有这个功能的模块的个数，以及这个功能的对应输出。数字间以 1 个空格分隔，行首尾不得有多余空格。输出首先按模块个数非递增顺序，如果有并列，则按输出序列的递增序给出。</p>\n<p>注：所谓数列 { <em>A</em>1, …, <em>A</em>M } 比 { <em>B</em>1, …, <em>B</em>M } 大，是指存在 1≤i&lt;*M*，使得 *A*1&#x3D;*B*1，…，*Ai*&#x3D;*Bi* 成立，且 *Ai*+1&gt;<em>B</em>+1。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7 3<br>35 28 74<br>-1 -1 22<br>28 74 35<br>-1 -1 22<br>11 66 0<br>35 28 74<br>35 28 74<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">4<br>3 35 28 74<br>2 -1 -1 22<br>1 11 66 0<br>1 28 74 35<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>利用map的映射关系</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>map&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; mp;   <span class=\"hljs-comment\">//key，value</span><br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; tmp;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; a,pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(a.second==b.second)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> a.first&lt;b.first;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a.second&gt;b.second;<br><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; m; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            tmp.<span class=\"hljs-built_in\">push_back</span>(num);<br>        &#125;<br>        mp[tmp]++;<br>        tmp.<span class=\"hljs-built_in\">clear</span>();<br>    &#125;<br>    vector&lt;pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt;&gt; <span class=\"hljs-built_in\">v</span>(mp.<span class=\"hljs-built_in\">begin</span>(),mp.<span class=\"hljs-built_in\">end</span>());\t\t<span class=\"hljs-comment\">//把map类型转化成vector</span><br>    cout&lt;&lt;v.<span class=\"hljs-built_in\">size</span>()&lt;&lt;endl;<br>    <span class=\"hljs-built_in\">sort</span>(v.<span class=\"hljs-built_in\">begin</span>(),v.<span class=\"hljs-built_in\">end</span>(),cmp);\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//sort排序，注意终点和起点</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt;v.<span class=\"hljs-built_in\">size</span>() ; ++k) &#123;<br>        cout&lt;&lt;v[k].second&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span>(i!=m<span class=\"hljs-number\">-1</span>)&#123;<br>                cout&lt;&lt;v[k].first[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span>&#123;<br>                cout&lt;&lt;v[k].first[i]&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652362\">题目详情 - L2-039 清点代码库 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "Vector",
                "Map",
                "Pair"
            ]
        },
        {
            "id": "http://example.com/posts/3f37820e.html",
            "url": "http://example.com/posts/3f37820e.html",
            "title": "L2-010 排座位 (25 分)",
            "date_published": "2022-04-16T06:57:46.000Z",
            "content_html": "<h2 id=\"L2-010-排座位-25-分\"><a href=\"#L2-010-排座位-25-分\" class=\"headerlink\" title=\"L2-010 排座位 (25 分)\"></a><strong>L2-010 排座位 (25 分)</strong></h2><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1 宾客2 关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p>\n<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OK but...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7 8 4<br>5 6 1<br>2 7 -1<br>1 3 1<br>3 4 1<br>6 7 -1<br>1 2 1<br>1 4 1<br>2 3 -1<br>3 4<br>5 7<br>2 3<br>7 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">No problem<br>OK<br>OK but...<br>No way<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵 + 并查集</strong></p>\n<p><strong>并查集具体链接：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/01/04/Algorithm004/\">并查集 - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> pre[<span class=\"hljs-number\">100</span>];\t\t\t\t<span class=\"hljs-comment\">//父节点</span><br><span class=\"hljs-keyword\">int</span> deep[<span class=\"hljs-number\">100</span>];\t\t\t\t<span class=\"hljs-comment\">//深度</span><br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">101</span>][<span class=\"hljs-number\">101</span>];\t\t\t<span class=\"hljs-comment\">//邻接矩阵建图</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        pre[i]=i;<br>        deep[i]=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(pre[x]==x)&#123;<br>        <span class=\"hljs-keyword\">return</span> x;<br>    &#125; <span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> pre[x]=<span class=\"hljs-built_in\">find</span>(pre[x]);<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x,<span class=\"hljs-keyword\">int</span> y)</span></span>&#123;<br>    x=<span class=\"hljs-built_in\">find</span>(x);<br>    y=<span class=\"hljs-built_in\">find</span>(y);<br>    <span class=\"hljs-keyword\">if</span>(x==y) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">if</span>(deep[x]&lt;deep[y])&#123;<br>        pre[x]=y;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        pre[y]=x;<br>        <span class=\"hljs-keyword\">if</span>(deep[x]==deep[y])&#123;<br>            deep[x]++;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n,m,k;<br>    <span class=\"hljs-built_in\">init</span>(<span class=\"hljs-number\">105</span>);<br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b,c;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=g[b][a]=c;<br>        <span class=\"hljs-keyword\">if</span>(c==<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">unit</span>(a,b);\t\t\t\t\t<span class=\"hljs-comment\">//如果是朋友则合并</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;k ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">1</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;No problem&quot;</span>&lt;&lt;endl;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">0</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">0</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;OK&quot;</span>&lt;&lt;endl;\t\t\t<span class=\"hljs-comment\">//两人毫无关系</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">-1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">-1</span>&amp;&amp;<span class=\"hljs-built_in\">find</span>(a)==<span class=\"hljs-built_in\">find</span>(b)) cout&lt;&lt;<span class=\"hljs-string\">&quot;OK but...&quot;</span>&lt;&lt;endl;\t<span class=\"hljs-comment\">//敌对且有共同朋友</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">-1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">-1</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;No way&quot;</span>&lt;&lt;endl;\t\t<span class=\"hljs-comment\">//仅敌对</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/weixin_45260385/article/details/109752008\">(20条消息) 【PTA】 L2-010 排座位 (25分) 【简单并查集】_黑桃️的博客-CSDN博客</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066135879680\">题目详情 - L2-010 排座位 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "并查集"
            ]
        },
        {
            "id": "http://example.com/posts/9578eb86.html",
            "url": "http://example.com/posts/9578eb86.html",
            "title": "L2-013 红色警报 (25 分)",
            "date_published": "2022-04-15T13:09:30.000Z",
            "content_html": "<h2 id=\"L2-013-红色警报-25-分\"><a href=\"#L2-013-红色警报-25-分\" class=\"headerlink\" title=\"L2-013 红色警报 (25 分)\"></a>L2-013 红色警报 (25 分)</h2><p>战争中保持各个城市间的连通性非常重要。本题要求你编写一个报警程序，当失去一个城市导致国家被分裂为多个无法连通的区域时，就发出红色警报。注意：若该国本来就不完全连通，是分裂的k个区域，而失去一个城市并不改变其他城市之间的连通性，则不要发出警报。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出两个整数<code>N</code>（0 &lt; <code>N</code> ≤ 500）和<code>M</code>（≤ 5000），分别为城市个数（于是默认城市从0到<code>N</code>-1编号）和连接两城市的通路条数。随后<code>M</code>行，每行给出一条通路所连接的两个城市的编号，其间以1个空格分隔。在城市信息之后给出被攻占的信息，即一个正整数<code>K</code>和随后的<code>K</code>个被攻占的城市的编号。</p>\n<p>注意：输入保证给出的被攻占的城市编号都是合法的且无重复，但并不保证给出的通路没有重复。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个被攻占的城市，如果它会改变整个国家的连通性，则输出<code>Red Alert: City k is lost!</code>，其中<code>k</code>是该城市的编号；否则只输出<code>City k is lost.</code>即可。如果该国失去了最后一个城市，则增加一行输出<code>Game Over.</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">5 4<br>0 1<br>1 3<br>3 0<br>0 4<br>5<br>1 2 0 4 3<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">City 1 is lost.<br>City 2 is lost.<br>Red Alert: City 0 is lost!<br>City 4 is lost.<br>City 3 is lost.<br>Game Over.<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵建图 + DFS统计连通分量数</strong></p>\n<p><strong>对于无向图来说，dfstrave()中dfs()或bfstrave()中bfs()的调用次数等于该图的连通分量数</strong></p>\n<p><strong>无向图中的极大连通子图称为连通分量</strong></p>\n<p><strong>极大连通子图必须连通，且包含尽可能多的顶点和边</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">505</span>][<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t<span class=\"hljs-comment\">//邻接矩阵存图</span><br><span class=\"hljs-keyword\">int</span> visit[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//标记访问数组</span><br><span class=\"hljs-keyword\">int</span> lost[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//记录被攻占的城市</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> node)</span></span>&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//正常的DFS</span><br>    visit[node]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>&amp;&amp;g[node][i]==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">dfstrave</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(visit,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(visit));\t\t\t<span class=\"hljs-comment\">//初始化访问数组</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(lost[i]==<span class=\"hljs-number\">1</span>) visit[i]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//如果该城市被攻占，则标记他为以访问</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>            cnt++;      \t\t\t\t\t<span class=\"hljs-comment\">//统计连通分量数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> cnt;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-built_in\">memset</span>(lost,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(lost));\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));\t\t\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++)&#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        g[a][b]=g[b][a]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//存储无向图</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t\t\t<span class=\"hljs-comment\">//获得初始的连通分量数</span><br>    <span class=\"hljs-keyword\">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> w=<span class=\"hljs-number\">0</span>;w&lt;k;w++)&#123;<br>        <span class=\"hljs-keyword\">int</span> city;<br>        cin&gt;&gt;city;<br>        lost[city]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//记录该城市被攻占</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(g[city][i]==<span class=\"hljs-number\">1</span>)&#123;\t\t\t\t<br>                g[city][i]=g[i][city]=<span class=\"hljs-number\">0</span>;\t<span class=\"hljs-comment\">//标记和他相连的城市不再相连</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> tempcnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t<span class=\"hljs-comment\">//当前的连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(tempcnt&lt;=cnt)&#123;\t\t\t\t\t<span class=\"hljs-comment\">//如果当前的连通分量小于等于原来的连通分量，说明图的连通性没有被改变</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;City %d is lost.\\n&quot;</span>, city);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//否则，连通性被改变了</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Red Alert: City %d is lost!\\n&quot;</span>, city);<br>        &#125;<br>        cnt=tempcnt;\t\t\t\t\t\t<span class=\"hljs-comment\">//更新连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(w==n<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//城市已经被攻占完毕</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Game Over.\\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805063963230208\">题目详情 - L2-013 红色警报 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "DFS"
            ]
        },
        {
            "id": "http://example.com/posts/e6b4ff6a.html",
            "url": "http://example.com/posts/e6b4ff6a.html",
            "title": "L2-011 玩转二叉树 (25 分)",
            "date_published": "2022-04-14T06:01:10.000Z",
            "content_html": "<h2 id=\"L2-011-玩转二叉树-25-分\"><a href=\"#L2-011-玩转二叉树-25-分\" class=\"headerlink\" title=\"L2-011 玩转二叉树 (25 分)\"></a><strong>L2-011 玩转二叉树 (25 分)</strong></h2><p>给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<code>N</code>（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7<br>1 2 3 4 5 6 7<br>4 1 3 2 6 5 7<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">4 6 1 7 5 3 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>镜面反转即为在层序遍历时交换左右子树的遍历顺序，左-&gt;右变成右-&gt;左</strong></p>\n<p><strong>前序 + 中序 建树 + BFS</strong></p>\n<p><strong>建树详细过程：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/04/07/Algorithm014/\">由遍历顺序构建二叉树(前序+中序;后序+中序) - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span><br>&#125;BiTNode,*BiTree;<br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-keyword\">int</span> in[<span class=\"hljs-number\">35</span>];<br><span class=\"hljs-keyword\">int</span> pre[<span class=\"hljs-number\">35</span>];<br><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">PostCreate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> prel,<span class=\"hljs-keyword\">int</span> prer,<span class=\"hljs-keyword\">int</span> inl,<span class=\"hljs-keyword\">int</span> inr)</span></span>&#123;\t\t\t\t\t<span class=\"hljs-comment\">//前序加中序建树</span><br>    <span class=\"hljs-keyword\">if</span>(prel&gt;prer)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    BiTNode *root;<br>    root=(BiTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BiTNode));<br>    root-&gt;data=pre[prel];<br>    <span class=\"hljs-keyword\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = inl; i &lt;=inr; ++i) &#123;<br>        <span class=\"hljs-keyword\">if</span>(pre[prel]==in[i])&#123;<br>            index=i;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> numleft=index-inl;<br>    root-&gt;lchild=<span class=\"hljs-built_in\">PostCreate</span>(prel+<span class=\"hljs-number\">1</span>,prel+numleft,inl,index<span class=\"hljs-number\">-1</span>);<br>    root-&gt;rchild=<span class=\"hljs-built_in\">PostCreate</span>(prel+numleft+<span class=\"hljs-number\">1</span>,prer,index+<span class=\"hljs-number\">1</span>,inr);<br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    queue&lt;BiTree&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(T);<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>())&#123;<br>        BiTNode *tmp =q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-keyword\">if</span>(i!=n<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//输出格式控制</span><br>            cout&lt;&lt;tmp-&gt;data&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;tmp-&gt;data;<br>        &#125;<br>        i++;<br>        <span class=\"hljs-keyword\">if</span>(tmp-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//镜面反转，左-&gt;右变成右-&gt;左</span><br>            q.<span class=\"hljs-built_in\">push</span>(tmp-&gt;rchild);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(tmp-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>            q.<span class=\"hljs-built_in\">push</span>(tmp-&gt;lchild);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    BiTree tree;<br>    tree=<span class=\"hljs-literal\">NULL</span>;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;n ; ++j) &#123;<br>        cin&gt;&gt;pre[j];<br>    &#125;<br>    tree=<span class=\"hljs-built_in\">PostCreate</span>(<span class=\"hljs-number\">0</span>,n<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>,n<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-built_in\">LevelOrder</span>(tree);<br>    cout&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805065406070784\">题目详情 - L2-011 玩转二叉树 (25 分) (pintia.cn)</a></p>\n<p><a href=\"https://xingyuanjie.top/2022/04/07/Algorithm014/\">由遍历顺序构建二叉树(前序+中序;后序+中序) - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree",
                "BFS"
            ]
        },
        {
            "id": "http://example.com/posts/2f9775a0.html",
            "url": "http://example.com/posts/2f9775a0.html",
            "title": "L2-035 完全二叉树的层序遍历 (25 分)",
            "date_published": "2022-04-14T06:01:05.000Z",
            "content_html": "<h2 id=\"L2-035-完全二叉树的层序遍历-25-分\"><a href=\"#L2-035-完全二叉树的层序遍历-25-分\" class=\"headerlink\" title=\"L2-035 完全二叉树的层序遍历 (25 分)\"></a>L2-035 完全二叉树的层序遍历 (25 分)</h2><p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是<strong>完美二叉树</strong>。对于深度为 <em>D</em> 的，有 <em>N</em> 个结点的二叉树，若其结点对应于相同深度完美二叉树的层序遍历的前 <em>N</em> 个结点，这样的树就是<strong>完全二叉树</strong>。</p>\n<p>给定一棵完全二叉树的后序遍历，请你给出这棵树的层序遍历结果。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出正整数 <em>N</em>（≤30），即树中结点个数。第二行给出后序遍历序列，为 <em>N</em> 个不超过 100 的正整数。同一行中所有数字都以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出该树的层序遍历序列。所有数字都以 1 个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">8<br>91 71 2 34 10 15 55 18<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">18 34 55 71 2 10 15 91<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>后序遍历建树 + 完全二叉树性质</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> tree[<span class=\"hljs-number\">10001</span>];<br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">post</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;\t\t<span class=\"hljs-comment\">//根据后序遍历建树</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span>*i&lt;=n)&#123;\t\t\t<span class=\"hljs-comment\">//当2*i&lt;=n时，结点i的左孩子编号为2*i，否则无左孩子</span><br>        <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">2</span>*i);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span>*i+<span class=\"hljs-number\">1</span>&lt;=n)&#123;\t\t<span class=\"hljs-comment\">//当2*i+1&lt;=n时，结点i的右孩子编号为2*i+1，否则无右孩子</span><br>        <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">2</span>*i+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    cin&gt;&gt;tree[i];<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br><br>    cin&gt;&gt;n;<br>    <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">1</span>);           <span class=\"hljs-comment\">//后序遍历建树</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//顺序输出即为层序遍历</span><br>        <span class=\"hljs-keyword\">if</span>(i!=n)&#123;<br>            cout&lt;&lt;tree[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;tree[i];<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482058\">https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482058</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree"
            ]
        },
        {
            "id": "http://example.com/posts/5297b1f9.html",
            "url": "http://example.com/posts/5297b1f9.html",
            "title": "L2-031 深入虎穴 (25 分)",
            "date_published": "2022-04-13T11:09:46.000Z",
            "content_html": "<p>著名的王牌间谍 007 需要执行一次任务，获取敌方的机密情报。已知情报藏在一个地下迷宫里，迷宫只有一个入口，里面有很多条通路，每条路通向一扇门。每一扇门背后或者是一个房间，或者又有很多条路，同样是每条路通向一扇门…… 他的手里有一张表格，是其他间谍帮他收集到的情报，他们记下了每扇门的编号，以及这扇门背后的每一条通路所到达的门的编号。007 发现不存在两条路通向同一扇门。</p>\n<p>内线告诉他，情报就藏在迷宫的最深处。但是这个迷宫太大了，他需要你的帮助 —— 请编程帮他找出距离入口最远的那扇门。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入首先在一行中给出正整数 <em>N</em>（&lt;105），是门的数量。最后 <em>N</em> 行，第 <em>i</em> 行（1≤<em>i</em>≤<em>N</em>）按以下格式描述编号为 <em>i</em> 的那扇门背后能通向的门：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs mathematica\"><span class=\"hljs-built_in\">K</span> <span class=\"hljs-built_in\">D</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-built_in\">D</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">...</span> <span class=\"hljs-built_in\">D</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">]</span><br></code></pre></div></td></tr></table></figure>\n\n<p>其中 <code>K</code> 是通道的数量，其后是每扇门的编号。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">13<br>3 2 3 4<br>2 5 6<br>1 7<br>1 8<br>1 9<br>0<br>2 11 10<br>1 13<br>0<br>0<br>1 12<br>0<br>0<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">12<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表 + BFS</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v[<span class=\"hljs-number\">100005</span>];<br><span class=\"hljs-keyword\">int</span> book[<span class=\"hljs-number\">100005</span>];<br><span class=\"hljs-keyword\">int</span> start=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">()</span></span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//BFS</span><br>    queue&lt;<span class=\"hljs-keyword\">int</span>&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(start);\t\t\t\t\t\t<span class=\"hljs-comment\">//根节点入队</span><br>    <span class=\"hljs-keyword\">int</span> x;<br>    <span class=\"hljs-keyword\">while</span>(!q.<span class=\"hljs-built_in\">empty</span>())&#123;<br>        x=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;v[x].<span class=\"hljs-built_in\">size</span>() ; ++i) &#123;\t\t\t\t<br>            q.<span class=\"hljs-built_in\">push</span>(v[x][i]);<br>        &#125;<br>    &#125;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。</span><br>    <span class=\"hljs-keyword\">return</span> x;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//所以最后一层只有一个结点，所以BFS最后一个元素，即为最远的门</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> time;<br>        cin&gt;&gt;time;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;=time ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            book[num]=<span class=\"hljs-number\">1</span>;<br>            v[i].<span class=\"hljs-built_in\">push_back</span>(num);<br><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">1</span>; k &lt;=n ; ++k) &#123;\t\t\t<span class=\"hljs-comment\">//找入口</span><br>        <span class=\"hljs-keyword\">if</span>(book[k]==<span class=\"hljs-number\">0</span>) start=k;\t\t\t\t<span class=\"hljs-comment\">//没有门通向的门，即为入口</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> ans=<span class=\"hljs-built_in\">bfs</span>();<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1111914599412858888\">题目详情 - L2-031 深入虎穴 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "邻接表",
                "Vector",
                "Binary tree",
                "BFS"
            ]
        },
        {
            "id": "http://example.com/posts/4f5dbf33.html",
            "url": "http://example.com/posts/4f5dbf33.html",
            "title": "L2-040 哲哲打游戏 (25 分)",
            "date_published": "2022-04-13T11:09:41.000Z",
            "content_html": "<h2 id=\"L2-040-哲哲打游戏-25-分\"><a href=\"#L2-040-哲哲打游戏-25-分\" class=\"headerlink\" title=\"L2-040 哲哲打游戏 (25 分)\"></a><strong>L2-040 哲哲打游戏 (25 分)</strong></h2><p>哲哲是一位硬核游戏玩家。最近一款名叫《达诺达诺》的新游戏刚刚上市，哲哲自然要快速攻略游戏，守护硬核游戏玩家的一切！</p>\n<p>为简化模型，我们不妨假设游戏有 <em>N</em> 个剧情点，通过游戏里不同的操作或选择可以从某个剧情点去往另外一个剧情点。此外，游戏还设置了一些<strong>存档</strong>，在某个剧情点可以将玩家的游戏进度保存在一个档位上，读取存档后可以回到剧情点，重新进行操作或者选择，到达不同的剧情点。</p>\n<p>为了追踪硬核游戏玩家哲哲的攻略进度，你打算写一个程序来完成这个工作。假设你已经知道了游戏的全部剧情点和流程，以及哲哲的游戏操作，请你输出哲哲的游戏进度。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行是两个正整数 <em>N</em> 和 <em>M</em> (1≤<em>N</em>,<em>M</em>≤105)，表示总共有 <em>N</em> 个剧情点，哲哲有 <em>M</em> 个游戏操作。</p>\n<p>接下来的 <em>N</em> 行，每行对应一个剧情点的发展设定。第 <em>i</em> 行的第一个数字是 <em>K**i</em>，表示剧情点 <em>i</em> 通过一些操作或选择能去往下面 <em>K**i</em> 个剧情点；接下来有 <em>K**i</em> 个数字，第 <em>k</em> 个数字表示做第 <em>k</em> 个操作或选择可以去往的剧情点编号。</p>\n<p>最后有 <em>M</em> 行，每行第一个数字是 0、1 或 2，分别表示：</p>\n<ul>\n<li>0 表示哲哲做出了某个操作或选择，后面紧接着一个数字 <em>j</em>，表示哲哲在当前剧情点做出了第 <em>j</em> 个选择。我们保证哲哲的选择永远是合法的。</li>\n<li>1 表示哲哲进行了一次存档，后面紧接着是一个数字 <em>j</em>，表示存档放在了第 <em>j</em> 个档位上。</li>\n<li>2 表示哲哲进行了一次读取存档的操作，后面紧接着是一个数字 <em>j</em>，表示读取了放在第 <em>j</em> 个位置的存档。</li>\n</ul>\n<p>约定：所有操作或选择以及剧情点编号都从 1 号开始。存档的档位不超过 100 个，编号也从 1 开始。游戏默认从 1 号剧情点开始。总的选项数（即 ∑<em>K**i</em>）不超过 106。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对于每个 1（即存档）操作，在一行中输出存档的剧情点编号。</p>\n<p>最后一行输出哲哲最后到达的剧情点编号。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">10 11<br>3 2 3 4<br>1 6<br>3 4 7 5<br>1 3<br>1 9<br>2 3 5<br>3 1 8 5<br>1 9<br>2 8 10<br>0<br>1 1<br>0 3<br>0 1<br>1 2<br>0 2<br>0 2<br>2 2<br>0 3<br>0 1<br>1 1<br>0 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">1<br>3<br>9<br>10<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"样例解释：\"><a href=\"#样例解释：\" class=\"headerlink\" title=\"样例解释：\"></a>样例解释：</h3><p>简单给出样例中经过的剧情点顺序：</p>\n<p>1 -&gt; 4 -&gt; 3 -&gt; 7 -&gt; 8 -&gt; 3 -&gt; 5 -&gt; 9 -&gt; 10。</p>\n<p>档位 1 开始存的是 1 号剧情点；档位 2 存的是 3 号剧情点；档位 1 后来又存了 9 号剧情点。</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表 + 模拟，主要是理解题意</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n,k;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v[n+<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">int</span> save[<span class=\"hljs-number\">105</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//存档点</span><br>    <span class=\"hljs-keyword\">int</span> now=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//当前剧情点</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> num;<br>        cin&gt;&gt;num;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;num ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> x;<br>            cin&gt;&gt;x;<br>            v[i].<span class=\"hljs-built_in\">push_back</span>(x);\t\t\t\t<span class=\"hljs-comment\">//邻接表存操作数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>; l &lt;k ; ++l) &#123;\t\t\t<span class=\"hljs-comment\">//模拟过程</span><br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class=\"hljs-keyword\">if</span>(a==<span class=\"hljs-number\">1</span>)&#123;<br>            save[b]=now;<br>            cout&lt;&lt;now&lt;&lt;endl;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(a==<span class=\"hljs-number\">0</span>)&#123;<br>            now=v[now][b<span class=\"hljs-number\">-1</span>];<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(a==<span class=\"hljs-number\">2</span>)&#123;<br>            now=save[b];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;now&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652363\">题目详情 - L2-040 哲哲打游戏 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "邻接表",
                "Vector",
                "模拟"
            ]
        },
        {
            "id": "http://example.com/posts/d15ae7b2.html",
            "url": "http://example.com/posts/d15ae7b2.html",
            "title": "L2-027 名人堂与代金券 (25 分)",
            "date_published": "2022-04-13T01:45:55.000Z",
            "content_html": "<h2 id=\"L2-027-名人堂与代金券-25-分\"><a href=\"#L2-027-名人堂与代金券-25-分\" class=\"headerlink\" title=\"L2-027 名人堂与代金券 (25 分)\"></a>L2-027 名人堂与代金券 (25 分)</h2><p>对于在中国大学MOOC（<a href=\"http://www.icourse163.org/\">http://www.icourse163.org/</a> ）学习“数据结构”课程的学生，想要获得一张合格证书，总评成绩必须达到 60 分及以上，并且有另加福利：总评分在 [G, 100] 区间内者，可以得到 50 元 PAT 代金券；在 [60, G) 区间内者，可以得到 20 元PAT代金券。全国考点通用，一年有效。同时任课老师还会把总评成绩前 K 名的学生列入课程“名人堂”。本题就请你编写程序，帮助老师列出名人堂的学生，并统计一共发出了面值多少元的 PAT 代金券。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出 3 个整数，分别是 N（不超过 10 000 的正整数，为学生总数）、G（在 (60,100) 区间内的整数，为题面中描述的代金券等级分界线）、K（不超过 100 且不超过 N 的正整数，为进入名人堂的最低名次）。接下来 N 行，每行给出一位学生的账号（长度不超过15位、不带空格的字符串）和总评成绩（区间 [0, 100] 内的整数），其间以空格分隔。题目保证没有重复的账号。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在一行中输出发出的 PAT 代金券的总面值。然后按总评成绩非升序输出进入名人堂的学生的名次、账号和成绩，其间以 1 个空格分隔。需要注意的是：成绩相同的学生享有并列的排名，排名并列时，按账号的字母序升序输出。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">10 80 5<br>cy@zju.edu.cn 78<br>cy@pat-edu.com 87<br>1001@qq.com 65<br>uh-oh@163.com 96<br>test@126.com 39<br>anyone@qq.com 87<br>zoe@mit.edu 80<br>jack@ucla.edu 88<br>bob@cmu.edu 80<br>ken@163.com 70<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">360<br>1 uh-oh@163.com 96<br>2 jack@ucla.edu 88<br>3 anyone@qq.com 87<br>3 cy@pat-edu.com 87<br>5 bob@cmu.edu 80<br>5 zoe@mit.edu 80<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>结构体数组+sort排序，需要注意输出格式控制</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> score=<span class=\"hljs-number\">0</span>;<br>    string email;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(student a,student b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(a.score==b.score) <span class=\"hljs-keyword\">return</span> a.email&lt;b.email;\t\t<span class=\"hljs-comment\">//如果分数相同返回字典序小的</span><br>    <span class=\"hljs-keyword\">return</span> a.score&gt;b.score;\t\t\t\t<span class=\"hljs-comment\">//返回分数最大的</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n,g,k;<br>    cin&gt;&gt;n&gt;&gt;g&gt;&gt;k;<br>    student st[n];<br>    <span class=\"hljs-keyword\">int</span> money=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;\t\t\t\t\t<span class=\"hljs-comment\">//输入加存钱</span><br>        cin&gt;&gt;st[i].email&gt;&gt;st[i].score;<br>        <span class=\"hljs-keyword\">if</span>(g&lt;=st[i].score&amp;&amp;st[i].score&lt;=<span class=\"hljs-number\">100</span>)&#123;<br>            money+=<span class=\"hljs-number\">50</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">60</span>&lt;=st[i].score&amp;&amp;st[i].score&lt;g)&#123;<br>            money+=<span class=\"hljs-number\">20</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">sort</span>(st,st+n,cmp);\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//排序</span><br>    cout&lt;&lt;money&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">int</span> cnt =<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//用来判断用否超过名人堂个数</span><br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//遍历st结构体数组</span><br>    <span class=\"hljs-keyword\">int</span> same=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//分数相同的个数</span><br>    <span class=\"hljs-keyword\">int</span> fscore=st[<span class=\"hljs-number\">0</span>].score;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//用来判断分数是否相同</span><br>    <span class=\"hljs-comment\">//这道题就格式输出需要注意下！</span><br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br><br>        <span class=\"hljs-keyword\">if</span>(fscore==st[i].score)&#123;<br>            cout&lt;&lt;cnt&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;st[i].email&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;st[i].score&lt;&lt;endl;\t<span class=\"hljs-comment\">//相同即输出</span><br>            <span class=\"hljs-keyword\">if</span>(i!=<span class=\"hljs-number\">0</span>) same++;\t\t<span class=\"hljs-comment\">//不为0号，则same++。</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(fscore&gt;st[i].score)&#123;<br>            cnt=cnt+same;\t\t\t<span class=\"hljs-comment\">//不等，更新cnt值</span><br>            same=<span class=\"hljs-number\">1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//更新same值</span><br>            <span class=\"hljs-keyword\">if</span>(cnt&gt;k)&#123; <span class=\"hljs-keyword\">break</span>;&#125;\t\t<span class=\"hljs-comment\">//大于名人堂个数结束</span><br>            cout&lt;&lt;cnt&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;st[i].email&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;st[i].score&lt;&lt;endl;<br>            fscore=st[i].score;\t\t<span class=\"hljs-comment\">//更新用来判断分数是否相同的fscore</span><br><br>        &#125;<br>        i++;<br><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805055176163328\">题目详情 - L2-027 名人堂与代金券 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort"
            ]
        },
        {
            "id": "http://example.com/posts/c3f0f4cb.html",
            "url": "http://example.com/posts/c3f0f4cb.html",
            "title": "L2-026 小字辈 (25 分)",
            "date_published": "2022-04-13T01:45:49.000Z",
            "content_html": "<h2 id=\"L2-026-小字辈-25-分\"><a href=\"#L2-026-小字辈-25-分\" class=\"headerlink\" title=\"L2-026 小字辈 (25 分)\"></a><strong>L2-026 小字辈 (25 分)</strong></h2><p>本题给定一个庞大家族的家谱，要请你给出最小一辈的名单。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出家族人口总数 N（不超过 100 000 的正整数） —— 简单起见，我们把家族成员从 1 到 N 编号。随后第二行给出 N 个编号，其中第 i 个编号对应第 i 位成员的父&#x2F;母。家谱中辈分最高的老祖宗对应的父&#x2F;母编号为 -1。一行中的数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先输出最小的辈分（老祖宗的辈分为 1，以下逐级递增）。然后在第二行按递增顺序输出辈分最小的成员的编号。编号间以一个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">9<br>2 6 5 5 -1 5 6 4 7<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">4<br>1 9<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表建树+BFS</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; tree[<span class=\"hljs-number\">100005</span>];\t\t\t\t<span class=\"hljs-comment\">//邻接表建树</span><br><span class=\"hljs-keyword\">int</span> deeptree[<span class=\"hljs-number\">100005</span>];\t\t\t\t\t<span class=\"hljs-comment\">//记录树的深度</span><br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-keyword\">int</span> root;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//根节点</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">()</span></span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//bfs</span><br>    queue&lt;<span class=\"hljs-keyword\">int</span>&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(root);\t\t\t\t\t\t<span class=\"hljs-comment\">//根节点入队</span><br>    <span class=\"hljs-keyword\">int</span> x;\t\t\t\t\t\t\t\t<br>    <span class=\"hljs-keyword\">while</span>(!q.<span class=\"hljs-built_in\">empty</span>())&#123;<br>        x=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;tree[x].<span class=\"hljs-built_in\">size</span>() ; ++i) &#123;<br>            deeptree[tree[x][i]]=deeptree[x]+<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//每一层的深度为上一层加1</span><br>            q.<span class=\"hljs-built_in\">push</span>(tree[x][i]);<br><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> deeptree[x];\t\t\t\t<span class=\"hljs-comment\">//返回最后一个结点的深度，即深度的最大值</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    n;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">int</span> a[n];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;<br>        cin&gt;&gt;a[i];<br>        <span class=\"hljs-keyword\">if</span>(a[i]==<span class=\"hljs-number\">-1</span>)&#123;<br>            root=i;\t\t\t\t<span class=\"hljs-comment\">//找根节点</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;=n ; ++j) &#123;\t\t\t\t\t<span class=\"hljs-comment\">//建树</span><br>        tree[a[j]].<span class=\"hljs-built_in\">push_back</span>(j);\t\t\t\t\t<span class=\"hljs-comment\">//j是a[j]的孩子节点</span><br>        <span class=\"hljs-keyword\">if</span>(a[j]==<span class=\"hljs-number\">-1</span>) deeptree[j]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//初始化根节点深度为1</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> ans=<span class=\"hljs-built_in\">bfs</span>();<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">int</span> maxdeepcnt=<span class=\"hljs-number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//记录最大深度的个数</span><br>    <span class=\"hljs-keyword\">int</span> tmp[n];\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//找最大深度的id</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">1</span>; k &lt;=n ; ++k) &#123;\t\t\t\t\t<br>        <span class=\"hljs-keyword\">if</span>(ans==deeptree[k])&#123;<br>            maxdeepcnt++;<br>            tmp[maxdeepcnt]=k;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//输出格式控制</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=maxdeepcnt ; ++l) &#123;<br>        <span class=\"hljs-keyword\">if</span>(l!=maxdeepcnt) cout&lt;&lt;tmp[l]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        <span class=\"hljs-keyword\">else</span> cout&lt;&lt;tmp[l]&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805055679479808\">题目详情 - L2-026 小字辈 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "邻接表",
                "Vector",
                "Binary tree",
                "BFS"
            ]
        },
        {
            "id": "http://example.com/posts/f073a4bd.html",
            "url": "http://example.com/posts/f073a4bd.html",
            "title": "L2-023 图着色问题 (25 分)",
            "date_published": "2022-04-12T10:59:52.000Z",
            "content_html": "<h2 id=\"L2-023-图着色问题-25-分\"><a href=\"#L2-023-图着色问题-25-分\" class=\"headerlink\" title=\"L2-023 图着色问题 (25 分)\"></a>L2-023 图着色问题 (25 分)</h2><p>图着色问题是一个著名的NP完全问题。给定无向图<em>G</em>&#x3D;(<em>V</em>,<em>E</em>)，问可否用<em>K</em>种颜色为<em>V</em>中的每一个顶点分配一种颜色，使得不会有两个相邻顶点具有同一种颜色？</p>\n<p>但本题并不是要你解决这个着色问题，而是对给定的一种颜色分配，请你判断这是否是图着色问题的一个解。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出3个整数<em>V</em>（0&lt;<em>V</em>≤500）、<em>E</em>（≥0）和<em>K</em>（0&lt;<em>K</em>≤<em>V</em>），分别是无向图的顶点数、边数、以及颜色数。顶点和颜色都从1到<em>V</em>编号。随后<em>E</em>行，每行给出一条边的两个端点的编号。在图的信息给出之后，给出了一个正整数<em>N</em>（≤20），是待检查的颜色分配方案的个数。随后<em>N</em>行，每行顺次给出<em>V</em>个顶点的颜色（第<em>i</em>个数字表示第<em>i</em>个顶点的颜色），数字间以空格分隔。题目保证给定的无向图是合法的（即不存在自回路和重边）。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每种颜色分配方案，如果是图着色问题的一个解则输出<code>Yes</code>，否则输出<code>No</code>，每句占一行。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><img src=\"/posts/f073a4bd.htm/graph.png\" alt=\"graph\" style=\"zoom: 67%;\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">6 8 3<br>2 1<br>1 3<br>4 6<br>2 5<br>2 4<br>5 4<br>5 6<br>3 6<br>4<br>1 2 3 3 1 2<br>4 5 6 6 4 5<br>1 2 3 4 5 6<br>2 3 4 2 3 4<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">Yes<br>Yes<br>No<br>No<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><p><strong>Set + 邻接表</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> v,e,k;<br>    cin&gt;&gt;v&gt;&gt;e&gt;&gt;k;<br>    vector&lt;<span class=\"hljs-keyword\">int</span>&gt; g[<span class=\"hljs-number\">505</span>];\t\t\t<span class=\"hljs-comment\">//邻接表</span><br>    <span class=\"hljs-keyword\">int</span> color[<span class=\"hljs-number\">505</span>];\t\t\t\t<span class=\"hljs-comment\">//记录颜色</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;e ; ++i) &#123;       <span class=\"hljs-comment\">//建立邻接表</span><br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        g[a].<span class=\"hljs-built_in\">push_back</span>(b);<br>        g[b].<span class=\"hljs-built_in\">push_back</span>(a);<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> time;<br>    cin&gt;&gt;time;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> flag=<span class=\"hljs-number\">1</span>;<br>        set&lt;<span class=\"hljs-keyword\">int</span>&gt; s;\t\t\t\t\t<span class=\"hljs-comment\">//用来统计颜色总数</span><br>        s.<span class=\"hljs-built_in\">clear</span>();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=v; ++i) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            color[i]=num;<br>            s.<span class=\"hljs-built_in\">insert</span>(num);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(s.<span class=\"hljs-built_in\">size</span>()!=k)&#123;\t\t\t<span class=\"hljs-comment\">//如果颜色数不等于k即非法</span><br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;No&quot;</span>&lt;&lt;endl;<br>            <span class=\"hljs-keyword\">continue</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=v ; ++l) &#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//遍历邻接表</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;g[l].<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>                <span class=\"hljs-keyword\">if</span>(color[l]==color[g[l][i]])&#123;\t\t\t\t<span class=\"hljs-comment\">//如果相邻结点颜色一样则为假</span><br>                    flag=<span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">1</span>)&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;Yes&quot;</span>&lt;&lt;endl;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;No&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805057298481152\">题目详情 - L2-023 图着色问题 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "Set",
                "团体程序设计天梯赛",
                "Graph",
                "邻接表",
                "Vector"
            ]
        },
        {
            "id": "http://example.com/posts/bbb783c5.html",
            "url": "http://example.com/posts/bbb783c5.html",
            "title": "由遍历顺序构建二叉树(前序+中序;后序+中序)",
            "date_published": "2022-04-07T12:55:58.000Z",
            "content_html": "<h1 id=\"由遍历顺序构建二叉树-前序-中序-后序-中序\"><a href=\"#由遍历顺序构建二叉树-前序-中序-后序-中序\" class=\"headerlink\" title=\"由遍历顺序构建二叉树(前序+中序;后序+中序)\"></a>由遍历顺序构建二叉树(前序+中序;后序+中序)</h1><h2 id=\"前序-中序\"><a href=\"#前序-中序\" class=\"headerlink\" title=\"前序+中序\"></a>前序+中序</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">PreAndInCreateTree</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> prel,<span class=\"hljs-keyword\">int</span> prer, <span class=\"hljs-keyword\">int</span> inl,<span class=\"hljs-keyword\">int</span> inr)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(prel&gt;prer)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    BiTNode *root;<br>    <span class=\"hljs-keyword\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    root=(BiTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BiTNode));\t\t\t\t<span class=\"hljs-comment\">//记住分配空间</span><br>    root-&gt;data=preF[prel];\t\t\t<span class=\"hljs-comment\">//前序遍历的第一个结点是根结点</span><br>    <span class=\"hljs-keyword\">int</span> i;<br>    <span class=\"hljs-keyword\">for</span>(i=inl;i&lt;=inr;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(preF[prel]==inF[i])&#123;<br>            index=i;<br>            <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-comment\">//找到了根结点，目的是在中序遍历中划分左右子树</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//则其左子树节点个数为index-inl</span><br>    <span class=\"hljs-comment\">//前序遍历的第一个结点是根结点,所以新的递归区间是prel+1,到prel+index-inl,</span><br>    <span class=\"hljs-comment\">//中序遍历是左根右，所以新的递归区间是inl,index-1</span><br>    root-&gt;lchild=<span class=\"hljs-built_in\">PreAndInCreateTree</span>(prel+<span class=\"hljs-number\">1</span>,prel+index-inl,inl,index<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-comment\">//前序遍历是根左右，所以新的递归区间是prel+index-inl+1,prep</span><br>    <span class=\"hljs-comment\">//中序遍历是左根右，所以新的递归区间是index+1,inr</span><br>    root-&gt;rchild=<span class=\"hljs-built_in\">PreAndInCreateTree</span>(prel+index-inl+<span class=\"hljs-number\">1</span>,prer,index+<span class=\"hljs-number\">1</span>,inr);<br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"后序-中序\"><a href=\"#后序-中序\" class=\"headerlink\" title=\"后序+中序\"></a>后序+中序</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">PostAndInCreateTree</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> postl,<span class=\"hljs-keyword\">int</span> postr, <span class=\"hljs-keyword\">int</span> inl,<span class=\"hljs-keyword\">int</span> inr)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(postl&gt;postr)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    BiTNode *root;<br>    <span class=\"hljs-keyword\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    root=(BiTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BiTNode));<br>    root-&gt;data=posts[postr];\t<span class=\"hljs-comment\">//后序遍历的最后一个结点是根结点</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = inl; i &lt;=inr ; ++i) &#123;<br>        <span class=\"hljs-keyword\">if</span>(posts[postr]==ins[i])<br>        &#123;<br>            index =i;<br>            <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-comment\">//找到了根结点，目的是在中序遍历中划分左右子树</span><br>        &#125;<br>    &#125;<span class=\"hljs-comment\">//则其左子树节点个数为index-inl</span><br>    <span class=\"hljs-comment\">//后续遍历的最后一个结点是根节点，所以新的递归区间是，postl,postl+index-inl-1</span><br>    <span class=\"hljs-comment\">//中序遍历是左根右，所以新的递归区间是inl,index-1</span><br>    root-&gt;lchild=<span class=\"hljs-built_in\">PostAndInCreateTree</span>(postl,postl+index-inl<span class=\"hljs-number\">-1</span>,inl,index<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-comment\">//后序遍历是左右根，所以新的递归区间是postl+index-inl,postr-1</span><br>    <span class=\"hljs-comment\">//中序遍历是左根右，所以新的递归区间是index+1,inr</span><br>    root-&gt;rchild=<span class=\"hljs-built_in\">PostAndInCreateTree</span>(postl+index-inl,postr<span class=\"hljs-number\">-1</span>,index+<span class=\"hljs-number\">1</span>,inr);<br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"完整代码示例\"><a href=\"#完整代码示例\" class=\"headerlink\" title=\"完整代码示例\"></a>完整代码示例</h2><p><strong>前序+中序；后序+中序。递归调用可视化查看：(有助于理解递归调用过程)</strong></p>\n<p><a href=\"https://pythontutor.com/\">Python Tutor - Visualize Python, Java, C, C++, JavaScript, TypeScript, and Ruby code execution</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> data;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>\t\t\t<span class=\"hljs-comment\">//左右孩子指针</span><br>&#125;BiTNode,*BiTree;<br><span class=\"hljs-comment\">//tree</span><br><span class=\"hljs-keyword\">int</span> preF[<span class=\"hljs-number\">6</span>]=&#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;;\t\t<span class=\"hljs-comment\">//前序遍历</span><br><span class=\"hljs-keyword\">int</span> inF[<span class=\"hljs-number\">6</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">5</span>&#125;;\t\t<span class=\"hljs-comment\">//中序遍历</span><br><span class=\"hljs-comment\">//trees</span><br><span class=\"hljs-keyword\">int</span> posts[<span class=\"hljs-number\">7</span>]=&#123;<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">4</span>&#125;;\t<span class=\"hljs-comment\">//后序遍历</span><br><span class=\"hljs-keyword\">int</span> ins[<span class=\"hljs-number\">7</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>&#125;;\t\t<span class=\"hljs-comment\">//中序遍历</span><br><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">PreAndInCreateTree</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> prel,<span class=\"hljs-keyword\">int</span> prer, <span class=\"hljs-keyword\">int</span> inl,<span class=\"hljs-keyword\">int</span> inr)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(prel&gt;prer)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    BiTNode *root;<br>    <span class=\"hljs-keyword\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    root=(BiTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BiTNode));\t\t\t\t<span class=\"hljs-comment\">//记住分配空间</span><br>    root-&gt;data=preF[prel];\t\t\t<span class=\"hljs-comment\">//前序遍历的第一个结点是根结点</span><br>    <span class=\"hljs-keyword\">int</span> i;<br>    <span class=\"hljs-keyword\">for</span>(i=inl;i&lt;=inr;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(preF[prel]==inF[i])&#123;<br>            index=i;<br>            <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-comment\">//找到了根结点，目的是在中序遍历中划分左右子树</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//则其左子树节点个数为index-inl</span><br>    <span class=\"hljs-comment\">//前序遍历的第一个结点是根结点,所以新的递归区间是prel+1,到prel+index-inl,</span><br>    <span class=\"hljs-comment\">//中序遍历是左根右，所以新的递归区间是inl,index-1</span><br>    root-&gt;lchild=<span class=\"hljs-built_in\">PreAndInCreateTree</span>(prel+<span class=\"hljs-number\">1</span>,prel+index-inl,inl,index<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-comment\">//前序遍历是根左右，所以新的递归区间是prel+index-inl+1,prep</span><br>    <span class=\"hljs-comment\">//中序遍历是左根右，所以新的递归区间是index+1,inr</span><br>    root-&gt;rchild=<span class=\"hljs-built_in\">PreAndInCreateTree</span>(prel+index-inl+<span class=\"hljs-number\">1</span>,prer,index+<span class=\"hljs-number\">1</span>,inr);<br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">PostAndInCreateTree</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> postl,<span class=\"hljs-keyword\">int</span> postr, <span class=\"hljs-keyword\">int</span> inl,<span class=\"hljs-keyword\">int</span> inr)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(postl&gt;postr)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    BiTNode *root;<br>    <span class=\"hljs-keyword\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    root=(BiTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BiTNode));<br>    root-&gt;data=posts[postr];\t<span class=\"hljs-comment\">//后序遍历的最后一个结点是根结点</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = inl; i &lt;=inr ; ++i) &#123;<br>        <span class=\"hljs-keyword\">if</span>(posts[postr]==ins[i])<br>        &#123;<br>            index =i;<br>            <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-comment\">//找到了根结点，目的是在中序遍历中划分左右子树</span><br>        &#125;<br>    &#125;<span class=\"hljs-comment\">//则其左子树节点个数为index-inl</span><br>    <span class=\"hljs-comment\">//后续遍历的最后一个结点是根节点，所以新的递归区间是，postl,postl+index-inl-1</span><br>    <span class=\"hljs-comment\">//中序遍历是左根右，所以新的递归区间是inl,index-1</span><br>    root-&gt;lchild=<span class=\"hljs-built_in\">PostAndInCreateTree</span>(postl,postl+index-inl<span class=\"hljs-number\">-1</span>,inl,index<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-comment\">//后序遍历是左右根，所以新的递归区间是postl+index-inl,postr-1</span><br>    <span class=\"hljs-comment\">//中序遍历是左根右，所以新的递归区间是index+1,inr</span><br>    root-&gt;rchild=<span class=\"hljs-built_in\">PostAndInCreateTree</span>(postl+index-inl,postr<span class=\"hljs-number\">-1</span>,index+<span class=\"hljs-number\">1</span>,inr);<br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    queue&lt;BiTree&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(T);<br>    <span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>())&#123;<br>        BiTNode *tmp =q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        cout&lt;&lt;tmp-&gt;data;<br>        <span class=\"hljs-keyword\">if</span>(tmp-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>            q.<span class=\"hljs-built_in\">push</span>(tmp-&gt;lchild);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(tmp-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>            q.<span class=\"hljs-built_in\">push</span>(tmp-&gt;rchild);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br><br>    BiTree tree;<br>    tree=<span class=\"hljs-literal\">NULL</span>;<br>    tree=<span class=\"hljs-built_in\">PreAndInCreateTree</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>);<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;输入为前序加中序遍历，输出他的层序遍历：&quot;</span>&lt;&lt;endl;<br>    <span class=\"hljs-built_in\">LevelOrder</span>(tree);<br>    cout&lt;&lt;endl;<br>    BiTree trees;<br>    trees=<span class=\"hljs-literal\">NULL</span>;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;输入为后序加中序遍历，输出他的层序遍历：&quot;</span>&lt;&lt;endl;<br>    trees=<span class=\"hljs-built_in\">PostAndInCreateTree</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>);<br>    <span class=\"hljs-built_in\">LevelOrder</span>(trees);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">输入为前序加中序遍历，输出他的层序遍历：<br><span class=\"hljs-number\">425136</span><br>输入为后序加中序遍历，输出他的层序遍历：<br><span class=\"hljs-number\">4163572</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/posts/de8d2b40.html",
            "url": "http://example.com/posts/de8d2b40.html",
            "title": "二叉树的存储结构",
            "date_published": "2022-04-06T11:41:45.000Z",
            "content_html": "<h1 id=\"二叉树的存储结构\"><a href=\"#二叉树的存储结构\" class=\"headerlink\" title=\"二叉树的存储结构\"></a>二叉树的存储结构</h1><h2 id=\"1-顺序存储方式\"><a href=\"#1-顺序存储方式\" class=\"headerlink\" title=\"1.顺序存储方式\"></a>1.顺序存储方式</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 100</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">TreeNode</span>&#123;</span><br>    ElemType value;\t\t\t<span class=\"hljs-comment\">//结点中的数据元素</span><br>    <span class=\"hljs-keyword\">bool</span> isEmpty;\t\t\t<span class=\"hljs-comment\">//结点是否为空</span><br>&#125;;<br><br>TreeNode t[MaxSize];<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"2-链式存储结构\"><a href=\"#2-链式存储结构\" class=\"headerlink\" title=\"2.链式存储结构\"></a>2.链式存储结构</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>\t\t\t<span class=\"hljs-comment\">//左右孩子指针</span><br>&#125;BiTNode,*BiTree;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"3-三叉链表\"><a href=\"#3-三叉链表\" class=\"headerlink\" title=\"3.三叉链表\"></a>3.三叉链表</h2><p>三叉链表—方便找父节点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>\t\t\t<span class=\"hljs-comment\">//左右孩子指针</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">parent</span>;</span>\t\t\t\t\t<span class=\"hljs-comment\">//父结点指针</span><br>&#125;BiTNode,*BiTree;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/posts/ec26e8a3.html",
            "url": "http://example.com/posts/ec26e8a3.html",
            "title": "串的存储结构",
            "date_published": "2022-04-06T11:35:13.000Z",
            "content_html": "<h1 id=\"串的存储结构\"><a href=\"#串的存储结构\" class=\"headerlink\" title=\"串的存储结构\"></a>串的存储结构</h1><h2 id=\"1-定长顺序存储表示\"><a href=\"#1-定长顺序存储表示\" class=\"headerlink\" title=\"1.定长顺序存储表示\"></a>1.定长顺序存储表示</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAXLEN 255\t\t\t\t\t<span class=\"hljs-comment\">//预定义最大串长</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">char</span> ch[MAXLEN];\t\t\t\t<span class=\"hljs-comment\">//每个分量存储一个字符</span><br>    <span class=\"hljs-keyword\">int</span> length;\t\t\t\t\t\t<span class=\"hljs-comment\">//串的实际长度</span><br>&#125;SSting;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"2-堆分配存储表示\"><a href=\"#2-堆分配存储表示\" class=\"headerlink\" title=\"2.堆分配存储表示\"></a>2.堆分配存储表示</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">char</span> *ch;\t\t\t\t\t\t<span class=\"hljs-comment\">//按串长分配存储区，ch指向串的基地址</span><br>    <span class=\"hljs-keyword\">int</span> length;\t\t\t\t\t\t<span class=\"hljs-comment\">//串的长度</span><br>&#125;HString;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/posts/b6c47025.html",
            "url": "http://example.com/posts/b6c47025.html",
            "title": "队列",
            "date_published": "2022-03-31T07:58:39.000Z",
            "content_html": "<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><h3 id=\"队列的顺序存储解构\"><a href=\"#队列的顺序存储解构\" class=\"headerlink\" title=\"队列的顺序存储解构\"></a>队列的顺序存储解构</h3><h4 id=\"队列的顺序存储\"><a href=\"#队列的顺序存储\" class=\"headerlink\" title=\"队列的顺序存储\"></a>队列的顺序存储</h4><p>队列的顺序存储类型可描述为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50\t\t\t\t\t\t<span class=\"hljs-comment\">//定义队列中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    ElemType data[MaxSize];\t\t\t\t<span class=\"hljs-comment\">//存放队列元素</span><br>    <span class=\"hljs-keyword\">int</span> front,rear;\t\t\t\t\t\t<span class=\"hljs-comment\">//队头指针和队尾指针</span><br>&#125;SqQueue;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"循环队列的操作\"><a href=\"#循环队列的操作\" class=\"headerlink\" title=\"循环队列的操作\"></a>循环队列的操作</h4><p>(1)初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q)</span></span>&#123;<br>    Q.rear=Q.front=<span class=\"hljs-number\">0</span>;\t\t\t\t\t<span class=\"hljs-comment\">//初始化队首、队尾指针</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>(2)判队空</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">(SqQueue Q)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear == Q.front) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\t\t<span class=\"hljs-comment\">//队空条件</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>(3)入队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">EnQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q,ElemType x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>((Q.rear+<span class=\"hljs-number\">1</span>)%MaxSize==Q.front)    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t<span class=\"hljs-comment\">//队满则报错</span><br>    Q.data[Q.rear]=x;<br>    Q.rear=(Q.rear+<span class=\"hljs-number\">1</span>)%MaxSize;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队尾指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>(4)出队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear == Q.front)\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; \t\t\t<span class=\"hljs-comment\">//队列空则报错</span><br>    x=Q.data[Q.front];<br>    Q.front=(Q.front+<span class=\"hljs-number\">1</span>)%MaxSize;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队头指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"循环队列的完整操作\"><a href=\"#循环队列的完整操作\" class=\"headerlink\" title=\"循环队列的完整操作\"></a>循环队列的完整操作</h4><h5 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> ElemType;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50\t\t\t\t\t\t<span class=\"hljs-comment\">//定义队列中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    ElemType data[MaxSize];\t\t\t\t<span class=\"hljs-comment\">//存放队列元素</span><br>    <span class=\"hljs-keyword\">int</span> front,rear;\t\t\t\t\t\t<span class=\"hljs-comment\">//队头指针和队尾指针</span><br>&#125;SqQueue;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q)</span></span>&#123;<br>    Q.rear=Q.front=<span class=\"hljs-number\">0</span>;\t\t\t\t\t<span class=\"hljs-comment\">//初始化队首、队尾指针</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">(SqQueue Q)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear == Q.front) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\t\t<span class=\"hljs-comment\">//队空条件</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">EnQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q,ElemType x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>((Q.rear+<span class=\"hljs-number\">1</span>)%MaxSize==Q.front)    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t<span class=\"hljs-comment\">//队满则报错</span><br>    Q.data[Q.rear]=x;<br>    Q.rear=(Q.rear+<span class=\"hljs-number\">1</span>)%MaxSize;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队尾指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear == Q.front)\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; \t\t\t<span class=\"hljs-comment\">//队列空则报错</span><br>    x=Q.data[Q.front];<br>    Q.front=(Q.front+<span class=\"hljs-number\">1</span>)%MaxSize;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队头指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintSqQueue</span><span class=\"hljs-params\">(SqQueue Q)</span></span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//遍历操作 </span><br>\t<span class=\"hljs-keyword\">int</span> point = Q.front;<br>\t<span class=\"hljs-keyword\">while</span>(point!=Q.rear)\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//如果point指向Q.rear说明遍历结束 </span><br>\t&#123;\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//也就是point指向了队尾元素的下一个位置 </span><br>\t\tcout&lt;&lt;Q.data[point]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t\tpoint=(point+<span class=\"hljs-number\">1</span>)%MaxSize;<br>\t&#125;<br>\tcout&lt;&lt;endl;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>\tSqQueue Q;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//声明了一个顺序队列 </span><br>\t<span class=\"hljs-built_in\">InitQueue</span>(Q);\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始化这个队列 </span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">EnQueue</span>(Q,i);\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//入队操作 </span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">PrintSqQueue</span>(Q);\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//遍历 </span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">5</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">int</span> x;<br>\t\t<span class=\"hljs-built_in\">DeQueue</span>(Q,x);\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//出队 </span><br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;这是第&quot;</span>&lt;&lt;i&lt;&lt;<span class=\"hljs-string\">&quot;次出队&quot;</span>&lt;&lt;<span class=\"hljs-string\">&quot;出队的元素是&quot;</span> &lt;&lt;x&lt;&lt;endl;<br>\t\t<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">isEmpty</span>(Q))\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队列非空则遍历 </span><br>\t\t&#123;\t<br>\t\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;当前队列为：&quot;</span>;<br>\t\t\t<span class=\"hljs-built_in\">PrintSqQueue</span>(Q);<br>\t\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;此时的队列为空队列&quot;</span>&lt;&lt;endl;<br>\t\t&#125;<br>\t\t<br>\t&#125; <br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span><br>这是第<span class=\"hljs-number\">1</span>次出队出队的元素是<span class=\"hljs-number\">0</span><br>当前队列为：<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span><br>这是第<span class=\"hljs-number\">2</span>次出队出队的元素是<span class=\"hljs-number\">1</span><br>当前队列为：<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span><br>这是第<span class=\"hljs-number\">3</span>次出队出队的元素是<span class=\"hljs-number\">2</span><br>当前队列为：<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span><br>这是第<span class=\"hljs-number\">4</span>次出队出队的元素是<span class=\"hljs-number\">3</span><br>当前队列为：<span class=\"hljs-number\">4</span><br>这是第<span class=\"hljs-number\">5</span>次出队出队的元素是<span class=\"hljs-number\">4</span><br>此时的队列为空队列<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"队列的链式存储结构\"><a href=\"#队列的链式存储结构\" class=\"headerlink\" title=\"队列的链式存储结构\"></a>队列的链式存储结构</h3><h4 id=\"队列的链式存储\"><a href=\"#队列的链式存储\" class=\"headerlink\" title=\"队列的链式存储\"></a>队列的链式存储</h4><p>队列的链式存储类型可描述为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span>&#123;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列结点</span><br>    ElemType data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span> *<span class=\"hljs-title\">next</span>;</span><br>&#125;LinkNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列\t</span><br>    LinkNode *front,*rear;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队列的对头和队尾指针</span><br>&#125;LinkQueue;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"链式队列的基本操作\"><a href=\"#链式队列的基本操作\" class=\"headerlink\" title=\"链式队列的基本操作\"></a>链式队列的基本操作</h4><p>(1)初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q)</span></span>&#123;<br>    Q.front = Q.rear=(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));\t\t<span class=\"hljs-comment\">//建立头结点</span><br>    Q.front-&gt;next=<span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t<span class=\"hljs-comment\">//初始为空</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>(2判队空</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsEmpty</span><span class=\"hljs-params\">(LinkQueue Q)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front==Q.rear)\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>(3)入队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">EnQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,ElemType x)</span></span>&#123;<br>    LinkNode *s =(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));<br>    s-&gt;data=x;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//创建新结点，插入到链尾</span><br>    s-&gt;next=<span class=\"hljs-literal\">NULL</span>;<br>    Q.rear-&gt;next=s;<br>    Q.rear=s;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>(4)出队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,ElemType &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear)\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t<span class=\"hljs-comment\">//空队</span><br>    LinkNode *p =Q.front-&gt;next;<br>    x=p-&gt;data;<br>    Q.front-&gt;next=p-&gt;next;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear==p)&#123;<br>        Q.rear = Q.front;\t\t\t\t\t\t<span class=\"hljs-comment\">//若原队列中只有一个结点，删除后变空</span><br>    &#125;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"链式队列的完整操作\"><a href=\"#链式队列的完整操作\" class=\"headerlink\" title=\"链式队列的完整操作\"></a>链式队列的完整操作</h4><h5 id=\"程序源代码：-1\"><a href=\"#程序源代码：-1\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std; <br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span>&#123;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列结点</span><br>    <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span> *<span class=\"hljs-title\">next</span>;</span><br>&#125;LinkNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列\t</span><br>    LinkNode *front,*rear;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队列的对头和队尾指针</span><br>&#125;LinkQueue;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q)</span></span>&#123;<br>    Q.front = Q.rear=(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));\t\t<span class=\"hljs-comment\">//建立头结点</span><br>    Q.front-&gt;next=<span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t<span class=\"hljs-comment\">//初始为空</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsEmpty</span><span class=\"hljs-params\">(LinkQueue Q)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front==Q.rear)\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">EnQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,<span class=\"hljs-keyword\">int</span> x)</span></span>&#123;<br>    LinkNode *s =(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));<br>    s-&gt;data=x;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//创建新结点，插入到链尾</span><br>    s-&gt;next=<span class=\"hljs-literal\">NULL</span>;<br>    Q.rear-&gt;next=s;<br>    Q.rear=s;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,<span class=\"hljs-keyword\">int</span> &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear)\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t<span class=\"hljs-comment\">//空队</span><br>    LinkNode *p =Q.front-&gt;next;<br>    x=p-&gt;data;<br>    Q.front-&gt;next=p-&gt;next;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear==p)&#123;<br>        Q.rear = Q.front;\t\t\t\t\t\t<span class=\"hljs-comment\">//若原队列中只有一个结点，删除后变空</span><br>    &#125;<br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintQueue</span><span class=\"hljs-params\">(LinkQueue Q)</span>\t\t\t\t\t<span class=\"hljs-comment\">//遍历队列 </span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tLinkNode *tmp=Q.front-&gt;next;\t\t\t\t<span class=\"hljs-comment\">//声明一个结点用于遍历</span><br>\t<span class=\"hljs-keyword\">while</span>(tmp!=<span class=\"hljs-literal\">NULL</span>)\t\t\t\t\t\t\t<span class=\"hljs-comment\">//如果这个结点为空则停止遍历</span><br>\t&#123;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//这里即tmp已经指向最后一个元素的-&gt;next</span><br>\t\tcout&lt;&lt;tmp-&gt;data&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;\t\t\t\t\t<span class=\"hljs-comment\">//因为在初始化时已经置最后一个元素的-&gt;next=NULL</span><br>\t\ttmp=tmp-&gt;next;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//所以说这里只需要判断tmp为空即可</span><br>\t&#125;<br>\tcout&lt;&lt;endl;<br>\t<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tLinkQueue Q;\t\t\t\t<span class=\"hljs-comment\">//声明链式一个队列 </span><br>\t<span class=\"hljs-built_in\">InitQueue</span>(Q);\t\t\t\t<span class=\"hljs-comment\">//初始化队列 </span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">5</span>;i&gt;<span class=\"hljs-number\">0</span>;i--)     \t<span class=\"hljs-comment\">//创建队列 </span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">EnQueue</span>(Q,i);<br>\t&#125;<br>\t<span class=\"hljs-built_in\">PrintQueue</span>(Q);      \t\t<span class=\"hljs-comment\">//遍历 </span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">5</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">int</span> x;<br>\t\t<span class=\"hljs-built_in\">DeQueue</span>(Q,x);\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//出队 </span><br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;这是第&quot;</span>&lt;&lt;i&lt;&lt;<span class=\"hljs-string\">&quot;次出队&quot;</span>&lt;&lt;<span class=\"hljs-string\">&quot;出队的元素是&quot;</span> &lt;&lt;x&lt;&lt;endl;<br>\t\t<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">IsEmpty</span>(Q))\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队列非空则遍历 </span><br>\t\t&#123;\t<br>\t\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;当前队列为：&quot;</span>;<br>\t\t\t<span class=\"hljs-built_in\">PrintQueue</span>(Q);<br>\t\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;此时的队列为空队列&quot;</span>&lt;&lt;endl;<br>\t\t&#125;<br>\t\t<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"程序输出：-1\"><a href=\"#程序输出：-1\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是第<span class=\"hljs-number\">1</span>次出队出队的元素是<span class=\"hljs-number\">5</span><br>当前队列为：<span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是第<span class=\"hljs-number\">2</span>次出队出队的元素是<span class=\"hljs-number\">4</span><br>当前队列为：<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是第<span class=\"hljs-number\">3</span>次出队出队的元素是<span class=\"hljs-number\">3</span><br>当前队列为：<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是第<span class=\"hljs-number\">4</span>次出队出队的元素是<span class=\"hljs-number\">2</span><br>当前队列为：<span class=\"hljs-number\">1</span><br>这是第<span class=\"hljs-number\">5</span>次出队出队的元素是<span class=\"hljs-number\">1</span><br>此时的队列为空队列<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/posts/1f4ac2fb.html",
            "url": "http://example.com/posts/1f4ac2fb.html",
            "title": "栈",
            "date_published": "2022-03-30T10:04:31.000Z",
            "content_html": "<h2 id=\"栈的顺序存储结构\"><a href=\"#栈的顺序存储结构\" class=\"headerlink\" title=\"栈的顺序存储结构\"></a>栈的顺序存储结构</h2><h3 id=\"顺序栈的实现\"><a href=\"#顺序栈的实现\" class=\"headerlink\" title=\"顺序栈的实现\"></a>顺序栈的实现</h3><p>栈的顺序存储类型可描述为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50\t\t\t\t<span class=\"hljs-comment\">//定义栈中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    ElemType data[MaxSize];\t\t\t<span class=\"hljs-comment\">//存放栈中元素</span><br>    <span class=\"hljs-keyword\">int</span> top;\t\t\t\t\t\t<span class=\"hljs-comment\">//栈顶指针</span><br>&#125;SqStack;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"顺序栈的基本运算\"><a href=\"#顺序栈的基本运算\" class=\"headerlink\" title=\"顺序栈的基本运算\"></a>顺序栈的基本运算</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitStack</span><span class=\"hljs-params\">(SqStack &amp;s)</span></span>&#123;<br>    s.top=<span class=\"hljs-number\">-1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//初始化栈顶指针</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"判栈空\"><a href=\"#判栈空\" class=\"headerlink\" title=\"判栈空\"></a>判栈空</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">StackEmpty</span><span class=\"hljs-params\">(SqStack S)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(s.top == <span class=\"hljs-number\">-1</span>)\t\t\t<span class=\"hljs-comment\">//栈空</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">else</span>\t\t\t\t\t<span class=\"hljs-comment\">//不空</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;      <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"进栈\"><a href=\"#进栈\" class=\"headerlink\" title=\"进栈\"></a>进栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Push</span><span class=\"hljs-params\">(SqStack &amp;s,ElemType x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(s.top == MaxSize<span class=\"hljs-number\">-1</span>)\t\t\t\t<span class=\"hljs-comment\">//栈满，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    s.data[++s.top]=x;\t\t\t\t\t<span class=\"hljs-comment\">//指针先加1，在入栈</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"出栈\"><a href=\"#出栈\" class=\"headerlink\" title=\"出栈\"></a>出栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Pop</span><span class=\"hljs-params\">(SqStack &amp;s,ElemType &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(s.top == <span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t<span class=\"hljs-comment\">//栈空，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    x=s.data[s.top--];\t\t\t\t\t<span class=\"hljs-comment\">//先出栈，指针再减1</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"读栈顶元素\"><a href=\"#读栈顶元素\" class=\"headerlink\" title=\"读栈顶元素\"></a>读栈顶元素</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">GetTop</span><span class=\"hljs-params\">(SqStack s,ElemType &amp;x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(s.top == <span class=\"hljs-number\">-1</span> )\t\t\t\t\t<span class=\"hljs-comment\">//栈空，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>   \tx=s.data[s.top];\t\t\t\t\t<span class=\"hljs-comment\">//x记录栈顶元素</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"顺序栈的完整操作\"><a href=\"#顺序栈的完整操作\" class=\"headerlink\" title=\"顺序栈的完整操作\"></a>顺序栈的完整操作</h3><h4 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std; <br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> ElemType;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50\t\t\t\t<span class=\"hljs-comment\">//定义栈中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    ElemType data[MaxSize];\t\t\t<span class=\"hljs-comment\">//存放栈中元素</span><br>    <span class=\"hljs-keyword\">int</span> top;\t\t\t\t\t\t<span class=\"hljs-comment\">//栈顶指针</span><br>&#125;SqStack;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitStack</span><span class=\"hljs-params\">(SqStack &amp;s)</span></span>&#123;<br>    s.top=<span class=\"hljs-number\">-1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//初始化栈顶指针</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">StackEmpty</span><span class=\"hljs-params\">(SqStack S)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>)\t\t\t<span class=\"hljs-comment\">//栈空</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">else</span>\t\t\t\t\t<span class=\"hljs-comment\">//不空</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;      <br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Push</span><span class=\"hljs-params\">(SqStack &amp;s,ElemType x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(s.top == MaxSize<span class=\"hljs-number\">-1</span>)\t\t\t\t<span class=\"hljs-comment\">//栈满，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    s.data[++s.top]=x;\t\t\t\t\t<span class=\"hljs-comment\">//指针先加1，在入栈</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Pop</span><span class=\"hljs-params\">(SqStack &amp;s,ElemType &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(s.top == <span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t<span class=\"hljs-comment\">//栈空，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    x=s.data[s.top--];\t\t\t\t\t<span class=\"hljs-comment\">//先出栈，指针再减1</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">GetTop</span><span class=\"hljs-params\">(SqStack s,ElemType &amp;x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(s.top == <span class=\"hljs-number\">-1</span> )\t\t\t\t\t<span class=\"hljs-comment\">//栈空，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>   \tx=s.data[s.top];\t\t\t\t\t<span class=\"hljs-comment\">//x记录栈顶元素</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintSqStack</span><span class=\"hljs-params\">(SqStack s)</span>\t\t\t<span class=\"hljs-comment\">//遍历栈 </span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> tmp = s.top;<br>\t<span class=\"hljs-keyword\">while</span>(tmp!=<span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t<span class=\"hljs-comment\">//如果tmp==-1说明遍历结束 </span><br>\t&#123;\t\t\t\t\t\t\t\t\t <br>\t\tcout&lt;&lt;s.data[tmp--]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t&#125;<br>\tcout&lt;&lt;endl; <br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tSqStack s;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//声明一个顺序栈 </span><br>\t<span class=\"hljs-built_in\">InitStack</span>(s);\t\t\t\t\t\t<span class=\"hljs-comment\">//初始化一个顺序栈 </span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">5</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">Push</span>(s,i);\t\t\t\t\t\t<span class=\"hljs-comment\">//入栈 </span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">PrintSqStack</span>(s);\t\t\t\t\t<span class=\"hljs-comment\">//遍历 </span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">5</span>;i++)&#123;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//为了对比GetTop和Pop操作 </span><br>\t\t<span class=\"hljs-keyword\">int</span> x; <br>\t\t<span class=\"hljs-built_in\">GetTop</span>(s,x);\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//取栈顶元素 </span><br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;这是GetTop操作,栈顶元素为&quot;</span>&lt;&lt;x&lt;&lt;endl;<br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;这是GetTop操作后的栈遍历:&quot;</span>;<br>\t\t<span class=\"hljs-built_in\">PrintSqStack</span>(s); <br>\t\t<span class=\"hljs-built_in\">Pop</span>(s,x);\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//出栈 </span><br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;这是Pop操作,出栈的元素为&quot;</span>&lt;&lt;x&lt;&lt;endl;<br>\t\t<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">StackEmpty</span>(s))<br>\t\t&#123;<br>\t\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;这是Pop操作后的栈遍历:&quot;</span>;<br>\t\t\t<span class=\"hljs-built_in\">PrintSqStack</span>(s); <br>\t\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;此时栈空！&quot;</span>&lt;&lt;endl;<br>\t\t&#125;<br>\t\t<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是GetTop操作,栈顶元素为<span class=\"hljs-number\">5</span><br>这是GetTop操作后的栈遍历:<span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是Pop操作,出栈的元素为<span class=\"hljs-number\">5</span><br>这是Pop操作后的栈遍历:<span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是GetTop操作,栈顶元素为<span class=\"hljs-number\">4</span><br>这是GetTop操作后的栈遍历:<span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是Pop操作,出栈的元素为<span class=\"hljs-number\">4</span><br>这是Pop操作后的栈遍历:<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是GetTop操作,栈顶元素为<span class=\"hljs-number\">3</span><br>这是GetTop操作后的栈遍历:<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是Pop操作,出栈的元素为<span class=\"hljs-number\">3</span><br>这是Pop操作后的栈遍历:<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是GetTop操作,栈顶元素为<span class=\"hljs-number\">2</span><br>这是GetTop操作后的栈遍历:<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>这是Pop操作,出栈的元素为<span class=\"hljs-number\">2</span><br>这是Pop操作后的栈遍历:<span class=\"hljs-number\">1</span><br>这是GetTop操作,栈顶元素为<span class=\"hljs-number\">1</span><br>这是GetTop操作后的栈遍历:<span class=\"hljs-number\">1</span><br>这是Pop操作,出栈的元素为<span class=\"hljs-number\">1</span><br>此时栈空！<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"栈的链式存储结构\"><a href=\"#栈的链式存储结构\" class=\"headerlink\" title=\"栈的链式存储结构\"></a>栈的链式存储结构</h3><p>栈的链式存储类型可描述为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span> *<span class=\"hljs-title\">next</span>;</span>\t\t\t\t<span class=\"hljs-comment\">//指针域</span><br>&#125;*Linknode;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈类型操作</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/posts/1387c3a8.html",
            "url": "http://example.com/posts/1387c3a8.html",
            "title": "双链表与静态链表",
            "date_published": "2022-03-29T07:48:53.000Z",
            "content_html": "<h2 id=\"双链表\"><a href=\"#双链表\" class=\"headerlink\" title=\"双链表\"></a>双链表</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>双链表中结点类型的描述如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DNode</span>&#123;</span>\t\t\t\t\t<span class=\"hljs-comment\">//定义双链表结点类型</span><br>    ElemType data;\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DNode</span> *<span class=\"hljs-title\">prior</span>,*<span class=\"hljs-title\">next</span>;</span>\t\t\t<span class=\"hljs-comment\">//前驱和后继指针</span><br>&#125;DNode,*DLinkList;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"双链表的插入操作\"><a href=\"#双链表的插入操作\" class=\"headerlink\" title=\"双链表的插入操作\"></a>双链表的插入操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//p所指结点是s所指结点的前驱结点</span><br>s-&gt;next=p-&gt;next;           \t\t\t<span class=\"hljs-comment\">//将结点*s插入到结点*p之后</span><br>p-&gt;next-&gt;prior=s;<br>s-&gt;prior=p;<br>p-&gt;next=s;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"双链表的删除操作\"><a href=\"#双链表的删除操作\" class=\"headerlink\" title=\"双链表的删除操作\"></a>双链表的删除操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//删除双链表中结点*p的后继结点*q</span><br>p-&gt;next=q-&gt;next;<br>q-&gt;next-&gt;prior=p;<br><span class=\"hljs-built_in\">free</span>(q);\t\t\t\t\t\t\t<span class=\"hljs-comment\">//释放节点空间</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"静态链表\"><a href=\"#静态链表\" class=\"headerlink\" title=\"静态链表\"></a>静态链表</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>静态链表结构类型的描述如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50\t\t\t\t<span class=\"hljs-comment\">//静态链表的最大长度</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t<span class=\"hljs-comment\">//静态链表结构类型的定义</span><br>    ElemType data;\t\t\t\t<span class=\"hljs-comment\">//储存数据元素</span><br>    <span class=\"hljs-keyword\">int</span> next;\t\t\t\t\t<span class=\"hljs-comment\">//下一个元素的数组下标</span><br>&#125;SLinkList[MaxSize];<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"对静态链表结构类型的定义的理解与猜想验证\"><a href=\"#对静态链表结构类型的定义的理解与猜想验证\" class=\"headerlink\" title=\"对静态链表结构类型的定义的理解与猜想验证\"></a>对静态链表结构类型的定义的理解与猜想验证</h3><p><img src=\"/posts/1387c3a8.htm/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8-16485415016461.png\" alt=\"静态链表\"></p>\n<p><img src=\"/posts/1387c3a8.htm/123-16485415073922.png\" alt=\"123\"></p>\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/posts/8c3d792d.html",
            "url": "http://example.com/posts/8c3d792d.html",
            "title": "单链表上的基本操作",
            "date_published": "2022-03-28T09:40:19.000Z",
            "content_html": "<h2 id=\"单链表的定义\"><a href=\"#单链表的定义\" class=\"headerlink\" title=\"单链表的定义\"></a>单链表的定义</h2><p>单链表中结点类型的描述如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>&#123;</span>\t\t\t<span class=\"hljs-comment\">//定义单链表结点类型</span><br>    ElemType data;\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">next</span>;</span>\t\t<span class=\"hljs-comment\">//指针域</span><br>&#125;LNode,*LinkList;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"单链表上基本操作的实现\"><a href=\"#单链表上基本操作的实现\" class=\"headerlink\" title=\"单链表上基本操作的实现\"></a>单链表上基本操作的实现</h2><h3 id=\"1-采用头插法建立单链表\"><a href=\"#1-采用头插法建立单链表\" class=\"headerlink\" title=\"1.采用头插法建立单链表\"></a>1.采用头插法建立单链表</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">List_HeadInsert</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>&#123;\t\t\t\t<span class=\"hljs-comment\">//逆向建立单链表</span><br>    LNode *s;<br>    <span class=\"hljs-keyword\">int</span> x;<br>    L=(LinkList)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t\t<span class=\"hljs-comment\">//创建头结点</span><br>    L-&gt;next = <span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始化为空链表</span><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//输入结点的值</span><br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">9999</span>)&#123;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//输入9999表示结束</span><br>        s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t<span class=\"hljs-comment\">//建立新结点</span><br>        s-&gt;data = x;<br>        s-&gt;next = L-&gt;next;<br>        L-&gt;next = s;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//将新结点插入表中，L为头指针</span><br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> L;<br>&#125;\t\t\t<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-采用尾插法建立单链表\"><a href=\"#2-采用尾插法建立单链表\" class=\"headerlink\" title=\"2.采用尾插法建立单链表\"></a>2.采用尾插法建立单链表</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">List_TailInsert</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>&#123;\t\t\t\t<span class=\"hljs-comment\">//正向建立单链表</span><br>    <span class=\"hljs-keyword\">int</span> x;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//设置元素类型为整型</span><br>    L=(LinkList)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t\t<br>    LNode *s,*r=L;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//r为表尾指针</span><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);<br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">9999</span>)&#123;<br>        s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));<br>        s-&gt;data=x;<br>        r-&gt;next = s;<br>        r = s;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//r指向新的表尾结点</span><br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);<br>        <br>    &#125;<br>    r-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span> L;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-按序号查找结点值\"><a href=\"#3-按序号查找结点值\" class=\"headerlink\" title=\"3.按序号查找结点值\"></a>3.按序号查找结点值</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">LNode *<span class=\"hljs-title\">GetElem</span><span class=\"hljs-params\">(LinkList L,<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//计数，初始为1</span><br>    LNode *p = L-&gt;next;\t\t\t\t\t<span class=\"hljs-comment\">//第1个结点指针赋给p</span><br>    <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-keyword\">return</span> L;\t\t\t\t\t\t<span class=\"hljs-comment\">//若i等于0，则返回头结点</span><br>    <span class=\"hljs-keyword\">if</span>(i&lt;<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t<span class=\"hljs-comment\">//若i无效，则返回NULL</span><br>    <span class=\"hljs-keyword\">while</span>(p&amp;&amp;j&lt;i)\t\t\t\t\t\t<span class=\"hljs-comment\">//从第一个结点开始找，查找第i个结点</span><br>    &#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> p;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//返回第i个结点的指针，若i大于表长，则返回NULL</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-按值查找表结点\"><a href=\"#4-按值查找表结点\" class=\"headerlink\" title=\"4.按值查找表结点\"></a>4.按值查找表结点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">LNode *<span class=\"hljs-title\">LocateElem</span><span class=\"hljs-params\">(LinkList L,ElemType e)</span></span>&#123;<br>    LNode *p = L-&gt;next;<br>    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;p-&gt;data!=e)\t\t\t<span class=\"hljs-comment\">//从第i个结点开始查找data域为e的结点</span><br>    &#123;<br>        p=p-&gt;next;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> p;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//找到后返回该结点指针，否则返回NULL</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-插入结点操作\"><a href=\"#5-插入结点操作\" class=\"headerlink\" title=\"5.插入结点操作\"></a>5.插入结点操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//p所指结点是s所指结点的前驱结点</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(LinkList &amp;L,<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> x)</span></span>&#123;<br>\tLNode *p;<br>\tLNode *s=(LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t\t<span class=\"hljs-comment\">//一定要分配空间！！！！！</span><br>\ts-&gt;data=x;<br>\ts-&gt;next=<span class=\"hljs-literal\">NULL</span>; <br>\tp=<span class=\"hljs-built_in\">GetElem</span>(L,i<span class=\"hljs-number\">-1</span>);<br>\t<span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>\t\ts-&gt;next =p-&gt;next;<br>\t\tp-&gt;next=s;<br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;插入值非法&quot;</span>&lt;&lt;endl;<br>\t\t<span class=\"hljs-keyword\">return</span> ; <br>\t&#125;<br>\t<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>对某一结点进行前插操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//注意与插入结点相对比!!!!!!!!</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Delect</span><span class=\"hljs-params\">(LinkList &amp;L,<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;<br>\t<span class=\"hljs-comment\">//p所指结点是q所指结点的前驱结点</span><br>\tLNode *p;<br>\tLNode *q=(LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t   <span class=\"hljs-comment\">//申请空间 </span><br>\tp=<span class=\"hljs-built_in\">GetElem</span>(L,i<span class=\"hljs-number\">-1</span>);\t\t\t\t    <span class=\"hljs-comment\">//查找删除位置的前驱结点</span><br>\t<span class=\"hljs-keyword\">if</span>(p==<span class=\"hljs-literal\">NULL</span>||p-&gt;next==<span class=\"hljs-literal\">NULL</span>)          <span class=\"hljs-comment\">//p==NULL是i值不合法的情况 </span><br>\t&#123;\t\t\t\t\t\t\t\t    <span class=\"hljs-comment\">//p-&gt;next==NUll是i-1号结点后已无其他结点 </span><br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;删除值非法&quot;</span>&lt;&lt;endl;<br>\t\t<span class=\"hljs-built_in\">free</span>(q);<br>\t\t<span class=\"hljs-keyword\">return</span> ;<br>\t&#125;<br>\tq=p-&gt;next;\t\t\t\t\t<span class=\"hljs-comment\">//令q指向被删除的结点</span><br>\tp-&gt;next=q-&gt;next;\t\t\t<span class=\"hljs-comment\">//将*q结点从链中“断开”</span><br>\t<span class=\"hljs-built_in\">free</span>(q);<br>\t\t\t\t\t\t\t\t<br>&#125;\t<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"6-删除结点操作\"><a href=\"#6-删除结点操作\" class=\"headerlink\" title=\"6.删除结点操作\"></a>6.删除结点操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//p所指结点是q所指结点的前驱结点</span><br>p=<span class=\"hljs-built_in\">GetElem</span>(L,i<span class=\"hljs-number\">-1</span>)\t\t\t<span class=\"hljs-comment\">//查找删除位置的前驱结点</span><br>q=p-&gt;next;\t\t\t\t\t<span class=\"hljs-comment\">//令q指向被删除的结点</span><br>p-&gt;next=q-&gt;next;\t\t\t<span class=\"hljs-comment\">//将*q结点从链中“断开”</span><br><span class=\"hljs-built_in\">free</span>(q);\t\t\t\t\t<span class=\"hljs-comment\">//释放结点的储存空间</span><br></code></pre></div></td></tr></table></figure>\n\n<p>拓展:删除结点*p</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">q=p-&gt;next;\t\t\t\t\t<span class=\"hljs-comment\">//令q指向*p的后继节点</span><br>p-&gt;data = p-&gt;next-&gt;data\t\t<span class=\"hljs-comment\">//和后继结点交换数据域</span><br>p-&gt;next = q-&gt;next;\t\t\t<span class=\"hljs-comment\">//将*q结点从链中“断开”</span><br><span class=\"hljs-built_in\">free</span>(q);\t\t\t\t\t<span class=\"hljs-comment\">//释放后继结点的储存空间</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"单链表上基本操作的完整实现\"><a href=\"#单链表上基本操作的完整实现\" class=\"headerlink\" title=\"单链表上基本操作的完整实现\"></a>单链表上基本操作的完整实现</h2><h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> ElemType;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>&#123;</span>\t\t\t<span class=\"hljs-comment\">//定义单链表结点类型</span><br>    ElemType data;\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">next</span>;</span>\t\t<span class=\"hljs-comment\">//指针域</span><br>&#125;LNode,*LinkList;<br><span class=\"hljs-function\">LinkList <span class=\"hljs-title\">List_HeadInsert</span><span class=\"hljs-params\">(LinkList &amp;L)</span></span>&#123;\t\t\t\t<span class=\"hljs-comment\">//逆向建立单链表</span><br>    LNode *s;<br>    <span class=\"hljs-keyword\">int</span> x;<br>    L=(LinkList)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t\t<span class=\"hljs-comment\">//创建头结点</span><br>    L-&gt;next = <span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始化为空链表</span><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//输入结点的值</span><br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">9999</span>)&#123;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//输入9999表示结束</span><br>        s = (LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t<span class=\"hljs-comment\">//建立新结点</span><br>        s-&gt;data = x;<br>        s-&gt;next = L-&gt;next;<br>        L-&gt;next = s;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//将新结点插入表中，L为头指针</span><br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> L;<br>&#125;<br><span class=\"hljs-function\">LNode *<span class=\"hljs-title\">GetElem</span><span class=\"hljs-params\">(LinkList L,<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//计数，初始为1</span><br>    LNode *p = L-&gt;next;\t\t\t\t\t<span class=\"hljs-comment\">//第1个结点指针赋给p</span><br>    <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-keyword\">return</span> L;\t\t\t\t\t\t<span class=\"hljs-comment\">//若i等于0，则返回头结点</span><br>    <span class=\"hljs-keyword\">if</span>(i&lt;<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t<span class=\"hljs-comment\">//若i无效，则返回NULL</span><br>    <span class=\"hljs-keyword\">while</span>(p&amp;&amp;j&lt;i)\t\t\t\t\t\t<span class=\"hljs-comment\">//从第一个结点开始找，查找第i个结点</span><br>    &#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> p;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//返回第i个结点的指针，若i大于表长，则返回NULL</span><br>&#125;\t<br><span class=\"hljs-function\">LNode *<span class=\"hljs-title\">LocateElem</span><span class=\"hljs-params\">(LinkList L,ElemType e)</span></span>&#123;<br>    LNode *p = L-&gt;next;<br>    <span class=\"hljs-keyword\">while</span>(p!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;p-&gt;data!=e)\t\t\t<span class=\"hljs-comment\">//从第i个结点开始查找data域为e的结点</span><br>    &#123;<br>        p=p-&gt;next;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> p;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//找到后返回该结点指针，否则返回NULL</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintLinkList</span><span class=\"hljs-params\">(LinkList L)</span></span>&#123;        <span class=\"hljs-comment\">//这段代码根据链表表尾结点的 next 指针指向 NULL 来遍历整个链表。</span><br>\tLNode *tmp = L-&gt;next;<br>\t<span class=\"hljs-keyword\">if</span>(tmp==<span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;链表为空&quot;</span>&lt;&lt;endl;<br>\t\t<span class=\"hljs-keyword\">return</span> ; <br>\t&#125;<br>\t<span class=\"hljs-keyword\">while</span>(tmp!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>\t\tcout&lt;&lt;tmp-&gt;data&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t\ttmp=tmp-&gt;next;<br>\t&#125;<br>\tcout&lt;&lt;endl; <br>&#125;\t<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(LinkList &amp;L,<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> x)</span></span>&#123;<br>\tLNode *p;<br>\tLNode *s=(LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t\t<span class=\"hljs-comment\">//申请空间 </span><br>\ts-&gt;data=x;<br>\ts-&gt;next=<span class=\"hljs-literal\">NULL</span>; <br>\tp=<span class=\"hljs-built_in\">GetElem</span>(L,i<span class=\"hljs-number\">-1</span>);<br>\t<span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>\t\ts-&gt;next =p-&gt;next;<br>\t\tp-&gt;next=s;<br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;插入值非法&quot;</span>&lt;&lt;endl;<br>\t\t<span class=\"hljs-keyword\">return</span> ; <br>\t&#125;<br>\t<br>&#125;<br><span class=\"hljs-comment\">//注意与插入结点相对比!!!!!!!!</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Delect</span><span class=\"hljs-params\">(LinkList &amp;L,<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;<br>\t<span class=\"hljs-comment\">//p所指结点是q所指结点的前驱结点</span><br>\tLNode *p;<br>\tLNode *q=(LNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LNode));\t\t\t   <span class=\"hljs-comment\">//申请空间 </span><br>\tp=<span class=\"hljs-built_in\">GetElem</span>(L,i<span class=\"hljs-number\">-1</span>);\t\t\t\t    <span class=\"hljs-comment\">//查找删除位置的前驱结点</span><br>\t<span class=\"hljs-keyword\">if</span>(p==<span class=\"hljs-literal\">NULL</span>||p-&gt;next==<span class=\"hljs-literal\">NULL</span>)          <span class=\"hljs-comment\">//p==NULL是i值不合法的情况 </span><br>\t&#123;\t\t\t\t\t\t\t\t    <span class=\"hljs-comment\">//p-&gt;next==NUll是i-1号结点后已无其他结点 </span><br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;删除值非法&quot;</span>&lt;&lt;endl;<br>\t\t<span class=\"hljs-built_in\">free</span>(q);<br>\t\t<span class=\"hljs-keyword\">return</span> ;<br>\t&#125;<br>\tq=p-&gt;next;\t\t\t\t\t<span class=\"hljs-comment\">//令q指向被删除的结点</span><br>\tp-&gt;next=q-&gt;next;\t\t\t<span class=\"hljs-comment\">//将*q结点从链中“断开”</span><br>\t<span class=\"hljs-built_in\">free</span>(q);<br>\t\t\t\t\t\t\t\t<br>&#125;\t<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>\tLinkList L;\t\t\t\t\t\t<span class=\"hljs-comment\">//声明一个单链表 </span><br>\t<span class=\"hljs-built_in\">List_HeadInsert</span>(L);\t\t\t\t<span class=\"hljs-comment\">//使用头插法插入4个元素，分别是1,2,3,4 </span><br>\t<span class=\"hljs-built_in\">PrintLinkList</span>(L);\t\t\t\t<span class=\"hljs-comment\">//遍历这个单链表</span><br>\tLNode *tmp;<br>\ttmp=<span class=\"hljs-built_in\">GetElem</span>(L,<span class=\"hljs-number\">2</span>);\t\t\t\t<span class=\"hljs-comment\">//找到位置为2的元素 </span><br>\t<span class=\"hljs-keyword\">if</span>(tmp!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;位置为2的元素是：&quot;</span>&lt;&lt;tmp-&gt;data&lt;&lt;endl;<br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;非法的位置&quot;</span>&lt;&lt;endl;<br>\t&#125;<br>\ttmp=<span class=\"hljs-built_in\">LocateElem</span>(L,<span class=\"hljs-number\">1</span>);\t\t\t<span class=\"hljs-comment\">//找到值为1的元素</span><br>\t<span class=\"hljs-keyword\">if</span>(tmp!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;存在值为1的元素：&quot;</span>&lt;&lt;tmp-&gt;data&lt;&lt;endl;<br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\tcout&lt;&lt;<span class=\"hljs-string\">&quot;没有找到该值&quot;</span>&lt;&lt;endl;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">PrintLinkList</span>(L);\t\t\t\t<span class=\"hljs-comment\">//遍历这个单链表</span><br>\t<span class=\"hljs-built_in\">Insert</span>(L,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">110</span>);\t\t\t\t<span class=\"hljs-comment\">//在5这个位置插入元素110</span><br>\t<span class=\"hljs-built_in\">PrintLinkList</span>(L);\t\t\t\t<span class=\"hljs-comment\">//遍历这个单链表</span><br>\t<span class=\"hljs-built_in\">Delect</span>(L,<span class=\"hljs-number\">2</span>);        \t\t\t<span class=\"hljs-comment\">//删除位序为2的元素</span><br>\t<span class=\"hljs-built_in\">PrintLinkList</span>(L);\t\t\t\t<span class=\"hljs-comment\">//遍历这个单链表</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br>位置为<span class=\"hljs-number\">2</span>的元素是：<span class=\"hljs-number\">3</span><br>存在值为<span class=\"hljs-number\">1</span>的元素：<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">110</span><br><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">110</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/posts/102e5a59.html",
            "url": "http://example.com/posts/102e5a59.html",
            "title": "单链表的定义",
            "date_published": "2022-03-28T08:00:51.000Z",
            "content_html": "<h1 id=\"单链表的定义\"><a href=\"#单链表的定义\" class=\"headerlink\" title=\"单链表的定义\"></a>单链表的定义</h1><h2 id=\"1-单链表的定义\"><a href=\"#1-单链表的定义\" class=\"headerlink\" title=\"1.单链表的定义\"></a>1.单链表的定义</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>&#123;</span>      <span class=\"hljs-comment\">//定义单链表结点类型</span><br>    ElemType data;         <span class=\"hljs-comment\">//每个结点存放一个数据元素</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">next</span>;</span>    <span class=\"hljs-comment\">//指针指向下一个节点</span><br>&#125;LNode,*LinkList;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>&#123;</span>      <span class=\"hljs-comment\">//定义单链表结点类型</span><br>    ElemType data;         <span class=\"hljs-comment\">//每个结点存放一个数据元素</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">next</span>;</span>    <span class=\"hljs-comment\">//指针指向下一个节点</span><br>&#125;;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> <span class=\"hljs-title\">LNode</span>;</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">LinkList</span>;</span><br></code></pre></div></td></tr></table></figure>\n\n<p>这两种定义是一模一样的！</p>\n<p>要表示一个单链表时，只需要声明一个头指针L，指向单链表的第一个结点。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">LNoode *L;      <span class=\"hljs-comment\">//声明一个指向单链表第一个结点的指针</span><br><span class=\"hljs-comment\">//或：</span><br>LinkList L;     <span class=\"hljs-comment\">//声明一个指向单链表第一个结点的指针</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"样例代码\"><a href=\"#样例代码\" class=\"headerlink\" title=\"样例代码\"></a>样例代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">LNode *L；<br><span class=\"hljs-comment\">//和：</span><br>LinkList L;<br><span class=\"hljs-comment\">//两者的区别就是强调不同</span><br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/posts/102e5a59.htm/%E6%BC%94%E7%A4%BA.png\"></p>\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/posts/602ee0a8.html",
            "url": "http://example.com/posts/602ee0a8.html",
            "title": "优先队列",
            "date_published": "2022-03-11T03:54:21.000Z",
            "content_html": "<h1 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h1><h2 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h2><p>定义：priority_queue&lt;Type, Container, Functional&gt;</p>\n<p>Type 就是数据类型，Container 就是容器类型（Container必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector），Functional 就是比较的方式。</p>\n<p>当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是大顶堆。<br>一般是：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//升序队列，小顶堆</span><br>priority_queue &lt;<span class=\"hljs-keyword\">int</span>,vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,greater&lt;<span class=\"hljs-keyword\">int</span>&gt; &gt; q;<br><span class=\"hljs-comment\">//降序队列，大顶堆</span><br>priority_queue &lt;<span class=\"hljs-keyword\">int</span>,vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,less&lt;<span class=\"hljs-keyword\">int</span>&gt; &gt;q;<br><br><span class=\"hljs-comment\">//greater和less是std实现的两个仿函数（就是使一个类的使用看上去像一个函数。其实现就是类中实现一个operator()，这个类就有了类似函数的行为，就是一个仿函数类了）</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"样例一P1090-NOIP2004-提高组-合并果子-x2F-USACO06NOV-Fence-Repair-G\"><a href=\"#样例一P1090-NOIP2004-提高组-合并果子-x2F-USACO06NOV-Fence-Repair-G\" class=\"headerlink\" title=\"样例一P1090 [NOIP2004 提高组] 合并果子 &#x2F; [USACO06NOV] Fence Repair G\"></a>样例一P1090 [NOIP2004 提高组] 合并果子 &#x2F; [USACO06NOV] Fence Repair G</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p>\n<p>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n-1次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p>\n<p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1 ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p>\n<p>例如有 33种果子，数目依次为 1 ， 2 ， 9 。可以先将 1 、 2 堆合并，新堆数目为 3 ，耗费体力为 3 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12 ，耗费体力为 12 。所以多多总共耗费体力 &#x3D;3+12&#x3D;15 。可以证明 15为最小的体力耗费值。</p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>共两行。<br>第一行是一个整数 n*(1≤<em>n</em>≤10000) ，表示果子的种类数。</p>\n<p>第二行包含 <em>n</em> 个整数，用空格分隔，第 <em>i</em> 个整数 a<strong>i*(1≤*a</strong>i<em>≤20000) 是第 i</em> 种果子的数目。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^{31} 。</p>\n<h3 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h3><h4 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a><strong>输入 #1</strong></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">3</span> <br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">9</span> <br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a><strong>输出 #1</strong></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">15</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>priority_queue&lt;<span class=\"hljs-keyword\">int</span>,vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,greater&lt;<span class=\"hljs-keyword\">int</span>&gt; &gt; q;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">int</span> ans;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> num;<br>        cin&gt;&gt;num;<br>        q.<span class=\"hljs-built_in\">push</span>(num);<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;n<span class=\"hljs-number\">-1</span> ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> a=q.<span class=\"hljs-built_in\">top</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-keyword\">int</span> b=q.<span class=\"hljs-built_in\">top</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        ans+=a+b;<br>        q.<span class=\"hljs-built_in\">push</span>(a+b);<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.cnblogs.com/huashanqingzhu/p/11040390.html\">c++优先队列(priority_queue)用法详解 - 华山青竹 - 博客园 (cnblogs.com)</a></p>\n<p>[P1090 <a href=\"https://www.luogu.com.cn/problem/P1090\">NOIP2004 提高组] 合并果子 &#x2F; [USACO06NOV] Fence Repair G - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>\n",
            "tags": [
                "Data Structure"
            ]
        }
    ]
}