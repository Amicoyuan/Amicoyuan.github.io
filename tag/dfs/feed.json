{
    "version": "https://jsonfeed.org/version/1",
    "title": "计算机奇妙之旅 • All posts by \"dfs\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/15/Algorithm025/",
            "url": "http://example.com/2022/04/15/Algorithm025/",
            "title": "L2-013 红色警报 (25 分)",
            "date_published": "2022-04-15T13:09:30.000Z",
            "content_html": "<h2 id=\"L2-013-红色警报-25-分\"><a href=\"#L2-013-红色警报-25-分\" class=\"headerlink\" title=\"L2-013 红色警报 (25 分)\"></a>L2-013 红色警报 (25 分)</h2><p>战争中保持各个城市间的连通性非常重要。本题要求你编写一个报警程序，当失去一个城市导致国家被分裂为多个无法连通的区域时，就发出红色警报。注意：若该国本来就不完全连通，是分裂的k个区域，而失去一个城市并不改变其他城市之间的连通性，则不要发出警报。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出两个整数<code>N</code>（0 &lt; <code>N</code> ≤ 500）和<code>M</code>（≤ 5000），分别为城市个数（于是默认城市从0到<code>N</code>-1编号）和连接两城市的通路条数。随后<code>M</code>行，每行给出一条通路所连接的两个城市的编号，其间以1个空格分隔。在城市信息之后给出被攻占的信息，即一个正整数<code>K</code>和随后的<code>K</code>个被攻占的城市的编号。</p>\n<p>注意：输入保证给出的被攻占的城市编号都是合法的且无重复，但并不保证给出的通路没有重复。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个被攻占的城市，如果它会改变整个国家的连通性，则输出<code>Red Alert: City k is lost!</code>，其中<code>k</code>是该城市的编号；否则只输出<code>City k is lost.</code>即可。如果该国失去了最后一个城市，则增加一行输出<code>Game Over.</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs in\">5 4<br>0 1<br>1 3<br>3 0<br>0 4<br>5<br>1 2 0 4 3<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs out\">City 1 is lost.<br>City 2 is lost.<br>Red Alert: City 0 is lost!<br>City 4 is lost.<br>City 3 is lost.<br>Game Over.<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵建图 + DFS统计连通分量数</strong></p>\n<p><strong>对于无向图来说，dfstrave()中dfs()或bfstrave()中bfs()的调用次数等于该图的连通分量数</strong></p>\n<p><strong>无向图中的极大连通子图称为连通分量</strong></p>\n<p><strong>极大连通子图必须连通，且包含尽可能多的顶点和边</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">505</span>][<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t<span class=\"hljs-comment\">//邻接矩阵存图</span><br><span class=\"hljs-keyword\">int</span> visit[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//标记访问数组</span><br><span class=\"hljs-keyword\">int</span> lost[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//记录被攻占的城市</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> node)</span></span>&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//正常的DFS</span><br>    visit[node]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>&amp;&amp;g[node][i]==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">dfstrave</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(visit,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(visit));\t\t\t<span class=\"hljs-comment\">//初始化访问数组</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(lost[i]==<span class=\"hljs-number\">1</span>) visit[i]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//如果该城市被攻占，则标记他为以访问</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>            cnt++;      \t\t\t\t\t<span class=\"hljs-comment\">//统计连通分量数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> cnt;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-built_in\">memset</span>(lost,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(lost));\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));\t\t\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++)&#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        g[a][b]=g[b][a]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//存储无向图</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t\t\t<span class=\"hljs-comment\">//获得初始的连通分量数</span><br>    <span class=\"hljs-keyword\">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> w=<span class=\"hljs-number\">0</span>;w&lt;k;w++)&#123;<br>        <span class=\"hljs-keyword\">int</span> city;<br>        cin&gt;&gt;city;<br>        lost[city]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//记录该城市被攻占</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(g[city][i]==<span class=\"hljs-number\">1</span>)&#123;\t\t\t\t<br>                g[city][i]=g[i][city]=<span class=\"hljs-number\">0</span>;\t<span class=\"hljs-comment\">//标记和他相连的城市不再相连</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> tempcnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t<span class=\"hljs-comment\">//当前的连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(tempcnt&lt;=cnt)&#123;\t\t\t\t\t<span class=\"hljs-comment\">//如果当前的连通分量小于等于原来的连通分量，说明图的连通性没有被改变</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;City %d is lost.\\n&quot;</span>, city);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//否则，连通性被改变了</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Red Alert: City %d is lost!\\n&quot;</span>, city);<br>        &#125;<br>        cnt=tempcnt;\t\t\t\t\t\t<span class=\"hljs-comment\">//更新连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(w==n<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//城市已经被攻占完毕</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Game Over.\\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805063963230208\">题目详情 - L2-013 红色警报 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "DFS"
            ]
        },
        {
            "id": "http://example.com/2021/12/21/algorithm001/",
            "url": "http://example.com/2021/12/21/algorithm001/",
            "title": "DFS-深度优先搜索",
            "date_published": "2021-12-21T13:25:36.000Z",
            "content_html": "<h1 id=\"DFS-深度优先搜索\"><a href=\"#DFS-深度优先搜索\" class=\"headerlink\" title=\"DFS-深度优先搜索\"></a>DFS-深度优先搜索</h1><h2 id=\"样题1-全排列\"><a href=\"#样题1-全排列\" class=\"headerlink\" title=\"样题1-全排列\"></a>样题1-全排列</h2><h3 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><p>输入一个数n，输出n的全排列</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">100</span>];<br><span class=\"hljs-keyword\">int</span> book[<span class=\"hljs-number\">100</span>];<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> step)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i;<br>    <span class=\"hljs-keyword\">if</span>(step==n+<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">//这里表示dfs结束,没有可以排的数字了</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>;  i&lt;=n ; i++) &#123;<br>            cout&lt;&lt;a[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(book[i]==<span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">//说明数字i还没有被使用,可以用来排列</span><br>        &#123;<br>            a[step]=i;<span class=\"hljs-comment\">//排列数字i</span><br>            book[i]=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//标记数字i为已使用</span><br>            <span class=\"hljs-built_in\">dfs</span>(step+<span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-comment\">//继续排列没有使用的数字</span><br>            book[i]=<span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-comment\">//这里表示dfs调用结束了,意思是数字i已经全部排列完了，但还需要</span><br>            <span class=\"hljs-comment\">//按照顺序将数字i收回，重新排列。</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-built_in\">dfs</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//dfs函数的开始</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序输入：\"><a href=\"#程序输入：\" class=\"headerlink\" title=\"程序输入：\"></a>程序输入：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"样题二-自然数的拆分问题\"><a href=\"#样题二-自然数的拆分问题\" class=\"headerlink\" title=\"样题二-自然数的拆分问题\"></a>样题二-自然数的拆分问题</h2><h3 id=\"题目描述：-1\"><a href=\"#题目描述：-1\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><p>任何一个大于1的自然数n，总可以拆分成若干个小于n的自然数之和。现在给你一个自然数n，要求你求出n的拆分成一些数字的和。每个拆分后的序列中的数字从小到大排序。然后你需要输出这些序列，其中字典序小的序列需要优先输出。</p>\n<h3 id=\"程序源代码：-1\"><a href=\"#程序源代码：-1\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> num;<br><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">100000</span>]=&#123;<span class=\"hljs-number\">1</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> t)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=t<span class=\"hljs-number\">-1</span>;i++)<span class=\"hljs-comment\">//输出一种拆分方案</span><br><br>            <span class=\"hljs-keyword\">if</span>(i!=t<span class=\"hljs-number\">-1</span>) cout&lt;&lt;a[i]&lt;&lt;<span class=\"hljs-string\">&quot;+&quot;</span>;<br>            <span class=\"hljs-keyword\">else</span> cout&lt;&lt;a[i];<br>        cout&lt;&lt;endl;<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=a[t<span class=\"hljs-number\">-1</span>];i&lt;=n;i++) &#123;<br>        <span class=\"hljs-keyword\">if</span>(i&lt;num)<span class=\"hljs-comment\">//当前数i要大于等于前一位数，且不超过n</span><br>        &#123;<br>            a[t]=i;<span class=\"hljs-comment\">//保存当前拆分的数i</span><br>            n-=i;<span class=\"hljs-comment\">//n减去数i，n的值将继续拆分</span><br>            <span class=\"hljs-built_in\">dfs</span>(n,t+<span class=\"hljs-number\">1</span>);<br>            n+=i;<span class=\"hljs-comment\">//回溯：加上拆分的数，以便产生所有可能的拆分</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ;<br><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;num;<br>    <span class=\"hljs-built_in\">dfs</span>(num,<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序输入：-1\"><a href=\"#程序输入：-1\" class=\"headerlink\" title=\"程序输入：\"></a>程序输入：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">7</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序输出：-1\"><a href=\"#程序输出：-1\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"样例三：L2-038-病毒溯源-25-分\"><a href=\"#样例三：L2-038-病毒溯源-25-分\" class=\"headerlink\" title=\"样例三：L2-038 病毒溯源 (25 分)\"></a>样例三：<strong>L2-038 病毒溯源 (25 分)</strong></h2><h3 id=\"题目描述：-2\"><a href=\"#题目描述：-2\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><p>病毒容易发生变异。某种病毒可以通过突变产生若干变异的毒株，而这些变异的病毒又可能被诱发突变产生第二代变异，如此继续不断变化。</p>\n<p>现给定一些病毒之间的变异关系，要求你找出其中最长的一条变异链。</p>\n<p>在此假设给出的变异都是由突变引起的，不考虑复杂的基因重组变异问题 —— 即每一种病毒都是由唯一的一种病毒突变而来，并且不存在循环变异的情况。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出一个正整数 <em>N</em>（≤104），即病毒种类的总数。于是我们将所有病毒从 0 到 <em>N</em>−1 进行编号。</p>\n<p>随后 <em>N</em> 行，每行按以下格式描述一种病毒的变异情况：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">k</span> 变异株<span class=\"hljs-number\">1</span> …… 变异株k<br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>k</code> 是该病毒产生的变异毒株的种类数，后面跟着每种变异株的编号。第 <em>i</em> 行对应编号为 <em>i</em> 的病毒（0≤<em>i</em>&lt;<em>N</em>）。题目保证病毒源头有且仅有一个。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先输出从源头开始最长变异链的长度。</p>\n<p>在第二行中输出从源头开始最长的一条变异链，编号间以 1 个空格分隔，行首尾不得有多余空格。如果最长链不唯一，则输出最小序列。</p>\n<p>注：我们称序列 { <em>a</em>1,⋯,<em>a**n</em> } 比序列 { <em>b</em>1,⋯,<em>b**n</em> } “小”，如果存在 1≤<em>k</em>≤<em>n</em> 满足 <em>a**i</em>&#x3D;<em>b**i</em> 对所有 <em>i</em>&lt;<em>k</em> 成立，且 <em>a**k</em>&lt;<em>b**k</em>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs in\">10<br>3 6 4 8<br>0<br>0<br>0<br>2 5 9<br>0<br>1 7<br>1 2<br>0<br>2 3 1结尾无空行<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs out\">4<br>0 4 9 1结尾无空行<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序源代码：-2\"><a href=\"#程序源代码：-2\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; ans, tmp;<br><span class=\"hljs-keyword\">bool</span> a[<span class=\"hljs-number\">10005</span>][<span class=\"hljs-number\">10005</span>];<br><span class=\"hljs-keyword\">bool</span> book[<span class=\"hljs-number\">10005</span>];<br><span class=\"hljs-keyword\">int</span> maxn;<br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> root,<span class=\"hljs-keyword\">int</span> len)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(len&gt;maxn)<br>    &#123;<br>        maxn =len;<br>        ans = tmp;<br><br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(len == maxn &amp;&amp; tmp &lt; ans)<br>    &#123;<br>        ans = tmp;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(a[root][i]) <span class=\"hljs-comment\">//连通</span><br>        &#123;<br>            tmp.<span class=\"hljs-built_in\">push_back</span>(i);<br>            <span class=\"hljs-built_in\">dfs</span>(i,len+<span class=\"hljs-number\">1</span>);<br>            tmp.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">int</span> root=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;k ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> x;<br>            cin&gt;&gt;x;<br>            book[x]=<span class=\"hljs-literal\">true</span>;    <span class=\"hljs-comment\">//用来判断谁是病毒源头，题目给出病毒源头有且仅有一个</span><br>            a[i][x]=<span class=\"hljs-literal\">true</span>;    <span class=\"hljs-comment\">//使用邻接矩阵来储存图，连通为true，否则为false</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span>(book[root]) root++;  <span class=\"hljs-comment\">//寻找病毒源头</span><br>    tmp.<span class=\"hljs-built_in\">push_back</span>(root);<br>    <span class=\"hljs-built_in\">dfs</span>(root,<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//从病毒源头开始dfs</span><br>    cout&lt;&lt;ans.<span class=\"hljs-built_in\">size</span>()&lt;&lt;endl;<br>    <span class=\"hljs-comment\">//输出格式控制</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i &lt; ans.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>       <span class=\"hljs-keyword\">if</span>(i!=ans.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>)<br>       &#123;<br>           cout&lt;&lt;ans[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>       &#125;<br>       <span class=\"hljs-keyword\">else</span><br>       &#123;<br>           cout&lt;&lt;ans[i];<br>       &#125;<br>        <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"样题四：L2-020-功夫传人-25-分\"><a href=\"#样题四：L2-020-功夫传人-25-分\" class=\"headerlink\" title=\"样题四：L2-020 功夫传人 (25 分)\"></a>样题四：<strong>L2-020 功夫传人 (25 分)</strong></h2><h3 id=\"题目描述：-3\"><a href=\"#题目描述：-3\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><p>一门武功能否传承久远并被发扬光大，是要看缘分的。一般来说，师傅传授给徒弟的武功总要打个折扣，于是越往后传，弟子们的功夫就越弱…… 直到某一支的某一代突然出现一个天分特别高的弟子（或者是吃到了灵丹、挖到了特别的秘笈），会将功夫的威力一下子放大N倍 —— 我们称这种弟子为“得道者”。</p>\n<p>这里我们来考察某一位祖师爷门下的徒子徒孙家谱：假设家谱中的每个人只有1位师傅（除了祖师爷没有师傅）；每位师傅可以带很多徒弟；并且假设辈分严格有序，即祖师爷这门武功的每个第<code>i</code>代传人只能在第<code>i-1</code>代传人中拜1个师傅。我们假设已知祖师爷的功力值为<code>Z</code>，每向下传承一代，就会减弱<code>r%</code>，除非某一代弟子得道。现给出师门谱系关系，要求你算出所有得道者的功力总值。</p>\n<h3 id=\"输入格式：-1\"><a href=\"#输入格式：-1\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出3个正整数，分别是：<em>N</em>（≤105）——整个师门的总人数（于是每个人从0到<em>N</em>−1编号，祖师爷的编号为0）；<em>Z</em>——祖师爷的功力值（不一定是整数，但起码是正数）；<em>r</em> ——每传一代功夫所打的折扣百分比值（不超过100的正数）。接下来有<em>N</em>行，第<em>i</em>行（<em>i</em>&#x3D;0,⋯,<em>N</em>−1）描述编号为<em>i</em>的人所传的徒弟，格式为：</p>\n<p><em>K**i</em> ID[1] ID[2] ⋯ ID[<em>K**i</em>]</p>\n<p>其中<em>K**i</em>是徒弟的个数，后面跟的是各位徒弟的编号，数字间以空格间隔。<em>K**i</em>为零表示这是一位得道者，这时后面跟的一个数字表示其武功被放大的倍数。</p>\n<h3 id=\"输出格式：-1\"><a href=\"#输出格式：-1\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出所有得道者的功力总值，只保留其整数部分。题目保证输入和正确的输出都不超过1010。</p>\n<h3 id=\"输入样例：-1\"><a href=\"#输入样例：-1\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs in\">10 18.0 1.00<br>3 2 3 5<br>1 9<br>1 4<br>1 7<br>0 7<br>2 6 1<br>1 8<br>0 9<br>0 4<br>0 3结尾无空行<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"输出样例：-1\"><a href=\"#输出样例：-1\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs out\">404<br>结尾无空行<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序源代码：-3\"><a href=\"#程序源代码：-3\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; tree[<span class=\"hljs-number\">100000</span>];  <span class=\"hljs-comment\">//用于邻接表建树</span><br><span class=\"hljs-keyword\">int</span> book[<span class=\"hljs-number\">100000</span>];<br><span class=\"hljs-keyword\">double</span> sum;<br><span class=\"hljs-keyword\">double</span> r;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index,<span class=\"hljs-keyword\">double</span> power)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(book[index]) <span class=\"hljs-comment\">//是得道者就乘他的倍数 </span><br>    &#123;<br>        sum += power * book[index];<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;tree[index].<span class=\"hljs-built_in\">size</span>();i++)  <span class=\"hljs-comment\">//遍历整个树</span><br>    &#123;<br>        <span class=\"hljs-built_in\">dfs</span>(tree[index][i],power*r);<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    <span class=\"hljs-keyword\">double</span> z;<br>    cin&gt;&gt;n&gt;&gt;z&gt;&gt;r;<br>    r=(<span class=\"hljs-number\">100</span>-r)/<span class=\"hljs-number\">100.0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class=\"hljs-keyword\">if</span>(k==<span class=\"hljs-number\">0</span>)   <span class=\"hljs-comment\">//这个弟子是否为得道者</span><br>        &#123;<br>            <span class=\"hljs-keyword\">int</span> power;<br>            cin&gt;&gt;power;<br>            book[i]=power;   <span class=\"hljs-comment\">//记录得道者放大倍数</span><br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;k;j++)<br>            &#123;<br>                <span class=\"hljs-keyword\">int</span> id;<br>                cin&gt;&gt;id;<br>                tree[i].<span class=\"hljs-built_in\">push_back</span>(id);      <span class=\"hljs-comment\">//使用邻接表建树</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">dfs</span>(<span class=\"hljs-number\">0</span>,z);<br>    cout&lt;&lt;(<span class=\"hljs-keyword\">int</span>)sum&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"题目相关链接：\"><a href=\"#题目相关链接：\" class=\"headerlink\" title=\"题目相关链接：\"></a>题目相关链接：</h2><p>[<a href=\"https://www.luogu.com.cn/problem/P2404\">P2404 自然数的拆分问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>]: \t“ 样例二-自然数的拆分问题”</p>\n<p>[<a href=\"https://www.luogu.com.cn/problem/P2404\"><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652361\">题目详情 - L2-038 病毒溯源 (25 分) (pintia.cn)</a></a>]: \t“ 样例三-L2-038 病毒溯源 (25 分)”</p>\n<p>[<a href=\"https://www.luogu.com.cn/problem/P2404\"><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805059118809088\">题目详情 - L2-020 功夫传人 (25 分) (pintia.cn)</a></a>]: \t“ 样例四-L2-020 功夫传人 (25 分)”</p>\n",
            "tags": [
                "DFS"
            ]
        }
    ]
}