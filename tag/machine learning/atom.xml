<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xingyuanjie.top</id>
    <title>Amicoyuan • Posts by &#34;machine learning&#34; tag</title>
    <link href="https://xingyuanjie.top" />
    <updated>2023-03-12T08:33:17.000Z</updated>
    <category term="AVX" />
    <category term="Data Structure" />
    <category term="String" />
    <category term="Find" />
    <category term="STL" />
    <category term="C++" />
    <category term="Set" />
    <category term="团体程序设计天梯赛" />
    <category term="Sort" />
    <category term="LinkList" />
    <category term="双向链表" />
    <category term="Graph" />
    <category term="邻接表" />
    <category term="Vector" />
    <category term="Binary tree" />
    <category term="BFS" />
    <category term="模拟" />
    <category term="邻接矩阵" />
    <category term="DFS" />
    <category term="结构体" />
    <category term="贪心" />
    <category term="Double类型相等比较" />
    <category term="并查集" />
    <category term="Map" />
    <category term="Pair" />
    <category term="CUDA" />
    <category term="Linux" />
    <category term="Tensorflow" />
    <category term="Machine Learning" />
    <category term="MPI" />
    <category term="Matrix" />
    <category term="GEMM" />
    <category term="AVX2" />
    <category term="dgemm" />
    <category term="Cache" />
    <category term="Blocking" />
    <category term="Intel" />
    <category term="LeetCode" />
    <category term="双指针" />
    <category term="数组翻转" />
    <category term="哈希表" />
    <category term="前缀和" />
    <category term="Mirror" />
    <category term="牛客" />
    <category term="Numactl" />
    <category term="OpenMP" />
    <category term="C/C++" />
    <category term="register" />
    <category term="Slurm" />
    <category term="性能分析工具" />
    <category term="bool" />
    <category term="gcov" />
    <entry>
        <id>https://xingyuanjie.top/2023/03/12/ML002/</id>
        <title>代价函数</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/12/ML002/"/>
        <content type="html">&lt;h2 id=&#34;代价函数&#34;&gt;&lt;a href=&#34;#代价函数&#34; class=&#34;headerlink&#34; title=&#34;代价函数&#34;&gt;&lt;/a&gt;代价函数&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/12/ML002/image-20230312164306128.png&#34; alt=&#34;image-20230312164306128&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;目标&#34;&gt;&lt;a href=&#34;#目标&#34; class=&#34;headerlink&#34; title=&#34;目标&#34;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;在本实验中，你将:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你将实现和探索成本函数的线性回归伴随一个变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工具&#34;&gt;&lt;a href=&#34;#工具&#34; class=&#34;headerlink&#34; title=&#34;工具&#34;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;在本实验室中，我们将使用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NumPy，一个用于科学计算的流行库&lt;/li&gt;
&lt;li&gt;Matplotlib，用于绘制数据的流行库&lt;/li&gt;
&lt;li&gt;本地目录的lab_utils_uni.py文件中的本地绘图例程&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; nunpy &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; np&lt;br&gt;%matplotlib widget&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; lab_utils_uni &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; plt_intuition, plt_stationary, plt_updata_onclick, soup_bowl&lt;br&gt;plt.style.use(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./deeplearning.mplstyle&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;问题意境&#34;&gt;&lt;a href=&#34;#问题意境&#34; class=&#34;headerlink&#34; title=&#34;问题意境&#34;&gt;&lt;/a&gt;问题意境&lt;/h2&gt;&lt;p&gt;你想要一个模型，它可以根据房子的大小预测房价。让我们使用与上一个实验室之前相同的两个数据点——一个1000平方英尺的房子卖了30万美元，一个2000平方英尺的房子卖了50万美元。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Size(1000 sqft)&lt;/th&gt;
&lt;th&gt;Price(1000s of dollars)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;x_train = np.array([&lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;])   &lt;span class=&#34;hljs-comment&#34;&gt;#(size in 1000 square feet)&lt;/span&gt;&lt;br&gt;y_train = np.zrray([&lt;span class=&#34;hljs-number&#34;&gt;300.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;500.0&lt;/span&gt;])	&lt;span class=&#34;hljs-comment&#34;&gt;#(price in 1000s of dollars)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;计算代价&#34;&gt;&lt;a href=&#34;#计算代价&#34; class=&#34;headerlink&#34; title=&#34;计算代价&#34;&gt;&lt;/a&gt;计算代价&lt;/h2&gt;&lt;p&gt;这个作业中的术语“成本”可能会让人有点困惑，因为数据是住房成本。在这里，成本是衡量我们的模型预测房子目标价格的好坏。“价格”一词指的是住房数据。&lt;/p&gt;
&lt;p&gt;含一个变量的成本方程为:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/12/ML002/image-20230312165434160.png&#34; alt=&#34;image-20230312165434160&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/12/ML002/image-20230312165503613.png&#34; alt=&#34;image-20230312165503613&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f_w,b(x^i)是我们使用参数w,b来预测例子i。&lt;/li&gt;
&lt;li&gt;（f_w,b(x^i) - y^i）^2  是目标值与预测值之间的差的平方&lt;/li&gt;
&lt;li&gt;这些差异被加在所有m例子上，再除以2m，得到代价函数 &lt;strong&gt;J（w,b）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，在讲座中，总和的范围通常是从1到m，而代码将从0到m-1。&lt;/p&gt;
&lt;p&gt;下面的代码通过遍历每个示例来计算成本。在每个循环中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f_wb，计算一个预测&lt;/li&gt;
&lt;li&gt;目标和预测之间的差值被计算和平方。&lt;/li&gt;
&lt;li&gt;这被加到总成本中。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;compute_cost&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x, y, w, b&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Computes the cost function for linear regression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Args:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	x (ndarray (m,)):Data, m examples&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	y (ndarray (m,)):target values&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	w,b (scalar)	:model parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Returns&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	total_cost (float):The cost of using w,b as the parameters for linear regression to fit the data points in x and y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;#number of training examples&lt;/span&gt;&lt;br&gt;    m = x.shape[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;    &lt;br&gt;    cost_sum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(m):&lt;br&gt;        f_wb = w * x[i] + b&lt;br&gt;        cost = (f_wb - y[i])**&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;        cost_sum = cost_sum + cost&lt;br&gt;    total_cost = (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;/(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;*m)) * cost_sum&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; total_cost&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Cost-Function-Intuition&#34;&gt;&lt;a href=&#34;#Cost-Function-Intuition&#34; class=&#34;headerlink&#34; title=&#34;Cost Function Intuition&#34;&gt;&lt;/a&gt;Cost Function Intuition&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/12/ML002/image-20230312172325465.png&#34; alt=&#34;image-20230312172325465&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;plt_intuition(x_train, y_train)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;情节中有几点值得一提。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当𝑤&amp;#x3D;200时，成本最小化，这与之前实验室的结果相吻合。&lt;/li&gt;
&lt;li&gt;因为在成本方程中，目标和预测之间的差异是平方，当𝑤时，成本迅速增加不是太大就是太小。&lt;/li&gt;
&lt;li&gt;使用通过最小化成本选择的w和b，可以得到与数据完美匹配的直线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Cost-Function-Visualiztion-3D&#34;&gt;&lt;a href=&#34;#Cost-Function-Visualiztion-3D&#34; class=&#34;headerlink&#34; title=&#34;Cost Function Visualiztion-3D&#34;&gt;&lt;/a&gt;Cost Function Visualiztion-3D&lt;/h2&gt;&lt;p&gt;你可以通过三维绘图或等高线图看到成本是如何随w和b变化的。&lt;/p&gt;
&lt;p&gt;值得注意的是，这门课的一些情节会变得相当复杂。本文提供了绘图例程，虽然通读代码以熟悉这些方法是有指导意义的，但要成功完成课程并不需要这样做。例程在本地目录lab_utils_uni.py中。&lt;/p&gt;
&lt;h2 id=&#34;Larger-Data-Set&#34;&gt;&lt;a href=&#34;#Larger-Data-Set&#34; class=&#34;headerlink&#34; title=&#34;Larger Data Set&#34;&gt;&lt;/a&gt;Larger Data Set&lt;/h2&gt;&lt;p&gt;较大的数据集用更多的数据点来观察一个场景是很有指导意义的。该数据集包括不在同一线上的数据点。这对成本方程意味着什么?我们能找到𝑤、𝑏那样使得代价是0?&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;x_train = np.array([&lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.2&lt;/span&gt;])&lt;br&gt;y_train = np.array([&lt;span class=&#34;hljs-number&#34;&gt;250&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;300&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;480&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;430&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;630&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;730&lt;/span&gt;])&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在等高线图中，点击一个点，选择w和b，以达到最低的成本。使用轮廓来指导你的选择。注意，更新图形可能需要几秒钟的时间。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;plt.close(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;all&amp;#x27;&lt;/span&gt;)&lt;br&gt;fig, ax ,dyn_items = plt_stationary(x_train, y_train)&lt;br&gt;updater = plt_update_onclick(fig, ax, x_train,y_train,dyn_items)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面，注意左边图中的虚线。这些代表了你的训练集中每个例子所贡献的代价的部分。在本例中，值约为𝑤&amp;#x3D;209和𝑏&amp;#x3D; 2.4提供低代价。请注意，因为我们的训练示例不在一条线上，所以最小代价不为零。&lt;/p&gt;
&lt;h2 id=&#34;Convex-Cost-surface&#34;&gt;&lt;a href=&#34;#Convex-Cost-surface&#34; class=&#34;headerlink&#34; title=&#34;Convex Cost surface&#34;&gt;&lt;/a&gt;Convex Cost surface&lt;/h2&gt;&lt;p&gt;成本函数平方损失的事实确保了“误差曲面”像汤碗一样凸出。它总是有一个最小值，可以通过在所有维度上跟随梯度来达到。在前面的图中，因为𝑤和𝑏尺寸比例不同，这是不容易识别的。下图，其中𝑤和𝑏都是对称的，在讲座中展示过:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;soup_bowl()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Congratulations&#34;&gt;&lt;a href=&#34;#Congratulations&#34; class=&#34;headerlink&#34; title=&#34;Congratulations!&#34;&gt;&lt;/a&gt;Congratulations!&lt;/h2&gt;&lt;p&gt;您已经学习了以下内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成本方程提供了一种衡量预测与训练数据匹配程度的方法。&lt;/li&gt;
&lt;li&gt;最小化成本可以提供𝑤和b的最优值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;amp;vd_source=3ae32e36058f58c5b85935fca9b77797&#34;&gt;https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;amp;vd_source=3ae32e36058f58c5b85935fca9b77797&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kaieye/2022-Machine-Learning-Specialization&#34;&gt;kaieye&amp;#x2F;2022-Machine-Learning-Specialization (github.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Tensorflow" />
        <category term="Machine Learning" />
        <updated>2023-03-12T08:33:17.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/ML001/</id>
        <title>线性回归模型</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/ML001/"/>
        <content type="html">&lt;h2 id=&#34;线性回归模型&#34;&gt;&lt;a href=&#34;#线性回归模型&#34; class=&#34;headerlink&#34; title=&#34;线性回归模型&#34;&gt;&lt;/a&gt;线性回归模型&lt;/h2&gt;&lt;h3 id=&#34;MOdel-Representation&#34;&gt;&lt;a href=&#34;#MOdel-Representation&#34; class=&#34;headerlink&#34; title=&#34;MOdel Representation&#34;&gt;&lt;/a&gt;MOdel Representation&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306195956356.png&#34; alt=&#34;image-20230306195956356&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Goals&#34;&gt;&lt;a href=&#34;#Goals&#34; class=&#34;headerlink&#34; title=&#34;Goals&#34;&gt;&lt;/a&gt;Goals&lt;/h3&gt;&lt;p&gt;In this lab you will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;learn to implement the model f_{w,b} for linear regression with one variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Notation&#34;&gt;&lt;a href=&#34;#Notation&#34; class=&#34;headerlink&#34; title=&#34;Notation&#34;&gt;&lt;/a&gt;Notation&lt;/h3&gt;&lt;p&gt;Here is a summary of some of the notation you will encounter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306200250050.png&#34; alt=&#34;image-20230306200250050&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Tools&#34;&gt;&lt;a href=&#34;#Tools&#34; class=&#34;headerlink&#34; title=&#34;Tools&#34;&gt;&lt;/a&gt;Tools&lt;/h3&gt;&lt;p&gt;In this lab you will make use of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NumPy,a popular library for scientific computing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Matplotlib,a popular library for plotting data&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; np&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; plt&lt;br&gt;plt.style.use(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./deeplearning.mpstyle&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Problem-Statement&#34;&gt;&lt;a href=&#34;#Problem-Statement&#34; class=&#34;headerlink&#34; title=&#34;Problem Statement&#34;&gt;&lt;/a&gt;Problem Statement&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306200642937.png&#34; alt=&#34;image-20230306200642937&#34;&gt;&lt;/p&gt;
&lt;p&gt;As in the lecture,you will use the motivating example of housing price prediction. This lab will use a simple data set with only two data points - a house with 1000 square feet(sqft) sold for $300,000 and a house with 2000 square feet sold for $500,000.These two points will constitute our data or training set. In this lab, the units of size are 1000 sqft and the units of price are 1000s of dollars.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Size (1000 sqft)&lt;/th&gt;
&lt;th&gt;Price (1000s of dollars)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;You would like to fit a linear regression model(shown above as the blue straight line)through these two points, so you can then predict price for other houses - say, a house with 1200 sqft.&lt;/p&gt;
&lt;p&gt;Please run the following code cell to create your x_train and y_train variables. The data is stored in one-dimensional NumPy arrays.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#x_train is the input variable (size in 1000 square feet)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#y_train is the target (price in 1000s of dollars)&lt;/span&gt;&lt;br&gt;x_train = np.array([&lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;])&lt;br&gt;y_train = np.array([&lt;span class=&#34;hljs-number&#34;&gt;300.0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;500.0&lt;/span&gt;])&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;x_train = &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;x_train&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;y_train = &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;y_train&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Number-of-training-examples-m&#34;&gt;&lt;a href=&#34;#Number-of-training-examples-m&#34; class=&#34;headerlink&#34; title=&#34;Number of training examples m&#34;&gt;&lt;/a&gt;Number of training examples m&lt;/h3&gt;&lt;p&gt;you will use m to denote the number of training examples. Numpy arrays have a .shape parameter. x_train.shape return a python tuple with an entry for each dimension. x_train.shape[0] is the length of the array and number of examples as shown below.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# m is the number of training examples&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;x_train.shape: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;x_train.shape&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;m = x_train.shape[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;Number of training example is: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;m&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;x.train.shape: (2,)&lt;/p&gt;
&lt;p&gt;Number of training examples is: 2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One can also use the Python len() function as shown below.&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# m is the number of training examples&lt;/span&gt;&lt;br&gt;m = &lt;span class=&#34;hljs-built_in&#34;&gt;len&lt;/span&gt;(x_train)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;Number of training example is: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;m&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Number of training examples  is:	2&lt;/p&gt;
&lt;h3 id=&#34;Training-example-x-i-y-i&#34;&gt;&lt;a href=&#34;#Training-example-x-i-y-i&#34; class=&#34;headerlink&#34; title=&#34;Training example x_i, y_i&#34;&gt;&lt;/a&gt;Training example x_i, y_i&lt;/h3&gt;&lt;p&gt;You will use (x(𝑖), y(𝑖)) to denote the 𝑖(th) training example. Since Python is zero indexed, (x(0), y(0) is (1.0, 300.0) and (x(1), y(1) is (2.0, 500.0).&lt;/p&gt;
&lt;p&gt;To access a value in a Numpy array, one indexes the array with the desired offset. For example the syntax to access location zero of x_train is x_train[0]. Run the next code block below to get the i(th) training example.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#Change this to 1 to see (x^1,y^1)&lt;/span&gt;&lt;br&gt;&lt;br&gt;x_i = x_train[i]&lt;br&gt;y_i = y_train[i]&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;(x^(&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;i&amp;#125;&lt;/span&gt;), y^(&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;i&amp;#125;&lt;/span&gt;)) = (&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;x_i&amp;#125;&lt;/span&gt;, &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;y_i&amp;#125;&lt;/span&gt;)&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;(x^(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;), y^(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)) = (&lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;300.0&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Plotting-the-data&#34;&gt;&lt;a href=&#34;#Plotting-the-data&#34; class=&#34;headerlink&#34; title=&#34;Plotting the data&#34;&gt;&lt;/a&gt;Plotting the data&lt;/h3&gt;&lt;p&gt;You can plot these two points using the scatter() function is the matplotlib library,as shown in the cell below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The function arguments marker and c show the points as red crosses(the default is blue dots.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use other functions in the matplotlib library to set title and labels to display.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Plot the data points&lt;/span&gt;&lt;br&gt;plt.scatter(x_train, y_train, marker=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt; c=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the title&lt;/span&gt;&lt;br&gt;plt.title(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Housing Prices&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the y-axis label&lt;/span&gt;&lt;br&gt;plt.ylabel(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Price (in 1000s of dollars)&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the x-axis lbel&lt;/span&gt;&lt;br&gt;plt.xlabel(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Size (1000 sqft)&amp;#x27;&lt;/span&gt;)&lt;br&gt;plt.show()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306204822102.png&#34; alt=&#34;image-20230306204822102&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Model-function&#34;&gt;&lt;a href=&#34;#Model-function&#34; class=&#34;headerlink&#34; title=&#34;Model function&#34;&gt;&lt;/a&gt;Model function&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306204918585.png&#34; alt=&#34;image-20230306204918585&#34;&gt;&lt;/p&gt;
&lt;p&gt;As described in lecture, the model function for linear regression (which is a function that maps from x to y)is represented as&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306205107527.png&#34; alt=&#34;image-20230306205107527&#34;&gt;&lt;/p&gt;
&lt;p&gt;The formula above is how you can represent straight lines - different values of w and b give you different straight lines on the plot.&lt;/p&gt;
&lt;p&gt;Let’s try to get a better intuition for this through the code blocks below. Let’s start with w &amp;#x3D; 100 and b &amp;#x3D;100.&lt;/p&gt;
&lt;p&gt;Note: You can come back to this cell to adjust the model’s w and b parameters.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;w = &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;b = &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;w: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;w&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;b: &lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;b&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;w:	&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;b:	&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now,let’s compute the value of f_{w,b}(x^i) for your two data points. You can explicitly write this out for each data poins as -&lt;/p&gt;
&lt;p&gt;for x(0),f_wb &amp;#x3D; w * x[0] + b&lt;/p&gt;
&lt;p&gt;for x(1),f_wb &amp;#x3D; w * x[1] + b&lt;/p&gt;
&lt;p&gt;For a large number of data points, this can get unwieldy and repetitive. So instead, you can calculate the function output in a for loop as shown in the compute_model_output function below.&lt;/p&gt;
&lt;p&gt;Note:The argument description (ndarray (m,)) describes a Numpy n-dimensional array of shape (m,). (scalar) describes an argument without dimensions, just a magnitude.&lt;/p&gt;
&lt;p&gt;Note: np.zero(n) will return a one-dimensional numpy array with n entries&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;compute_model_output&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x, w, b&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Computes the prediction of a linear model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Args:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	x (ndarray (m,)):Data, m examples&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	w,b (scalar)	:model parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Returns&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    	y (ndarray (m,)):target values&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    m = x.shape[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;    f_wb = np.zeros(m)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(m)&lt;br&gt;    	f_wb[i] = w * x[i] + b&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; f_wb&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s call the compute_model_output function and plot the output.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;tmp_f_wb = compute_model_output(x_train, w, b,)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Plot our model prediction&lt;/span&gt;&lt;br&gt;plt.plot(x_train, tmp_f_wb, c=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;,label=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Our Prediction&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Plot the data points&lt;/span&gt;&lt;br&gt;plt.scatter(x_train, y_train, marker=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;, c=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;,label=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Actual Values&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the title&lt;/span&gt;&lt;br&gt;plt.title(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Housing Prices&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the y-axis label&lt;/span&gt;&lt;br&gt;plt.ylabel(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Price (in 1000s of dollars)&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#Set the x-axis label&lt;/span&gt;&lt;br&gt;plt.xlabel(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Size (1000 sqft)&amp;#x27;&lt;/span&gt;)&lt;br&gt;plt.legend()&lt;br&gt;plt.show()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/03/06/ML001/image-20230306211337338.png&#34; alt=&#34;image-20230306211337338&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, setting w &amp;#x3D; 100 and b &amp;#x3D; 100 does not result in a line that fits our data.&lt;/p&gt;
&lt;h3 id=&#34;Challenge&#34;&gt;&lt;a href=&#34;#Challenge&#34; class=&#34;headerlink&#34; title=&#34;Challenge&#34;&gt;&lt;/a&gt;Challenge&lt;/h3&gt;&lt;p&gt;Try experimenting with different values of w and b. What should the values be for a line that fits our data?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use  your mouse to click on the triangle to the left of the green “Hints” below to reveal some hints for choosing b and w.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;Prediction&#34;&gt;&lt;a href=&#34;#Prediction&#34; class=&#34;headerlink&#34; title=&#34;Prediction&#34;&gt;&lt;/a&gt;Prediction&lt;/h3&gt;&lt;p&gt;Now that we have a model, we can use it to make our original prediction. Let’s predict the price of a house with 1200 sqft. Since the units of x are in 1000’s of sqft, x is 1.2.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;w = &lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;&lt;br&gt;b = &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;x_i = &lt;span class=&#34;hljs-number&#34;&gt;1.2&lt;/span&gt;&lt;br&gt;cost_1200sqft = w * x_i + b&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;$&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;cost_1200sqft:&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt;f&amp;#125;&lt;/span&gt; thousand dollars&amp;quot;&lt;/span&gt; )&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;$&lt;span class=&#34;hljs-number&#34;&gt;340&lt;/span&gt; thousand dollars&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Congratulations&#34;&gt;&lt;a href=&#34;#Congratulations&#34; class=&#34;headerlink&#34; title=&#34;Congratulations!&#34;&gt;&lt;/a&gt;Congratulations!&lt;/h3&gt;&lt;p&gt;In this lab you have learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear regression bulids a model which establishes a relationship between features and targets&lt;/li&gt;
&lt;li&gt;In the example above, the feature was house size and the target was house price&lt;/li&gt;
&lt;li&gt;for simple linear regression, the model has two parameters w and b whose calue are ‘fit’ using training data.&lt;/li&gt;
&lt;li&gt;once a model’s parameters have been determined, the model can be used to make predictions on novel data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;amp;vd_source=3ae32e36058f58c5b85935fca9b77797&#34;&gt;https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;amp;vd_source=3ae32e36058f58c5b85935fca9b77797&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kaieye/2022-Machine-Learning-Specialization&#34;&gt;kaieye&amp;#x2F;2022-Machine-Learning-Specialization (github.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Tensorflow" />
        <category term="Machine Learning" />
        <updated>2023-03-06T11:00:34.000Z</updated>
    </entry>
</feed>
