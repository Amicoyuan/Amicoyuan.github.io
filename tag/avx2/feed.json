{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"avx2\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/01/28/avx006/",
            "url": "http://example.com/2023/01/28/avx006/",
            "title": "如何使用AVX和AVX2处理数据(个人翻译)",
            "date_published": "2023-01-28T06:51:44.000Z",
            "content_html": "<h2 id=\"1-文章来源\"><a href=\"#1-文章来源\" class=\"headerlink\" title=\"1.文章来源\"></a>1.文章来源</h2><p><strong>Matt Scarpino（USA）</strong></p>\n<p><a href=\"https://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX\">Crunching Numbers with AVX and AVX2 - CodeProject</a></p>\n<h2 id=\"2-介绍\"><a href=\"#2-介绍\" class=\"headerlink\" title=\"2.介绍\"></a>2.介绍</h2><p>在2003年，<a href=\"https://www.codeproject.com/script/Membership/View.aspx?mid=22834\">Alex Fr</a>写了一篇优秀的<a href=\"https://www.codeproject.com/Articles/4522/Introduction-to-SSE-Programming\">文章</a>[该文章现在已经被原作者删除]，解释了如何使用Intel的流式SIMD扩展(SSE)执行SIMD(单指令，多数据)处理。SSE是英特尔处理器支持的一组指令，可对大量数据执行高速运算。</p>\n<p>2008年，英特尔推出了一套新的高性能指令，称为高级向量扩展(AVX)。AVX执行许多与SSE指令相同的操作，但以更快的速度对更大的数据块进行操作。最近，英特尔在AVX2和AVX512系列中发布了额外的指令。本文的重点是通过称为intrinsic funtions的特殊C函数访问AVX和AVX2指令。</p>\n<p>本文不介绍整个AVX&#x2F;AVX2 intrinsics，而是侧重于数学计算。特别地，目标是复数相乘。要使用AVX&#x2F;AVX2执行此操作，需要三种类型的intrinsic:</p>\n<ol>\n<li>Initialization intrinscis</li>\n<li>Arithmetic intrinsics</li>\n<li>Permute&#x2F;shuffle intrinsics</li>\n</ol>\n<p>\t\t</p>\n<p>本文讨论每个类别中的intrinsics，并解释如何在代码中使用它们。本文的最后将展示如何用这些intrinsic进行乘法复数运算。</p>\n<p>理解处理器指令和intrinsic function之间的区别是很重要的。AVX指令是执行不可分割操作的汇编命令。例如，AVX指令vaddps添加了两个操作数，并将结果放在第三个操作数中。</p>\n<p>要在C&#x2F;C++中执行操作，the intrinsic funtion _mm256_add_ps()直接映射到vaddps，将汇编的性能与高级函数的便利性结合起来。An intrinsic funtion不一定映射到单个指令，但与其他C&#x2F; C++函数相比，AVX&#x2F;AVX2 intrinsics提供了可靠的高性能。</p>\n<h2 id=\"3-基本要求\"><a href=\"#3-基本要求\" class=\"headerlink\" title=\"3.基本要求\"></a>3.基本要求</h2><p>要理解本文的内容，您需要基本熟悉C语言和SIMD处理。要执行代码，您需要一个支持AVX或AVX&#x2F;AVX2的CPU。以下是支持AVX的cpu:</p>\n<ul>\n<li>Intel’s Sandy Bridge&#x2F;Sandy Bridge E&#x2F;Ivy Bridge&#x2F;Ivy Bridge E</li>\n<li>Intel’s Haswell&#x2F;Haswell E&#x2F;Broadwell&#x2F;Broadwell E</li>\n<li>AMD’s Bulldozer&#x2F;Piledriver&#x2F;Steamroller&#x2F;Excavator</li>\n</ul>\n<p>支持AVX2的CPU也支持AVX。以下是这些设备:</p>\n<ul>\n<li>Intel’s Haswell&#x2F;Haswell E&#x2F;Broadwell&#x2F;Broadwell E</li>\n<li>AMD’s Excavator</li>\n</ul>\n<p>本文中讨论的大多数函数都是由AVX提供的。但也有一些是AVX2特有的。为了区分它们，在本文的表中，我在AVX2 intrinsic的名称前面加上(2)。</p>\n<p>[个人补充]</p>\n<p>判断自己电脑CPU是否支持AVX和AVX2，最简单的就是在命令行执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">lscpu<br></code></pre></div></td></tr></table></figure>\n\n<p>你会得到以下结果：</p>\n<p><img src=\"/2023/01/28/avx006/image-20230129153048825.png\" alt=\"image-20230129153048825\"></p>\n<p>在Flags里面你可以清楚的看到你的电脑是否支持AVX以及AVX2。</p>\n<h2 id=\"4-向量化概述\"><a href=\"#4-向量化概述\" class=\"headerlink\" title=\"4.向量化概述\"></a>4.向量化概述</h2><p>AVX指令通过同时处理大块值而不是单独处理值来提高应用程序的性能。这些值块称为向量，AVX向量最多可以包含256位数据。</p>\n<p>常见的AVX向量包含4个double (4 x 64位&#x3D; 256)，8个float (8 x 32位&#x3D; 256)或8个int (8 x 32位&#x3D; 256)。[double 8B, flout 4B, int 4B]</p>\n<p>一个示例将演示AVX&#x2F;AVX2处理的强大功能。假设一个函数需要将一个数组的8个浮点数乘以第二个数组的8个浮点数，并将结果添加到第三个数组。如果没有向量化，函数可能是这样的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">multiply_and_add</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* b, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* c, <span class=\"hljs-keyword\">float</span>* d) &#123;  <br><br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">8</span>; i++) &#123;<br>    d[i] = a[i] * b[i];<br>    d[i] = d[i] + c[i];<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>下面是使用AVX2函数的例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__m256 <span class=\"hljs-title\">multiply_and_add</span><span class=\"hljs-params\">(__m256 a, __m256 b, __m256 c)</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">return</span> _mm256_fmadd_ps(a, b, c);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>This AVX2 intrinsic funtion _mm256_fmadd_ps处理24个floats，但它不映射到单个指令。相反，它执行三个指令:vfmadd132ps、vfmadd213ps和vfmadd231ps。尽管如此，它执行得很快，比遍历单个元素快得多。尽管英特尔的intrinsics功能强大，但它们还是让许多程序员感到紧张。这通常有两个原因。首先，数据类型有奇怪的名字，比如__m256。其次，函数有奇怪的名称，如_mm256_fmadd_ps。因此，在详细讨论intrinsic funtions之前，我想先讨论一下Intel的数据类型和命名约定。</p>\n<h2 id=\"5-AVX编程基础\"><a href=\"#5-AVX编程基础\" class=\"headerlink\" title=\"5.AVX编程基础\"></a>5.AVX编程基础</h2><p>本文主要关注AVX和AVX2提供的与数学相关的intrinsic functions。但在看函数之前，有三点很重要:</p>\n<ul>\n<li>Data types</li>\n<li>Function naming conventions</li>\n<li>Compiling AVX applications</li>\n</ul>\n<p>本节涉及这些要点，并提供一个简单的应用程序，用于从一个向量减去另一个向量。</p>\n<h3 id=\"5-1数据类型\"><a href=\"#5-1数据类型\" class=\"headerlink\" title=\"5.1数据类型\"></a>5.1数据类型</h3><p>少数intrinsic接受传统的数据类型，如ints或floats，但大多数intrinsic操作有特定的AVX和AVX2的数据类型。有六种主要的向量类型，表1列出了它们。</p>\n<p><strong>Table 1:AVX&#x2F;AVX2 Data Types</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>__m128</code></td>\n<td>128-bit vector containing 4 <code>float</code>s</td>\n</tr>\n<tr>\n<td><code>__m128d</code></td>\n<td>128-bit vector containing 2 <code>double</code>s</td>\n</tr>\n<tr>\n<td><code>__m128i</code></td>\n<td>128-bit vector containing integers</td>\n</tr>\n<tr>\n<td><code>__m256</code></td>\n<td>256-bit vector containing 8 <code>float</code>s</td>\n</tr>\n<tr>\n<td><code>__m256d</code></td>\n<td>256-bit vector containing 4 <code>double</code>s</td>\n</tr>\n<tr>\n<td><code>__m256i</code></td>\n<td>256-bit vector containing integers</td>\n</tr>\n</tbody></table>\n<p>每种类型都以两个下划线、一个m和向量的宽度(以位为单位)开始。AVX512支持以_m512开头的512位向量类型，但AVX&#x2F;AVX2向量不超过256位。如果向量类型以d结尾，则代表double，如果没有后缀，则代表float。看起来_m128i和_m256i向量必须包含int型，但事实并非如此。整数向量类型可以包含任何类型的整数，from chars to shorts to unsigned long longs.That is, an _m256i may contain 32 chars, 16 shorts, 8 ints, or 4 longs.  These integers can be signed or unsigned.</p>\n<h3 id=\"5-3函数命名约定\"><a href=\"#5-3函数命名约定\" class=\"headerlink\" title=\"5.3函数命名约定\"></a>5.3函数命名约定</h3><p>AVX&#x2F;AVX2 intrinsics的名称一开始可能令人困惑，但命名约定确是非常直白的。一旦你理解了它，你就可以通过看它的名字来大致判断一个函数是做什么的。AVX&#x2F;AVX2 intrinsics的一般形式如下:</p>\n<p>_mm<bit_width>_<name>_<data_type></data_type></name></bit_width></p>\n<p>该格式的各部分如下所示:</p>\n<ol>\n<li><code>&lt;bit_width&gt;</code> identifies the size of the vector returned by the function. For 128-bit vectors, this is empty. For 256-bit vectors, this is set to <code>256</code>.</li>\n<li><code>&lt;name&gt;</code> describes the operation performed by the intrinsic</li>\n<li><code>&lt;data_type&gt;</code> identifies the data type of the function’s primary arguments</li>\n</ol>\n<p>最后一部分<data_type>有点复杂。它标识输入值的内容，可以设置为以下任何值:</data_type></p>\n<ul>\n<li><code>ps</code> - vectors contain <code>float</code>s (<code>ps</code> stands for packed single-precision)</li>\n<li><code>pd</code> - vectors contain <code>double</code>s (<code>pd</code> stands for packed double-precision)</li>\n<li><code>epi8/epi16/epi32/epi64</code> - vectors contain 8-bit&#x2F;16-bit&#x2F;32-bit&#x2F;64-bit signed integers</li>\n<li><code>epu8/epu16/epu32/epu64</code> - vectors contain 8-bit&#x2F;16-bit&#x2F;32-bit&#x2F;64-bit unsigned integers</li>\n<li><code>si128</code>&#x2F;<code>si256</code> - unspecified 128-bit vector or 256-bit vector</li>\n<li><code>m128/m128i/m128d/m256/m256i/m256d</code> - identifies input vector types when they’re different than the type of the returned vector</li>\n</ul>\n<p>例如，考虑_mm256_srlv_epi64。即使您不知道srlv是什么意思，_mm256前缀告诉您该函数返回一个256位向量，_epi64告诉您参数包含64位有符号整数。</p>\n<p>作为第二个示例，考虑_mm_testnzc_ps。_mm表示函数返回一个128位的向量。末尾的_ps表示参数向量包含浮点数。</p>\n<p>AVX数据类型以两个下划线和一个m开头。函数以一个下划线和两个ms开头。我很容易搞混这一点，所以我想出了一种方法来记住它们的区别:数据类型代表内存，函数代表多媒体操作。这是我能做的最好的了。</p>\n<h3 id=\"5-4构建AVX应用程序\"><a href=\"#5-4构建AVX应用程序\" class=\"headerlink\" title=\"5.4构建AVX应用程序\"></a>5.4构建AVX应用程序</h3><p>要构建使用AVX intrinsic的应用程序，不需要链接任何库。但是您需要包含imminrin .h头文件。此头文件包括将AVX&#x2F;AVX2函数映射到指令的其他头文件。</p>\n<p>hello_avx.c中的代码显示了一个基本的AVX应用程序的样子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  <span class=\"hljs-comment\">/* Initialize the two argument vectors */</span>\t\t\t<span class=\"hljs-comment\">//初始化</span><br>  __m256 evens = _mm256_set_ps(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">8.0</span>, <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">12.0</span>, <span class=\"hljs-number\">14.0</span>, <span class=\"hljs-number\">16.0</span>);<br>  __m256 odds = _mm256_set_ps(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">11.0</span>, <span class=\"hljs-number\">13.0</span>, <span class=\"hljs-number\">15.0</span>);<br><br>  <span class=\"hljs-comment\">/* Compute the difference between the two vectors */</span><br>  __m256 result = _mm256_sub_ps(evens, odds);\t\t\t<span class=\"hljs-comment\">//减法</span><br><br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">float</span>* f = (<span class=\"hljs-keyword\">float</span>*)&amp;result;\t\t\t\t\t<span class=\"hljs-comment\">//类型转换</span><br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%f %f %f %f %f %f %f %f\\n&quot;</span>,<br>    f[<span class=\"hljs-number\">0</span>], f[<span class=\"hljs-number\">1</span>], f[<span class=\"hljs-number\">2</span>], f[<span class=\"hljs-number\">3</span>], f[<span class=\"hljs-number\">4</span>], f[<span class=\"hljs-number\">5</span>], f[<span class=\"hljs-number\">6</span>], f[<span class=\"hljs-number\">7</span>]);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>要构建应用程序，需要告诉编译器该体系结构支持AVX。这个标志取决于编译器，gcc需要-mavx标志。因此，可以使用以下命令编译hello_avx.c源文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">gcc -mavx -o hello_avx hello_avx.c<br></code></pre></div></td></tr></table></figure>\n\n<p>在本例中，所有函数都以_mm256开始，以_ps结束，因此我希望所有操作都清楚地涉及包含floats的256位向量。我还希望结果向量中的每个元素都等于1.0。如果运行应用程序，您将看到情况就是这样。</p>\n<h3 id=\"5-5初始化intrinsics\"><a href=\"#5-5初始化intrinsics\" class=\"headerlink\" title=\"5.5初始化intrinsics\"></a>5.5初始化intrinsics</h3><p>在对AVX向量进行操作之前，需要用数据填充向量。因此，本文讨论的第一组intrinsics用数据初始化向量。有两种方法:用标量值初始化向量和用从内存加载的数据初始化向量。</p>\n<h4 id=\"5-5-1使用标量值初始化\"><a href=\"#5-5-1使用标量值初始化\" class=\"headerlink\" title=\"5.5.1使用标量值初始化\"></a>5.5.1使用标量值初始化</h4><p>AVX提供了将一个或多个值组合成256位向量的intrinsics funtions。表2列出了它们的名称，并提供了每个名称的描述。也有类似的intrinsics初始化128位向量，但它们是由SSE提供的，而不是AVX。函数名的唯一区别是_mm256_被替换为_mm_。</p>\n<p><strong>Table 2: Initialization Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_setzero_ps/pd</code></td>\n<td>Returns a floating-point vector filled with zeros</td>\n</tr>\n<tr>\n<td><code>_mm256_setzero_si256</code></td>\n<td>Returns an integer vector whose bytes are set to zero</td>\n</tr>\n<tr>\n<td><code>_mm256_set1_ps/pd</code></td>\n<td>Fill a vector with a floating-point value</td>\n</tr>\n<tr>\n<td><code>_mm256_set1_epi8/epi16</code> <code>_mm256_set1_epi32/epi64</code></td>\n<td>Fill a vector with an integer</td>\n</tr>\n<tr>\n<td><code>_mm256_set_ps/pd</code></td>\n<td>Initialize a vector with eight floats (ps) or four doubles (pd)</td>\n</tr>\n<tr>\n<td><code>_mm256_set_epi8/epi16</code> <code>_mm256_set_epi32/epi64</code></td>\n<td>Initialize a vector with integers</td>\n</tr>\n<tr>\n<td><code>_mm256_set_m128/m128d/</code> <code>_mm256_set_m128i</code></td>\n<td>Initialize a 256-bit vector with two 128-bit vectors</td>\n</tr>\n<tr>\n<td><code>_mm256_setr_ps/pd</code></td>\n<td>Initialize a vector with eight floats (ps) or four doubles (pd) in reverse order</td>\n</tr>\n<tr>\n<td><code>_mm256_setr_epi8/epi16</code> <code>_mm256_setr_epi32/epi64</code></td>\n<td>Initialize a vector with integers in reverse order</td>\n</tr>\n</tbody></table>\n<p>表中的第一个函数是最容易理解的。_m256_setzero_ps返回一个__m256向量，包含8个设置为0的浮点数。类似地，_m256_setzero_si256返回一个__m256i向量，其字节被设置为0。例如，下面这行代码创建了一个256位的向量，其中包含4个设为0的double:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256d dbl_vector = _m256_setzero_pd();<br></code></pre></div></td></tr></table></figure>\n\n<p>名称中包含set1的函数接受一个值，并在整个向量中重复该值。例如，下面这行代码创建了一个__m256i，它的16个short value被设置为47:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256i short_vector = _m256_set1_pd();<br></code></pre></div></td></tr></table></figure>\n\n<p>表2中的其他函数包含_set_或_setr_。这些函数接受一系列值，每个向量的元素对应一个值。这些值被放置在返回的向量中，理解顺序很重要。下面的函数调用返回一个包含8个整数的向量，其值范围为1到8:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256i int_vector = _m256_set_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br></code></pre></div></td></tr></table></figure>\n\n<p>您可能希望值按照给定的顺序存储。但英特尔的架构是小端存储类型的，所以最低有效值(8)先存储，最高有效值(1)最后存储。您可以通过将int_vector转换为int指针并打印存储的值来验证这一点。如下代码所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i int_vector = _mm256_set_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br><span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span>*)&amp;int_vector;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, ptr[<span class=\"hljs-number\">0</span>], ptr[<span class=\"hljs-number\">1</span>], ptr[<span class=\"hljs-number\">2</span>], ptr[<span class=\"hljs-number\">3</span>], ptr[<span class=\"hljs-number\">4</span>], ptr[<span class=\"hljs-number\">5</span>], ptr[<span class=\"hljs-number\">6</span>], ptr[<span class=\"hljs-number\">7</span>]);<br>--&gt; <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br></code></pre></div></td></tr></table></figure>\n\n<p>如果希望值按给定顺序存储，可以使用_setr_函数之一创建向量，其中r可能代表reverse。下面的代码展示了它是如何工作的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i int_vector = _mm256_setr_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br><span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span>*)&amp;int_vector;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, ptr[<span class=\"hljs-number\">0</span>], ptr[<span class=\"hljs-number\">1</span>], ptr[<span class=\"hljs-number\">2</span>], ptr[<span class=\"hljs-number\">3</span>], ptr[<span class=\"hljs-number\">4</span>], ptr[<span class=\"hljs-number\">5</span>], ptr[<span class=\"hljs-number\">6</span>], ptr[<span class=\"hljs-number\">7</span>]);<br>--&gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">8</span><br></code></pre></div></td></tr></table></figure>\n\n<p>有趣的是，AVX和AVX2都没有提供用无符号整数初始化向量的intrinsic。但是，它们提供了对带无符号整数的向量进行操作的函数。</p>\n<h4 id=\"5-5-2从内存加载数据\"><a href=\"#5-5-2从内存加载数据\" class=\"headerlink\" title=\"5.5.2从内存加载数据\"></a>5.5.2从内存加载数据</h4><p>AVX&#x2F;AVX2的一个常见用法是将数据从内存加载到向量中，对向量进行处理，并将结果存储回内存。第一步是使用表3中列出的intrinsic funtions完成的。最后两个函数前面有(2)，因为它们是由AVX2而不是AVX提供的。</p>\n<p><strong>Table 3: Vector Load Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_load_ps/pd</code></td>\n<td>Loads a floating-point vector from an  aligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_load_si256</code></td>\n<td>Loads an integer vector from an aligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_loadu_ps/pd</code></td>\n<td>Loads a floating-point vector from an  unaligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_loadu_si256</code></td>\n<td>Loads an integer vector from an unaligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm_maskload_ps/pd</code> <code>_mm256_maskload_ps/pd</code></td>\n<td>Load portions of a 128-bit&#x2F;256-bit floating-point vector according to a mask</td>\n</tr>\n<tr>\n<td><code>(2)_mm_maskload_epi32/64</code> <code>(2)_mm256_maskload_epi32/64</code></td>\n<td>Load portions of a 128-bit&#x2F;256-bit integer vector according to a mask</td>\n</tr>\n</tbody></table>\n<p>当将数据加载到向量中时，内存对齐变得特别重要。每个_mm256_load_* intrinsic接受一个必须在32字节边界上对齐的内存地址。即地址必须能被32整除。下面的代码展示了如何在实践中使用它:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">float</span>* aligned_floats = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">aligned_alloc</span>(<span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">64</span> * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>));\t\t<span class=\"hljs-comment\">//这里使用了内存对齐</span><br>... Initialize data ...<br>__m256 vec = _mm256_load_ps(aligned_floats);<br></code></pre></div></td></tr></table></figure>\n\n<p>【个人补充】关于内存对齐以及相关函数</p>\n<p><a href=\"https://xingyuanjie.top/2022/06/12/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/\">内存对齐 - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/\">AVX向量化学习(二)-内存对齐的应用 - Amicoyuan (xingyuanjie.top)</a></p>\n<p>任何使用_m256_load_*加载未对齐数据的尝试都会造成segmentation fault。如果数据不是在32位边界对齐，则应该使用_m256_loadu_*函数。如下代码所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">float</span>* unaligned_floats = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">64</span> * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>));\t\t\t\t<span class=\"hljs-comment\">//未使用内存对齐</span><br>... Initialize data ...<br>__m256 vec = _mm256_loadu_ps(unaligned_floats);<br></code></pre></div></td></tr></table></figure>\n\n<p>假设你想用AVX向量处理一个浮点数组(float)，但是数组的长度是11，不能被8整除。在这种情况下，第二个__m256向量的最后五个浮点数需要设置为0，这样它们就不会影响计算。这种选择性加载可以用表3底部的_maskload_函数来完成。</p>\n<p>每个_maskload_函数接受两个参数:一个内存地址和一个与返回向量元素数量相同的整数向量。对于整数向量中最高位为1的每个元素，将从内存中读取返回向量中相应的元素。如果整数向量中的最高位为零，则返回向量中的相应元素被设置为零。</p>\n<p>一个示例将说明如何使用这些函数。mask_load.c中的代码将8个整型读入一个向量，最后3个应该设置为0。要使用的函数是_mm256_maskload_epi32，它的第二个参数应该是__m256i掩码向量。这个掩码向量包含5个最高位为1的整数和3个最高位为0的整数。下面是代码的样子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">int</span> i;<br>  <br>  <span class=\"hljs-keyword\">int</span> int_array[<span class=\"hljs-number\">8</span>] = &#123;<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">600</span>, <span class=\"hljs-number\">700</span>, <span class=\"hljs-number\">800</span>&#125;;<br>  <br>  <span class=\"hljs-comment\">/* Initialize the mask vector */</span><br>  __m256i mask = _mm256_setr_epi32(<span class=\"hljs-number\">-20</span>, <span class=\"hljs-number\">-72</span>, <span class=\"hljs-number\">-48</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">-100</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>);\t<span class=\"hljs-comment\">//这里需要充分理解计算机组成原理中的补码</span><br><br>  <span class=\"hljs-comment\">/* Selectively load data into the vector */</span><br>  __m256i result = _mm256_maskload_epi32(int_array, mask);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">int</span>* res = (<span class=\"hljs-keyword\">int</span>*)&amp;result;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, <br>    res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>], res[<span class=\"hljs-number\">4</span>], res[<span class=\"hljs-number\">5</span>], res[<span class=\"hljs-number\">6</span>], res[<span class=\"hljs-number\">7</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>如果您在支持AVX2的系统上运行此应用程序，它将打印以下结果:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">100</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">300</span> <span class=\"hljs-number\">400</span> <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p>有三点是需要注意的：</p>\n<ol>\n<li>代码使用_setr_函数而不是_set_来设置掩码向量的内容，因为它在将向量元素传递给函数时对它们进行排序。</li>\n<li>负整数的最高位总是1。这就是掩码向量包含五个负数和三个正数的原因。</li>\n<li>_mm256_maskload_epi32函数由AVX2提供，而不是AVX。因此，要用gcc编译这段代码，必须使用-mavx2标志而不是-mavx。</li>\n</ol>\n<p>除了表3中列出的函数之外，AVX2还提供了从内存加载索引数据的集合函数。</p>\n<h2 id=\"6-Arithmetic-Intrinsics\"><a href=\"#6-Arithmetic-Intrinsics\" class=\"headerlink\" title=\"6.Arithmetic Intrinsics\"></a>6.Arithmetic Intrinsics</h2><p>数学是AVX存在的主要原因，基本操作是加、减、乘和除。本节将介绍执行这些操作的intrinsic funtions，还将介绍AVX2提供的新的融合乘法和加法函数。</p>\n<h3 id=\"6-1加法和减法\"><a href=\"#6-1加法和减法\" class=\"headerlink\" title=\"6.1加法和减法\"></a>6.1加法和减法</h3><p>表4列出了执行加法和减法的AVX&#x2F;AVX2 intrinsic。由于考虑到饱和度，它们大多数都作用于包含整数的向量。</p>\n<p><strong>Table 4: Addition and Subtraction Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_add_ps/pd</code></td>\n<td>Add two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>_mm256_sub_ps/pd</code></td>\n<td>Subtract two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_add_epi8/16/32/64 </code></td>\n<td>Add two integer vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm236_sub_epi8/16/32/64</code></td>\n<td>Subtract two integer vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_adds_epi8/16</code> <code>(2)_mm256_adds_epu8/16 </code></td>\n<td>Add two integer vectors with saturation</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_subs_epi8/16</code> <code>(2)_mm256_subs_epu8/16</code></td>\n<td>Subtract two integer vectors with saturation</td>\n</tr>\n<tr>\n<td><code>_mm256_hadd_ps/pd</code></td>\n<td>Add two floating-point vectors horizontally</td>\n</tr>\n<tr>\n<td><code>_mm256_hsub_ps/pd</code></td>\n<td>Subtract two floating-point vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hadd_epi16/32</code></td>\n<td>Add two integer vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hsub_epi16/32</code></td>\n<td>Subtract two integer vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hadds_epi16</code></td>\n<td>Add two vectors containing shorts horizontally with saturation</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hsubs_epi16</code></td>\n<td>Subtract two vectors containing shorts horizontally with saturation</td>\n</tr>\n<tr>\n<td><code>_mm256_addsub_ps/pd</code></td>\n<td>Add and subtract two floating-point vectors</td>\n</tr>\n</tbody></table>\n<p>在加法和减法整数向量时，重要的是要查看_add_&#x2F;_sub_函数和_adds_&#x2F;_subs_函数之间的区别。额外的s代表饱和，当结果需要的内存超过向量可以存储的内存时，就会产生饱和。Functions that take saturation into account clamp the result to the minimum&#x2F;maximum value that can be stored.没有饱和的函数在发生饱和时忽略内存问题。</p>\n<p>例如，假设一个向量包含有符号字节，那么每个元素的最大值是127 (0x7F)。如果一个运算将98加到85，数学和是183 (0xB7)。</p>\n<ul>\n<li>如果使用_mm256_add_epi8添加这些值，饱和度将被忽略，存储的结果将是-73 (0xB7)。</li>\n<li>如果使用_mm256_adds_epi8添加这些值，结果将被固定为最大值127 (0x7F)。</li>\n</ul>\n<p>作为另一个例子，考虑两个包含有符号短整数的向量。最小值为-32,768。如果计算-18,000 - 19,000，数学结果是-37,000 (0xFFFF6F78作为32位整数)。</p>\n<ul>\n<li>如果用_mm256_sub_epi16减去这些值，饱和度将被忽略，存储的结果将是28,536 (0x6F78)。</li>\n<li>如果用_mm256_subs_epi16减去这些值，结果将被压缩到最小值-32,768 (0x8000)。</li>\n</ul>\n<p>_hadd_&#x2F;_hsub_函数水平执行加法和减法。也就是说，它们不是添加或减去不同向量的元素，而是在每个向量中添加或减去相邻的元素。结果以交错的方式存储。图1显示了_mm256_hadd_pd的工作原理，它水平地添加了两个向量A和B:</p>\n<p><img src=\"/2023/01/28/avx006/Fig1.jpg\" alt=\"Image 1\"></p>\n<p><strong>Figure 1: Horizontal Addition of Two Vectors</strong></p>\n<p>水平加减元素看起来可能很奇怪，但这些操作在复数相乘时很有用。本文稍后将对此进行解释。表4中的最后一个函数_mm256_addsub_ps&#x2F;pd交替减法和加法两个浮点向量的元素。也就是说，偶数元素被减去，奇数元素被加上。例如，如果vec_a包含(0.1,0.2,0.3,0.4)，vec_b包含(0.5,0.6,0.7,0.8)，则_mm256_addsub_pd(vec_a, vec_b)等于(-0.4,0.8，-0.4,1.2)。</p>\n<h3 id=\"6-2乘法和除法\"><a href=\"#6-2乘法和除法\" class=\"headerlink\" title=\"6.2乘法和除法\"></a>6.2乘法和除法</h3><p>表5列出了执行乘法和除法的AVX&#x2F;AVX2 intrinsic。与加法和减法一样，对整数进行运算也有一些特殊的特性。</p>\n<p><strong>Table 5: Multiplication and Division Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_mul_ps/pd</code></td>\n<td>Multiply two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mul_epi32/</code> <code>(2)_mm256_mul_epu32 </code></td>\n<td>Multiply the lowest four elements of vectors containing 32-bit integers</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mullo_epi16/32</code></td>\n<td>Multiply integers and store low halves</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mulhi_epi16/</code> <code>(2)_mm256_mulhi_epu16</code></td>\n<td>Multiply integers and store high halves</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mulhrs_epi16</code></td>\n<td>Multiply 16-bit elements to form 32-bit elements</td>\n</tr>\n<tr>\n<td><code>_mm256_div_ps/pd</code></td>\n<td>Divide two floating-point vectors</td>\n</tr>\n</tbody></table>\n<p>如果两个N位的数字在计算机上相乘，结果可以占用2N位。因此，只有_mm256_mul_epi32和_mm256_mul_epu32的四个低元素被乘在一起，结果是一个包含四个长整数的向量。图2显示了它的工作原理:【动态图丢失】</p>\n<p><strong>图2:整数向量的低元素相乘</strong></p>\n<p>_mullo_函数类似于整数_mul_函数，但它们不是乘低元素，而是乘两个向量的每个元素，只存储每个乘积的低一半。图3显示了它的外观:【图片丢失】</p>\n<p><strong>图3:整数相乘和存储低二分之一</strong></p>\n<p>_mm256_mulhi_epi16和_mm256_mulhi_epu16 intrinsics类似，但是它们存储整数积的高一半。</p>\n<h3 id=\"6-3Fused-Multiply-and-Add-FMA\"><a href=\"#6-3Fused-Multiply-and-Add-FMA\" class=\"headerlink\" title=\"6.3Fused Multiply and Add (FMA)\"></a>6.3Fused Multiply and Add (FMA)</h3><p>如前所述，两个N位数字相乘的结果可以占用2N位。因此，当您将两个浮点值a和b相乘时，结果实际上是四舍五入(a * b)，其中四舍五入(x)返回最接近x的浮点值。随着进一步操作的执行，这种精度损失会增加。</p>\n<p>AVX2提供了将乘法和加法融合在一起的指令。也就是说，它们不是返回整数(整数(a * b) + c)，而是返回整数(a * b + c)。因此，这些指令比分别执行乘法和加法提供了更高的速度和准确性。</p>\n<p>表6列出了AVX2提供的FMA intrinsic，并包括对每个函数的描述。表中的每条指令都接受三个输入向量，我把它们分别称为a、b和c。</p>\n<p><strong>Table 6: FMA Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>(2)_mm_fmadd_ps/pd/</code> <code>(2)_mm256_fmadd_ps/pd</code></td>\n<td>Multiply two vectors and add the product to a third (res &#x3D; a * b + c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsub_ps/pd/</code> <code>(2)_mm256_fmsub_ps/pd</code></td>\n<td>Multiply two vectors and subtract a vector from the product (res &#x3D; a * b - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmadd_ss/sd </code></td>\n<td>Multiply and add the lowest element in the vectors (res[0] &#x3D; a[0] * b[0] + c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsub_ss/sd</code></td>\n<td>Multiply and subtract the lowest element in the vectors (res[0] &#x3D; a[0] * b[0] - c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmadd_ps/pd</code> <code>(2)_mm256_fnmadd_ps/pd </code></td>\n<td>Multiply two vectors and add the negated product to a third (res &#x3D; -(a * b) + c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmsub_ps/pd/</code> <code>(2)_mm256_fnmsub_ps/pd</code></td>\n<td>Multiply two vectors and add the negated product to a third (res &#x3D; -(a * b) - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmadd_ss/sd</code></td>\n<td>Multiply the two lowest elements and add the negated product to the lowest element of the third vector (res[0] &#x3D; -(a[0] * b[0]) + c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmsub_ss/sd</code></td>\n<td>Multiply the lowest elements and subtract the lowest element of the third vector from the negated product (res[0] &#x3D; -(a[0] * b[0]) - c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmaddsub_ps/pd/</code> <code>(2)_mm256_fmaddsub_ps/pd</code></td>\n<td>Multiply two vectors and alternately add and subtract from the product (res &#x3D; a * b - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsubadd_ps/pd/</code> <code>(2)_mmf256_fmsubadd_ps/pd </code></td>\n<td>Multiply two vectors and alternately subtract and add from the product (res &#x3D; a * b - c)</td>\n</tr>\n</tbody></table>\n<p>如果一个内征的名称以_ps或_pd结尾，则输入向量的每个元素都包含在运算中。如果intrinsic的名称以_ss或_sd结尾，则只包括最低的元素。输出向量中的其余元素被设置为与第一个输入向量中的元素相等。例如,假设vec_a &#x3D; (1.0, 2.0)， vec_b &#x3D; (5.0, 10.0)， vec_c &#x3D;(7.0, 14.0)。在本例中，_mm_fmadd_sd(vec_a, vec_b, vec_c)返回(12.0,2.0)，因为(1.0 * 5.0)+ 7.0 &#x3D; 12.0,2.0是vec_a的第二个元素。</p>\n<p>了解_fmadd_&#x2F;_fmsub_和_fnmadd_&#x2F;_fnmsub_ intrinsic之间的区别很重要。后一种函数在加上或减去第三个输入向量之前，对前两个输入向量的乘积求反。</p>\n<p>_fmaddsub_和_fmsubadd_内在函数在第三个向量的加法和减法元素之间交替使用。_fmaddsub_ intrinsic添加奇数元素并减去偶数元素。_fmsubadd_ intrinsic减去奇数元素并添加偶数元素。fmatest.c中的代码展示了如何在实践中使用_mm256_fmaddsub_pd intrinsic。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <br>  __m256d veca = _mm256_setr_pd(<span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>);<br><br>  __m256d vecb = _mm256_setr_pd(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>);<br>  <br>  __m256d vecc = _mm256_setr_pd(<span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>);<br>  <br>  <span class=\"hljs-comment\">/* Alternately subtract and add the third vector</span><br><span class=\"hljs-comment\">     from the product of the first and second vectors */</span><br>  __m256d result = _mm256_fmaddsub_pd(veca, vecb, vecc);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">double</span>* res = (<span class=\"hljs-keyword\">double</span>*)&amp;result;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf %lf %lf %lf\\n&quot;</span>, res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>当这段代码在支持AVX2的处理器上编译和执行时，打印的结果如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">5.000000</span> <span class=\"hljs-number\">19.000000</span> <span class=\"hljs-number\">5.000000</span> <span class=\"hljs-number\">19.000000</span><br></code></pre></div></td></tr></table></figure>\n\n<p>FMA指令是由AVX2提供的，因此您可能认为使用gcc构建应用程序需要使用-mavx2标志。但是我发现-mfma标志是必需的。否则，我会得到奇怪的编译错误。</p>\n<h2 id=\"7-Permuting-and-Shuffling\"><a href=\"#7-Permuting-and-Shuffling\" class=\"headerlink\" title=\"7.Permuting and Shuffling\"></a>7.Permuting and Shuffling</h2><p>许多应用程序必须重新排列向量元素，以确保正确执行操作。</p>\n<p>AVX&#x2F;AVX2为此目的提供了许多intrinsic funtion，其中两大类是_permute_函数和_shuffle_函数。本节介绍这两种类型的intrinsic。</p>\n<h3 id=\"7-1Permuting\"><a href=\"#7-1Permuting\" class=\"headerlink\" title=\"7.1Permuting\"></a>7.1Permuting</h3><p>AVX提供了返回一个向量的函数，该向量包含一个向量的重新排列的元素。表7列出了这些排列函数，并提供了对每个函数的描述。</p>\n<p><strong>Table 7: Permute Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm_permute_ps/pd/</code> <code>_mm256_permute_ps/pd</code></td>\n<td>Select elements from the input vector based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_permute4x64_pd/</code> <code>(2)_mm256_permute4x64_epi64</code></td>\n<td>Select 64-bit elements from the input vector based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm256_permute2f128_ps/pd</code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm256_permute2f128_si256 </code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm_permutevar_ps/pd</code> <code>_mm256_permutevar_ps/pd </code></td>\n<td>Select elements from the input vector based on bits in an integer vector</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_permutevar8x32_ps</code>&#x2F; <code>(2)_mm256_permutevar8x32_epi32</code></td>\n<td>Select 32-bit elements (<code>float</code>s and <code>int</code>s) using indices in an integer vector</td>\n</tr>\n</tbody></table>\n<p>_permute_ intrinsic接受两个参数:一个输入向量和一个8位控制值。控制值的位决定输入向量的哪个元素插入到输出中。</p>\n<p>对于_mm256_permute_ps，每对控制位通过选择输入向量中的一个上或下元素来确定一个上或下输出元素。这很复杂，所以我希望图4能让这个操作更清楚一些:【图片丢失】</p>\n<p><strong>Figure 4: Operation of the Permute Intrinsic Function</strong></p>\n<p>如图所示，输入向量的值可以在输出中重复多次。其他输入值可能根本不被选择。</p>\n<p>在_mm256_permute_pd中，控制值的低四位在相邻的双精度数对之间进行选择。_mm256_permute4x4_pd类似，但使用所有控制位来选择将哪个64位元素放在输出中。在_permute2f128_ intrinsic中，控制值从两个输入向量中选择128位块，而不是从一个输入向量中选择元素。</p>\n<p>_permutevar_ intrinsic执行与_permute_ intrinsic相同的操作。但是它们不是使用8位控制值来选择元素，而是依赖于与输入向量大小相同的整数向量。例如，_mm256_permute_ps的输入向量是_mm256，因此整数向量是_mm256i。整数向量的高位执行选择的方式与_permute_ intrinsic的8位控制值的位相同。</p>\n<h3 id=\"7-2Shuffling\"><a href=\"#7-2Shuffling\" class=\"headerlink\" title=\"7.2Shuffling\"></a>7.2Shuffling</h3><p>像_permute_ intrinsic一样，_shuffle_ intrinsic从一个或两个输入向量中选择元素，并将它们放在输出向量中。表8列出了这些功能，并提供了每个功能的描述。</p>\n<p><strong>Table 8: Shuffle Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_shuffle_ps/pd</code></td>\n<td>Select floating-point elements according to an 8-bit value</td>\n</tr>\n<tr>\n<td><code>_mm256_shuffle_epi8/</code> <code>_mm256_shuffle_epi32</code></td>\n<td>Select integer elements according to an 8-bit value</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_shufflelo_epi16/ </code> <code>(2)_mm256_shufflehi_epi16</code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n</tbody></table>\n<p>所有的shuffle_ intrinsic运算于256位向量。在每种情况下，最后一个参数是一个8位的值，它决定哪些输入元素应该放在输出向量中。</p>\n<p>对于_mm256_shuffle_ps，只使用控件值的高四位。如果输入向量包含整型或浮点数，则使用所有控制位。对于_mm256_shuffle_ps，前两对位选择第一个向量中的元素，后两对位选择第二个向量中的元素。图5说明了这是如何工作的:【图片丢失】</p>\n<p><strong>Figure 5: Operation of the Shuffle Intrinsic Function</strong></p>\n<p>为了shuffle16位值，AVX2提供了_mm256_shufflelo_epi16和_mm256_shufflehi_epi16。与_mm256_shuffle_ps一样，控制值被分成四对从八个元素中选择的位。但是对于_mm256_shufflelo_epi16, 8个元素是从8个低的16位值中取出的。对于_mm256_shufflehi_epi16, 8个元素取自8个高的16位值。</p>\n<h2 id=\"8-Complex-Multiplication\"><a href=\"#8-Complex-Multiplication\" class=\"headerlink\" title=\"8.Complex Multiplication\"></a>8.Complex Multiplication</h2><p>在信号处理应用中，复杂乘法是一项必须反复执行的耗时操作。我不会深入讨论这个理论，但每个复数都可以表示为a + bi，其中a和b是浮点值，i是-1的平方根。A是实部，b是虚部。如果(a + bi)和(c + di)相乘，乘积等于(ac - bd) + (ad + bc)i。</p>\n<p>复数可以以交错的方式存储，这意味着每个实数部分后面跟着虚数部分。假设vec1是一个__m256d，存储两个复数(a + bi)和(x + yi)， vec2是一个__m256d，存储(c + di)和(z + wi)。图6说明了如何存储这些值。如图所示，prod向量存储了两个产物:(ac - bd) + (ad + bc)i和(xz - yw) + (xw + yz)i。</p>\n<p>【图片丢失】</p>\n<p><strong>Figure 6: Complex Multiplication Using Vectors</strong></p>\n<p>我不知道用AVX&#x2F;AVX2计算复杂乘积的最快方法。但我想出了一个方法，效果很好。它包括五个步骤:</p>\n<ol>\n<li>将vec1和vec2相乘，并将结果存储在vec3中。</li>\n<li>切换vec2的实&#x2F;虚值。</li>\n<li>求vec2的虚数的负数。</li>\n<li>将vec1和vec2相乘，并将结果存储在vec4中。</li>\n<li>对vec3和vec4进行水平相减，得到vec1中的答案。</li>\n</ol>\n<p>complex_multi .c中的代码展示了如何使用AVX intrinsic执行此操作:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  __m256d vec1 = _mm256_setr_pd(<span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">13.0</span>, <span class=\"hljs-number\">6.0</span>);<br>  __m256d vec2 = _mm256_setr_pd(<span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">7.0</span>);<br>  __m256d neg = _mm256_setr_pd(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>);<br>  <br>  <span class=\"hljs-comment\">/* Step 1: Multiply vec1 and vec2 */</span><br>  __m256d vec3 = _mm256_mul_pd(vec1, vec2);<br><br>  <span class=\"hljs-comment\">/* Step 2: Switch the real and imaginary elements of vec2 */</span><br>  vec2 = _mm256_permute_pd(vec2, <span class=\"hljs-number\">0x5</span>);<br>  <br>  <span class=\"hljs-comment\">/* Step 3: Negate the imaginary elements of vec2 */</span><br>  vec2 = _mm256_mul_pd(vec2, neg);  <br>  <br>  <span class=\"hljs-comment\">/* Step 4: Multiply vec1 and the modified vec2 */</span><br>  __m256d vec4 = _mm256_mul_pd(vec1, vec2);<br><br>  <span class=\"hljs-comment\">/* Horizontally subtract the elements in vec3 and vec4 */</span><br>  vec1 = _mm256_hsub_pd(vec3, vec4);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">double</span>* res = (<span class=\"hljs-keyword\">double</span>*)&amp;vec1;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf %lf %lf %lf\\n&quot;</span>, res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>这段代码作用于双向量，但是可以很容易地扩展该方法以支持浮点向量。</p>\n<h2 id=\"9-Points-of-Interest\"><a href=\"#9-Points-of-Interest\" class=\"headerlink\" title=\"9.Points of Interest\"></a>9.Points of Interest</h2><p>许多开发人员可能会避免学习AVX&#x2F;AVX2，希望编译器能够执行自动向量化。自动向量化是一个很好的特性，但是如果您了解本质，就可以重新安排算法以更好地利用SIMD处理。通过插入AVX&#x2F;AVX2 intrinsic，我极大地提高了信号处理应用程序的处理速度。</p>\n<h2 id=\"10-History\"><a href=\"#10-History\" class=\"headerlink\" title=\"10.History\"></a>10.History</h2><p>2&#x2F;20 - Fixed formatting and image links</p>\n<p>4&#x2F;2 - Fixed a couple typographical errors</p>\n<h2 id=\"11-License\"><a href=\"#11-License\" class=\"headerlink\" title=\"11.License\"></a>11.License</h2><p>This article, along with any associated source code and files, is licensed under <a href=\"http://www.codeproject.com/info/cpol10.aspx\">The Code Project Open License (CPOL)</a></p>\n<p>Written By</p>\n<p><strong><a href=\"https://www.codeproject.com/Members/mattscar\">Matt Scarpino</a></strong></p>\n<p><img src=\"/2023/01/28/avx006/US.gif\" alt=\"United States\"> United States</p>\n<p>I’ve been a programmer and engineer for over 20 years. I’m a certified Azure Developer Associate and an Azure IoT Developer Specialist.</p>\n",
            "tags": [
                "AVX",
                "AVX2"
            ]
        }
    ]
}