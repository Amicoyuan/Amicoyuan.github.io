<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Amicoyuan • Posts by &#34;tree&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-05-05T08:58:34.000Z</updated>
    <category term="AVX" />
    <category term="Data Structure" />
    <category term="String" />
    <category term="Find" />
    <category term="STL" />
    <category term="C++" />
    <category term="Set" />
    <category term="团体程序设计天梯赛" />
    <category term="Sort" />
    <category term="LinkList" />
    <category term="双向链表" />
    <category term="Graph" />
    <category term="邻接表" />
    <category term="Vector" />
    <category term="Binary tree" />
    <category term="BFS" />
    <category term="模拟" />
    <category term="邻接矩阵" />
    <category term="DFS" />
    <category term="结构体" />
    <category term="贪心" />
    <category term="Double类型相等比较" />
    <category term="并查集" />
    <category term="Map" />
    <category term="Pair" />
    <category term="KMP" />
    <category term="线索二叉树" />
    <category term="Tree" />
    <category term="森林" />
    <category term="Linux" />
    <category term="MPI" />
    <category term="Numactl" />
    <category term="Slurm" />
    <category term="Tensorflow" />
    <category term="性能分析工具" />
    <category term="gcov" />
    <entry>
        <id>http://example.com/2022/05/05/Algorithm036/</id>
        <title>树、森林</title>
        <link rel="alternate" href="http://example.com/2022/05/05/Algorithm036/"/>
        <content type="html">&lt;h2 id=&#34;树、森林&#34;&gt;&lt;a href=&#34;#树、森林&#34; class=&#34;headerlink&#34; title=&#34;树、森林&#34;&gt;&lt;/a&gt;树、森林&lt;/h2&gt;&lt;h3 id=&#34;树的存储结构&#34;&gt;&lt;a href=&#34;#树的存储结构&#34; class=&#34;headerlink&#34; title=&#34;树的存储结构&#34;&gt;&lt;/a&gt;树的存储结构&lt;/h3&gt;&lt;h4 id=&#34;双亲表示法&#34;&gt;&lt;a href=&#34;#双亲表示法&#34; class=&#34;headerlink&#34; title=&#34;双亲表示法&#34;&gt;&lt;/a&gt;双亲表示法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#define MAX_TREE_SIZE 100					//树中最多节点数	
typedef struct&amp;#123;								//树的结点定义
    ElemType data;							//数据元素	
    int parent;								//双亲位置域
&amp;#125;PTNode;
typedef struct&amp;#123;								//树的类型定义
    PTNode nodes[MAX_TREE_SIZE];			//双亲表示
    int n;									//节点数
&amp;#125;PTree;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;孩子兄弟法&#34;&gt;&lt;a href=&#34;#孩子兄弟法&#34; class=&#34;headerlink&#34; title=&#34;孩子兄弟法&#34;&gt;&lt;/a&gt;孩子兄弟法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;typedef struct CSNode&amp;#123;
    ElemType data;											//数据域
    struct CSNode *firstchild,*nextsibling;					//第一个孩子和右兄弟指针
&amp;#125;CSNode,*CSTree;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Data Structure" />
        <category term="Tree" />
        <category term="森林" />
        <updated>2022-05-05T08:58:34.000Z</updated>
    </entry>
</feed>
