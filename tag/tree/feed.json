{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"tree\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/05/05/Algorithm036/",
            "url": "http://example.com/2022/05/05/Algorithm036/",
            "title": "树、森林",
            "date_published": "2022-05-05T08:58:34.000Z",
            "content_html": "<h2 id=\"树、森林\"><a href=\"#树、森林\" class=\"headerlink\" title=\"树、森林\"></a>树、森林</h2><h3 id=\"树的存储结构\"><a href=\"#树的存储结构\" class=\"headerlink\" title=\"树的存储结构\"></a>树的存储结构</h3><h4 id=\"双亲表示法\"><a href=\"#双亲表示法\" class=\"headerlink\" title=\"双亲表示法\"></a>双亲表示法</h4><pre class=\" language-c++\"><code class=\"language-c++\">#define MAX_TREE_SIZE 100\t\t\t\t\t//树中最多节点数\t\ntypedef struct&#123;\t\t\t\t\t\t\t\t//树的结点定义\n    ElemType data;\t\t\t\t\t\t\t//数据元素\t\n    int parent;\t\t\t\t\t\t\t\t//双亲位置域\n&#125;PTNode;\ntypedef struct&#123;\t\t\t\t\t\t\t\t//树的类型定义\n    PTNode nodes[MAX_TREE_SIZE];\t\t\t//双亲表示\n    int n;\t\t\t\t\t\t\t\t\t//节点数\n&#125;PTree;\n</code></pre>\n<h4 id=\"孩子兄弟法\"><a href=\"#孩子兄弟法\" class=\"headerlink\" title=\"孩子兄弟法\"></a>孩子兄弟法</h4><pre class=\" language-c++\"><code class=\"language-c++\">typedef struct CSNode&#123;\n    ElemType data;\t\t\t\t\t\t\t\t\t\t\t//数据域\n    struct CSNode *firstchild,*nextsibling;\t\t\t\t\t//第一个孩子和右兄弟指针\n&#125;CSNode,*CSTree;\n</code></pre>\n",
            "tags": [
                "Data Structure",
                "Tree",
                "森林"
            ]
        }
    ]
}