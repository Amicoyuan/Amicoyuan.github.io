{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"stl\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/16/Algorithm029/",
            "url": "http://example.com/2022/04/16/Algorithm029/",
            "title": "STL中map的使用",
            "date_published": "2022-04-16T08:26:03.000Z",
            "content_html": "<h2 id=\"STL中map的使用\"><a href=\"#STL中map的使用\" class=\"headerlink\" title=\"STL中map的使用\"></a>STL中map的使用</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>map 是 STL 的一个关联容器，它提供一对一的数据处理能力。</p>\n<p>map 对象是<strong>模板类</strong>，需要<strong>关键字</strong>和<strong>存储对象</strong>两个模板参数：其中第一个参数称为关键字，每个关键字只能在 map 中出现一次；第二个参数称为该关键字的值。可以将关键字和存储对象理解为“{键，值}对”。</p>\n<pre class=\" language-c++\"><code class=\"language-c++\">map<int,string> mp;\n</code></pre>\n<h3 id=\"map的数据插入操作\"><a href=\"#map的数据插入操作\" class=\"headerlink\" title=\"map的数据插入操作\"></a>map的数据插入操作</h3><pre class=\" language-c++\"><code class=\"language-c++\">//使用insert函数插入pair数据\nmp.insert(pair<int,string>(3,\"xingyuanjie\"));\n//使用数组方式插入数据\nmp[2]=\"wangzhouyang\";\n</code></pre>\n<p><strong>说明：上面的两种方法是有区别的，用 insert 函数插入数据，涉及到集合的唯一性这个概念，即当 map 中有这个关键字时，insert 操作是不能实现数据插入的；但是数组方式能够插入数据，插入的数据会覆盖该关键字之前对应的值。</strong></p>\n<h3 id=\"map中数据的遍历\"><a href=\"#map中数据的遍历\" class=\"headerlink\" title=\"map中数据的遍历\"></a>map中数据的遍历</h3><pre class=\" language-c++\"><code class=\"language-c++\">map<int,string>::iterator it;\t\t\t\t\t//迭代器\nfor (it=mp.begin();it!=mp.end();it++) &#123;\n    cout<<it->first<<\" \"<<it->second<<endl;\n&#125;\n</code></pre>\n<h3 id=\"map中数据的查找\"><a href=\"#map中数据的查找\" class=\"headerlink\" title=\"map中数据的查找\"></a>map中数据的查找</h3><pre class=\" language-c++\"><code class=\"language-c++\">map<int,string>::iterator it;\t\t\t\t\t//迭代器\nit=mp.find(1);\nif(it!=mp.end())&#123;\n        cout << \"Find it, the relative value is: \" << it->second << endl;\n&#125;\nelse&#123;\n           cout << \"Can not find the relative value.\" << endl;\n&#125;\n</code></pre>\n<h3 id=\"map中数据的删除\"><a href=\"#map中数据的删除\" class=\"headerlink\" title=\"map中数据的删除\"></a>map中数据的删除</h3><pre class=\" language-c++\"><code class=\"language-c++\">map<int,string>::iterator it;\t\t\t\t\t//迭代器\nit = mp.find(2);\nmp.erase(it);\n</code></pre>\n<h3 id=\"map中数据的排序\"><a href=\"#map中数据的排序\" class=\"headerlink\" title=\"map中数据的排序\"></a>map中数据的排序</h3><p><strong>map 中的所有元素都会根据元素的键值，自动进行升序排序。</strong></p>\n<h3 id=\"完整操作\"><a href=\"#完整操作\" class=\"headerlink\" title=\"完整操作\"></a>完整操作</h3><h4 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h4><pre class=\" language-c++\"><code class=\"language-c++\">#include<bits/stdc++.h>\nusing namespace std;\nmap<int,string> mp;\nint main()\n&#123;\n    //使用insert函数插入pair数据\n    mp.insert(pair<int,string>(3,\"xingyuanjie\"));\n    mp.insert(pair<int,string>(1,\"shicheng\"));\n    mp.insert(pair<int,string>(4,\"tanghaipeng\"));\n    mp.insert(pair<int,string>(6,\"zhouyuhao\"));\n    mp.insert(pair<int,string>(5,\"heqichuan\"));\n    //使用数组方式插入数据\n    mp[2]=\"wangzhouyang\";\n    //map的遍历\n    map<int,string>::iterator it;\n    for (it=mp.begin();it!=mp.end();it++) &#123;\n        cout<<it->first<<\" \"<<it->second<<endl;\n    &#125;\n    //查找操作\n    it=mp.find(1);\n    if(it!=mp.end())&#123;\n        cout << \"Find it, the relative value is: \" << it->second << endl;\n    &#125;\n    else &#123;\n        cout << \"Can not find the relative value.\" << endl;\n    &#125;\n    //删除操作\n    it = mp.find(2);\n    mp.erase(it);\n    for (it=mp.begin();it!=mp.end();it++) &#123;\n        cout<<it->first<<\" \"<<it->second<<endl;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h4><pre class=\" language-c++\"><code class=\"language-c++\">1 shicheng\n2 wangzhouyang\n3 xingyuanjie\n4 tanghaipeng\n5 heqichuan\n6 zhouyuhao\nFind it, the relative value is: shicheng\n1 shicheng\n3 xingyuanjie\n4 tanghaipeng\n5 heqichuan\n6 zhouyuhao\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/liitdar/article/details/80009712\">(20条消息) STL中map介绍_liitdar的博客-CSDN博客_stlmap</a></p>\n",
            "tags": [
                "STL",
                "Map"
            ]
        },
        {
            "id": "http://example.com/2022/04/11/Algorithm016/",
            "url": "http://example.com/2022/04/11/Algorithm016/",
            "title": "L2-021 点赞狂魔 (25 分)",
            "date_published": "2022-04-11T11:21:06.000Z",
            "content_html": "<h1 id=\"L2-021-点赞狂魔-25-分\"><a href=\"#L2-021-点赞狂魔-25-分\" class=\"headerlink\" title=\"L2-021 点赞狂魔 (25 分)\"></a>L2-021 点赞狂魔 (25 分)</h1><p>微博上有个“点赞”功能，你可以为你喜欢的博文点个赞表示支持。每篇博文都有一些刻画其特性的标签，而你点赞的博文的类型，也间接刻画了你的特性。然而有这么一种人，他们会通过给自己看到的一切内容点赞来狂刷存在感，这种人就被称为“点赞狂魔”。他们点赞的标签非常分散，无法体现出明显的特性。本题就要求你写个程序，通过统计每个人点赞的不同标签的数量，找出前3名点赞狂魔。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出一个正整数<em>N</em>（≤100），是待统计的用户数。随后<em>N</em>行，每行列出一位用户的点赞标签。格式为“<code>Name</code> <em>K</em> <em>F</em>1⋯<em>F**K</em>”，其中<code>Name</code>是不超过8个英文小写字母的非空用户名，1≤<em>K</em>≤1000，<em>F**i</em>（<em>i</em>&#x3D;1,⋯,<em>K</em>）是特性标签的编号，我们将所有特性标签从 1 到 107 编号。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>统计每个人点赞的不同标签的数量，找出数量最大的前3名，在一行中顺序输出他们的用户名,其间以1个空格分隔,且行末不得有多余空格。如果有并列，则输出标签出现次数平均值最小的那个，题目保证这样的用户没有并列。若不足3人，则用<code>-</code>补齐缺失，例如<code>mike jenny -</code>就表示只有2人。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre class=\" language-in\"><code class=\"language-in\">5\nbob 11 101 102 103 104 105 106 107 108 108 107 107\npeter 8 1 2 3 4 3 2 5 1\nchris 12 1 2 3 4 5 6 7 8 9 1 2 3\njohn 10 8 7 6 5 4 3 2 1 7 5\njack 9 6 7 8 9 10 11 12 13 14\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre class=\" language-out\"><code class=\"language-out\">jack chris john\n</code></pre>\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><p><strong>结构体数组 + sort排序</strong></p>\n<pre class=\" language-c++\"><code class=\"language-c++\">#include <bits/stdc++.h>\nusing namespace std;\nstruct person&#123;\n    char name[10];\n    set<int> s;\t\t\t\t//set容器中的每个元素值唯一\n    int all=0;\t\t\t\t//记录点赞次数\n&#125;;\nbool cmp(person a,person b)&#123;\n    if(a.s.size()==b.s.size()) return a.all<b.all;\t\t\t//如果有并列，则输出标签出现次数平均值最小的那个\n    return a.s.size()>b.s.size();\t\t\t\t\t\t\t//点赞的不同标签的数量最多的\n&#125;\nint main()\n&#123;\n    int n;\n    cin>>n;\n    person p[n];\n    for (int i = 0; i <n ; ++i) &#123;\n        cin>>p[i].name;\n        int time;\n        cin>>time;\n        p[i].all=time;\t\t\t\t\t\t\t\t\t\t//记录点赞次数\n        for (int j = 0; j < time; ++j) &#123;\n            int tmp;\n            cin>>tmp;\n            p[i].s.insert(tmp);\t\t\t\t\t\t\t\t//插入set容器\n        &#125;\n    &#125;\n    sort(p,p+n,cmp);\t\t\t\t\t\t\t\t\t\t//排序\n    if(n>=3)&#123;\n        cout<<p[0].name<<\" \"<<p[1].name<<\" \"<<p[2].name<<endl;\n    &#125; else if(n==2)&#123;\n        cout<<p[0].name<<\" \"<<p[1].name<<\" \"<<\"-\"<<endl;\n    &#125;else if(n==1)&#123;\n        cout<<p[0].name<<\" \"<<\"-\"<<\" \"<<\"-\"<<endl;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805058485469184\">题目详情 - L2-021 点赞狂魔 (25 分) (pintia.cn)</a></p>\n<p><a href=\"https://blog.csdn.net/changjiale110/article/details/79108447\">(19条消息) STL中的set使用方法详细！！！！_知足–常乐的博客-CSDN博客_set stl</a></p>\n",
            "tags": [
                "STL",
                "C++",
                "Set",
                "团体程序设计天梯赛",
                "Sort"
            ]
        },
        {
            "id": "http://example.com/2022/04/08/Algorithm015/",
            "url": "http://example.com/2022/04/08/Algorithm015/",
            "title": "C++的STL中字符串string自带方法find查找",
            "date_published": "2022-04-08T11:18:57.000Z",
            "content_html": "<h1 id=\"C-的STL中字符串string自带方法find查找\"><a href=\"#C-的STL中字符串string自带方法find查找\" class=\"headerlink\" title=\"C++的STL中字符串string自带方法find查找\"></a>C++的STL中字符串string自带方法find查找</h1><h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><pre class=\" language-c++\"><code class=\"language-c++\">string str = \"abcd\";\n    cout << str.find('a');\n    //返回的是下标的值而不是指针或是迭代器\n</code></pre>\n<pre class=\" language-c++\"><code class=\"language-c++\">string str = \"abcd\"\nstring sub = \"cd\"\nif(str.find(sub)!=string::npos)&#123;\n    cout<<\"找到了\"<<endl;\n&#125;else&#123;\n    cout<<\"没有找到\"<<endl;\n&#125;\n</code></pre>\n<p>要是没有找到，返回的是str::npos<br>注意，只有string的find方法是返回的下标，因为string是顺序索引，set,map,multiset,multimap都不是顺序索引的数据结构，所以返回的是迭代器。</p>\n<h2 id=\"样例一-L1-070-吃火锅-15-分\"><a href=\"#样例一-L1-070-吃火锅-15-分\" class=\"headerlink\" title=\"样例一:L1-070 吃火锅 (15 分)\"></a>样例一:<strong>L1-070 吃火锅 (15 分)</strong></h2><p><strong>题目链接：</strong></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053\">https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053</a></p>\n<p><img src=\"/2022/04/08/Algorithm015/68518b64-f2f7-4694-aaeb-d32afe657f7b.jpg\" alt=\"chg.jpg\"></p>\n<p>以上图片来自微信朋友圈：这种天气你有什么破事打电话给我基本没用。但是如果你说“吃火锅”，那就厉害了，我们的故事就开始了。</p>\n<p>本题要求你实现一个程序，自动检查你朋友给你发来的信息里有没有 <code>chi1 huo3 guo1</code>。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入每行给出一句不超过 80 个字符的、以回车结尾的朋友信息，信息为非空字符串，仅包括字母、数字、空格、可见的半角标点符号。当读到某一行只有一个英文句点 <code>.</code> 时，输入结束，此行不算在朋友信息里。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在一行中输出朋友信息的总条数。然后对朋友的每一行信息，检查其中是否包含 <code>chi1 huo3 guo1</code>，并且统计这样厉害的信息有多少条。在第二行中首先输出第一次出现 <code>chi1 huo3 guo1</code> 的信息是第几条（从 1 开始计数），然后输出这类信息的总条数，其间以一个空格分隔。题目保证输出的所有数字不超过 100。</p>\n<p>如果朋友从头到尾都没提 <code>chi1 huo3 guo1</code> 这个关键词，则在第二行输出一个表情 <code>-_-#</code>。</p>\n<h3 id=\"输入样例-1：\"><a href=\"#输入样例-1：\" class=\"headerlink\" title=\"输入样例 1：\"></a>输入样例 1：</h3><pre class=\" language-in\"><code class=\"language-in\">Hello!\nare you there?\nwantta chi1 huo3 guo1?\nthat's so li hai le\nour story begins from chi1 huo3 guo1 le\n.\n</code></pre>\n<h3 id=\"输出样例-1：\"><a href=\"#输出样例-1：\" class=\"headerlink\" title=\"输出样例 1：\"></a>输出样例 1：</h3><pre class=\" language-out\"><code class=\"language-out\">5\n3 2\n</code></pre>\n<h3 id=\"输入样例-2：\"><a href=\"#输入样例-2：\" class=\"headerlink\" title=\"输入样例 2：\"></a>输入样例 2：</h3><pre class=\" language-in\"><code class=\"language-in\">Hello!\nare you there?\nwantta qi huo3 guo1 chi1huo3guo1?\nthat's so li hai le\nour story begins from ci1 huo4 guo2 le\n.\n</code></pre>\n<h3 id=\"输出样例-2：\"><a href=\"#输出样例-2：\" class=\"headerlink\" title=\"输出样例 2：\"></a>输出样例 2：</h3><pre class=\" language-out\"><code class=\"language-out\">5\n-_-#\n</code></pre>\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><pre class=\" language-c++\"><code class=\"language-c++\">#include <bits/stdc++.h>\nusing namespace std;\nint main()\n&#123;\n    int flag=0;\t\t\t\t\t//用来判断是否是第一次找到吃火锅\n    int cnt=0;\t\t\t\t\t//用来记录总行数\n    int count=0;\t\t\t\t//用来记录有多少个吃火锅\n    int firstp=0;\t\t\t\t//用来记录第一次出现吃火锅的位置\n    string cmp=\"chi1 huo3 guo1\";\n    while (true)\n    &#123;\n        string s;\n        s.clear();\n        getline(cin,s);\n        if(s.size()==1&&s==\".\")&#123;\n            break;\n        &#125;\n        string tmp =s;\n        if(tmp.find(cmp)!=string::npos)&#123;\n            if(flag==0) &#123;\n                flag =1;\n                firstp = cnt+1;\n            &#125;\n            count=count+1;\n        &#125;\n        cnt=cnt+1;\n\n    &#125;\n    if(count==0)&#123;\n        cout<<cnt<<endl;\n        cout<<\"-_-#\"<<endl;\n    &#125; else&#123;\n        cout<<cnt<<endl;\n        cout<<firstp<<\" \"<<count<<endl;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/qq_50675813/article/details/113313343\">(18条消息) c++STL中的find()函数 有两种使用方法_我们不生产代码，只是代码的搬运工的博客-CSDN博客_c++中find函数的使用方法</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053\">https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053</a></p>\n",
            "tags": [
                "String",
                "Find",
                "STL",
                "C++"
            ]
        }
    ]
}