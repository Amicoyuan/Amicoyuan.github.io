{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"cache\" tag",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/02/26/cache001/",
            "url": "https://xingyuanjie.top/2023/02/26/cache001/",
            "title": "Cache Blocking Techniques【个人翻译】",
            "date_published": "2023-02-26T10:02:29.000Z",
            "content_html": "<h2 id=\"Cache-Blocking-Techniques\"><a href=\"#Cache-Blocking-Techniques\" class=\"headerlink\" title=\"Cache Blocking Techniques\"></a>Cache Blocking Techniques</h2><p><strong>文章来源：</strong><a href=\"https://www.intel.cn/content/www/cn/zh/developer/articles/technical/cache-blocking-techniques.html\">Cache Blocking Techniques (intel.cn)</a></p>\n<p><strong>文章作者：</strong><a href=\"https://community.intel.com/cipcp26785/plugins/custom/intel/intel/custom.userprofile?id=3UpJu61CDTyShonSVJNwDw==&iv=8843887237217530\">Amanda K Sharp</a></p>\n<h3 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h3><p>一类重要的算法更改涉及分块数据结构以适应缓存。通过组织数据内存访问，可以用一个大得多的数据集的一个小子集加载缓存。接下来的想法是在缓存中处理这个数据块。通过在缓存中使用&#x2F;重用这些数据，我们减少了访问内存的需要(减少内存带宽压力)。</p>\n<h3 id=\"Topic\"><a href=\"#Topic\" class=\"headerlink\" title=\"Topic\"></a>Topic</h3><p>分块是一种著名的优化技术，可以帮助避免许多应用程序中的内存带宽瓶颈。分块背后的关键思想是利用应用程序中固有的数据重用，确保数据在多个用途之间保持在缓存中。分块可以在1-D、2-D或3-D空间数据结构上执行。一些迭代应用程序可以进一步受益于多次迭代的分块(通常称为时间分块)，以进一步缓解带宽瓶颈。就代码更改而言，分块通常涉及循环分割和交换的组合。在大多数应用程序代码中，通过对分块因子进行一些参数化，对源进行正确的更改，用户可以最好地执行分块。</p>\n<h3 id=\"Original-Source\"><a href=\"#Original-Source\" class=\"headerlink\" title=\"Original Source\"></a>Original Source</h3><figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">for (body1 = <span class=\"hljs-number\">0</span>; body1 &lt; NBODIES; body1 ++) &#123;<br>   for (body2=<span class=\"hljs-number\">0</span>; body2 &lt; NBODIES; body2++) &#123;<br>     <span class=\"hljs-keyword\">OUT</span>[body1] += compute(body1, body2);<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在本例中，数据(body2)来自内存。假设NBODIES很大，我们将无法在缓存中重用。此应用程序受内存带宽限制。应用程序将以内存到CPU的速度运行，而不是最佳速度。</p>\n<p><strong>Modified Source (with 1-D blocking):</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">for (body2 = <span class=\"hljs-number\">0</span>; body2 &lt; NBODIES; body2 += <span class=\"hljs-keyword\">BLOCK</span>) &#123;<br>   for (body1=<span class=\"hljs-number\">0</span>; body1 &lt; NBODIES; body1 ++) &#123;<br>      for (body22=<span class=\"hljs-number\">0</span>; body22 &lt; <span class=\"hljs-keyword\">BLOCK</span>; body22 ++) &#123;<br>         <span class=\"hljs-keyword\">OUT</span>[body1] += compute(body1, body2 + body22);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在修改后的代码中，数据(body22)在缓存中被保留和重用，从而获得更好的性能。</p>\n<p>例如，上面的代码片段显示了一个分块NBody代码的示例。有两个循环(body1和body2)遍历所有主体。顶部的原始代码流经内部循环中的整个主体集，并且必须在每次迭代中从内存中加载body2值。底部的分块代码是通过将body2循环分解为一个迭代多个BLOCK中的body的外部循环和一个迭代BLOCK中的元素的内部body22循环，并交织body1和body2循环来获得的。这段代码在body1循环的多次迭代中重用了一组BLOCK body2值。如果BLOCK被选中，使得这组值适合缓存，内存流量就会降低一个BLOCK的因子。</p>\n<p>以下是来自OpenMP*版本的NBody基准测试的相关代码片段(使用CHUNK_SIZE因子进行分块应用)。</p>\n<p>在这种情况下，循环展开-阻塞转换被表示为一个pragma，并由编译器完成。在这种情况下，研究-opt-report的输出可以确认编译器确实为你的循环执行了展开阻塞优化。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">#define CHUNK_SIZE <span class=\"hljs-number\">8192</span><br><br>#pragma omp parallel <span class=\"hljs-keyword\">private</span>(body_start_index)<br>  for(body_start_index = <span class=\"hljs-number\">0</span>; body_start_index &lt; global_number_of_bodies; body_start_index += CHUNK_SIZE) &#123;<br>    <span class=\"hljs-built_in\">int</span> i;<br>    <span class=\"hljs-built_in\">int</span> body_end_index = body_start_index + CHUNK_SIZE;<br><br>    #pragma omp for <span class=\"hljs-keyword\">private</span>(i) schedule(guided)<br>    #pragma unroll_and_jam (<span class=\"hljs-number\">4</span>)<br>    for(i=starting_index; i&lt;ending_index; i++) &#123;<br>      <span class=\"hljs-built_in\">int</span> j;<br>      <span class=\"hljs-keyword\">TYPE</span> acc_x_0 = <span class=\"hljs-number\">0</span>, acc_y_0 = <span class=\"hljs-number\">0</span>, acc_z_0 = <span class=\"hljs-number\">0</span>;<br>      for(j=body_start_index; j&lt;body_end_index; j+=<span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">TYPE</span> delta_x_0 = Input_Position_X[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_X[i];<br>        <span class=\"hljs-keyword\">TYPE</span> delta_y_0 = Input_Position_Y[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_Y[i];<br>        <span class=\"hljs-keyword\">TYPE</span> delta_z_0 = Input_Position_Z[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_Z[i];<br><br>        <span class=\"hljs-keyword\">TYPE</span> gamma_0 = delta_x_0*delta_x_0 + delta_y_0*delta_y_0 + delta_z_0*delta_z_0 + epsilon_sqr;<br>        <span class=\"hljs-keyword\">TYPE</span> s_0 = Mass[j+<span class=\"hljs-number\">0</span>]/(gamma_0 * <span class=\"hljs-built_in\">SQRT</span>(gamma_0));<br>        acc_x_0 += s_0*delta_x_0;<br>        acc_y_0 += s_0*delta_y_0;<br>        acc_z_0 += s_0*delta_z_0;<br>      &#125;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">0</span>] += acc_x_0;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">1</span>] += acc_y_0;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">2</span>] += acc_z_0;<br>    &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>下面是Fortran中的一个矩阵乘法代码示例，其中用户执行高级块展开-分块转换(在修改版本中)，涉及本地复制数组以获得最佳性能。</p>\n<p><strong>Fortran Source Example:</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\"><span class=\"hljs-keyword\">do</span> j=<span class=\"hljs-number\">1</span>,N<br>  <span class=\"hljs-keyword\">do</span> k = <span class=\"hljs-number\">1</span>,N<br>    <span class=\"hljs-keyword\">do</span> i = <span class=\"hljs-number\">1</span>,N<br>      c(i,j) = c(i,j) + a(i,k) * b(k,j)<br>    <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>  <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br><span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Modified Fortran Source:</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\"><span class=\"hljs-keyword\">do</span> JJ = <span class=\"hljs-number\">1</span>, N, TJ<br><br>       <span class=\"hljs-keyword\">do</span> KK = <span class=\"hljs-number\">1</span>, N, TK<br>         <span class=\"hljs-keyword\">do</span> jjj = <span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">min</span>(tj,N-jj+<span class=\"hljs-number\">1</span>)                     <span class=\"hljs-comment\">! BCOPY - no transpose</span><br>           <span class=\"hljs-keyword\">do</span> kkk = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tk,N-kk+<span class=\"hljs-number\">1</span>)<br>             p(kkk,jjj-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>) = B(kk+kkk-<span class=\"hljs-number\">1</span>, jj+jjj-<span class=\"hljs-number\">1</span>)<br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">do</span> II = <span class=\"hljs-number\">1</span>, N, TI<br>           <span class=\"hljs-keyword\">do</span> iii = <span class=\"hljs-number\">1</span>,<br>             <span class=\"hljs-built_in\">min</span>(ti,N-ii+<span class=\"hljs-number\">1</span>)                   <span class=\"hljs-comment\">!ACOPY - transpose</span><br>             <span class=\"hljs-keyword\">do</span> kkk = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tk,N-kk+<span class=\"hljs-number\">1</span>)<br>                Q(kkk,iii) = A(ii+iii-<span class=\"hljs-number\">1</span>, kk+kkk-<span class=\"hljs-number\">1</span>)<br>             <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">do</span> J = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tj,N-jj+<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">4</span><br>             <span class=\"hljs-keyword\">do</span> I = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(ti,N-ii+<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">2</span><br>                t1 = <span class=\"hljs-number\">0</span> ; t2 = <span class=\"hljs-number\">0</span> ; t5 = <span class=\"hljs-number\">0</span> ; t6 = <span class=\"hljs-number\">0</span> ; t9 = <span class=\"hljs-number\">0</span> ; t10 = <span class=\"hljs-number\">0</span> ; t13 =<span class=\"hljs-number\">0</span> ; t14 = <span class=\"hljs-number\">0</span><br>                <span class=\"hljs-comment\">!DIR$ vector aligned                      !DIR$ unroll(2)</span><br>                <span class=\"hljs-keyword\">do</span> K = <span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">min</span>(TK,N-kk+<span class=\"hljs-number\">1</span>)      <span class=\"hljs-comment\">! Innermost loop, vectorized and unrolled by 2 after that</span><br>                   qi = Q(K,I)           ;    qi1 = Q(K,I+<span class=\"hljs-number\">1</span>)  <br>                   t1 = t1+qi*P(K,J)     ;    t2 = t2+ qi1*P(K,J)<br>                   t5 = t5+ qi*P(K,J+<span class=\"hljs-number\">1</span>)  ;    t6 = t6+ qi1*P(K,J+<span class=\"hljs-number\">1</span>)<br>                   t9 = t9+ qi*P(K,J+<span class=\"hljs-number\">2</span>)  ;    t10 = t10+ qi1*P(K,J+<span class=\"hljs-number\">2</span>)<br>                   t13 = t13+ qi*P(K,J+<span class=\"hljs-number\">3</span>);    t14 = t14+qi1*P(K,J+<span class=\"hljs-number\">3</span>)<br>                <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) +t1          ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) + t2<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) + t5     ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) + t6<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) + t9     ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) + t10<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) + t13    ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) + t14<br>             <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>       <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>     <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Take-Aways\"><a href=\"#Take-Aways\" class=\"headerlink\" title=\"Take Aways\"></a>Take Aways</h3><p>缓存分块是一种重新安排数据访问的技术，将数据子集(块)拉入缓存，并对这个块进行操作，以避免不得不重复从主存中获取数据。正如上面的示例所示，可以以这种方式手动分块循环数据以重用缓存。</p>\n<p>对于性能关键的循环，其中性能分析表明内存带宽限制，而-opt-report显示编译器没有以最佳方式分块循环，您可以考虑手动展开循环，以便更好地分块数据以实现缓存重用。</p>\n<h3 id=\"NEXT-STEPS\"><a href=\"#NEXT-STEPS\" class=\"headerlink\" title=\"NEXT STEPS\"></a>NEXT STEPS</h3><p>您必须从头到尾阅读本指南，使用内置的超链接来指导您在Intel®Xeon处理器上成功地移植和调优应用程序。本指南中提供的路径反映了获得最佳应用程序性能所需的步骤。</p>\n",
            "tags": [
                "Cache",
                "Blocking"
            ]
        }
    ]
}