{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"dgemm\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/02/12/blislib002/",
            "url": "http://example.com/2023/02/12/blislib002/",
            "title": "BLISlab tutoril阅读",
            "date_published": "2023-02-12T13:11:56.000Z",
            "content_html": "<h1 id=\"BLISlab-tutoril阅读\"><a href=\"#BLISlab-tutoril阅读\" class=\"headerlink\" title=\"BLISlab tutoril阅读\"></a>BLISlab tutoril阅读</h1><h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><strong>Git地址：</strong><a href=\"https://github.com/flame/blislab\">https://github.com/flame/blislab</a> 【代码包包含tutoril.pdf】</p>\n<h2 id=\"BLISlab-A-Sandbox-for-Optimizing-GEMM\"><a href=\"#BLISlab-A-Sandbox-for-Optimizing-GEMM\" class=\"headerlink\" title=\"BLISlab: A Sandbox for Optimizing GEMM\"></a>BLISlab: A Sandbox for Optimizing GEMM</h2><h2 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h2><p>矩阵-矩阵乘法是科学计算中非常重要的基本运算，机器学习也越来越重要。这是一个非常简单的概念，可以在典型的高中代数课程中引入，但在实践中又非常重要，它在计算机上的实现仍然是一个活跃的研究主题。本笔记描述了一组使用该操作的练习，如何在具有分层内存(多个缓存)的现代cpu上获得高性能。它是基于blas类库实例化软件(BLIS)框架下的见解，通过公开一个模仿BLIS实现的简化“沙盒”来实现的。因此，它也成为BLIS优化的“众包”工具。</p>\n<h2 id=\"1-Introduction\"><a href=\"#1-Introduction\" class=\"headerlink\" title=\"1.Introduction\"></a>1.Introduction</h2><p>矩阵-矩阵乘法(Gemm)经常被用作一个简单的例子，以提高如何在现代处理器上优化代码的意识。原因是该操作描述简单，很难完全优化，而且具有实际意义。在本文档中，我们将带领读者了解目前CPU架构中最快实现的技术。</p>\n<h3 id=\"1-1-Basic-Linear-Algebra-Subprograms-BLAS\"><a href=\"#1-1-Basic-Linear-Algebra-Subprograms-BLAS\" class=\"headerlink\" title=\"1.1 Basic Linear Algebra Subprograms (BLAS)\"></a>1.1 Basic Linear Algebra Subprograms (BLAS)</h3><p>基本线性代数子程序(BLAS)[10,5,4,14]为一组线性代数操作形成了一个接口，在此基础上构建了更高级别的线性代数库，如LAPACK[2]和libflame[19]。其思想是，如果有人针对给定的体系结构优化BLAS，那么所有以调用BLAS的方式编写的应用程序和库都将受益于这种优化。</p>\n<p>BLAS被分为三组:一级BLAS(矢量-矢量操作)、二级BLAS(矩阵-矢量操作)和三级BLAS(矩阵-矩阵操作)。最后一组得益于这样一个事实:如果所有矩阵操作数的大小都是n × n，则O(n3)浮点运算对O(n)个数据执行，因此在内存层(主存、缓存和寄存器)之间移动数据的成本可以在很多次计算中平摊。因此，如果仔细执行这些操作，原则上可以实现高性能。</p>\n<h3 id=\"1-2-Matrix-matrix-multiplication\"><a href=\"#1-2-Matrix-matrix-multiplication\" class=\"headerlink\" title=\"1.2 Matrix-matrix multiplication\"></a>1.2 Matrix-matrix multiplication</h3><p>特别地，BLAS通过(Fortran)调用支持具有双精度浮点数的Gemm:</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">dgemm( transa, transb, m, n, k alpha, A,lda, B, ldb, beta, C, ldc)<br></code></pre></div></td></tr></table></figure>\n\n<p>通过适当地选择转置a和转置b来计算:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230212215656711.png\" alt=\"image-20230212215656711\"></p>\n<p>这里C是m × n, k是“第三维”。参数dla, dlb和dlc将在本文档后面进行解释。</p>\n<p>在我们的练习中，我们考虑Gemm的简化版本:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230212215836596.png\" alt=\"image-20230212215836596\"></p>\n<p>其中C是m × n, A是m × k, B是k × n。如果了解如何优化dgemm的这种特殊情况，那么可以很容易地将此知识扩展到所有3级BLAS功能。</p>\n<h3 id=\"1-3-High-performance-implementation\"><a href=\"#1-3-High-performance-implementation\" class=\"headerlink\" title=\"1.3 High-performance implementation\"></a>1.3 High-performance implementation</h3><p>高性能实现的复杂性使得BLAS(尤其是Gemm)的实现通常都是由默默无闻的专家来完成的，这些专家为硬件供应商开发数字库，例如IBM的ESSL、Intel的MKL、Cray的LibSci和AMD的ACML库。这些库通常是用汇编代码编写的(至少是部分)，并且针对特定的处理器高度专门化。</p>\n<p>一篇关键论文[1]展示了“算法和体系结构”方法如何携手设计ar体系结构、编译器和算法，使BLAS能够用高级语言(Fortan)为IBM Power体系结构编写，并解释了在这些处理器上实现高性能的复杂性。便携式高性能ANSI C (PHiPAC)[3]项目随后提供了用C编写高性能代码的指南，并建议如何自动生成和优化以这种方式编写的Gemm。Au tomatatically tuning Linear Algebra Software (ATLAS)[17,18]建立在这些见解的基础上，使BLAS库的自动调优和自动生成成为主流。</p>\n<p>在本文档的一部分中，我们讨论了有关该主题的最新论文，包括引入了实施Gemm[6]的Goto方法和该方法[16]的BLIS重构的论文，以及其他更直接相关的论文。</p>\n<h3 id=\"1-4-Other-similar-exercises\"><a href=\"#1-4-Other-similar-exercises\" class=\"headerlink\" title=\"1.4 Other similar exercises\"></a>1.4 Other similar exercises</h3><p>还有一些人基于Gemm组合了练习。与本文相关的最新成果有:乌尔姆大学Michael Lehn所作的“优化微内核:从纯C到SSE”，以及我们自己整理的关于“优化微内核”的维基。</p>\n<h3 id=\"1-5-We-need-you\"><a href=\"#1-5-We-need-you\" class=\"headerlink\" title=\"1.5 We need you!\"></a>1.5 We need you!</h3><p>本文的目的是指导您实现Gemm的高性能实现。我们的别有用心是，用于实现BLAS的BLIS框架需要针对各种cpu高度优化的所谓微内核。在教你基本技巧的过程中，我们希望找到“那个人”将贡献最好的微内核。就把它当做我们版的高性能计算机达人秀吧。虽然我们在描述中关注的是Intel Haswell架构的优化，但是设置可以很容易地修改，从而帮助您(和我们)优化其他cpu。事实上，BLIS本身支持的体系结构包括AMD和Intel的x86处理器，IBM的Power处理器，ARM处理器和德州仪器的DSP处理器[15,12,8]。</p>\n<h2 id=\"2-Step-1-The-Basics\"><a href=\"#2-Step-1-The-Basics\" class=\"headerlink\" title=\"2 Step 1: The Basics\"></a>2 Step 1: The Basics</h2><h3 id=\"2-1-Simple-matrix-matrix-multiplication\"><a href=\"#2-1-Simple-matrix-matrix-multiplication\" class=\"headerlink\" title=\"2.1 Simple matrix-matrix multiplication\"></a>2.1 Simple matrix-matrix multiplication</h3><p>在我们的讨论中，我们将考虑计算：</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230213165803939.png\" alt=\"image-20230213165803939\"></p>\n<p><img src=\"/2023/02/12/blislib002/image-20230213165826084.png\" alt=\"image-20230213165826084\"></p>\n<p>其中，A、B、C分别为m × k、k × n、m × n矩阵。</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230213165920897.png\" alt=\"image-20230213165920897\"></p>\n<p>如果A、B和C存储在二维数组A、B和C中，下面的伪代码计算C:&#x3D;<br>AB + C:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230213170125083.png\" alt=\"image-20230213170125083\"></p>\n<p>分别计算乘法和加法，计算需要2mnk个浮点运算(flop)。</p>\n<h3 id=\"2-2-Setup\"><a href=\"#2-2-Setup\" class=\"headerlink\" title=\"2.2 Setup\"></a>2.2 Setup</h3><p>为了让您高效地学习如何高效地进行计算，您可以在启动项目时准备好大部分基础设施。我们已经构造了子目录step1，有点像实现真正库might的项目。对于我们的目的来说，这可能是多余的，但是如何构建软件项目是一项值得学习的有用技能。</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214173819349.png\" alt=\"image-20230214173819349\"></p>\n<p>考虑图4，它演示了子目录step1的目录结构:</p>\n<p><strong>README</strong>是一个描述目录内容以及如何编译和执行代码的文件。</p>\n<p><strong>source .sh</strong>配置环境变量的文件。在那个文件中</p>\n<p><strong>BLISLAB USE INTEL</strong>设置是否使用INTEL编译器(true)或GNU编译器(false)。</p>\n<p><strong>BLISLAB USE BLAS</strong>指示您的参考dgemm是否使用外部BLAS库实现(如果您的机器上安装了这样的BLAS库，则为true)，还是简单的三重循环实现(false)。</p>\n<p><strong>COMPILER OPT LEVEL</strong>设置GNU或Intel编译器的优化级别(O0, O1, O2, O3)。<br>(请注意，例如，O3由大写字母“O”和数字“3”组成。)</p>\n<p><strong>OMP NUM THREADS</strong> and <strong>BLISLAB IC NT</strong>设置用于并行版本的线程数<br>代码。对于第1步，将它们都设置为1。</p>\n<p><strong>dgemm</strong>是实现dgemm的例程存在的子目录。在其中</p>\n<p><strong>bl_dgemm_ref.c</strong>包含例程<strong>dgemm ref</strong>，它是dgemm的一个简单实现，如果<strong>BLISLAB_use_BLAS &#x3D; false</strong>，您将使用它来检查实现的正确性。</p>\n<p><strong>my_dgemm.c</strong>包含例程<strong>dgemm</strong>，它最初是dgemm的一个简单实现，您将优化它作为掌握如何优化gemm的第一步的一部分。</p>\n<p><strong>Bl_dgemm_util.c</strong>包含稍后会派上用场的实用程序例程</p>\n<p><strong>include</strong>这个目录包含包含各种宏定义和其他头信息的文件。</p>\n<p><strong>lib</strong>此目录将保存由您实现的源文件(libblislab. lib)生成的库。libblislab.a)您还可以在此目录中安装参考库(例如OpenBLAS)以比较性能。</p>\n<p><strong>test</strong> 这个目录包含“测试驱动程序”和各种实现的正确性&#x2F;性能检查脚本。</p>\n<p><strong>test_bl_demm .c</strong>包含测试例程bl_demm的“测试驱动程序”。</p>\n<p><strong>test_bl_dgemm.x</strong>是<strong>test_bl_dgemm.c</strong>的可执行文件。</p>\n<p><strong>Run_bl_dgemm.sh</strong>包含一个bash脚本，用于收集性能结果。</p>\n<p><strong>tacc_run_bl_dgemm.sh</strong> contains a <strong>SLURM</strong> script for you to (optionally) submit the job to the Texas Advanced Computing Center (TACC) machines if you have an account there.</p>\n<h3 id=\"2-3-Getting-started\"><a href=\"#2-3-Getting-started\" class=\"headerlink\" title=\"2.3 Getting started\"></a>2.3 Getting started</h3><p>我们希望您从my_dgemm.c中的实现开始，并通过应用各种标准优化技术对其进行优化。该文件中的初始实现是具有图2中给出的三个循环的简单实现。首先要注意的是二维数组如何以所谓的列-主序映射到内存。这种选择的原因是最初的BLAS假定数组的列主存储，因为该接口首先是为Fortran用户提供的。检查</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214185803699.png\" alt=\"image-20230214185803699\"></p>\n<p>我们注意到，每个操作数都是一个宏。考虑文件的早期</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214185849594.png\" alt=\"image-20230214185849594\"></p>\n<p>地址C处的线性数组用于存储元素Ci,j，因此i,j元素被映射到位置j * ldc + i。查看它的方法是C的每一列都是连续存储的。但是，可以把矩阵C看作是嵌入在一个更大的数组中，该数组有ldc行，因此访问一行就意味着跨ldc遍历数组C。二维数组C的前维数通常是指这个较大数组的行维数，因此变量ldc (C的前维数)。下图说明了这三个矩阵:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214190409172.png\" alt=\"image-20230214190409172\"></p>\n<p>其中箭头表示列是连续存储的。</p>\n<h4 id=\"2-3-1-Configure-the-default-implementation\"><a href=\"#2-3-1-Configure-the-default-implementation\" class=\"headerlink\" title=\"2.3.1 Configure the default implementation\"></a>2.3.1 Configure the default implementation</h4><p>默认情况下，练习编译并链接到Intel的icc编译器，该编译器将对代码应用编译器优化(O3级)。您需要通过以下命令设置环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">source sourceme.sh<br></code></pre></div></td></tr></table></figure>\n\n<p>在终端中，您将看到输出:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_INTEL = TRUE<br>COMPILER_OPT_LEVEL = O3<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-3-2-Compile-execute-and-collect-results\"><a href=\"#2-3-2-Compile-execute-and-collect-results\" class=\"headerlink\" title=\"2.3.2 Compile, execute and collect results\"></a>2.3.2 Compile, execute and collect results</h4><p>如果您无法访问Intel的编译器(icc)，请阅读第2.3.2小节和2.3.3小节，并继续阅读第2.3.5小节。</p>\n<p>您可以编译、执行代码并通过执行收集性能结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">make clean<br>make<br>cd test<br>./run_bl_dgemm.sh<br></code></pre></div></td></tr></table></figure>\n\n<p>在子目录step1中。您将看到性能结果输出:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214231134260.png\" alt=\"image-20230214231134260\"></p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214231142311.png\" alt=\"image-20230214231142311\"></p>\n<p>您可以在run_bl_dgemm.sh中更改采样块大小。请注意，如果代码中有错误，这些错误将被报告为，例如，</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214231406465.png\" alt=\"image-20230214231406465\"></p>\n<h4 id=\"2-3-3-Draw-the-performance-graph\"><a href=\"#2-3-3-Draw-the-performance-graph\" class=\"headerlink\" title=\"2.3.3 Draw the performance graph\"></a>2.3.3 Draw the performance graph</h4><p>最后，您可以使用<strong>MATLAB</strong>用我们的脚本绘制性能图。在<strong>test</strong>子目录下，执行后</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">./collect_result_step1<br></code></pre></div></td></tr></table></figure>\n\n<p>你会得到一个MATLAB文件“step1_result.m”，具有性能结果。然后你可以执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">bl_dgemm_plot.m<br></code></pre></div></td></tr></table></figure>\n\n<p>在MATLAB中，然后生成性能图。</p>\n<h4 id=\"2-3-4-Change-to-the-GNU-compiler\"><a href=\"#2-3-4-Change-to-the-GNU-compiler\" class=\"headerlink\" title=\"2.3.4 Change to the GNU compiler\"></a>2.3.4 Change to the GNU compiler</h4><p>由于我们希望您明确地了解什么样的技巧可以带来高性能，并且由于有些人可能无法访问Intel编译器，因此接下来应该改为使用GNU C编译器。为此，你必须编辑<strong>sourceme.sh</strong>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_INTEL=false<br></code></pre></div></td></tr></table></figure>\n\n<p>然后，类似于默认设置，您需要通过执行以下命令来设置环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">source sourceme.sh<br></code></pre></div></td></tr></table></figure>\n\n<p>在终端，你会观察到:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_INTEL = false<br>COMILER_OPT_LEVEL = O3<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-3-5-Turn-off-optimization\"><a href=\"#2-3-5-Turn-off-optimization\" class=\"headerlink\" title=\"2.3.5 Turn off optimization\"></a>2.3.5 Turn off optimization</h4><p>接下来，我们希望您关闭编译器执行的优化。这有三个目的:首先，这意味着您将必须显式地执行优化，这将允许您了解架构和算法如何交互。其次，优化编译器很可能会试图“撤销”您显式试图完成的任务。第三，在代码中构建的技巧越多，编译器就越难找出优化的方法。</p>\n<p>你需要先编辑<strong>sourceme.sh:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">COMILER_OPT_LEVEL = O0<br></code></pre></div></td></tr></table></figure>\n\n<p>然后，类似于默认设置，您需要通过执行以下命令来设置环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">source sourceme.sh<br></code></pre></div></td></tr></table></figure>\n\n<p>在终端中，您将看到输出:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_INTEL = false<br>COMILER_OPT_LEVEL =O0<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-3-6-Optional-Use-optimized-BLAS-library-as-reference-implementation\"><a href=\"#2-3-6-Optional-Use-optimized-BLAS-library-as-reference-implementation\" class=\"headerlink\" title=\"2.3.6 (Optional) Use optimized BLAS library as reference implementation\"></a>2.3.6 (Optional) Use optimized BLAS library as reference implementation</h4>",
            "tags": [
                "Linux",
                "dgemm"
            ]
        },
        {
            "id": "http://example.com/2023/02/02/blislab/",
            "url": "http://example.com/2023/02/02/blislab/",
            "title": "BLISlab dgemm优化",
            "date_published": "2023-02-02T06:38:00.000Z",
            "content_html": "<h1 id=\"BLISlab-dgemm优化\"><a href=\"#BLISlab-dgemm优化\" class=\"headerlink\" title=\"BLISlab dgemm优化\"></a>BLISlab dgemm优化</h1><h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><strong>Git地址：</strong><a href=\"https://github.com/flame/blislab\">https://github.com/flame/blislab</a></p>\n<p><strong>视频教程：</strong><a href=\"https://www.bilibili.com/video/BV1c94y117Uw?vd_source=3ae32e36058f58c5b85935fca9b77797%E3%80%90%E6%BE%8E%E5%B3%B0%E7%A7%91%E6%8A%80-%E5%BC%A0%E5%85%88%E8%BD%B6%E8%80%81%E5%B8%88%E3%80%91\">https://www.bilibili.com/video/BV1c94y117Uw?vd_source=3ae32e36058f58c5b85935fca9b77797【澎峰科技-张先轶老师】</a></p>\n<p><strong>阅读</strong>：tutorial.pdf【位于代码包中】</p>\n<h2 id=\"Step0\"><a href=\"#Step0\" class=\"headerlink\" title=\"Step0\"></a>Step0</h2><h3 id=\"1-克隆项目到本地\"><a href=\"#1-克隆项目到本地\" class=\"headerlink\" title=\"1.克隆项目到本地\"></a>1.克隆项目到本地</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">git clone https://github.com/flame/blislab.git<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-代码结构\"><a href=\"#2-代码结构\" class=\"headerlink\" title=\"2.代码结构\"></a>2.代码结构</h3><p><img src=\"/2023/02/02/blislab/image-20230202155728203.png\" alt=\"image-20230202155728203\"></p>\n<h3 id=\"3-编译环境\"><a href=\"#3-编译环境\" class=\"headerlink\" title=\"3.编译环境\"></a>3.编译环境</h3><p><img src=\"/2023/02/02/blislab/image-20230202155820411.png\" alt=\"image-20230202155820411\"></p>\n<h3 id=\"4-运行环境配置脚本\"><a href=\"#4-运行环境配置脚本\" class=\"headerlink\" title=\"4.运行环境配置脚本\"></a>4.运行环境配置脚本</h3><p><img src=\"/2023/02/02/blislab/image-20230202160027957.png\" alt=\"image-20230202160027957\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 step0]# source ./sourceme.sh <br>BLISLAB_DIR = .<br>BLISLAB_USE_INTEL = false<br>BLISLAB_USE_BLAS = false<br>COMPILER_OPT_LEVEL = O3<br>BLAS_DIR = /u/jianyu/lib/openblas<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-Makefile\"><a href=\"#5-Makefile\" class=\"headerlink\" title=\"5.Makefile\"></a>5.Makefile</h3><p><img src=\"/2023/02/02/blislab/image-20230202160244490.png\" alt=\"image-20230202160244490\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 step0]# make<br>gcc -O3 -march=core-avx2 -fPIC -c dgemm/my_dgemm.c -o dgemm/my_dgemm.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br>gcc -O3 -march=core-avx2 -fPIC -c dgemm/bl_dgemm_ref.c -o dgemm/bl_dgemm_ref.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br>gcc -O3 -march=core-avx2 -fPIC -c dgemm/bl_dgemm_util.c -o dgemm/bl_dgemm_util.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br>ar cr lib/libblislab.a dgemm/my_dgemm.o dgemm/bl_dgemm_ref.o dgemm/bl_dgemm_util.o    <br>ranlib lib/libblislab.a<br>gcc -O3 -march=core-avx2 -fPIC -shared -o lib/libblislab.so dgemm/my_dgemm.o dgemm/bl_dgemm_ref.o dgemm/bl_dgemm_util.o     ./lib/libblislab.a -lpthread -lm -lrt<br>cd ./test &amp;&amp; make &amp;&amp; cd . -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br>make[1]: 进入目录“/root/blislab/step0/test”<br>gcc -O3 -march=core-avx2 -fPIC test_bl_dgemm.c -o test_bl_dgemm.x -I../include -I../kernels -I/u/jianyu/lib/openblas/include ../lib/libblislab.a -lpthread -lm -lrt<br>make[1]: 离开目录“/root/blislab/step0/test”<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"6-make-gnu-inc\"><a href=\"#6-make-gnu-inc\" class=\"headerlink\" title=\"6.make.gnu.inc\"></a>6.make.gnu.inc</h3><p><img src=\"/2023/02/02/blislab/image-20230202160608401.png\" alt=\"image-20230202160608401\"></p>\n<h3 id=\"7-ref参考实现是否调用BLAS\"><a href=\"#7-ref参考实现是否调用BLAS\" class=\"headerlink\" title=\"7.ref参考实现是否调用BLAS\"></a>7.ref参考实现是否调用BLAS</h3><p><img src=\"/2023/02/02/blislab/image-20230202160904158.png\" alt=\"image-20230202160904158\"></p>\n<h3 id=\"8-my-dgemm-c\"><a href=\"#8-my-dgemm-c\" class=\"headerlink\" title=\"8.my_dgemm.c\"></a>8.my_dgemm.c</h3><p><img src=\"/2023/02/02/blislab/image-20230202160939940.png\" alt=\"image-20230202160939940\"></p>\n<h3 id=\"9-相关数据变量含义\"><a href=\"#9-相关数据变量含义\" class=\"headerlink\" title=\"9.相关数据变量含义\"></a>9.相关数据变量含义</h3><p><img src=\"/2023/02/02/blislab/image-20230202161055971.png\" alt=\"image-20230202161055971\"></p>\n<h3 id=\"10-代码采用列主元\"><a href=\"#10-代码采用列主元\" class=\"headerlink\" title=\"10.代码采用列主元\"></a>10.代码采用列主元</h3><p><img src=\"/2023/02/02/blislab/image-20230202161219553.png\" alt=\"image-20230202161219553\"></p>\n<h3 id=\"11-dgemm使用脚本测试\"><a href=\"#11-dgemm使用脚本测试\" class=\"headerlink\" title=\"11.dgemm使用脚本测试\"></a>11.dgemm使用脚本测试</h3><p>Test目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 test]# ./run_bl_dgemm.sh <br>result=[<br><span class=\"hljs-meta\">%</span><span class=\"bash\">m\t%n\t%k\t%MY_GFLOPS\t%REF_GFLOPS</span><br>   16\t    16\t    16\t  7.35\t  1.93<br>   32\t    32\t    32\t  7.88\t  1.29<br>   48\t    48\t    48\t  9.81\t  1.17<br>   64\t    64\t    64\t  8.98\t  1.20<br>   80\t    80\t    80\t  9.59\t  1.11<br>   96\t    96\t    96\t  7.74\t  1.08<br>  112\t   112\t   112\t  8.32\t  0.95<br>  128\t   128\t   128\t  7.74\t  1.04<br>  144\t   144\t   144\t  7.39\t  0.99<br>  160\t   160\t   160\t  7.13\t  1.06<br>  176\t   176\t   176\t  7.58\t  1.06<br>  192\t   192\t   192\t  7.73\t  0.98<br>  208\t   208\t   208\t  7.29\t  1.01<br>  224\t   224\t   224\t  7.90\t  0.97<br>  240\t   240\t   240\t  7.61\t  1.00<br>  256\t   256\t   256\t  6.72\t  0.96<br>  272\t   272\t   272\t  7.51\t  0.99<br>  288\t   288\t   288\t  7.39\t  0.99<br>  304\t   304\t   304\t  7.84\t  0.99<br>  320\t   320\t   320\t  7.61\t  0.97<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//run_bl_dgemm.sh</span><br>#!/bin/bash<br><br>#For Mac OS only<br><span class=\"hljs-keyword\">export</span> DYLD_LIBRARY_PATH=/opt/intel/lib:/opt/intel/mkl/lib<br><br>#Single Thread<br><span class=\"hljs-keyword\">export</span> KMP_AFFINITY=compact  #Rule to bind core to thread <span class=\"hljs-keyword\">for</span> OMP thread with Intel compiler <span class=\"hljs-keyword\">for</span> parallel version<br><span class=\"hljs-keyword\">export</span> OMP_NUM_THREADS=<span class=\"hljs-number\">1</span>     #Set OMP number of threads <span class=\"hljs-keyword\">for</span> parallel version<br><span class=\"hljs-keyword\">export</span> BLISLAB_IC_NT=<span class=\"hljs-number\">1</span>       #Set BLISLAB number of threads <span class=\"hljs-keyword\">for</span> parallel version<br>k_start=<span class=\"hljs-number\">16</span>\t\t\t\t\t\t<span class=\"hljs-comment\">//起始大小\t\t</span><br>k_end=<span class=\"hljs-number\">1024</span>\t\t\t\t\t\t<span class=\"hljs-comment\">//结束大小</span><br>k_blocksize=<span class=\"hljs-number\">16</span>\t\t\t\t\t<span class=\"hljs-comment\">//步长</span><br>echo <span class=\"hljs-string\">&quot;result=[&quot;</span><br>echo -e <span class=\"hljs-string\">&quot;%m\\t%n\\t%k\\t%MY_GFLOPS\\t%REF_GFLOPS&quot;</span><br><span class=\"hljs-keyword\">for</span> (( k=k_start; k&lt;=k_end; k+=k_blocksize ))<br><span class=\"hljs-keyword\">do</span><br>    ./test_bl_dgemm.x     $k $k $k <br>done<br>echo <span class=\"hljs-string\">&quot;];&quot;</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"12-dgemm手动指定参数测试\"><a href=\"#12-dgemm手动指定参数测试\" class=\"headerlink\" title=\"12.dgemm手动指定参数测试\"></a>12.dgemm手动指定参数测试</h3><p>Test目录下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">[root@hadoop1 test]# ./test_bl_dgemm.x <span class=\"hljs-number\">256</span> <span class=\"hljs-number\">256</span> <span class=\"hljs-number\">256</span> <br>  <span class=\"hljs-number\">256</span>\t   <span class=\"hljs-number\">256</span>\t   <span class=\"hljs-number\">256</span>\t  <span class=\"hljs-number\">5.00</span>\t  <span class=\"hljs-number\">0.84</span><br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">[root@hadoop1 test]# ./test_bl_dgemm.x <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">32</span> <span class=\"hljs-number\">128</span><br>   <span class=\"hljs-number\">16</span>\t    <span class=\"hljs-number\">32</span>\t   <span class=\"hljs-number\">128</span>\t  <span class=\"hljs-number\">8.77</span>\t  <span class=\"hljs-number\">1.02</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>这里要注意哪个代表m,n,k?</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> *argv[] )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span>    m, n, k; <br><br>    <span class=\"hljs-keyword\">if</span> ( argc != <span class=\"hljs-number\">4</span> ) &#123;<br>        <span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">&quot;Error: require 3 arguments, but only %d provided.\\n&quot;</span>, argc - <span class=\"hljs-number\">1</span> );<br>        <span class=\"hljs-built_in\">exit</span>( <span class=\"hljs-number\">0</span> );<br>    &#125;<br><br>    <span class=\"hljs-built_in\">sscanf</span>( argv[ <span class=\"hljs-number\">1</span> ], <span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;m );<br>    <span class=\"hljs-built_in\">sscanf</span>( argv[ <span class=\"hljs-number\">2</span> ], <span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n );<br>    <span class=\"hljs-built_in\">sscanf</span>( argv[ <span class=\"hljs-number\">3</span> ], <span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;k );<br><br>    <span class=\"hljs-built_in\">test_bl_dgemm</span>( m, n, k );<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"13-计时区域\"><a href=\"#13-计时区域\" class=\"headerlink\" title=\"13.计时区域\"></a><strong>13.计时区域</strong></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span> ( i = <span class=\"hljs-number\">0</span>; i &lt; nrepeats; i ++ ) &#123;<br>        ref_beg = <span class=\"hljs-built_in\">bl_clock</span>();\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//blislib提供的封装</span><br>        &#123;<br>            <span class=\"hljs-built_in\">bl_dgemm_ref</span>(<br>                    m,<br>                    n,<br>                    k,<br>                    A,<br>                    lda,<br>                    B,<br>                    ldb,<br>                    C_ref,<br>                    ldc_ref<br>                    );<br>        &#125;<br>        ref_time = <span class=\"hljs-built_in\">bl_clock</span>() - ref_beg;<br><br>        <span class=\"hljs-keyword\">if</span> ( i == <span class=\"hljs-number\">0</span> ) &#123;<br>            ref_rectime = ref_time;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ref_rectime = ref_time &lt; ref_rectime ? ref_time : ref_rectime;\t\t\t\t\t<span class=\"hljs-comment\">//多次计时取最优</span><br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"14-正确性检验\"><a href=\"#14-正确性检验\" class=\"headerlink\" title=\"14.正确性检验\"></a>14.正确性检验</h3><p>Test目录下Test_bl_gemm.c</p>\n<p>结果比较：通过比较你的优化计算结果和参考计算结果对比</p>\n<p>Gflops的计算</p>\n<ul>\n<li>有效浮点次数 &#x3D; 2*m*n*k</li>\n<li>Gflops &#x3D; 有效浮点次数 &#x2F; 时间</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">computeError</span>(<br>        ldc,<br>        ldc_ref,<br>        m,<br>        n,<br>        C,<br>        C_ref<br>        );<br><br><span class=\"hljs-comment\">// Compute overall floating point operations.</span><br>flops = ( m * n / ( <span class=\"hljs-number\">1000.0</span> * <span class=\"hljs-number\">1000.0</span> * <span class=\"hljs-number\">1000.0</span> ) ) * ( <span class=\"hljs-number\">2</span> * k );<br><br><span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">&quot;%5d\\t %5d\\t %5d\\t %5.2lf\\t %5.2lf\\n&quot;</span>, <br>        m, n, k, flops / bl_dgemm_rectime, flops / ref_rectime );<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"15-课后作业\"><a href=\"#15-课后作业\" class=\"headerlink\" title=\"15.课后作业\"></a>15.课后作业</h3><p><strong>perf工具的用法</strong>：</p>\n<p><a href=\"https://xingyuanjie.top/2022/01/19/tool003/\">perf-系统级性能分析工具 - Amicoyuan (xingyuanjie.top)</a></p>\n<p><strong>分析不同的j,p,i循环顺序的性能：</strong></p>\n<p>原因cache miss造成的差异</p>\n<h2 id=\"Step1\"><a href=\"#Step1\" class=\"headerlink\" title=\"Step1\"></a>Step1</h2><h3 id=\"1-与Step0比较\"><a href=\"#1-与Step0比较\" class=\"headerlink\" title=\"1.与Step0比较\"></a>1.与Step0比较</h3><p><strong>左边是Step1右边是Step0</strong></p>\n<p><img src=\"/2023/02/02/blislab/image-20230202165659964.png\" alt=\"image-20230202165659964\"></p>\n<h3 id=\"2-基本分块\"><a href=\"#2-基本分块\" class=\"headerlink\" title=\"2.基本分块\"></a>2.基本分块</h3><p><img src=\"/2023/02/02/blislab/image-20230202170723811.png\" alt=\"image-20230202170723811\"></p>\n<h3 id=\"3-反汇编\"><a href=\"#3-反汇编\" class=\"headerlink\" title=\"3.反汇编\"></a>3.反汇编</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 dgemm]# objdump -d ./my_dgemm.o &gt; my_dgemm.S<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs assembly\">./my_dgemm.o：     文件格式 elf64-x86-64<br><br><br>Disassembly of section .text:<br><br>0000000000000000 &lt;AddDot&gt;:<br>   0:\t85 ff                \ttest   %edi,%edi<br>   2:\t7e 2e                \tjle    32 &lt;AddDot+0x32&gt;<br>   4:\t48 63 d2             \tmovslq %edx,%rdx<br>   7:\tc4 c1 7b 10 01       \tvmovsd (%r9),%xmm0<br>   c:\t31 c0                \txor    %eax,%eax<br>   e:\t48 c1 e2 03          \tshl    $0x3,%rdx<br>  12:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)<br>  18:\tc5 fb 10 0e          \tvmovsd (%rsi),%xmm1<br>  1c:\t48 01 d6             \tadd    %rdx,%rsi<br>  1f:\tc4 e2 f1 b9 04 c1    \tvfmadd231sd (%rcx,%rax,8),%xmm1,%xmm0<br>  25:\t48 83 c0 01          \tadd    $0x1,%rax<br>  29:\tc4 c1 7b 11 01       \tvmovsd %xmm0,(%r9)<br>  2e:\t39 c7                \tcmp    %eax,%edi<br>  30:\t7f e6                \tjg     18 &lt;AddDot+0x18&gt;<br>  32:\tf3 c3                \trepz retq <br>  34:\t66 90                \txchg   %ax,%ax<br>  36:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)<br>  3d:\t00 00 00 <br><br>0000000000000040 &lt;AddDot_MRxNR&gt;:<br>  40:\te9 00 00 00 00       \tjmpq   45 &lt;AddDot_MRxNR+0x5&gt;<br>  45:\t90                   \tnop<br>  46:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)<br>  4d:\t00 00 00 <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-反汇编（-fPIC引入的差异）\"><a href=\"#4-反汇编（-fPIC引入的差异）\" class=\"headerlink\" title=\"4.反汇编（-fPIC引入的差异）\"></a>4.反汇编（-fPIC引入的差异）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 test]# objdump -d ./test_bl_dgemm.x  &gt; test.S<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/02/02/blislab/image-20230202171234007.png\" alt=\"image-20230202171234007\"></p>\n<h3 id=\"5-Gcc生成汇编\"><a href=\"#5-Gcc生成汇编\" class=\"headerlink\" title=\"5.Gcc生成汇编\"></a>5.Gcc生成汇编</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 step1]# gcc -O3 -march=core-avx2 -fPIC -S dgemm/my_dgemm.c -o dgemm/my_dgemm1.S -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/02/02/blislab/image-20230202171758087.png\" alt=\"image-20230202171758087\"></p>\n<h3 id=\"6-Step0与Step1比较\"><a href=\"#6-Step0与Step1比较\" class=\"headerlink\" title=\"6.Step0与Step1比较\"></a>6.Step0与Step1比较</h3><p><img src=\"/2023/02/02/blislab/image-20230202172816584.png\" alt=\"image-20230202172816584\"></p>\n<h3 id=\"7-分块，修改MR，-NR为4×4\"><a href=\"#7-分块，修改MR，-NR为4×4\" class=\"headerlink\" title=\"7.分块，修改MR， NR为4×4\"></a>7.分块，修改MR， NR为4×4</h3><p><img src=\"/2023/02/02/blislab/image-20230202173132817.png\" alt=\"image-20230202173132817\"></p>\n<h3 id=\"8-分块（2×2）\"><a href=\"#8-分块（2×2）\" class=\"headerlink\" title=\"8.分块（2×2）\"></a>8.分块（2×2）</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> AddDot_2×<span class=\"hljs-number\">2</span>( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *A, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *B, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *C,<span class=\"hljs-keyword\">int</span> ldc ) &#123;<br>\t<span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> C00, C01, C10, C11;<br>    <span class=\"hljs-keyword\">int</span> p;<br>    C00=<span class=\"hljs-number\">0.0</span>;<br>    C01=<span class=\"hljs-number\">0.0</span>;<br>    C10=<span class=\"hljs-number\">0.0</span>;<br>    C11=<span class=\"hljs-number\">0.0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>( p=<span class=\"hljs-number\">0</span> ;p &lt; k; p++)<br>    &#123;<br>        C00 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span>);<br>        C01 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span>);<br>        C10 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span>);<br>        C11 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) +=C00;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) +=C01;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) +=C10;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) +=C11;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/02/02/blislab/image-20230202173645399.png\" alt=\"image-20230202173645399\"></p>\n<h3 id=\"9-AddDot-2x2汇编代码\"><a href=\"#9-AddDot-2x2汇编代码\" class=\"headerlink\" title=\"9.AddDot_2x2汇编代码\"></a>9.AddDot_2x2汇编代码</h3><p><img src=\"/2023/02/02/blislab/image-20230202191728644.png\" alt=\"image-20230202191728644\"></p>\n<h3 id=\"10-AddDot-2x2最内层循环展开\"><a href=\"#10-AddDot-2x2最内层循环展开\" class=\"headerlink\" title=\"10.AddDot_2x2最内层循环展开\"></a>10.AddDot_2x2最内层循环展开</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> AddDot_2×<span class=\"hljs-number\">2</span>( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *A, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *B, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *C,<span class=\"hljs-keyword\">int</span> ldc ) &#123;<br>\t<span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> C00, C01, C10, C11;<br>    <span class=\"hljs-keyword\">int</span> p;<br>    C00=<span class=\"hljs-number\">0.0</span>;<br>    C01=<span class=\"hljs-number\">0.0</span>;<br>    C10=<span class=\"hljs-number\">0.0</span>;<br>    C11=<span class=\"hljs-number\">0.0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>( p=<span class=\"hljs-number\">0</span> ;p &lt; k; p+=<span class=\"hljs-number\">2</span>)<br>    &#123;<br>        C00 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-built_in\">B</span>( p+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);<br>        C01 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-built_in\">B</span>( p+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br>        C10 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-built_in\">B</span>( p+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);<br>        C11 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-built_in\">B</span>( p+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) +=C00;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) +=C01;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) +=C10;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) +=C11;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/02/02/blislab/image-20230202192033816.png\" alt=\"image-20230202192033816\"></p>\n<h3 id=\"11-AddDot-2x2汇编代码【最内层循环展开】\"><a href=\"#11-AddDot-2x2汇编代码【最内层循环展开】\" class=\"headerlink\" title=\"11.AddDot_2x2汇编代码【最内层循环展开】\"></a>11.AddDot_2x2汇编代码【最内层循环展开】</h3><p><img src=\"/2023/02/02/blislab/image-20230202192319993.png\" alt=\"image-20230202192319993\"></p>\n<h2 id=\"Step2\"><a href=\"#Step2\" class=\"headerlink\" title=\"Step2\"></a>Step2</h2><h3 id=\"1-与Step1的性能比较\"><a href=\"#1-与Step1的性能比较\" class=\"headerlink\" title=\"1.与Step1的性能比较\"></a>1.与Step1的性能比较</h3><p><img src=\"/2023/02/02/blislab/image-20230206163219051.png\" alt=\"image-20230206163219051\"></p>\n<h3 id=\"2-优化kernel-x2F-bl-dgemm-ukr-c\"><a href=\"#2-优化kernel-x2F-bl-dgemm-ukr-c\" class=\"headerlink\" title=\"2.优化kernel&#x2F;bl_dgemm_ukr.c\"></a>2.优化kernel&#x2F;bl_dgemm_ukr.c</h3><p><img src=\"/2023/02/02/blislab/image-20230206163713966.png\" alt=\"image-20230206163713966\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206163803615.png\" alt=\"image-20230206163803615\"></p>\n<h3 id=\"3-优化后性能对比\"><a href=\"#3-优化后性能对比\" class=\"headerlink\" title=\"3.优化后性能对比\"></a>3.优化后性能对比</h3><p><img src=\"/2023/02/02/blislab/image-20230206163833950.png\" alt=\"image-20230206163833950\"></p>\n<h3 id=\"4-下降原因分析\"><a href=\"#4-下降原因分析\" class=\"headerlink\" title=\"4.下降原因分析\"></a>4.下降原因分析</h3><p><img src=\"/2023/02/02/blislab/image-20230206164335213.png\" alt=\"image-20230206164335213\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206164734050.png\" alt=\"image-20230206164734050\"></p>\n<h3 id=\"5-如何进行分块\"><a href=\"#5-如何进行分块\" class=\"headerlink\" title=\"5.如何进行分块\"></a>5.如何进行分块</h3><p><img src=\"/2023/02/02/blislab/image-20230206165017812.png\" alt=\"image-20230206165017812\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206165103417.png\" alt=\"image-20230206165103417\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170050450.png\" alt=\"image-20230206170050450\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170105998.png\" alt=\"image-20230206170105998\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170126588.png\" alt=\"image-20230206170126588\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170153251.png\" alt=\"image-20230206170153251\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170226248.png\" alt=\"image-20230206170226248\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170242872.png\" alt=\"image-20230206170242872\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170320842.png\" alt=\"image-20230206170320842\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170334857.png\" alt=\"image-20230206170334857\"></p>\n<h3 id=\"6-Dgemm代码\"><a href=\"#6-Dgemm代码\" class=\"headerlink\" title=\"6.Dgemm代码\"></a>6.Dgemm代码</h3><p><img src=\"/2023/02/02/blislab/image-20230206171538013.png\" alt=\"image-20230206171538013\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206171556767.png\" alt=\"image-20230206171556767\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206171622104.png\" alt=\"image-20230206171622104\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206171639209.png\" alt=\"image-20230206171639209\"></p>\n<h3 id=\"7-Dgemm-macro-kenrel代码\"><a href=\"#7-Dgemm-macro-kenrel代码\" class=\"headerlink\" title=\"7.Dgemm macro kenrel代码\"></a>7.Dgemm macro kenrel代码</h3><p><img src=\"/2023/02/02/blislab/image-20230206171903844.png\" alt=\"image-20230206171903844\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206171940282.png\" alt=\"image-20230206171940282\"></p>\n<h3 id=\"8-Gemm汇总\"><a href=\"#8-Gemm汇总\" class=\"headerlink\" title=\"8.Gemm汇总\"></a>8.Gemm汇总</h3><p><img src=\"/2023/02/02/blislab/image-20230206172351890.png\" alt=\"image-20230206172351890\"></p>\n<h3 id=\"9-拓展\"><a href=\"#9-拓展\" class=\"headerlink\" title=\"9.拓展\"></a>9.拓展</h3><p><img src=\"/2023/02/02/blislab/image-20230206172425329.png\" alt=\"image-20230206172425329\"></p>\n<h3 id=\"10-双缓冲优化\"><a href=\"#10-双缓冲优化\" class=\"headerlink\" title=\"10.双缓冲优化\"></a>10.双缓冲优化</h3><p><img src=\"/2023/02/02/blislab/image-20230206172846408.png\" alt=\"image-20230206172846408\"></p>\n",
            "tags": [
                "Linux",
                "dgemm"
            ]
        }
    ]
}