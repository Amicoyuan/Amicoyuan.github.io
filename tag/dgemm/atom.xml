<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xingyuanjie.top</id>
    <title>Amicoyuan • Posts by &#34;dgemm&#34; tag</title>
    <link href="https://xingyuanjie.top" />
    <updated>2023-02-15T03:48:16.000Z</updated>
    <category term="AVX" />
    <category term="Data Structure" />
    <category term="String" />
    <category term="Find" />
    <category term="STL" />
    <category term="C++" />
    <category term="Set" />
    <category term="团体程序设计天梯赛" />
    <category term="Sort" />
    <category term="LinkList" />
    <category term="双向链表" />
    <category term="Graph" />
    <category term="邻接表" />
    <category term="Vector" />
    <category term="Binary tree" />
    <category term="BFS" />
    <category term="模拟" />
    <category term="邻接矩阵" />
    <category term="DFS" />
    <category term="结构体" />
    <category term="贪心" />
    <category term="Double类型相等比较" />
    <category term="并查集" />
    <category term="Map" />
    <category term="Pair" />
    <category term="CMU" />
    <category term="CUDA" />
    <category term="Linux" />
    <category term="Tensorflow" />
    <category term="Machine Learning" />
    <category term="MPI" />
    <category term="Matrix" />
    <category term="GEMM" />
    <category term="dgemm" />
    <category term="AVX2" />
    <category term="Cache" />
    <category term="Blocking" />
    <category term="Intel" />
    <category term="LeetCode" />
    <category term="双指针" />
    <category term="数组翻转" />
    <category term="哈希表" />
    <category term="前缀和" />
    <category term="Mirror" />
    <category term="牛客" />
    <category term="Numactl" />
    <category term="OpenMP" />
    <category term="C/C++" />
    <category term="register" />
    <category term="Slurm" />
    <category term="性能分析工具" />
    <category term="gcov" />
    <category term="bool" />
    <entry>
        <id>https://xingyuanjie.top/2023/02/15/blislab003/</id>
        <title>BLISlab中C矩阵初始化速度测试</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/15/blislab003/"/>
        <content type="html">&lt;h2 id=&#34;BLISlab中C矩阵初始化速度测试&#34;&gt;&lt;a href=&#34;#BLISlab中C矩阵初始化速度测试&#34; class=&#34;headerlink&#34; title=&#34;BLISlab中C矩阵初始化速度测试&#34;&gt;&lt;/a&gt;BLISlab中C矩阵初始化速度测试&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;假设我们想把C中的所有元素都设为0。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统一编译命令：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;g++  xxx.cpp -O0 -std=c++11 -o xxx&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本一：&#34;&gt;&lt;a href=&#34;#版本一：&#34; class=&#34;headerlink&#34; title=&#34;版本一：&#34;&gt;&lt;/a&gt;版本一：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;    		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123; &lt;br&gt;        		&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(i,j) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;   		 	&amp;#125;&lt;br&gt;		&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：&#34;&gt;&lt;a href=&#34;#实测结果：&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776901341&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776901&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本二：&#34;&gt;&lt;a href=&#34;#版本二：&#34; class=&#34;headerlink&#34; title=&#34;版本二：&#34;&gt;&lt;/a&gt;版本二：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j*ldc ];			&lt;span class=&#34;hljs-comment&#34;&gt;//point cp to top of ith column&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;        	*cp++ = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;		&lt;span class=&#34;hljs-comment&#34;&gt;//set element that cp points to to zero and&lt;/span&gt;&lt;br&gt;    	&amp;#125;		&lt;span class=&#34;hljs-comment&#34;&gt;//advance the pointer&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-1&#34;&gt;&lt;a href=&#34;#实测结果：-1&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455968000&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455968&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本三：&#34;&gt;&lt;a href=&#34;#版本三：&#34; class=&#34;headerlink&#34; title=&#34;版本三：&#34;&gt;&lt;/a&gt;版本三：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;       		*(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;   		&amp;#125;&lt;br&gt;	&amp;#125;	&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-2&#34;&gt;&lt;a href=&#34;#实测结果：-2&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581347801&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581347&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本四：&#34;&gt;&lt;a href=&#34;#版本四：&#34; class=&#34;headerlink&#34; title=&#34;版本四：&#34;&gt;&lt;/a&gt;版本四：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; c0 =&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c1=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c2=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c3=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = c0;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c1;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = c2;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = c3;&lt;br&gt;        	cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;   		 &amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-3&#34;&gt;&lt;a href=&#34;#实测结果：-3&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269606428&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269606&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;参考资料：&#34;&gt;&lt;a href=&#34;#参考资料：&#34; class=&#34;headerlink&#34; title=&#34;参考资料：&#34;&gt;&lt;/a&gt;参考资料：&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://gukaifeng.cn/posts/c-11-chrono-gao-jing-du-ji-shi-fang-fa/&#34;&gt;C++11 chrono 高精度计时方法 | GuKaifeng’s Blog&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="dgemm" />
        <updated>2023-02-15T03:48:16.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/12/blislib002/</id>
        <title>BLISlab tutoril阅读</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/12/blislib002/"/>
        <content type="html">&lt;h1 id=&#34;BLISlab-tutoril阅读&#34;&gt;&lt;a href=&#34;#BLISlab-tutoril阅读&#34; class=&#34;headerlink&#34; title=&#34;BLISlab tutoril阅读&#34;&gt;&lt;/a&gt;BLISlab tutoril阅读&lt;/h1&gt;&lt;h2 id=&#34;参考资料：&#34;&gt;&lt;a href=&#34;#参考资料：&#34; class=&#34;headerlink&#34; title=&#34;参考资料：&#34;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Git地址：&lt;/strong&gt;&lt;a href=&#34;https://github.com/flame/blislab&#34;&gt;https://github.com/flame/blislab&lt;/a&gt; 【代码包包含tutoril.pdf】&lt;/p&gt;
&lt;h2 id=&#34;BLISlab-A-Sandbox-for-Optimizing-GEMM&#34;&gt;&lt;a href=&#34;#BLISlab-A-Sandbox-for-Optimizing-GEMM&#34; class=&#34;headerlink&#34; title=&#34;BLISlab: A Sandbox for Optimizing GEMM&#34;&gt;&lt;/a&gt;BLISlab: A Sandbox for Optimizing GEMM&lt;/h2&gt;&lt;h2 id=&#34;Abstract&#34;&gt;&lt;a href=&#34;#Abstract&#34; class=&#34;headerlink&#34; title=&#34;Abstract&#34;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;矩阵-矩阵乘法是科学计算中非常重要的基本运算，机器学习也越来越重要。这是一个非常简单的概念，可以在典型的高中代数课程中引入，但在实践中又非常重要，它在计算机上的实现仍然是一个活跃的研究主题。本笔记描述了一组使用该操作的练习，如何在具有分层内存(多个缓存)的现代cpu上获得高性能。它是基于blas类库实例化软件(BLIS)框架下的见解，通过公开一个模仿BLIS实现的简化“沙盒”来实现的。因此，它也成为BLIS优化的“众包”工具。&lt;/p&gt;
&lt;h2 id=&#34;1-Introduction&#34;&gt;&lt;a href=&#34;#1-Introduction&#34; class=&#34;headerlink&#34; title=&#34;1.Introduction&#34;&gt;&lt;/a&gt;1.Introduction&lt;/h2&gt;&lt;p&gt;矩阵-矩阵乘法(Gemm)经常被用作一个简单的例子，以提高如何在现代处理器上优化代码的意识。原因是该操作描述简单，很难完全优化，而且具有实际意义。在本文档中，我们将带领读者了解目前CPU架构中最快实现的技术。&lt;/p&gt;
&lt;h3 id=&#34;1-1-Basic-Linear-Algebra-Subprograms-BLAS&#34;&gt;&lt;a href=&#34;#1-1-Basic-Linear-Algebra-Subprograms-BLAS&#34; class=&#34;headerlink&#34; title=&#34;1.1 Basic Linear Algebra Subprograms (BLAS)&#34;&gt;&lt;/a&gt;1.1 Basic Linear Algebra Subprograms (BLAS)&lt;/h3&gt;&lt;p&gt;基本线性代数子程序(BLAS)[10,5,4,14]为一组线性代数操作形成了一个接口，在此基础上构建了更高级别的线性代数库，如LAPACK[2]和libflame[19]。其思想是，如果有人针对给定的体系结构优化BLAS，那么所有以调用BLAS的方式编写的应用程序和库都将受益于这种优化。&lt;/p&gt;
&lt;p&gt;BLAS被分为三组:一级BLAS(矢量-矢量操作)、二级BLAS(矩阵-矢量操作)和三级BLAS(矩阵-矩阵操作)。最后一组得益于这样一个事实:如果所有矩阵操作数的大小都是n × n，则O(n3)浮点运算对O(n)个数据执行，因此在内存层(主存、缓存和寄存器)之间移动数据的成本可以在很多次计算中平摊。因此，如果仔细执行这些操作，原则上可以实现高性能。&lt;/p&gt;
&lt;h3 id=&#34;1-2-Matrix-matrix-multiplication&#34;&gt;&lt;a href=&#34;#1-2-Matrix-matrix-multiplication&#34; class=&#34;headerlink&#34; title=&#34;1.2 Matrix-matrix multiplication&#34;&gt;&lt;/a&gt;1.2 Matrix-matrix multiplication&lt;/h3&gt;&lt;p&gt;特别地，BLAS通过(Fortran)调用支持具有双精度浮点数的Gemm:&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;dgemm( transa, transb, m, n, k alpha, A,lda, B, ldb, beta, C, ldc)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过适当地选择转置a和转置b来计算:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230212215656711.png&#34; alt=&#34;image-20230212215656711&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里C是m × n, k是“第三维”。参数dla, dlb和dlc将在本文档后面进行解释。&lt;/p&gt;
&lt;p&gt;在我们的练习中，我们考虑Gemm的简化版本:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230212215836596.png&#34; alt=&#34;image-20230212215836596&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中C是m × n, A是m × k, B是k × n。如果了解如何优化dgemm的这种特殊情况，那么可以很容易地将此知识扩展到所有3级BLAS功能。&lt;/p&gt;
&lt;h3 id=&#34;1-3-High-performance-implementation&#34;&gt;&lt;a href=&#34;#1-3-High-performance-implementation&#34; class=&#34;headerlink&#34; title=&#34;1.3 High-performance implementation&#34;&gt;&lt;/a&gt;1.3 High-performance implementation&lt;/h3&gt;&lt;p&gt;高性能实现的复杂性使得BLAS(尤其是Gemm)的实现通常都是由默默无闻的专家来完成的，这些专家为硬件供应商开发数字库，例如IBM的ESSL、Intel的MKL、Cray的LibSci和AMD的ACML库。这些库通常是用汇编代码编写的(至少是部分)，并且针对特定的处理器高度专门化。&lt;/p&gt;
&lt;p&gt;一篇关键论文[1]展示了“算法和体系结构”方法如何携手设计ar体系结构、编译器和算法，使BLAS能够用高级语言(Fortan)为IBM Power体系结构编写，并解释了在这些处理器上实现高性能的复杂性。便携式高性能ANSI C (PHiPAC)[3]项目随后提供了用C编写高性能代码的指南，并建议如何自动生成和优化以这种方式编写的Gemm。Au tomatatically tuning Linear Algebra Software (ATLAS)[17,18]建立在这些见解的基础上，使BLAS库的自动调优和自动生成成为主流。&lt;/p&gt;
&lt;p&gt;在本文档的一部分中，我们讨论了有关该主题的最新论文，包括引入了实施Gemm[6]的Goto方法和该方法[16]的BLIS重构的论文，以及其他更直接相关的论文。&lt;/p&gt;
&lt;h3 id=&#34;1-4-Other-similar-exercises&#34;&gt;&lt;a href=&#34;#1-4-Other-similar-exercises&#34; class=&#34;headerlink&#34; title=&#34;1.4 Other similar exercises&#34;&gt;&lt;/a&gt;1.4 Other similar exercises&lt;/h3&gt;&lt;p&gt;还有一些人基于Gemm组合了练习。与本文相关的最新成果有:乌尔姆大学Michael Lehn所作的“优化微内核:从纯C到SSE”，以及我们自己整理的关于“优化微内核”的维基。&lt;/p&gt;
&lt;h3 id=&#34;1-5-We-need-you&#34;&gt;&lt;a href=&#34;#1-5-We-need-you&#34; class=&#34;headerlink&#34; title=&#34;1.5 We need you!&#34;&gt;&lt;/a&gt;1.5 We need you!&lt;/h3&gt;&lt;p&gt;本文的目的是指导您实现Gemm的高性能实现。我们的别有用心是，用于实现BLAS的BLIS框架需要针对各种cpu高度优化的所谓微内核。在教你基本技巧的过程中，我们希望找到“那个人”将贡献最好的微内核。就把它当做我们版的高性能计算机达人秀吧。虽然我们在描述中关注的是Intel Haswell架构的优化，但是设置可以很容易地修改，从而帮助您(和我们)优化其他cpu。事实上，BLIS本身支持的体系结构包括AMD和Intel的x86处理器，IBM的Power处理器，ARM处理器和德州仪器的DSP处理器[15,12,8]。&lt;/p&gt;
&lt;h2 id=&#34;2-Step-1-The-Basics&#34;&gt;&lt;a href=&#34;#2-Step-1-The-Basics&#34; class=&#34;headerlink&#34; title=&#34;2 Step 1: The Basics&#34;&gt;&lt;/a&gt;2 Step 1: The Basics&lt;/h2&gt;&lt;h3 id=&#34;2-1-Simple-matrix-matrix-multiplication&#34;&gt;&lt;a href=&#34;#2-1-Simple-matrix-matrix-multiplication&#34; class=&#34;headerlink&#34; title=&#34;2.1 Simple matrix-matrix multiplication&#34;&gt;&lt;/a&gt;2.1 Simple matrix-matrix multiplication&lt;/h3&gt;&lt;p&gt;在我们的讨论中，我们将考虑计算：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230213165803939.png&#34; alt=&#34;image-20230213165803939&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230213165826084.png&#34; alt=&#34;image-20230213165826084&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中，A、B、C分别为m × k、k × n、m × n矩阵。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230213165920897.png&#34; alt=&#34;image-20230213165920897&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果A、B和C存储在二维数组A、B和C中，下面的伪代码计算C:&amp;#x3D;&lt;br&gt;AB + C:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230213170125083.png&#34; alt=&#34;image-20230213170125083&#34;&gt;&lt;/p&gt;
&lt;p&gt;分别计算乘法和加法，计算需要2mnk个浮点运算(flop)。&lt;/p&gt;
&lt;h3 id=&#34;2-2-Setup&#34;&gt;&lt;a href=&#34;#2-2-Setup&#34; class=&#34;headerlink&#34; title=&#34;2.2 Setup&#34;&gt;&lt;/a&gt;2.2 Setup&lt;/h3&gt;&lt;p&gt;为了让您高效地学习如何高效地进行计算，您可以在启动项目时准备好大部分基础设施。我们已经构造了子目录step1，有点像实现真正库might的项目。对于我们的目的来说，这可能是多余的，但是如何构建软件项目是一项值得学习的有用技能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214173819349.png&#34; alt=&#34;image-20230214173819349&#34;&gt;&lt;/p&gt;
&lt;p&gt;考虑图4，它演示了子目录step1的目录结构:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;README&lt;/strong&gt;是一个描述目录内容以及如何编译和执行代码的文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;source .sh&lt;/strong&gt;配置环境变量的文件。在那个文件中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BLISLAB USE INTEL&lt;/strong&gt;设置是否使用INTEL编译器(true)或GNU编译器(false)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BLISLAB USE BLAS&lt;/strong&gt;指示您的参考dgemm是否使用外部BLAS库实现(如果您的机器上安装了这样的BLAS库，则为true)，还是简单的三重循环实现(false)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;COMPILER OPT LEVEL&lt;/strong&gt;设置GNU或Intel编译器的优化级别(O0, O1, O2, O3)。&lt;br&gt;(请注意，例如，O3由大写字母“O”和数字“3”组成。)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OMP NUM THREADS&lt;/strong&gt; and &lt;strong&gt;BLISLAB IC NT&lt;/strong&gt;设置用于并行版本的线程数&lt;br&gt;代码。对于第1步，将它们都设置为1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dgemm&lt;/strong&gt;是实现dgemm的例程存在的子目录。在其中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bl_dgemm_ref.c&lt;/strong&gt;包含例程&lt;strong&gt;dgemm ref&lt;/strong&gt;，它是dgemm的一个简单实现，如果&lt;strong&gt;BLISLAB_use_BLAS &amp;#x3D; false&lt;/strong&gt;，您将使用它来检查实现的正确性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;my_dgemm.c&lt;/strong&gt;包含例程&lt;strong&gt;dgemm&lt;/strong&gt;，它最初是dgemm的一个简单实现，您将优化它作为掌握如何优化gemm的第一步的一部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bl_dgemm_util.c&lt;/strong&gt;包含稍后会派上用场的实用程序例程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;include&lt;/strong&gt;这个目录包含包含各种宏定义和其他头信息的文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lib&lt;/strong&gt;此目录将保存由您实现的源文件(libblislab. lib)生成的库。libblislab.a)您还可以在此目录中安装参考库(例如OpenBLAS)以比较性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test&lt;/strong&gt; 这个目录包含“测试驱动程序”和各种实现的正确性&amp;#x2F;性能检查脚本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test_bl_demm .c&lt;/strong&gt;包含测试例程bl_demm的“测试驱动程序”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test_bl_dgemm.x&lt;/strong&gt;是&lt;strong&gt;test_bl_dgemm.c&lt;/strong&gt;的可执行文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run_bl_dgemm.sh&lt;/strong&gt;包含一个bash脚本，用于收集性能结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tacc_run_bl_dgemm.sh&lt;/strong&gt; contains a &lt;strong&gt;SLURM&lt;/strong&gt; script for you to (optionally) submit the job to the Texas Advanced Computing Center (TACC) machines if you have an account there.&lt;/p&gt;
&lt;h3 id=&#34;2-3-Getting-started&#34;&gt;&lt;a href=&#34;#2-3-Getting-started&#34; class=&#34;headerlink&#34; title=&#34;2.3 Getting started&#34;&gt;&lt;/a&gt;2.3 Getting started&lt;/h3&gt;&lt;p&gt;我们希望您从my_dgemm.c中的实现开始，并通过应用各种标准优化技术对其进行优化。该文件中的初始实现是具有图2中给出的三个循环的简单实现。首先要注意的是二维数组如何以所谓的列-主序映射到内存。这种选择的原因是最初的BLAS假定数组的列主存储，因为该接口首先是为Fortran用户提供的。检查&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214185803699.png&#34; alt=&#34;image-20230214185803699&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们注意到，每个操作数都是一个宏。考虑文件的早期&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214185849594.png&#34; alt=&#34;image-20230214185849594&#34;&gt;&lt;/p&gt;
&lt;p&gt;地址C处的线性数组用于存储元素Ci,j，因此i,j元素被映射到位置j * ldc + i。查看它的方法是C的每一列都是连续存储的。但是，可以把矩阵C看作是嵌入在一个更大的数组中，该数组有ldc行，因此访问一行就意味着跨ldc遍历数组C。二维数组C的前维数通常是指这个较大数组的行维数，因此变量ldc (C的前维数)。下图说明了这三个矩阵:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214190409172.png&#34; alt=&#34;image-20230214190409172&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中箭头表示列是连续存储的。&lt;/p&gt;
&lt;h4 id=&#34;2-3-1-Configure-the-default-implementation&#34;&gt;&lt;a href=&#34;#2-3-1-Configure-the-default-implementation&#34; class=&#34;headerlink&#34; title=&#34;2.3.1 Configure the default implementation&#34;&gt;&lt;/a&gt;2.3.1 Configure the default implementation&lt;/h4&gt;&lt;p&gt;默认情况下，练习编译并链接到Intel的icc编译器，该编译器将对代码应用编译器优化(O3级)。您需要通过以下命令设置环境变量:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;source sourceme.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在终端中，您将看到输出:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_INTEL = TRUE&lt;br&gt;COMPILER_OPT_LEVEL = O3&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-3-2-Compile-execute-and-collect-results&#34;&gt;&lt;a href=&#34;#2-3-2-Compile-execute-and-collect-results&#34; class=&#34;headerlink&#34; title=&#34;2.3.2 Compile, execute and collect results&#34;&gt;&lt;/a&gt;2.3.2 Compile, execute and collect results&lt;/h4&gt;&lt;p&gt;如果您无法访问Intel的编译器(icc)，请阅读第2.3.2小节和2.3.3小节，并继续阅读第2.3.5小节。&lt;/p&gt;
&lt;p&gt;您可以编译、执行代码并通过执行收集性能结果&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;make clean&lt;br&gt;make&lt;br&gt;cd test&lt;br&gt;./run_bl_dgemm.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在子目录step1中。您将看到性能结果输出:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214231134260.png&#34; alt=&#34;image-20230214231134260&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214231142311.png&#34; alt=&#34;image-20230214231142311&#34;&gt;&lt;/p&gt;
&lt;p&gt;您可以在run_bl_dgemm.sh中更改采样块大小。请注意，如果代码中有错误，这些错误将被报告为，例如，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214231406465.png&#34; alt=&#34;image-20230214231406465&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-3-3-Draw-the-performance-graph&#34;&gt;&lt;a href=&#34;#2-3-3-Draw-the-performance-graph&#34; class=&#34;headerlink&#34; title=&#34;2.3.3 Draw the performance graph&#34;&gt;&lt;/a&gt;2.3.3 Draw the performance graph&lt;/h4&gt;&lt;p&gt;最后，您可以使用&lt;strong&gt;MATLAB&lt;/strong&gt;用我们的脚本绘制性能图。在&lt;strong&gt;test&lt;/strong&gt;子目录下，执行后&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;./collect_result_step1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你会得到一个MATLAB文件“step1_result.m”，具有性能结果。然后你可以执行&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;bl_dgemm_plot.m&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在MATLAB中，然后生成性能图。&lt;/p&gt;
&lt;h4 id=&#34;2-3-4-Change-to-the-GNU-compiler&#34;&gt;&lt;a href=&#34;#2-3-4-Change-to-the-GNU-compiler&#34; class=&#34;headerlink&#34; title=&#34;2.3.4 Change to the GNU compiler&#34;&gt;&lt;/a&gt;2.3.4 Change to the GNU compiler&lt;/h4&gt;&lt;p&gt;由于我们希望您明确地了解什么样的技巧可以带来高性能，并且由于有些人可能无法访问Intel编译器，因此接下来应该改为使用GNU C编译器。为此，你必须编辑&lt;strong&gt;sourceme.sh&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_INTEL=false&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，类似于默认设置，您需要通过执行以下命令来设置环境变量:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;source sourceme.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在终端，你会观察到:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_INTEL = false&lt;br&gt;COMILER_OPT_LEVEL = O3&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-3-5-Turn-off-optimization&#34;&gt;&lt;a href=&#34;#2-3-5-Turn-off-optimization&#34; class=&#34;headerlink&#34; title=&#34;2.3.5 Turn off optimization&#34;&gt;&lt;/a&gt;2.3.5 Turn off optimization&lt;/h4&gt;&lt;p&gt;接下来，我们希望您关闭编译器执行的优化。这有三个目的:首先，这意味着您将必须显式地执行优化，这将允许您了解架构和算法如何交互。其次，优化编译器很可能会试图“撤销”您显式试图完成的任务。第三，在代码中构建的技巧越多，编译器就越难找出优化的方法。&lt;/p&gt;
&lt;p&gt;你需要先编辑&lt;strong&gt;sourceme.sh:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;COMILER_OPT_LEVEL = O0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，类似于默认设置，您需要通过执行以下命令来设置环境变量:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;source sourceme.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在终端中，您将看到输出:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_INTEL = false&lt;br&gt;COMILER_OPT_LEVEL =O0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-3-6-Optional-Use-optimized-BLAS-library-as-reference-implementation&#34;&gt;&lt;a href=&#34;#2-3-6-Optional-Use-optimized-BLAS-library-as-reference-implementation&#34; class=&#34;headerlink&#34; title=&#34;2.3.6 (Optional) Use optimized BLAS library as reference implementation&#34;&gt;&lt;/a&gt;2.3.6 (Optional) Use optimized BLAS library as reference implementation&lt;/h4&gt;&lt;p&gt;默认情况下，您的参考Gemm实现是一个非常缓慢的三循环实现。如果你在测试机器上安装了BLAS库，你可以通过设置该库中的dgemm作为你的参考实现:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_BLAS=true&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在sourceme.sh。如果使用Intel编译器，则不需要显式指定MKL的路径。但是，如果使用GNU编译器，则需要指定BLAS库的路径。例如，您可能希望从&lt;a href=&#34;https://github.com/flame/blis%E5%AE%89%E8%A3%85%E6%88%91%E4%BB%AC%E7%9A%84BLIS%E5%BA%93%E5%88%B0/home/lib/blis%E7%9B%AE%E5%BD%95%E5%90%8C%E6%97%B6%E5%9C%A8sourceme&#34;&gt;https://github.com/flame/blis安装我们的BLIS库到/home/lib/blis目录同时在sourceme&lt;/a&gt; .sh中设置&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLAS_DIR=/home/lib/blis&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行**$ source sourceme .sh**后，你会看到:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_BLAS = true&lt;br&gt;BLAS_DIR = /home/lib/blis&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;现在，您的实现的性能和准确性将与这个优化的库例程进行比较。&lt;/p&gt;
&lt;h3 id=&#34;2-4-Basic-techniques&#34;&gt;&lt;a href=&#34;#2-4-Basic-techniques&#34; class=&#34;headerlink&#34; title=&#34;2.4 Basic techniques&#34;&gt;&lt;/a&gt;2.4 Basic techniques&lt;/h3&gt;&lt;p&gt;在本小节中，我们将介绍一些基本的交易技巧。&lt;/p&gt;
&lt;h4 id=&#34;2-4-1-Using-pointers&#34;&gt;&lt;a href=&#34;#2-4-1-Using-pointers&#34; class=&#34;headerlink&#34; title=&#34;2.4.1 Using pointers&#34;&gt;&lt;/a&gt;2.4.1 Using pointers&lt;/h4&gt;&lt;p&gt;既然优化被关闭了，那么矩阵元素所在地址的计算将显式地公开。(优化编译器可以消除这种开销。)您要做的是更改my_gemm.c中的实现，以便它使用指针。在这样做之前，您可能需要备份原始的my_gemm.c，以防需要从头开始重新启动。实际上，在每个步骤中，您可能都希望在单独的文件中备份前面的实现&lt;/p&gt;
&lt;p&gt;这是基本的想法。假设我们想把C中的所有元素都设为0。一个基本的循环，按照在my_gemm.c中找到的内容来设计&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(i,j) =&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Using pointers, we might implement this as&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    cp = &amp;amp;C[ j*ldc ];			&lt;span class=&#34;hljs-comment&#34;&gt;//point cp to top of ith column&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;        *cp++ = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;		&lt;span class=&#34;hljs-comment&#34;&gt;//set element that cp points to to zero and&lt;/span&gt;&lt;br&gt;    &amp;#125;		&lt;span class=&#34;hljs-comment&#34;&gt;//advance the pointer&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意，我们有意地交换了循环的顺序，以便向前移动指针将我们带到C的列中。&lt;/p&gt;
&lt;h4 id=&#34;2-4-2-Loop-unrolling&#34;&gt;&lt;a href=&#34;#2-4-2-Loop-unrolling&#34; class=&#34;headerlink&#34; title=&#34;2.4.2 Loop unrolling&#34;&gt;&lt;/a&gt;2.4.2 Loop unrolling&lt;/h4&gt;&lt;p&gt;每次通过内部循环更新循环索引i和指针cp都会产生相当大的开销。&lt;/p&gt;
&lt;p&gt;因此，编译器将执行循环展开。使用展开因子4，我们将C设置为0的简单循环变成&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;重要的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i和cp现在每四次迭代才更新一次。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(cp+0)使用称为间接寻址的机器指令，这比使用&lt;/em&gt;(cp+k)计算更有效，其中k是变量。&lt;/li&gt;
&lt;li&gt;当它从内存中输入数据到缓存中时，每次输入一条64字节的缓存线。这意味着以64字节的块访问连续数据可以减少内存层之间的内存移动成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，在展开时，如果m不是4的倍数，则可能必须处理“边缘”。&lt;/p&gt;
&lt;p&gt;为了这个练习，你不需要担心这个边缘，只要你明智地选择你的采样块大小，就像第2.5节重申的那样。&lt;/p&gt;
&lt;h4 id=&#34;2-4-3-Register-variables&#34;&gt;&lt;a href=&#34;#2-4-3-Register-variables&#34; class=&#34;headerlink&#34; title=&#34;2.4.3 Register variables&#34;&gt;&lt;/a&gt;2.4.3 Register variables&lt;/h4&gt;&lt;p&gt;注意，只有当数据存储在寄存器中时，计算才会发生。编译器将自动转换代码，以便插入将某些数据放入寄存器的中间步骤。可以给编译器一个提示，将某些数据保存在寄存器中是很好的，如下面的例子所示:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; c0 =&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c1=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c2=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c3=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = c0;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c1;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = c2;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = c3;&lt;br&gt;        cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-5-A-modest-first-goal&#34;&gt;&lt;a href=&#34;#2-5-A-modest-first-goal&#34; class=&#34;headerlink&#34; title=&#34;2.5 A modest first goal&#34;&gt;&lt;/a&gt;2.5 A modest first goal&lt;/h4&gt;&lt;p&gt;现在我们要求您使用上面讨论的技术来优化my_dgemm.c。现在，只需要考虑如何为较小的矩阵获得更好的性能。具体来说，请看下面这张图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230215110352304.png&#34; alt=&#34;image-20230215110352304&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们想让你做的是编写你的代码，使C的mR × nR块保存在寄存器中。你可以选择mR和nR，但是你需要用这些选项更新文件&lt;strong&gt;include&amp;#x2F;bl_config.h&lt;/strong&gt;。这确保了测试驱动程序只尝试这些块大小的倍数的问题大小，所以您不必担心“边缘”。&lt;/p&gt;
&lt;p&gt;您将注意到，即使对于可以放入某个缓存内存中的较小的矩阵，您的实现(比您可能已安装的MKL或其他优化的BLAS库的实现差得多)。原因是编译器没有为浮点运算使用最快的指令。可以通过使用向量intrinsic funtions函数(允许您从C显式地利用它们)或通过在汇编代码中编码来访问这些函数。现在，我们还没到那一步。我们将&lt;br&gt;在步骤3中讨论更多。&lt;/p&gt;
&lt;h2 id=&#34;3-Step-2-Blocking&#34;&gt;&lt;a href=&#34;#3-Step-2-Blocking&#34; class=&#34;headerlink&#34; title=&#34;3 Step 2: Blocking&#34;&gt;&lt;/a&gt;3 Step 2: Blocking&lt;/h2&gt;&lt;h3 id=&#34;3-1-Poorman’s-BLAS&#34;&gt;&lt;a href=&#34;#3-1-Poorman’s-BLAS&#34; class=&#34;headerlink&#34; title=&#34;3.1 Poorman’s BLAS&#34;&gt;&lt;/a&gt;3.1 Poorman’s BLAS&lt;/h3&gt;&lt;p&gt;本练习的第1步使您认识到，随着基于缓存的体系结构的出现，Gemm的高性能实现需要仔细注意数据在内存层之间移动的成本和对该数据的计算的摊薄。为了保持这种可管理性，认识到只有使用相对较小的矩阵执行矩阵-矩阵乘法的“内核”需要高度优化，这是有帮助的，因为使用较大的矩阵的计算可以被分块，然后使用这样的内核而不会对整体性能产生不利影响。这一见解在[9]中得到了明确的提倡。&lt;/p&gt;
&lt;p&gt;这有时被称为“穷人的BLAS”，因为如果一个人只能负担得起优化矩阵-矩阵乘法(使用子矩阵)，那么就可以构建Gemm，以及其他重要的矩阵-矩阵运算，即三级BLAS。我们稍后将看到的是，从模块化和性能的角度来看，这实际上是一个好主意。&lt;/p&gt;
&lt;p&gt;在上一节中，您已经看到了分块的示例。&lt;/p&gt;
&lt;h3 id=&#34;3-2-Blocked-matrix-matrix-multiplication&#34;&gt;&lt;a href=&#34;#3-2-Blocked-matrix-matrix-multiplication&#34; class=&#34;headerlink&#34; title=&#34;3.2 Blocked matrix-matrix multiplication&#34;&gt;&lt;/a&gt;3.2 Blocked matrix-matrix multiplication&lt;/h3&gt;&lt;p&gt;分块Gemm以利用处理器的分层内存的关键是理解当这些矩阵被分块时如何计算C:&amp;#x3D; AB + C。分块&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216130352894.png&#34; alt=&#34;image-20230216130352894&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-3-Your-mission-if-you-choose-to-accept-it&#34;&gt;&lt;a href=&#34;#3-3-Your-mission-if-you-choose-to-accept-it&#34; class=&#34;headerlink&#34; title=&#34;3.3 Your mission, if you choose to accept it&#34;&gt;&lt;/a&gt;3.3 Your mission, if you choose to accept it&lt;/h3&gt;&lt;p&gt;我们现在要求您在my_dgemm中实现分块矩阵-矩阵乘法。具体来说，对于小矩阵，您可以获得比大矩阵更好的性能，因为小矩阵适合缓存。将矩阵划分为能够获得更高性能的子矩阵，您将看到，即使对于更大的矩阵，所得到的实现也能保持更好的性能&lt;/p&gt;
&lt;h2 id=&#34;4-Step-3-Blocking-for-Multiple-Levels-of-Cache&#34;&gt;&lt;a href=&#34;#4-Step-3-Blocking-for-Multiple-Levels-of-Cache&#34; class=&#34;headerlink&#34; title=&#34;4 Step 3: Blocking for Multiple Levels of Cache&#34;&gt;&lt;/a&gt;4 Step 3: Blocking for Multiple Levels of Cache&lt;/h2&gt;&lt;h3 id=&#34;4-1-The-Goto-Approach-to-Implementing-gemm&#34;&gt;&lt;a href=&#34;#4-1-The-Goto-Approach-to-Implementing-gemm&#34; class=&#34;headerlink&#34; title=&#34;4.1 The Goto Approach to Implementing gemm&#34;&gt;&lt;/a&gt;4.1 The Goto Approach to Implementing gemm&lt;/h3&gt;&lt;p&gt;2000年左右，Kazushige Goto用他的技术彻底改变了Gemm在当前cpu上的实现方式，该技术首次发表在论文[6]上。&lt;/p&gt;
&lt;p&gt;最近在[16]中描述了这种方法的进一步“重构”。&lt;/p&gt;
&lt;p&gt;BLIS框架的优点是它将必须高度优化的内核(可能使用向量intrinsic或在汇编代码中)减少为微内核。在本节中，我们将简要描述该方法的重点。然而，我们强烈建议读者熟悉以上两篇论文本身。&lt;/p&gt;
&lt;p&gt;图3(左)说明了Goto方法为三层缓存(L1、L2和L3)构建分块的方式。在BLIS框架中，实现就是这样结构的，因此只有底层的微内核需要针对给定的体系结构进行高度优化和定制。在最初的GotoBLAS实现(现在维护为OpenBLAS[11])中，从围绕微内核的第二个循环开始的操作是定制的。为了获得最佳性能，所有数据都是连续访问的，这就是为什么在到达微内核之前的某个时刻，数据是按照箭头所示的顺序打包的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216131649371.png&#34; alt=&#34;image-20230216131649371&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，注意上图中A块的每一列都乘以B块对应行中的每个元素(我们称这些A块和B块为微面板)。这意味着L2缓存的延迟(从缓存中引入A微面板元素所需的时间)可以平摊到2nR flop上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216131916807.png&#34; alt=&#34;image-20230216131916807&#34;&gt;&lt;/p&gt;
&lt;p&gt;出于这个原因，我们可以组织计算，使A的微面板通常驻留在L2缓存中。实际上，我们可以做得更好:当A和B的微面板的一列发生排名1的更新时，A的微面板的下一列可以被带入寄存器，这样计算就可以掩盖数据移动的成本。事实上，我们希望将B的微面板保留在L1缓存中(因为它将被A的许多微面板重用)，这限制了分块参数kC。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216132839380.png&#34; alt=&#34;image-20230216132839380&#34;&gt;&lt;/p&gt;
&lt;p&gt;有人可能会问，上述方案是否是最优方案。在[7]中给出了一个理论，表明在一个理想化的模型下，上述是局部最优的(在某种意义上，假设数据在层次结构中的某个内存层中，在该级别上提出的阻塞最优地与下一个内存层平摊数据移动的成本)。[13]给出了指导各种分块参数选择的理论。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216133142749.png&#34; alt=&#34;image-20230216133142749&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-2-Setup&#34;&gt;&lt;a href=&#34;#4-2-Setup&#34; class=&#34;headerlink&#34; title=&#34;4.2 Setup&#34;&gt;&lt;/a&gt;4.2 Setup&lt;/h3&gt;&lt;p&gt;图4说明了子目录step3的目录结构。与步骤1相比，我们对以下目录&amp;#x2F;文件进行了修改&amp;#x2F;添加:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kernels&lt;/strong&gt; 这个目录包含各种架构的微内核实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bd_gemm_ukr.c&lt;/strong&gt;给出了一个原生的C实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bl_dgemm_int_kernel.c&lt;/strong&gt; gives an &lt;strong&gt;AVX&amp;#x2F;AVX2&lt;/strong&gt; intrinsics micro-kernel implementation for Haswell architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bl_dgemm_asm_kernel.c&lt;/strong&gt; gives an &lt;strong&gt;AVX&amp;#x2F;AVX2&lt;/strong&gt; assembly micro-kernel implementation for Haswell architecture.&lt;/p&gt;
&lt;h3 id=&#34;4-3-Advanced-techniques&#34;&gt;&lt;a href=&#34;#4-3-Advanced-techniques&#34; class=&#34;headerlink&#34; title=&#34;4.3 Advanced techniques&#34;&gt;&lt;/a&gt;4.3 Advanced techniques&lt;/h3&gt;&lt;p&gt;You can find the vector instructions online:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intel Intrinsics Guide&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intel ISA Extensions&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-3-1-An-introduction-example-for-“axpy”&#34;&gt;&lt;a href=&#34;#4-3-1-An-introduction-example-for-“axpy”&#34; class=&#34;headerlink&#34; title=&#34;4.3.1 An introduction example for “axpy”&#34;&gt;&lt;/a&gt;4.3.1 An introduction example for “axpy”&lt;/h4&gt;&lt;p&gt;我们提供了一个实现“axpy”的示例，以演示如何使用Intel AVX intrinsic和Assembly(在misc&amp;#x2F;examples子目录中)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216134020439.png&#34; alt=&#34;image-20230216134020439&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个例子可以作为学习基本broacast&amp;#x2F;fma&amp;#x2F;load&amp;#x2F;store指令的一个很好的起点。此外，这个示例实际上是4×4 rank-1更新的“broadcast”实现的原语。&lt;/p&gt;
&lt;h4 id=&#34;4-3-2-4×4-rank-1-update&#34;&gt;&lt;a href=&#34;#4-3-2-4×4-rank-1-update&#34; class=&#34;headerlink&#34; title=&#34;4.3.2 4×4 rank-1 update&#34;&gt;&lt;/a&gt;4.3.2 4×4 rank-1 update&lt;/h4&gt;&lt;p&gt;微内核实现可以归结为4×4级别1的更新。有两种可能的实现:一种基于广播(图5)，另一种是蝴蝶排列(图6)。您还可以尝试其他可能的实现。&lt;/p&gt;
&lt;h3 id=&#34;4-4-Your-mission-if-you-choose-to-accept-it&#34;&gt;&lt;a href=&#34;#4-4-Your-mission-if-you-choose-to-accept-it&#34; class=&#34;headerlink&#34; title=&#34;4.4 Your mission, if you choose to accept it&#34;&gt;&lt;/a&gt;4.4 Your mission, if you choose to accept it&lt;/h3&gt;&lt;p&gt;我们在my_dgemm中为您提供了简化BLIS框架的参考实现。代码的组织方式与图3所示相同。但是，每个循环中的步长并没有很好地选择，并且微内核实现是一个简单的C版本。因此。您不会期望代码具有高性能。我们要你做的就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在include&amp;#x2F;bl_config.h文件中指定分块参数mC, nC, kC和微内核大小参数mR, nR;&lt;/li&gt;
&lt;li&gt;使用矢量intrinsic或汇编代码实现高效的微内核。将代码放在kernels&amp;#x2F;bl_dgemm_int_kernel.c(用于向量intrinsic)或kernels&amp;#x2F;bl_dgemm_asm_kernel.c(用于as汇编)中。需要在“include&amp;#x2F; BL_config.h”中修改“BL_MICRO_KERNEL”，指定微内核的函数名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216140558800.png&#34; alt=&#34;image-20230216140558800&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-Step-4-Parallelizing-with-OpenMP&#34;&gt;&lt;a href=&#34;#5-Step-4-Parallelizing-with-OpenMP&#34; class=&#34;headerlink&#34; title=&#34;5 Step 4: Parallelizing with OpenMP&#34;&gt;&lt;/a&gt;5 Step 4: Parallelizing with OpenMP&lt;/h2&gt;&lt;p&gt;BLIS构造GotoBLAS方法实现Gemm的好处是，它在tt C中公开了5个循环，这些循环可以很容易地与OpenMP指令并行。&lt;/p&gt;
&lt;h3 id=&#34;5-1-To-parallelize-or-not-to-parallelize-that’s-the-question&#34;&gt;&lt;a href=&#34;#5-1-To-parallelize-or-not-to-parallelize-that’s-the-question&#34; class=&#34;headerlink&#34; title=&#34;5.1 To parallelize or not to parallelize, that’s the question&#34;&gt;&lt;/a&gt;5.1 To parallelize or not to parallelize, that’s the question&lt;/h3&gt;&lt;p&gt;最基本的问题是要并行化哪个循环。在[12]中详细讨论了每个循环的并行化的优点和缺点。对于多核体系结构(具有相对较少核的多线程体系结构)，可以在早期的论文[15]中找到结果。&lt;/p&gt;
&lt;h2 id=&#34;6-Conclusion&#34;&gt;&lt;a href=&#34;#6-Conclusion&#34; class=&#34;headerlink&#34; title=&#34;6 Conclusion&#34;&gt;&lt;/a&gt;6 Conclusion&lt;/h2&gt;&lt;p&gt;我们使用GEMM作为案例研究来展示如何为性能进行编程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216141029854.png&#34; alt=&#34;image-20230216141029854&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216141041389.png&#34; alt=&#34;image-20230216141041389&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216141057850.png&#34; alt=&#34;image-20230216141057850&#34;&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="dgemm" />
        <updated>2023-02-12T13:11:56.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/02/blislab/</id>
        <title>BLISlab dgemm优化</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/02/blislab/"/>
        <content type="html">&lt;h1 id=&#34;BLISlab-dgemm优化&#34;&gt;&lt;a href=&#34;#BLISlab-dgemm优化&#34; class=&#34;headerlink&#34; title=&#34;BLISlab dgemm优化&#34;&gt;&lt;/a&gt;BLISlab dgemm优化&lt;/h1&gt;&lt;h2 id=&#34;参考资料：&#34;&gt;&lt;a href=&#34;#参考资料：&#34; class=&#34;headerlink&#34; title=&#34;参考资料：&#34;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Git地址：&lt;/strong&gt;&lt;a href=&#34;https://github.com/flame/blislab&#34;&gt;https://github.com/flame/blislab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视频教程：&lt;/strong&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1c94y117Uw?vd_source=3ae32e36058f58c5b85935fca9b77797%E3%80%90%E6%BE%8E%E5%B3%B0%E7%A7%91%E6%8A%80-%E5%BC%A0%E5%85%88%E8%BD%B6%E8%80%81%E5%B8%88%E3%80%91&#34;&gt;https://www.bilibili.com/video/BV1c94y117Uw?vd_source=3ae32e36058f58c5b85935fca9b77797【澎峰科技-张先轶老师】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阅读&lt;/strong&gt;：tutorial.pdf【位于代码包中】&lt;/p&gt;
&lt;h2 id=&#34;Step0&#34;&gt;&lt;a href=&#34;#Step0&#34; class=&#34;headerlink&#34; title=&#34;Step0&#34;&gt;&lt;/a&gt;Step0&lt;/h2&gt;&lt;h3 id=&#34;1-克隆项目到本地&#34;&gt;&lt;a href=&#34;#1-克隆项目到本地&#34; class=&#34;headerlink&#34; title=&#34;1.克隆项目到本地&#34;&gt;&lt;/a&gt;1.克隆项目到本地&lt;/h3&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;git clone https://github.com/flame/blislab.git&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2-代码结构&#34;&gt;&lt;a href=&#34;#2-代码结构&#34; class=&#34;headerlink&#34; title=&#34;2.代码结构&#34;&gt;&lt;/a&gt;2.代码结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202155728203.png&#34; alt=&#34;image-20230202155728203&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-编译环境&#34;&gt;&lt;a href=&#34;#3-编译环境&#34; class=&#34;headerlink&#34; title=&#34;3.编译环境&#34;&gt;&lt;/a&gt;3.编译环境&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202155820411.png&#34; alt=&#34;image-20230202155820411&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-运行环境配置脚本&#34;&gt;&lt;a href=&#34;#4-运行环境配置脚本&#34; class=&#34;headerlink&#34; title=&#34;4.运行环境配置脚本&#34;&gt;&lt;/a&gt;4.运行环境配置脚本&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202160027957.png&#34; alt=&#34;image-20230202160027957&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;[root@hadoop1 step0]# source ./sourceme.sh &lt;br&gt;BLISLAB_DIR = .&lt;br&gt;BLISLAB_USE_INTEL = false&lt;br&gt;BLISLAB_USE_BLAS = false&lt;br&gt;COMPILER_OPT_LEVEL = O3&lt;br&gt;BLAS_DIR = /u/jianyu/lib/openblas&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;5-Makefile&#34;&gt;&lt;a href=&#34;#5-Makefile&#34; class=&#34;headerlink&#34; title=&#34;5.Makefile&#34;&gt;&lt;/a&gt;5.Makefile&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202160244490.png&#34; alt=&#34;image-20230202160244490&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;[root@hadoop1 step0]# make&lt;br&gt;gcc -O3 -march=core-avx2 -fPIC -c dgemm/my_dgemm.c -o dgemm/my_dgemm.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include&lt;br&gt;gcc -O3 -march=core-avx2 -fPIC -c dgemm/bl_dgemm_ref.c -o dgemm/bl_dgemm_ref.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include&lt;br&gt;gcc -O3 -march=core-avx2 -fPIC -c dgemm/bl_dgemm_util.c -o dgemm/bl_dgemm_util.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include&lt;br&gt;ar cr lib/libblislab.a dgemm/my_dgemm.o dgemm/bl_dgemm_ref.o dgemm/bl_dgemm_util.o    &lt;br&gt;ranlib lib/libblislab.a&lt;br&gt;gcc -O3 -march=core-avx2 -fPIC -shared -o lib/libblislab.so dgemm/my_dgemm.o dgemm/bl_dgemm_ref.o dgemm/bl_dgemm_util.o     ./lib/libblislab.a -lpthread -lm -lrt&lt;br&gt;cd ./test &amp;amp;&amp;amp; make &amp;amp;&amp;amp; cd . -I./include -I./kernels -I/u/jianyu/lib/openblas/include&lt;br&gt;make[1]: 进入目录“/root/blislab/step0/test”&lt;br&gt;gcc -O3 -march=core-avx2 -fPIC test_bl_dgemm.c -o test_bl_dgemm.x -I../include -I../kernels -I/u/jianyu/lib/openblas/include ../lib/libblislab.a -lpthread -lm -lrt&lt;br&gt;make[1]: 离开目录“/root/blislab/step0/test”&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;6-make-gnu-inc&#34;&gt;&lt;a href=&#34;#6-make-gnu-inc&#34; class=&#34;headerlink&#34; title=&#34;6.make.gnu.inc&#34;&gt;&lt;/a&gt;6.make.gnu.inc&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202160608401.png&#34; alt=&#34;image-20230202160608401&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-ref参考实现是否调用BLAS&#34;&gt;&lt;a href=&#34;#7-ref参考实现是否调用BLAS&#34; class=&#34;headerlink&#34; title=&#34;7.ref参考实现是否调用BLAS&#34;&gt;&lt;/a&gt;7.ref参考实现是否调用BLAS&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202160904158.png&#34; alt=&#34;image-20230202160904158&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-my-dgemm-c&#34;&gt;&lt;a href=&#34;#8-my-dgemm-c&#34; class=&#34;headerlink&#34; title=&#34;8.my_dgemm.c&#34;&gt;&lt;/a&gt;8.my_dgemm.c&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202160939940.png&#34; alt=&#34;image-20230202160939940&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;9-相关数据变量含义&#34;&gt;&lt;a href=&#34;#9-相关数据变量含义&#34; class=&#34;headerlink&#34; title=&#34;9.相关数据变量含义&#34;&gt;&lt;/a&gt;9.相关数据变量含义&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202161055971.png&#34; alt=&#34;image-20230202161055971&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-代码采用列主元&#34;&gt;&lt;a href=&#34;#10-代码采用列主元&#34; class=&#34;headerlink&#34; title=&#34;10.代码采用列主元&#34;&gt;&lt;/a&gt;10.代码采用列主元&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202161219553.png&#34; alt=&#34;image-20230202161219553&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-dgemm使用脚本测试&#34;&gt;&lt;a href=&#34;#11-dgemm使用脚本测试&#34; class=&#34;headerlink&#34; title=&#34;11.dgemm使用脚本测试&#34;&gt;&lt;/a&gt;11.dgemm使用脚本测试&lt;/h3&gt;&lt;p&gt;Test目录下&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;[root@hadoop1 test]# ./run_bl_dgemm.sh &lt;br&gt;result=[&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt;m	%n	%k	%MY_GFLOPS	%REF_GFLOPS&lt;/span&gt;&lt;br&gt;   16	    16	    16	  7.35	  1.93&lt;br&gt;   32	    32	    32	  7.88	  1.29&lt;br&gt;   48	    48	    48	  9.81	  1.17&lt;br&gt;   64	    64	    64	  8.98	  1.20&lt;br&gt;   80	    80	    80	  9.59	  1.11&lt;br&gt;   96	    96	    96	  7.74	  1.08&lt;br&gt;  112	   112	   112	  8.32	  0.95&lt;br&gt;  128	   128	   128	  7.74	  1.04&lt;br&gt;  144	   144	   144	  7.39	  0.99&lt;br&gt;  160	   160	   160	  7.13	  1.06&lt;br&gt;  176	   176	   176	  7.58	  1.06&lt;br&gt;  192	   192	   192	  7.73	  0.98&lt;br&gt;  208	   208	   208	  7.29	  1.01&lt;br&gt;  224	   224	   224	  7.90	  0.97&lt;br&gt;  240	   240	   240	  7.61	  1.00&lt;br&gt;  256	   256	   256	  6.72	  0.96&lt;br&gt;  272	   272	   272	  7.51	  0.99&lt;br&gt;  288	   288	   288	  7.39	  0.99&lt;br&gt;  304	   304	   304	  7.84	  0.99&lt;br&gt;  320	   320	   320	  7.61	  0.97&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//run_bl_dgemm.sh&lt;/span&gt;&lt;br&gt;#!/bin/bash&lt;br&gt;&lt;br&gt;#For Mac OS only&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; DYLD_LIBRARY_PATH=/opt/intel/lib:/opt/intel/mkl/lib&lt;br&gt;&lt;br&gt;#Single Thread&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; KMP_AFFINITY=compact  #Rule to bind core to thread &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; OMP thread with Intel compiler &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; parallel version&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; OMP_NUM_THREADS=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;     #Set OMP number of threads &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; parallel version&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; BLISLAB_IC_NT=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;       #Set BLISLAB number of threads &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; parallel version&lt;br&gt;k_start=&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;						&lt;span class=&#34;hljs-comment&#34;&gt;//起始大小		&lt;/span&gt;&lt;br&gt;k_end=&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;						&lt;span class=&#34;hljs-comment&#34;&gt;//结束大小&lt;/span&gt;&lt;br&gt;k_blocksize=&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;					&lt;span class=&#34;hljs-comment&#34;&gt;//步长&lt;/span&gt;&lt;br&gt;echo &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;result=[&amp;quot;&lt;/span&gt;&lt;br&gt;echo -e &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%m\t%n\t%k\t%MY_GFLOPS\t%REF_GFLOPS&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (( k=k_start; k&amp;lt;=k_end; k+=k_blocksize ))&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;    ./test_bl_dgemm.x     $k $k $k &lt;br&gt;done&lt;br&gt;echo &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;];&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;12-dgemm手动指定参数测试&#34;&gt;&lt;a href=&#34;#12-dgemm手动指定参数测试&#34; class=&#34;headerlink&#34; title=&#34;12.dgemm手动指定参数测试&#34;&gt;&lt;/a&gt;12.dgemm手动指定参数测试&lt;/h3&gt;&lt;p&gt;Test目录下&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;[root@hadoop1 test]# ./test_bl_dgemm.x &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt; &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;	   &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;	   &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;	  &lt;span class=&#34;hljs-number&#34;&gt;5.00&lt;/span&gt;	  &lt;span class=&#34;hljs-number&#34;&gt;0.84&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;[root@hadoop1 test]# ./test_bl_dgemm.x &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;128&lt;/span&gt;&lt;br&gt;   &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;	    &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;	   &lt;span class=&#34;hljs-number&#34;&gt;128&lt;/span&gt;	  &lt;span class=&#34;hljs-number&#34;&gt;8.77&lt;/span&gt;	  &lt;span class=&#34;hljs-number&#34;&gt;1.02&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;这里要注意哪个代表m,n,k?&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; *argv[] )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;    m, n, k; &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( argc != &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; ) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Error: require 3 arguments, but only %d provided.\n&amp;quot;&lt;/span&gt;, argc - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;exit&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;( argv[ &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ], &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;m );&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;( argv[ &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ], &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;n );&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;( argv[ &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ], &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;k );&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;test_bl_dgemm&lt;/span&gt;( m, n, k );&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;13-计时区域&#34;&gt;&lt;a href=&#34;#13-计时区域&#34; class=&#34;headerlink&#34; title=&#34;13.计时区域&#34;&gt;&lt;/a&gt;&lt;strong&gt;13.计时区域&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; nrepeats; i ++ ) &amp;#123;&lt;br&gt;        ref_beg = &lt;span class=&#34;hljs-built_in&#34;&gt;bl_clock&lt;/span&gt;();								&lt;span class=&#34;hljs-comment&#34;&gt;//blislib提供的封装&lt;/span&gt;&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;bl_dgemm_ref&lt;/span&gt;(&lt;br&gt;                    m,&lt;br&gt;                    n,&lt;br&gt;                    k,&lt;br&gt;                    A,&lt;br&gt;                    lda,&lt;br&gt;                    B,&lt;br&gt;                    ldb,&lt;br&gt;                    C_ref,&lt;br&gt;                    ldc_ref&lt;br&gt;                    );&lt;br&gt;        &amp;#125;&lt;br&gt;        ref_time = &lt;span class=&#34;hljs-built_in&#34;&gt;bl_clock&lt;/span&gt;() - ref_beg;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( i == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) &amp;#123;&lt;br&gt;            ref_rectime = ref_time;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            ref_rectime = ref_time &amp;lt; ref_rectime ? ref_time : ref_rectime;					&lt;span class=&#34;hljs-comment&#34;&gt;//多次计时取最优&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;14-正确性检验&#34;&gt;&lt;a href=&#34;#14-正确性检验&#34; class=&#34;headerlink&#34; title=&#34;14.正确性检验&#34;&gt;&lt;/a&gt;14.正确性检验&lt;/h3&gt;&lt;p&gt;Test目录下Test_bl_gemm.c&lt;/p&gt;
&lt;p&gt;结果比较：通过比较你的优化计算结果和参考计算结果对比&lt;/p&gt;
&lt;p&gt;Gflops的计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效浮点次数 &amp;#x3D; 2*m*n*k&lt;/li&gt;
&lt;li&gt;Gflops &amp;#x3D; 有效浮点次数 &amp;#x2F; 时间&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;computeError&lt;/span&gt;(&lt;br&gt;        ldc,&lt;br&gt;        ldc_ref,&lt;br&gt;        m,&lt;br&gt;        n,&lt;br&gt;        C,&lt;br&gt;        C_ref&lt;br&gt;        );&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Compute overall floating point operations.&lt;/span&gt;&lt;br&gt;flops = ( m * n / ( &lt;span class=&#34;hljs-number&#34;&gt;1000.0&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;1000.0&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;1000.0&lt;/span&gt; ) ) * ( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; * k );&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%5d\t %5d\t %5d\t %5.2lf\t %5.2lf\n&amp;quot;&lt;/span&gt;, &lt;br&gt;        m, n, k, flops / bl_dgemm_rectime, flops / ref_rectime );&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;15-课后作业&#34;&gt;&lt;a href=&#34;#15-课后作业&#34; class=&#34;headerlink&#34; title=&#34;15.课后作业&#34;&gt;&lt;/a&gt;15.课后作业&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;perf工具的用法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2022/01/19/tool003/&#34;&gt;perf-系统级性能分析工具 - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析不同的j,p,i循环顺序的性能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原因cache miss造成的差异&lt;/p&gt;
&lt;h2 id=&#34;Step1&#34;&gt;&lt;a href=&#34;#Step1&#34; class=&#34;headerlink&#34; title=&#34;Step1&#34;&gt;&lt;/a&gt;Step1&lt;/h2&gt;&lt;h3 id=&#34;1-与Step0比较&#34;&gt;&lt;a href=&#34;#1-与Step0比较&#34; class=&#34;headerlink&#34; title=&#34;1.与Step0比较&#34;&gt;&lt;/a&gt;1.与Step0比较&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;左边是Step1右边是Step0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202165659964.png&#34; alt=&#34;image-20230202165659964&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-基本分块&#34;&gt;&lt;a href=&#34;#2-基本分块&#34; class=&#34;headerlink&#34; title=&#34;2.基本分块&#34;&gt;&lt;/a&gt;2.基本分块&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202170723811.png&#34; alt=&#34;image-20230202170723811&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-反汇编&#34;&gt;&lt;a href=&#34;#3-反汇编&#34; class=&#34;headerlink&#34; title=&#34;3.反汇编&#34;&gt;&lt;/a&gt;3.反汇编&lt;/h3&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;[root@hadoop1 dgemm]# objdump -d ./my_dgemm.o &amp;gt; my_dgemm.S&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs assembly&#34;&gt;./my_dgemm.o：     文件格式 elf64-x86-64&lt;br&gt;&lt;br&gt;&lt;br&gt;Disassembly of section .text:&lt;br&gt;&lt;br&gt;0000000000000000 &amp;lt;AddDot&amp;gt;:&lt;br&gt;   0:	85 ff                	test   %edi,%edi&lt;br&gt;   2:	7e 2e                	jle    32 &amp;lt;AddDot+0x32&amp;gt;&lt;br&gt;   4:	48 63 d2             	movslq %edx,%rdx&lt;br&gt;   7:	c4 c1 7b 10 01       	vmovsd (%r9),%xmm0&lt;br&gt;   c:	31 c0                	xor    %eax,%eax&lt;br&gt;   e:	48 c1 e2 03          	shl    $0x3,%rdx&lt;br&gt;  12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)&lt;br&gt;  18:	c5 fb 10 0e          	vmovsd (%rsi),%xmm1&lt;br&gt;  1c:	48 01 d6             	add    %rdx,%rsi&lt;br&gt;  1f:	c4 e2 f1 b9 04 c1    	vfmadd231sd (%rcx,%rax,8),%xmm1,%xmm0&lt;br&gt;  25:	48 83 c0 01          	add    $0x1,%rax&lt;br&gt;  29:	c4 c1 7b 11 01       	vmovsd %xmm0,(%r9)&lt;br&gt;  2e:	39 c7                	cmp    %eax,%edi&lt;br&gt;  30:	7f e6                	jg     18 &amp;lt;AddDot+0x18&amp;gt;&lt;br&gt;  32:	f3 c3                	repz retq &lt;br&gt;  34:	66 90                	xchg   %ax,%ax&lt;br&gt;  36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)&lt;br&gt;  3d:	00 00 00 &lt;br&gt;&lt;br&gt;0000000000000040 &amp;lt;AddDot_MRxNR&amp;gt;:&lt;br&gt;  40:	e9 00 00 00 00       	jmpq   45 &amp;lt;AddDot_MRxNR+0x5&amp;gt;&lt;br&gt;  45:	90                   	nop&lt;br&gt;  46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)&lt;br&gt;  4d:	00 00 00 &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;4-反汇编（-fPIC引入的差异）&#34;&gt;&lt;a href=&#34;#4-反汇编（-fPIC引入的差异）&#34; class=&#34;headerlink&#34; title=&#34;4.反汇编（-fPIC引入的差异）&#34;&gt;&lt;/a&gt;4.反汇编（-fPIC引入的差异）&lt;/h3&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;[root@hadoop1 test]# objdump -d ./test_bl_dgemm.x  &amp;gt; test.S&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202171234007.png&#34; alt=&#34;image-20230202171234007&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-Gcc生成汇编&#34;&gt;&lt;a href=&#34;#5-Gcc生成汇编&#34; class=&#34;headerlink&#34; title=&#34;5.Gcc生成汇编&#34;&gt;&lt;/a&gt;5.Gcc生成汇编&lt;/h3&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;[root@hadoop1 step1]# gcc -O3 -march=core-avx2 -fPIC -S dgemm/my_dgemm.c -o dgemm/my_dgemm1.S -I./include -I./kernels -I/u/jianyu/lib/openblas/include&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202171758087.png&#34; alt=&#34;image-20230202171758087&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-Step0与Step1比较&#34;&gt;&lt;a href=&#34;#6-Step0与Step1比较&#34; class=&#34;headerlink&#34; title=&#34;6.Step0与Step1比较&#34;&gt;&lt;/a&gt;6.Step0与Step1比较&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202172816584.png&#34; alt=&#34;image-20230202172816584&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-分块，修改MR，-NR为4×4&#34;&gt;&lt;a href=&#34;#7-分块，修改MR，-NR为4×4&#34; class=&#34;headerlink&#34; title=&#34;7.分块，修改MR， NR为4×4&#34;&gt;&lt;/a&gt;7.分块，修改MR， NR为4×4&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202173132817.png&#34; alt=&#34;image-20230202173132817&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-分块（2×2）&#34;&gt;&lt;a href=&#34;#8-分块（2×2）&#34; class=&#34;headerlink&#34; title=&#34;8.分块（2×2）&#34;&gt;&lt;/a&gt;8.分块（2×2）&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; AddDot_2×&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *C,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc ) &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; C00, C01, C10, C11;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;    C00=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    C01=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    C10=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    C11=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ;p &amp;lt; k; p++)&lt;br&gt;    &amp;#123;&lt;br&gt;        C00 += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;        C01 += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;        C10 += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;        C11 += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) +=C00;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) +=C01;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) +=C10;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) +=C11;&lt;br&gt;    &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202173645399.png&#34; alt=&#34;image-20230202173645399&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;9-AddDot-2x2汇编代码&#34;&gt;&lt;a href=&#34;#9-AddDot-2x2汇编代码&#34; class=&#34;headerlink&#34; title=&#34;9.AddDot_2x2汇编代码&#34;&gt;&lt;/a&gt;9.AddDot_2x2汇编代码&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202191728644.png&#34; alt=&#34;image-20230202191728644&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-AddDot-2x2最内层循环展开&#34;&gt;&lt;a href=&#34;#10-AddDot-2x2最内层循环展开&#34; class=&#34;headerlink&#34; title=&#34;10.AddDot_2x2最内层循环展开&#34;&gt;&lt;/a&gt;10.AddDot_2x2最内层循环展开&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; AddDot_2×&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *C,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc ) &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; C00, C01, C10, C11;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;    C00=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    C01=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    C10=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    C11=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ;p &amp;lt; k; p+=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        C00 += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) + &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;        C01 += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;        C10 += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) + &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;        C11 += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) +=C00;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) +=C01;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) +=C10;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) +=C11;&lt;br&gt;    &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202192033816.png&#34; alt=&#34;image-20230202192033816&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-AddDot-2x2汇编代码【最内层循环展开】&#34;&gt;&lt;a href=&#34;#11-AddDot-2x2汇编代码【最内层循环展开】&#34; class=&#34;headerlink&#34; title=&#34;11.AddDot_2x2汇编代码【最内层循环展开】&#34;&gt;&lt;/a&gt;11.AddDot_2x2汇编代码【最内层循环展开】&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230202192319993.png&#34; alt=&#34;image-20230202192319993&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Step2&#34;&gt;&lt;a href=&#34;#Step2&#34; class=&#34;headerlink&#34; title=&#34;Step2&#34;&gt;&lt;/a&gt;Step2&lt;/h2&gt;&lt;h3 id=&#34;1-与Step1的性能比较&#34;&gt;&lt;a href=&#34;#1-与Step1的性能比较&#34; class=&#34;headerlink&#34; title=&#34;1.与Step1的性能比较&#34;&gt;&lt;/a&gt;1.与Step1的性能比较&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206163219051.png&#34; alt=&#34;image-20230206163219051&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-优化kernel-x2F-bl-dgemm-ukr-c&#34;&gt;&lt;a href=&#34;#2-优化kernel-x2F-bl-dgemm-ukr-c&#34; class=&#34;headerlink&#34; title=&#34;2.优化kernel&amp;#x2F;bl_dgemm_ukr.c&#34;&gt;&lt;/a&gt;2.优化kernel&amp;#x2F;bl_dgemm_ukr.c&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206163713966.png&#34; alt=&#34;image-20230206163713966&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206163803615.png&#34; alt=&#34;image-20230206163803615&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-优化后性能对比&#34;&gt;&lt;a href=&#34;#3-优化后性能对比&#34; class=&#34;headerlink&#34; title=&#34;3.优化后性能对比&#34;&gt;&lt;/a&gt;3.优化后性能对比&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206163833950.png&#34; alt=&#34;image-20230206163833950&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-下降原因分析&#34;&gt;&lt;a href=&#34;#4-下降原因分析&#34; class=&#34;headerlink&#34; title=&#34;4.下降原因分析&#34;&gt;&lt;/a&gt;4.下降原因分析&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206164335213.png&#34; alt=&#34;image-20230206164335213&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206164734050.png&#34; alt=&#34;image-20230206164734050&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-如何进行分块&#34;&gt;&lt;a href=&#34;#5-如何进行分块&#34; class=&#34;headerlink&#34; title=&#34;5.如何进行分块&#34;&gt;&lt;/a&gt;5.如何进行分块&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206165017812.png&#34; alt=&#34;image-20230206165017812&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206165103417.png&#34; alt=&#34;image-20230206165103417&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206170050450.png&#34; alt=&#34;image-20230206170050450&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206170105998.png&#34; alt=&#34;image-20230206170105998&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206170126588.png&#34; alt=&#34;image-20230206170126588&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206170153251.png&#34; alt=&#34;image-20230206170153251&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206170226248.png&#34; alt=&#34;image-20230206170226248&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206170242872.png&#34; alt=&#34;image-20230206170242872&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206170320842.png&#34; alt=&#34;image-20230206170320842&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206170334857.png&#34; alt=&#34;image-20230206170334857&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-Dgemm代码&#34;&gt;&lt;a href=&#34;#6-Dgemm代码&#34; class=&#34;headerlink&#34; title=&#34;6.Dgemm代码&#34;&gt;&lt;/a&gt;6.Dgemm代码&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206171538013.png&#34; alt=&#34;image-20230206171538013&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206171556767.png&#34; alt=&#34;image-20230206171556767&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206171622104.png&#34; alt=&#34;image-20230206171622104&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206171639209.png&#34; alt=&#34;image-20230206171639209&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-Dgemm-macro-kenrel代码&#34;&gt;&lt;a href=&#34;#7-Dgemm-macro-kenrel代码&#34; class=&#34;headerlink&#34; title=&#34;7.Dgemm macro kenrel代码&#34;&gt;&lt;/a&gt;7.Dgemm macro kenrel代码&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206171903844.png&#34; alt=&#34;image-20230206171903844&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206171940282.png&#34; alt=&#34;image-20230206171940282&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-Gemm汇总&#34;&gt;&lt;a href=&#34;#8-Gemm汇总&#34; class=&#34;headerlink&#34; title=&#34;8.Gemm汇总&#34;&gt;&lt;/a&gt;8.Gemm汇总&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206172351890.png&#34; alt=&#34;image-20230206172351890&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;9-拓展&#34;&gt;&lt;a href=&#34;#9-拓展&#34; class=&#34;headerlink&#34; title=&#34;9.拓展&#34;&gt;&lt;/a&gt;9.拓展&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206172425329.png&#34; alt=&#34;image-20230206172425329&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-双缓冲优化&#34;&gt;&lt;a href=&#34;#10-双缓冲优化&#34; class=&#34;headerlink&#34; title=&#34;10.双缓冲优化&#34;&gt;&lt;/a&gt;10.双缓冲优化&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/02/blislab/image-20230206172846408.png&#34; alt=&#34;image-20230206172846408&#34;&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="dgemm" />
        <updated>2023-02-02T06:38:00.000Z</updated>
    </entry>
</feed>
