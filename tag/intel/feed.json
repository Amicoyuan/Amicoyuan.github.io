{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"intel\" tag",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/02/26/intel001/",
            "url": "https://xingyuanjie.top/2023/02/26/intel001/",
            "title": "unroll_and_jam/nounroll_and_jam",
            "date_published": "2023-02-26T11:12:51.000Z",
            "content_html": "<h1 id=\"unroll-and-jam-x2F-nounroll-and-jam\"><a href=\"#unroll-and-jam-x2F-nounroll-and-jam\" class=\"headerlink\" title=\"unroll_and_jam&#x2F;nounroll_and_jam\"></a>unroll_and_jam&#x2F;nounroll_and_jam</h1><p>启用或禁用循环展开和阻塞。这些指令只能应用于迭代for循环。</p>\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><p>#pragma unroll_and_jam\t#pragma unroll_and_jam (n)\t#pragma nounroll_and_jam</p>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>展开因子，表示展开循环的次数;必须是0到255之间的整数常数</p>\n<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>unroll_and_jam指令部分展开套中比最内层循环更高的一个或多个循环，并将结果循环融合&#x2F;阻塞回一起。这种转换允许在循环中进行更多的重用。</p>\n<p>此pragma对最内层循环无效。确保紧随其后的循环不是编译器发起的交换完成后的最内层循环。</p>\n<p>指定此pragma是向编译器提示展开和阻塞序列是合法且有利可图的。编译器会在任何可能的情况下启用这种转换。</p>\n<p>对于它影响的每个for循环，unroll_and_jam指令必须在for语句之前。如果指定了n，优化器将展开循环n次。如果n被省略或超出允许的范围，优化器将分配展开循环的次数。编译器通过比较n和循环计数生成正确的代码。</p>\n<p>只有在设置了编译器选项O3时，才支持此pragma。unroll_and_jam指令将覆盖从命令行展开循环的任何设置。</p>\n<p>当展开循环会增加寄存器压力和代码大小时，可能需要防止展开嵌套循环或不完美的嵌套循环。在这种情况下，使用nounroll_and_jam编译指令。nounroll_and_jam pragma提示编译器不要展开指定的循环。</p>\n<p><strong>Examples</strong></p>\n<p><strong>Use the unroll_and_jam pragma:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> b[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> d[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unroll</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i,j,k;<br>    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> unroll_and_jam (6)</span><br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) &#123;<br>       <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> unroll_and_jam (6)</span><br>       <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">1</span>; j &lt; n; j++) &#123;<br>          <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt; n; k++)&#123;<br>            a[i][j] += b[i][k]*c[k][j];<br>            &#125;<br>       &#125;<br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/pragmas/intel-specific-pragma-reference/unroll-and-jam-nounroll-and-jam.html\">unroll_and_jam nounroll_and_jam (intel.com)</a></p>\n",
            "tags": [
                "C++",
                "Intel"
            ]
        }
    ]
}