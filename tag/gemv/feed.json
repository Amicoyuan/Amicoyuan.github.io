{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"gemv\" tag",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "title": "Computing four elements at a time",
            "date_published": "2023-05-26T08:37:45.000Z",
            "content_html": "",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "title": "Hiding computation in a subroutine",
            "date_published": "2023-05-26T07:06:49.000Z",
            "content_html": "<h2 id=\"Hiding-computation-in-a-subroutine\"><a href=\"#Hiding-computation-in-a-subroutine\" class=\"headerlink\" title=\"Hiding computation in a subroutine\"></a>Hiding computation in a subroutine</h2><ul>\n<li>我们首先重写基本实现，将内部循环隐藏在子程序AddDot中:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization1\">Optimization1 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization2\">Optimization2 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>这一步不会产生任何性能提升：</p>\n<p><img src=\"https://github.com/flame/how-to-optimize-gemm/raw/master/figures/compare_MMult0_MMult2.png\" alt=\"img\"></p>\n<p>它其实是为我们下一步做好准备。</p>\n<h2 id=\"Optimization1\"><a href=\"#Optimization1\" class=\"headerlink\" title=\"Optimization1\"></a>Optimization1</h2><p>这里最原始的矩阵乘代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-comment\">//创建宏，使矩阵是列主序</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j, p;<br>  <span class=\"hljs-comment\">//loop i j p</span><br>  <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i++ )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C 遍历C的行 */</span>   <br>    <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j++ )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C 遍历C的列 */</span><br>      <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;        <span class=\"hljs-comment\">/* Update C( i,j ) with the inner</span><br><span class=\"hljs-comment\">\t\t\t\t       product of the ith row of A and</span><br><span class=\"hljs-comment\">\t\t\t\t       the jth column of B */</span><br>    <span class=\"hljs-comment\">//A的一行B的一列更新C(i,j)</span><br>\t<span class=\"hljs-built_in\">C</span>( i,j ) = <span class=\"hljs-built_in\">C</span>( i,j ) +  <span class=\"hljs-built_in\">A</span>( i,p ) * <span class=\"hljs-built_in\">B</span>( p,j );<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>拆分内部循环，把乘加运算放在子程序AddDot中:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>\t<br>   <span class=\"hljs-comment\">//loop j i p   在这里更改了循环变量的顺序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br>\t  <span class=\"hljs-comment\">//拆分内部循环(循环变量p)，把乘加运算放在子程序AddDot中:</span><br>      <span class=\"hljs-comment\">//A的第i行，B的第j列</span><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//列主序，同行访问带跨步，同列访问无需跨步。跨步大小lda</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization2\"><a href=\"#Optimization2\" class=\"headerlink\" title=\"Optimization2\"></a>Optimization2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-comment\">//在这里对C的列进行了循环展开，展开数为4。列主序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+1 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">1</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+2 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+2)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">2</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+3 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">3</span> ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-comment\">//内层核心相较于上次来说，并没有修改</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/22/blas/",
            "url": "https://xingyuanjie.top/2023/05/22/blas/",
            "title": "BLAS（Basic Linear Algebra Subprograms）-基础线性代数子程序库",
            "date_published": "2023-05-22T12:35:17.000Z",
            "content_html": "<h2 id=\"how-to-optimize-gemm\"><a href=\"#how-to-optimize-gemm\" class=\"headerlink\" title=\"how-to-optimize-gemm\"></a>how-to-optimize-gemm</h2><h3 id=\"Computing-four-elements-of-C-at-a-time\"><a href=\"#Computing-four-elements-of-C-at-a-time\" class=\"headerlink\" title=\"Computing four elements of C at a time\"></a>Computing four elements of C at a time</h3><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客:\"></a>博客:</h3><p><a href=\"https://www.jianshu.com/p/e01024892afb\">矩阵相乘在GPU上的终极优化：深度解析Maxas汇编器工作原理 - 简书 (jianshu.com)</a></p>\n<p><a href=\"https://www.leiphone.com/category/yanxishe/Puevv3ZWxn0heoEv.html\">OpenBLAS项目与矩阵乘法优化 | AI 研习社 | 雷峰网 (leiphone.com)</a></p>\n<p><a href=\"https://jcf94.com/2021/08/28/2021-08-28-simd/\">矩阵乘法与 SIMD | Chenfan Blog (jcf94.com)</a></p>\n<p><a href=\"https://zhenhuaw.me/blog/2019/gemm-optimization.html\">通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/383115932\">大佬是怎么优雅实现矩阵乘法的？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/65436463\">OpenBLAS gemm从零入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://harleyszhang.github.io/cv_note/\">Introduction · cv算法工程师成长之路 (harleyszhang.github.io)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/435908830\">深入浅出GPU优化系列：GEMM优化（一） - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/410278370\">CUDA 矩阵乘法终极优化指南 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/368870275\">矩阵乘法的并行优化（1）：OPENMP、CUDA实现 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/617296073\">并行计算入门 UIUC ECE408 Lecture 7&amp;8 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/143328317\">移动端arm cpu优化学习笔记第4弹–内联汇编入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/348372132\">C语言的内嵌汇编 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/105616727\">内嵌汇编学习 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://blog.csdn.net/unbutun/article/details/6123472\">(88条消息) #define barrier() <strong>asm</strong> <strong>volatile</strong>(“”: : :”memory”) 中的memory是gcc的东西_unbutun的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_38669561/article/details/105192200?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control\">(88条消息) MIPS指令集：内嵌汇编asm语法介绍_daddu指令_无色云的博客-CSDN博客</a></p>\n<h3 id=\"论文：\"><a href=\"#论文：\" class=\"headerlink\" title=\"论文：\"></a>论文：</h3><p><a href=\"https://www.cs.utexas.edu/users/flame/FLAMEPublications.html\">Publications Related to the FLAME Project (utexas.edu)</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/1356052.1356053\">Anatomy of high-performance matrix multiplication | ACM Transactions on Mathematical Software</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/3018743.3018755\">Understanding the GPU Microarchitecture to Achieve Bare-Metal Performance Tuning | Proceedings of the 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</a></p>\n<p>[<a href=\"https://arxiv.org/abs/1804.06826\">1804.06826] Dissecting the NVIDIA Volta GPU Architecture via Microbenchmarking (arxiv.org)</a></p>\n<p><a href=\"https://ieeexplore.ieee.org/document/6114452\">Fast implementation of DGEMM on Fermi GPU | IEEE Conference Publication | IEEE Xplore</a></p>\n<p><a href=\"https://dl.acm.org/doi/abs/10.1145/3369583.3393611\">High Performance is All about Minimizing Data Movement | Proceedings of the 29th International Symposium on High-Performance Parallel and Distributed Computing (acm.org)</a></p>\n<h3 id=\"社区-x2F-论坛\"><a href=\"#社区-x2F-论坛\" class=\"headerlink\" title=\"社区&#x2F;论坛:\"></a>社区&#x2F;论坛:</h3><p><a href=\"http://tvm.d2l.ai/chapter_gpu_schedules/vector_add.html#cuda-programming\">2. Vector Add — Dive into Deep Learning Compiler 0.1 documentation (d2l.ai)</a></p>\n<p><a href=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html\">Intel® Intrinsics Guide</a></p>\n<p><a href=\"https://github.com/pytorch/QNNPACK\">https://github.com/pytorch/QNNPACK</a></p>\n<p><a href=\"https://github.com/flame/blis\">https://github.com/flame/blis</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/ulmBLAS/\">ulmBLAS (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/sghpc/gemm/index.html\">work&#x2F;sghpc (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://shpc.oden.utexas.edu/\">The Science of High-Performance Computing Group (utexas.edu)</a></p>\n<p><a href=\"https://github.com/BBuf/how-to-optimize-gemm\">GitHub - BBuf&#x2F;how-to-optimize-gemm</a></p>\n<p><a href=\"https://github.com/Liu-xiandong/How_to_optimize_in_GPU\">GitHub - Liu-xiandong&#x2F;How_to_optimize_in_GPU: This is a series of GPU optimization topics. Here we will introduce how to optimize the CUDA kernel in detail. I will introduce several basic kernel optimizations, including: elementwise, reduce, sgemv, sgemm, etc. The performance of these kernels is basically at or near the theoretical limit.</a></p>\n<p><a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/#\">CUDA C++ Programming Guide (nvidia.com)</a></p>\n<p><a href=\"https://github.com/NervanaSystems/maxas/wiki/SGEMM\">SGEMM · NervanaSystems&#x2F;maxas Wiki · GitHub</a></p>\n<p><a href=\"https://github.com/Cjkkkk/CUDA_gemm\">GitHub - Cjkkkk&#x2F;CUDA_gemm: A simple high performance CUDA GEMM implementation.</a></p>\n<p><a href=\"https://github.com/yzhaiustc/Optimizing-SGEMM-on-NVIDIA-Turing-GPUs\">GitHub - yzhaiustc&#x2F;Optimizing-SGEMM-on-NVIDIA-Turing-GPUs: Optimizing SGEMM kernel functions on NVIDIA GPUs to a close-to-cuBLAS performance.</a></p>\n<p><a href=\"https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/\">https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/</a></p>\n<p><a href=\"https://wiki.illinois.edu/wiki/display/ECE408/Class+Schedule\">Class Schedule - ECE408 - Illinois Wiki</a></p>\n<p><a href=\"https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#toc2\">GCC-Inline-Assembly-HOWTO (ibiblio.org)</a></p>\n<p><a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课 · the missing semester of your cs education (missing-semester-cn.github.io)</a></p>\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        }
    ]
}