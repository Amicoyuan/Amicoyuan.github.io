{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"gemv\" tag",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/05/31/gemm0004/",
            "url": "https://xingyuanjie.top/2023/05/31/gemm0004/",
            "title": "Repeating the same optimizations",
            "date_published": "2023-05-31T07:16:29.000Z",
            "content_html": "<h2 id=\"Repeating-the-same-optimizations\"><a href=\"#Repeating-the-same-optimizations\" class=\"headerlink\" title=\"Repeating the same optimizations\"></a>Repeating the same optimizations</h2><ul>\n<li>我们在AddDot4x4子程序中一次计算4个C元素，该子程序一次执行16个乘积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_3\">Optimization_4x4_3 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>现在我们内联16个独立的内积，并将循环融合为一个，从而在一个循环中同时计算16个乘积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_4\">Optimization_4x4_4 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_5\">Optimization_4x4_5 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>在这一点上，我们再次开始看到一些性能改进:</p>\n<p><img src=\"/2023/05/31/gemm0004/compare_MMult0_MMult-4x4-5.png\" alt=\"img\"></p>\n<p><img src=\"/2023/05/31/gemm0004/compare_MMult-1x4-5_MMult-4x4-5.png\" alt=\"img\"></p>\n<ul>\n<li>我们将C的元素累加到寄存器中，并使用寄存器存储a的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_6\">Optimization_4x4_6 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用指针来定位B中的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_7\">Optimization_4x4_7 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<h1 id=\"Optimization-4x4-3\"><a href=\"#Optimization-4x4-3\" class=\"headerlink\" title=\"Optimization_4x4_3\"></a>Optimization_4x4_3</h1><p>对循环变量i进行展开。由原来AddDot1x4变为AddDot4x4，一次计算16个乘积。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C */</span> <br><br>  <span class=\"hljs-comment\">/* First row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Second row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Third row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Four row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) );<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-4\"><a href=\"#Optimization-4x4-4\" class=\"headerlink\" title=\"Optimization_4x4_4\"></a>Optimization_4x4_4</h1><p>把AddDot计算kernel合并到AddDot4x4里面。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we &quot;inline&quot; AddDot */</span> <br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-comment\">/* First row 第一行*/</span>   <br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Second row 第二行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 1, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 1, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 1, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 1, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Third row 第三行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 2, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 2, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 2, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 2, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Four row 第四行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 3, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 3, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 3, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 3, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-5\"><a href=\"#Optimization-4x4-5\" class=\"headerlink\" title=\"Optimization_4x4_5\"></a>Optimization_4x4_5</h1><p>合并16个for循环。</p>\n<p>现在，当矩阵变大时，我们看到了性能上的好处，因为数据在被放入寄存器后会得到更多的重用。</p>\n<p>以前是：1x4_5(一次计算C的4个元素)现在是：4x4_5(一次计算C的16个元素)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we merge each set of four loops, computing four</span><br><span class=\"hljs-comment\">     inner products simultaneously. */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-comment\">/* First row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Fourth row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-6\"><a href=\"#Optimization-4x4-6\" class=\"headerlink\" title=\"Optimization_4x4_6\"></a>Optimization_4x4_6</h1><p>矩阵C和A采用寄存器来存。</p>\n<p>我们为C的4x4块和A的当前4x1列的元素使用(常规)寄存器，这一事实使性能受益。请注意，我们使用的是比实际存在的更多的常规寄存器，所以任何人都可以猜测编译器会用它做什么。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we accumulate in registers and put A( 0, p ) in a register */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg;<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_01_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_02_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_03_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_11_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_12_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_13_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_21_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_22_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_23_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_31_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_32_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_33_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-7\"><a href=\"#Optimization-4x4-7\" class=\"headerlink\" title=\"Optimization_4x4_7\"></a>Optimization_4x4_7</h1><p>这里我们改为使用指针来跟踪B的当前4x1块。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use pointer to track where in four columns of B we are */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br>\t  <br>    b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );<br>    b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );<br>    b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );<br>    b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );\t  <br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * *b_p0_pntr;     <br>    c_01_reg += a_0p_reg * *b_p1_pntr;     <br>    c_02_reg += a_0p_reg * *b_p2_pntr;     <br>    c_03_reg += a_0p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * *b_p0_pntr;     <br>    c_11_reg += a_1p_reg * *b_p1_pntr;     <br>    c_12_reg += a_1p_reg * *b_p2_pntr;     <br>    c_13_reg += a_1p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * *b_p0_pntr;     <br>    c_21_reg += a_2p_reg * *b_p1_pntr;     <br>    c_22_reg += a_2p_reg * *b_p2_pntr;     <br>    c_23_reg += a_2p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * *b_p0_pntr++;     <br>    c_31_reg += a_3p_reg * *b_p1_pntr++;     <br>    c_32_reg += a_3p_reg * *b_p2_pntr++;     <br>    c_33_reg += a_3p_reg * *b_p3_pntr++;     <br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0003/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0003/",
            "title": "Further optimizing",
            "date_published": "2023-05-26T09:20:18.000Z",
            "content_html": "<h2 id=\"Further-optimizing\"><a href=\"#Further-optimizing\" class=\"headerlink\" title=\"Further optimizing\"></a>Further optimizing</h2><ul>\n<li>我们将C的元素累加到寄存器中，并使用寄存器存储a的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_6\">Optimization_1x4_6 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用指针来定位B中的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_7\">Optimization_1x4_7 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们将循环展开4次(展开因子的选择相对任意)</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_8\">Optimization_1x4_8 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用间接寻址来减少需要更新指针的次数</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_9\">Optimization_1x4_9 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>对于问题大小适合L2缓存(至少部分地)有相当大的改进。不过，还有很大的改进空间。</p>\n<p><img src=\"/2023/05/26/gemm0003/compare_MMult0_MMult-1x4-9.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-1x4-6\"><a href=\"#Optimization-1x4-6\" class=\"headerlink\" title=\"Optimization_1x4_6\"></a>Optimization_1x4_6</h2><p>我们在寄存器中对当前1x4行C的更新累积，并将元素A(p, 0)放在寄存器中，以减少缓存(cache)和寄存器(reg)之间的流量(traffic)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we accumulate in registers and put A( 0, p ) in a register */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>    <br>    <br>  <span class=\"hljs-comment\">//C的累加在寄存器中，同时A也放在寄存器中</span><br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>    <br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_01_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_02_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_03_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//计算完成后，再通过寄存器写回C</span><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-7\"><a href=\"#Optimization-1x4-7\" class=\"headerlink\" title=\"Optimization_1x4_7\"></a>Optimization_1x4_7</h2><p>现在使用bp0_pntr、bp1_pntr、bp2_pntr和bp3_pntr四个指针来访问元素B(p, 0)、B(p, 1)、B(p, 2)、B(p, 3)。这减少了索引开销。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use pointer to track where in four columns of B we are */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>  <span class=\"hljs-comment\">//由于使用了宏定义，每次B(i,j)都会计算B中元素的位置</span><br>  <span class=\"hljs-comment\">//使用指针后，后续访问不需要再额外计算B中元素位置，只需在当前指针向后移动一位即可</span><br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-8\"><a href=\"#Optimization-1x4-8\" class=\"headerlink\" title=\"Optimization_1x4_8\"></a>Optimization_1x4_8</h2><p>我们现在展开了4个循环。有趣的是，这会略微降低性能。这可能意味着，通过添加优化，我们混淆了编译器，因此它不能做以前做的优化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     We now unroll the loop */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>    <br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  <span class=\"hljs-comment\">//这里对循环变量p进行了展开，注意这里计算是顺序的</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=<span class=\"hljs-number\">4</span> )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">2</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">3</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-9\"><a href=\"#Optimization-1x4-9\" class=\"headerlink\" title=\"Optimization_1x4_9\"></a>Optimization_1x4_9</h2><p>在这里，*a0p_reg保存元素A(0, p+1)。</p>\n<ul>\n<li><p>我们希望bp0_pntr指向元素B（p，0）。因此，bp0_pntr+1寻址元素B（p+1，0）。有一条特殊的机器指令可以访问bp0_pntr+1处的元素，该指令不需要更新指针。</p>\n</li>\n<li><p>因此，指向B列中元素的指针只需要在循环的第四次迭代中更新一次。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     We next use indirect addressing */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>    <br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=<span class=\"hljs-number\">4</span> )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr;<br>    c_01_reg += a_0p_reg * *bp1_pntr;<br>    c_02_reg += a_0p_reg * *bp2_pntr;<br>    c_03_reg += a_0p_reg * *bp3_pntr;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span> );<br>\t<br>    <span class=\"hljs-comment\">//现在我们使用间接寻址，&#x27;indirect addressing&#x27;</span><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">1</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">1</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">1</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">1</span>);<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">2</span> );<br><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">2</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">2</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">2</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">2</span>);<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">3</span> );<br><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">3</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">3</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">3</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">3</span>);<br>\t<br>      <br>    <span class=\"hljs-comment\">//更新指针，4次迭代中仅更新一次</span><br>    bp0_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp1_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp2_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp3_pntr+=<span class=\"hljs-number\">4</span>;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "title": "Computing four elements at a time",
            "date_published": "2023-05-26T08:37:45.000Z",
            "content_html": "<h2 id=\"Computing-four-elements-at-a-time\"><a href=\"#Computing-four-elements-at-a-time\" class=\"headerlink\" title=\"Computing four elements at a time\"></a>Computing four elements at a time</h2><ul>\n<li>我们在子程序AddDot1x4中一次计算4个元素，该子程序一次执行4个内部乘积</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_3\">Optimization_1x4_3 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>现在我们内联(inline)四个独立的内积，并将循环融合为一个，从而在一个循环中同时计算四个内积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_4\">Optimization_1x4_4 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_5\">Optimization_1x4_5 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>在这一点上，我们开始看到一些性能改进:</p>\n<p><img src=\"/2023/05/26/gemm0002/compare_MMult0_MMult-1x4-5.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-1x4-3\"><a href=\"#Optimization-1x4-3\" class=\"headerlink\" title=\"Optimization_1x4_3\"></a>Optimization_1x4_3</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>\t  <span class=\"hljs-comment\">//相交于上个版本，把4个AddDot合并成了一个AddDot1x4</span><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C */</span> <br>  <span class=\"hljs-comment\">//一次AddDot1x4完成四次AddDot运算</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) );<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-4\"><a href=\"#Optimization-1x4-4\" class=\"headerlink\" title=\"Optimization_1x4_4\"></a>Optimization_1x4_4</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we &quot;inline&quot; AddDot */</span> <br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//在这里我们把AddDot中的运算，全部集成到了AddDot1x4中，即4段for执行4个内部乘积</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-5\"><a href=\"#Optimization-1x4-5\" class=\"headerlink\" title=\"Optimization_1x4_5\"></a>Optimization_1x4_5</h2><p>在这个版本，我们开始看到性能上的好处。原因是四个循环已经融合，因此四个内部乘积运算现在正在同时进行。这有以下好处:</p>\n<ul>\n<li>索引p只需要每8次浮点操作更新一次(4次乘法4次加法)。</li>\n<li>元素A(0, p)只需要从内存中取出一次，而不是四次。(只有当矩阵不再适合二级缓存时，这才有好处)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we merge the four loops, computing four inner</span><br><span class=\"hljs-comment\">     products simultaneously. */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//在这个版本中，我们合并了4个for循环，使得可以同时计算4个乘积运算</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <span class=\"hljs-comment\">//第一次取A( 0, p )</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "title": "Hiding computation in a subroutine",
            "date_published": "2023-05-26T07:06:49.000Z",
            "content_html": "<h2 id=\"Hiding-computation-in-a-subroutine\"><a href=\"#Hiding-computation-in-a-subroutine\" class=\"headerlink\" title=\"Hiding computation in a subroutine\"></a>Hiding computation in a subroutine</h2><ul>\n<li>我们首先重写基本实现，将内部循环隐藏在子程序AddDot中:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization1\">Optimization1 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization2\">Optimization2 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>这一步不会产生任何性能提升：</p>\n<p><img src=\"https://github.com/flame/how-to-optimize-gemm/raw/master/figures/compare_MMult0_MMult2.png\" alt=\"img\"></p>\n<p>它其实是为我们下一步做好准备。</p>\n<h2 id=\"Optimization1\"><a href=\"#Optimization1\" class=\"headerlink\" title=\"Optimization1\"></a>Optimization1</h2><p>这里最原始的矩阵乘代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-comment\">//创建宏，使矩阵是列主序</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j, p;<br>  <span class=\"hljs-comment\">//loop i j p</span><br>  <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i++ )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C 遍历C的行 */</span>   <br>    <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j++ )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C 遍历C的列 */</span><br>      <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;        <span class=\"hljs-comment\">/* Update C( i,j ) with the inner</span><br><span class=\"hljs-comment\">\t\t\t\t       product of the ith row of A and</span><br><span class=\"hljs-comment\">\t\t\t\t       the jth column of B */</span><br>    <span class=\"hljs-comment\">//A的一行B的一列更新C(i,j)</span><br>\t<span class=\"hljs-built_in\">C</span>( i,j ) = <span class=\"hljs-built_in\">C</span>( i,j ) +  <span class=\"hljs-built_in\">A</span>( i,p ) * <span class=\"hljs-built_in\">B</span>( p,j );<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>拆分内部循环，把乘加运算放在子程序AddDot中:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>\t<br>   <span class=\"hljs-comment\">//loop j i p   在这里更改了循环变量的顺序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br>\t  <span class=\"hljs-comment\">//拆分内部循环(循环变量p)，把乘加运算放在子程序AddDot中:</span><br>      <span class=\"hljs-comment\">//A的第i行，B的第j列</span><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//列主序，同行访问带跨步，同列访问无需跨步。跨步大小lda</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization2\"><a href=\"#Optimization2\" class=\"headerlink\" title=\"Optimization2\"></a>Optimization2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-comment\">//在这里对C的列进行了循环展开，展开数为4。列主序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+1 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">1</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+2 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+2)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">2</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+3 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">3</span> ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-comment\">//内层核心相较于上次来说，并没有修改</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/22/blas/",
            "url": "https://xingyuanjie.top/2023/05/22/blas/",
            "title": "BLAS（Basic Linear Algebra Subprograms）-基础线性代数子程序库",
            "date_published": "2023-05-22T12:35:17.000Z",
            "content_html": "<h2 id=\"how-to-optimize-gemm\"><a href=\"#how-to-optimize-gemm\" class=\"headerlink\" title=\"how-to-optimize-gemm\"></a>how-to-optimize-gemm</h2><p><strong>项目地址：</strong><a href=\"https://github.com/flame/how-to-optimize-gemm\">flame&#x2F;how-to-optimize-gemm (github.com)</a></p>\n<h3 id=\"Computing-four-elements-of-C-at-a-time\"><a href=\"#Computing-four-elements-of-C-at-a-time\" class=\"headerlink\" title=\"Computing four elements of C at a time\"></a>Computing four elements of C at a time</h3><p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0001/\">Hiding computation in a subroutine - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0002/\">Computing four elements at a time - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0003/\">Further optimizing - Amicoyuan (xingyuanjie.top)</a></p>\n<h3 id=\"Computing-a-4-x-4-block-of-C-at-a-time\"><a href=\"#Computing-a-4-x-4-block-of-C-at-a-time\" class=\"headerlink\" title=\"Computing a 4 x 4 block of C at a time\"></a>Computing a 4 x 4 block of C at a time</h3><p>为了有效地使用向量指令和向量寄存器，我们现在一次计算一个4 x 4的C代码块。其思想如下:作为SSE3指令集的一部分，有一些特殊的指令允许每个时钟周期执行两次“乘法累加”操作(两次乘法和两次加法)，每个时钟周期总共执行四个浮点操作。要使用这些，必须将数据放入“向量寄存器”中。有16个这样的向量寄存器，每个向量寄存器可以容纳两个双精度数。因此，我们可以在寄存器中保存32个双精度数。我们将使用其中的16个来保存C的元素，一个4 x 4的块。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客:\"></a>博客:</h3><p><a href=\"https://www.jianshu.com/p/e01024892afb\">矩阵相乘在GPU上的终极优化：深度解析Maxas汇编器工作原理 - 简书 (jianshu.com)</a></p>\n<p><a href=\"https://www.leiphone.com/category/yanxishe/Puevv3ZWxn0heoEv.html\">OpenBLAS项目与矩阵乘法优化 | AI 研习社 | 雷峰网 (leiphone.com)</a></p>\n<p><a href=\"https://jcf94.com/2021/08/28/2021-08-28-simd/\">矩阵乘法与 SIMD | Chenfan Blog (jcf94.com)</a></p>\n<p><a href=\"https://zhenhuaw.me/blog/2019/gemm-optimization.html\">通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/383115932\">大佬是怎么优雅实现矩阵乘法的？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/65436463\">OpenBLAS gemm从零入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://harleyszhang.github.io/cv_note/\">Introduction · cv算法工程师成长之路 (harleyszhang.github.io)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/435908830\">深入浅出GPU优化系列：GEMM优化（一） - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/410278370\">CUDA 矩阵乘法终极优化指南 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/368870275\">矩阵乘法的并行优化（1）：OPENMP、CUDA实现 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/617296073\">并行计算入门 UIUC ECE408 Lecture 7&amp;8 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/143328317\">移动端arm cpu优化学习笔记第4弹–内联汇编入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/348372132\">C语言的内嵌汇编 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/105616727\">内嵌汇编学习 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://blog.csdn.net/unbutun/article/details/6123472\">(88条消息) #define barrier() <strong>asm</strong> <strong>volatile</strong>(“”: : :”memory”) 中的memory是gcc的东西_unbutun的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_38669561/article/details/105192200?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control\">(88条消息) MIPS指令集：内嵌汇编asm语法介绍_daddu指令_无色云的博客-CSDN博客</a></p>\n<h3 id=\"论文：\"><a href=\"#论文：\" class=\"headerlink\" title=\"论文：\"></a>论文：</h3><p><a href=\"https://www.cs.utexas.edu/users/flame/FLAMEPublications.html\">Publications Related to the FLAME Project (utexas.edu)</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/1356052.1356053\">Anatomy of high-performance matrix multiplication | ACM Transactions on Mathematical Software</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/3018743.3018755\">Understanding the GPU Microarchitecture to Achieve Bare-Metal Performance Tuning | Proceedings of the 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</a></p>\n<p>[<a href=\"https://arxiv.org/abs/1804.06826\">1804.06826] Dissecting the NVIDIA Volta GPU Architecture via Microbenchmarking (arxiv.org)</a></p>\n<p><a href=\"https://ieeexplore.ieee.org/document/6114452\">Fast implementation of DGEMM on Fermi GPU | IEEE Conference Publication | IEEE Xplore</a></p>\n<p><a href=\"https://dl.acm.org/doi/abs/10.1145/3369583.3393611\">High Performance is All about Minimizing Data Movement | Proceedings of the 29th International Symposium on High-Performance Parallel and Distributed Computing (acm.org)</a></p>\n<h3 id=\"社区-x2F-论坛\"><a href=\"#社区-x2F-论坛\" class=\"headerlink\" title=\"社区&#x2F;论坛:\"></a>社区&#x2F;论坛:</h3><p><a href=\"http://tvm.d2l.ai/chapter_gpu_schedules/vector_add.html#cuda-programming\">2. Vector Add — Dive into Deep Learning Compiler 0.1 documentation (d2l.ai)</a></p>\n<p><a href=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html\">Intel® Intrinsics Guide</a></p>\n<p><a href=\"https://github.com/pytorch/QNNPACK\">https://github.com/pytorch/QNNPACK</a></p>\n<p><a href=\"https://github.com/flame/blis\">https://github.com/flame/blis</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/ulmBLAS/\">ulmBLAS (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/sghpc/gemm/index.html\">work&#x2F;sghpc (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://shpc.oden.utexas.edu/\">The Science of High-Performance Computing Group (utexas.edu)</a></p>\n<p><a href=\"https://github.com/BBuf/how-to-optimize-gemm\">GitHub - BBuf&#x2F;how-to-optimize-gemm</a></p>\n<p><a href=\"https://github.com/Liu-xiandong/How_to_optimize_in_GPU\">GitHub - Liu-xiandong&#x2F;How_to_optimize_in_GPU: This is a series of GPU optimization topics. Here we will introduce how to optimize the CUDA kernel in detail. I will introduce several basic kernel optimizations, including: elementwise, reduce, sgemv, sgemm, etc. The performance of these kernels is basically at or near the theoretical limit.</a></p>\n<p><a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/#\">CUDA C++ Programming Guide (nvidia.com)</a></p>\n<p><a href=\"https://github.com/NervanaSystems/maxas/wiki/SGEMM\">SGEMM · NervanaSystems&#x2F;maxas Wiki · GitHub</a></p>\n<p><a href=\"https://github.com/Cjkkkk/CUDA_gemm\">GitHub - Cjkkkk&#x2F;CUDA_gemm: A simple high performance CUDA GEMM implementation.</a></p>\n<p><a href=\"https://github.com/yzhaiustc/Optimizing-SGEMM-on-NVIDIA-Turing-GPUs\">GitHub - yzhaiustc&#x2F;Optimizing-SGEMM-on-NVIDIA-Turing-GPUs: Optimizing SGEMM kernel functions on NVIDIA GPUs to a close-to-cuBLAS performance.</a></p>\n<p><a href=\"https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/\">https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/</a></p>\n<p><a href=\"https://wiki.illinois.edu/wiki/display/ECE408/Class+Schedule\">Class Schedule - ECE408 - Illinois Wiki</a></p>\n<p><a href=\"https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#toc2\">GCC-Inline-Assembly-HOWTO (ibiblio.org)</a></p>\n<p><a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课 · the missing semester of your cs education (missing-semester-cn.github.io)</a></p>\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        }
    ]
}