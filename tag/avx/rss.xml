<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Amicoyuan • Posts by &#34;avx&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sat, 28 Jan 2023 14:51:44 +0800</pubDate>
        <lastBuildDate>Sat, 28 Jan 2023 14:51:44 +0800</lastBuildDate>
        <category>AVX</category>
        <category>Data Structure</category>
        <category>Set</category>
        <category>团体程序设计天梯赛</category>
        <category>STL</category>
        <category>C++</category>
        <category>Sort</category>
        <category>String</category>
        <category>Find</category>
        <category>LinkList</category>
        <category>双向链表</category>
        <category>Graph</category>
        <category>邻接表</category>
        <category>Vector</category>
        <category>Binary tree</category>
        <category>BFS</category>
        <category>模拟</category>
        <category>邻接矩阵</category>
        <category>DFS</category>
        <category>结构体</category>
        <category>贪心</category>
        <category>Double类型相等比较</category>
        <category>并查集</category>
        <category>Map</category>
        <category>Pair</category>
        <category>Linux</category>
        <category>MPI</category>
        <category>AVX2</category>
        <category>dgemm</category>
        <category>CUDA</category>
        <category>Mirror</category>
        <category>Numactl</category>
        <category>OpenMP</category>
        <category>Slurm</category>
        <category>Tensorflow</category>
        <category>性能分析工具</category>
        <category>gcov</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/01/28/avx006/</guid>
            <title>如何使用AVX和AVX2处理数据(个人翻译)[未完成]</title>
            <link>http://example.com/2023/01/28/avx006/</link>
            <category>AVX</category>
            <category>AVX2</category>
            <pubDate>Sat, 28 Jan 2023 14:51:44 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1-文章来源&#34;&gt;&lt;a href=&#34;#1-文章来源&#34; class=&#34;headerlink&#34; title=&#34;1.文章来源&#34;&gt;&lt;/a&gt;1.文章来源&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Matt Scarpino&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX&#34;&gt;Crunching Numbers with AVX and AVX2 - CodeProject&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-介绍&#34;&gt;&lt;a href=&#34;#2-介绍&#34; class=&#34;headerlink&#34; title=&#34;2.介绍&#34;&gt;&lt;/a&gt;2.介绍&lt;/h2&gt;&lt;p&gt;在2003年，&lt;a href=&#34;https://www.codeproject.com/script/Membership/View.aspx?mid=22834&#34;&gt;Alex Fr&lt;/a&gt;写了一篇优秀的&lt;a href=&#34;https://www.codeproject.com/Articles/4522/Introduction-to-SSE-Programming&#34;&gt;文章&lt;/a&gt;[该文章现在已经被原作者删除]，解释了如何使用Intel的流式SIMD扩展(SSE)执行SIMD(单指令，多数据)处理。SSE是英特尔处理器支持的一组指令，可对大量数据执行高速运算。&lt;/p&gt;
&lt;p&gt;2008年，英特尔推出了一套新的高性能指令，称为高级向量扩展(AVX)。AVX执行许多与SSE指令相同的操作，但以更快的速度对更大的数据块进行操作。最近，英特尔在AVX2和AVX512系列中发布了额外的指令。本文的重点是通过称为intrinsic funtions的特殊C函数访问AVX和AVX2指令。&lt;/p&gt;
&lt;p&gt;本文不介绍整个AVX&amp;#x2F;AVX2 intrinsics，而是侧重于数学计算。特别地，目标是复数相乘。要使用AVX&amp;#x2F;AVX2执行此操作，需要三种类型的intrinsic:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialization intrinscis&lt;/li&gt;
&lt;li&gt;Arithmetic intrinsics&lt;/li&gt;
&lt;li&gt;Permute&amp;#x2F;shuffle intrinsics&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;		&lt;/p&gt;
&lt;p&gt;本文讨论每个类别中的intrinsics，并解释如何在代码中使用它们。本文的最后将展示如何用这些intrinsic进行乘法复数运算。&lt;/p&gt;
&lt;p&gt;理解处理器指令和intrinsic function之间的区别是很重要的。AVX指令是执行不可分割操作的汇编命令。例如，AVX指令vaddps添加了两个操作数，并将结果放在第三个操作数中。&lt;/p&gt;
&lt;p&gt;要在C&amp;#x2F;C++中执行操作，the intrinsic funtion _mm256_add_ps()直接映射到vaddps，将汇编的性能与高级函数的便利性结合起来。An intrinsic funtion不一定映射到单个指令，但与其他C&amp;#x2F; C++函数相比，AVX&amp;#x2F;AVX2 intrinsics提供了可靠的高性能。&lt;/p&gt;
&lt;h2 id=&#34;3-基本要求&#34;&gt;&lt;a href=&#34;#3-基本要求&#34; class=&#34;headerlink&#34; title=&#34;3.基本要求&#34;&gt;&lt;/a&gt;3.基本要求&lt;/h2&gt;&lt;p&gt;要理解本文的内容，您需要基本熟悉C语言和SIMD处理。要执行代码，您需要一个支持AVX或AVX&amp;#x2F;AVX2的CPU。以下是支持AVX的cpu:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel’s Sandy Bridge&amp;#x2F;Sandy Bridge E&amp;#x2F;Ivy Bridge&amp;#x2F;Ivy Bridge E&lt;/li&gt;
&lt;li&gt;Intel’s Haswell&amp;#x2F;Haswell E&amp;#x2F;Broadwell&amp;#x2F;Broadwell E&lt;/li&gt;
&lt;li&gt;AMD’s Bulldozer&amp;#x2F;Piledriver&amp;#x2F;Steamroller&amp;#x2F;Excavator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支持AVX2的CPU也支持AVX。以下是这些设备:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel’s Haswell&amp;#x2F;Haswell E&amp;#x2F;Broadwell&amp;#x2F;Broadwell E&lt;/li&gt;
&lt;li&gt;AMD’s Excavator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文中讨论的大多数函数都是由AVX提供的。但也有一些是AVX2特有的。为了区分它们，在本文的表中，我在AVX2 intrinsic的名称前面加上(2)。&lt;/p&gt;
&lt;p&gt;[个人补充]&lt;/p&gt;
&lt;p&gt;判断自己电脑CPU是否支持AVX和AVX2，最简单的就是在命令行执行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;lscpu&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你会得到以下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/01/28/avx006/image-20230129153048825.png&#34; alt=&#34;image-20230129153048825&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Flags里面你可以清楚的看到你的电脑是否支持AVX以及AVX2。&lt;/p&gt;
&lt;h2 id=&#34;4-向量化概述&#34;&gt;&lt;a href=&#34;#4-向量化概述&#34; class=&#34;headerlink&#34; title=&#34;4.向量化概述&#34;&gt;&lt;/a&gt;4.向量化概述&lt;/h2&gt;&lt;p&gt;AVX指令通过同时处理大块值而不是单独处理值来提高应用程序的性能。这些值块称为向量，AVX向量最多可以包含256位数据。&lt;/p&gt;
&lt;p&gt;常见的AVX向量包含4个double (4 x 64位&amp;#x3D; 256)，8个float (8 x 32位&amp;#x3D; 256)或8个int (8 x 32位&amp;#x3D; 256)。[double 8B, flout 4B, int 4B]&lt;/p&gt;
&lt;p&gt;一个示例将演示AVX&amp;#x2F;AVX2处理的强大功能。假设一个函数需要将一个数组的8个浮点数乘以第二个数组的8个浮点数，并将结果添加到第三个数组。如果没有向量化，函数可能是这样的:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;multiply_and_add&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* a, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* b, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* c, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* d) &amp;#123;  &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;; i++) &amp;#123;&lt;br&gt;    d[i] = a[i] * b[i];&lt;br&gt;    d[i] = d[i] + c[i];&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是使用AVX2函数的例子:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;__m256 &lt;span class=&#34;hljs-title&#34;&gt;multiply_and_add&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(__m256 a, __m256 b, __m256 c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; _mm256_fmadd_ps(a, b, c);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This AVX2 intrinsic funtion _mm256_fmadd_ps处理24个floats，但它不映射到单个指令。相反，它执行三个指令:vfmadd132ps、vfmadd213ps和vfmadd231ps。尽管如此，它执行得很快，比遍历单个元素快得多。尽管英特尔的intrinsics功能强大，但它们还是让许多程序员感到紧张。这通常有两个原因。首先，数据类型有奇怪的名字，比如__m256。其次，函数有奇怪的名称，如_mm256_fmadd_ps。因此，在详细讨论intrinsic funtions之前，我想先讨论一下Intel的数据类型和命名约定。&lt;/p&gt;
&lt;h2 id=&#34;5-AVX编程基础&#34;&gt;&lt;a href=&#34;#5-AVX编程基础&#34; class=&#34;headerlink&#34; title=&#34;5.AVX编程基础&#34;&gt;&lt;/a&gt;5.AVX编程基础&lt;/h2&gt;&lt;p&gt;本文主要关注AVX和AVX2提供的与数学相关的intrinsic functions。但在看函数之前，有三点很重要:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data types&lt;/li&gt;
&lt;li&gt;Function naming conventions&lt;/li&gt;
&lt;li&gt;Compiling AVX applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节涉及这些要点，并提供一个简单的应用程序，用于从一个向量减去另一个向量。&lt;/p&gt;
&lt;h3 id=&#34;5-1数据类型&#34;&gt;&lt;a href=&#34;#5-1数据类型&#34; class=&#34;headerlink&#34; title=&#34;5.1数据类型&#34;&gt;&lt;/a&gt;5.1数据类型&lt;/h3&gt;&lt;p&gt;少数intrinsic接受传统的数据类型，如ints或floats，但大多数intrinsic操作有特定的AVX和AVX2的数据类型。有六种主要的向量类型，表1列出了它们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 1:AVX&amp;#x2F;AVX2 Data Types&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m128&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128-bit vector containing 4 &lt;code&gt;float&lt;/code&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m128d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128-bit vector containing 2 &lt;code&gt;double&lt;/code&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m128i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128-bit vector containing integers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256-bit vector containing 8 &lt;code&gt;float&lt;/code&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m256d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256-bit vector containing 4 &lt;code&gt;double&lt;/code&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m256i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256-bit vector containing integers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;每种类型都以两个下划线、一个m和向量的宽度(以位为单位)开始。AVX512支持以_m512开头的512位向量类型，但AVX&amp;#x2F;AVX2向量不超过256位。如果向量类型以d结尾，则代表double，如果没有后缀，则代表float。看起来_m128i和_m256i向量必须包含int型，但事实并非如此。整数向量类型可以包含任何类型的整数，from chars to shorts to unsigned long longs.That is, an _m256i may contain 32 chars, 16 shorts, 8 ints, or 4 longs.  These integers can be signed or unsigned.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
            <title>AVX向量化学习(二)-内存对齐的应用</title>
            <link>http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/</link>
            <category>AVX</category>
            <pubDate>Sun, 12 Jun 2022 15:11:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;AVX指令集的简单操作-内存对齐版&#34;&gt;&lt;a href=&#34;#AVX指令集的简单操作-内存对齐版&#34; class=&#34;headerlink&#34; title=&#34;AVX指令集的简单操作(内存对齐版)&#34;&gt;&lt;/a&gt;AVX指令集的简单操作(内存对齐版)&lt;/h1&gt;&lt;p&gt;使用AVX指令集进行2个double型的数组相加操作&lt;/p&gt;
&lt;h2 id=&#34;常用的内存对齐函数&#34;&gt;&lt;a href=&#34;#常用的内存对齐函数&#34; class=&#34;headerlink&#34; title=&#34;常用的内存对齐函数&#34;&gt;&lt;/a&gt;常用的内存对齐函数&lt;/h2&gt;&lt;p&gt;因为AVX中要求mem__addr必须在32字节边界上对齐，否则可能会产生通用保护异常。  &lt;/p&gt;
&lt;h3 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1.&#34;&gt;&lt;/a&gt;1.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	a =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;memalign&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2&#34;&gt;&lt;a href=&#34;#2&#34; class=&#34;headerlink&#34; title=&#34;2.&#34;&gt;&lt;/a&gt;2.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	a =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3&#34;&gt;&lt;a href=&#34;#3&#34; class=&#34;headerlink&#34; title=&#34;3.&#34;&gt;&lt;/a&gt;3.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	a =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;aligned_alloc&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;4&#34;&gt;&lt;a href=&#34;#4&#34; class=&#34;headerlink&#34; title=&#34;4.&#34;&gt;&lt;/a&gt;4.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__attribute__ ((&lt;span class=&#34;hljs-built_in&#34;&gt;aligned&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;)))&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;]  =&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.8&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用到的AVX函数介绍&#34;&gt;&lt;a href=&#34;#使用到的AVX函数介绍&#34; class=&#34;headerlink&#34; title=&#34;使用到的AVX函数介绍&#34;&gt;&lt;/a&gt;使用到的AVX函数介绍&lt;/h2&gt;&lt;h3 id=&#34;1-1&#34;&gt;&lt;a href=&#34;#1-1&#34; class=&#34;headerlink&#34; title=&#34;1.&#34;&gt;&lt;/a&gt;1.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256d _mm256_load_pd (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; * mem_addr)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into dst. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;dst[&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] := MEM[mem_addr+&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:mem_addr]&lt;br&gt;dst[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2-1&#34;&gt;&lt;a href=&#34;#2-1&#34; class=&#34;headerlink&#34; title=&#34;2.&#34;&gt;&lt;/a&gt;2.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256 _mm256_add_ps (__m256 a, __m256 b)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;FOR&lt;/span&gt; j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;i&lt;/span&gt; := j*&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i] := a[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i] + b[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i]&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;ENDFOR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3-stream的作用：绕过缓存直接写入内存&#34;&gt;&lt;a href=&#34;#3-stream的作用：绕过缓存直接写入内存&#34; class=&#34;headerlink&#34; title=&#34;3.stream的作用：绕过缓存直接写入内存&#34;&gt;&lt;/a&gt;3.stream的作用：绕过缓存直接写入内存&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; _mm256_stream_pd (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * mem_addr, __m256d a)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory using a non-temporal memory hint. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;MEM[mem_addr+&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:mem_addr] := a[&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;样例程序举例：&#34;&gt;&lt;a href=&#34;#样例程序举例：&#34; class=&#34;headerlink&#34; title=&#34;样例程序举例：&#34;&gt;&lt;/a&gt;样例程序举例：&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;malloc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	a =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;memalign&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;));&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	b =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;memalign&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;));&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; af[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.8&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;&amp;#125; ;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; bf[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9.9&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	c =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;memalign&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;));&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i =&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		a[i]=af[i];&lt;br&gt;		b[i]=bf[i];&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;	__m256d v0;&lt;br&gt;	__m256d v1;&lt;br&gt;	__m256d v2;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-4&lt;/span&gt;;i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&lt;br&gt;	&amp;#123;	&lt;br&gt;			v0 = _mm256_load_pd(a+i);&lt;br&gt;			v1 = _mm256_load_pd(b+i);&lt;br&gt;			v2=_mm256_add_pd(v0,v1);&lt;br&gt;		 	_mm256_stream_pd(c+i,v2);&lt;br&gt;			&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		c[i]=a[i]+b[i];&lt;br&gt;	&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;this is c.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%lf\n&amp;quot;&lt;/span&gt;,c[i]);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt; &amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;样例程序输出：&#34;&gt;&lt;a href=&#34;#样例程序输出：&#34; class=&#34;headerlink&#34; title=&#34;样例程序输出：&#34;&gt;&lt;/a&gt;样例程序输出：&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; is c.&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3.200000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;5.400000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9.700000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;13.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9.200000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;16.500000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;12.800000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;13.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8.700000&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;相关链接&#34;&gt;&lt;a href=&#34;#相关链接&#34; class=&#34;headerlink&#34; title=&#34;相关链接&#34;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;p&gt;[&lt;a href=&#34;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&#34;&gt;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&lt;/a&gt;: 	“Intel® Intrinsics Guide”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</guid>
            <title>AVX向量化学习(一)</title>
            <link>http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</link>
            <category>AVX</category>
            <pubDate>Sun, 12 Jun 2022 15:11:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;AVX指令集的简单操作&#34;&gt;&lt;a href=&#34;#AVX指令集的简单操作&#34; class=&#34;headerlink&#34; title=&#34;AVX指令集的简单操作&#34;&gt;&lt;/a&gt;AVX指令集的简单操作&lt;/h1&gt;&lt;p&gt;使用AVX指令集进行2个double型的数组相加操作&lt;/p&gt;
&lt;h2 id=&#34;使用到的AVX函数介绍&#34;&gt;&lt;a href=&#34;#使用到的AVX函数介绍&#34; class=&#34;headerlink&#34; title=&#34;使用到的AVX函数介绍&#34;&gt;&lt;/a&gt;使用到的AVX函数介绍&lt;/h2&gt;&lt;h3 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1.&#34;&gt;&lt;/a&gt;1.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256 _mm256_loadu_ps (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; * mem_addr)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Description&#34;&gt;&lt;a href=&#34;#Description&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into dst. mem_addr does not need to be aligned on any particular boundary.&lt;/p&gt;
&lt;h3 id=&#34;Operation&#34;&gt;&lt;a href=&#34;#Operation&#34; class=&#34;headerlink&#34; title=&#34;Operation&#34;&gt;&lt;/a&gt;Operation&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;dst[&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] := MEM[mem_addr+&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:mem_addr]&lt;br&gt;dst[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2&#34;&gt;&lt;a href=&#34;#2&#34; class=&#34;headerlink&#34; title=&#34;2.&#34;&gt;&lt;/a&gt;2.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256d _mm256_add_pd (__m256d a, __m256d b)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Description-1&#34;&gt;&lt;a href=&#34;#Description-1&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.&lt;/p&gt;
&lt;h3 id=&#34;Operation-1&#34;&gt;&lt;a href=&#34;#Operation-1&#34; class=&#34;headerlink&#34; title=&#34;Operation&#34;&gt;&lt;/a&gt;Operation&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;FOR j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;	i := j*&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;&lt;br&gt;	dst[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] := a[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] + b[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i]&lt;br&gt;ENDFOR&lt;br&gt;dst[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3&#34;&gt;&lt;a href=&#34;#3&#34; class=&#34;headerlink&#34; title=&#34;3.&#34;&gt;&lt;/a&gt;3.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; _mm256_storeu_pd (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * mem_addr, __m256d a)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Description-2&#34;&gt;&lt;a href=&#34;#Description-2&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory. mem_addr does not need to be aligned on any particular boundary.&lt;/p&gt;
&lt;h3 id=&#34;Operation-2&#34;&gt;&lt;a href=&#34;#Operation-2&#34; class=&#34;headerlink&#34; title=&#34;Operation&#34;&gt;&lt;/a&gt;Operation&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;MEM[mem_addr+&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:mem_addr] := a[&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;未进行AVX向量化的情况&#34;&gt;&lt;a href=&#34;#未进行AVX向量化的情况&#34; class=&#34;headerlink&#34; title=&#34;未进行AVX向量化的情况&#34;&gt;&lt;/a&gt;未进行AVX向量化的情况&lt;/h2&gt;&lt;h3 id=&#34;程序源代码&#34;&gt;&lt;a href=&#34;#程序源代码&#34; class=&#34;headerlink&#34; title=&#34;程序源代码&#34;&gt;&lt;/a&gt;程序源代码&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.8&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; b[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9.9&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)	&lt;br&gt;	&amp;#123;&lt;br&gt;		c[i]=a[i]+b[i];&lt;br&gt;		&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;this is c.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%lf\n&amp;quot;&lt;/span&gt;,c[i]);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt; &amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;程序输出&#34;&gt;&lt;a href=&#34;#程序输出&#34; class=&#34;headerlink&#34; title=&#34;程序输出&#34;&gt;&lt;/a&gt;程序输出&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; is c.&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3.200000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;5.400000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9.700000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;13.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9.200000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;16.500000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;12.800000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;13.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8.700000&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;进行AVX向量化的情况&#34;&gt;&lt;a href=&#34;#进行AVX向量化的情况&#34; class=&#34;headerlink&#34; title=&#34;进行AVX向量化的情况&#34;&gt;&lt;/a&gt;进行AVX向量化的情况&lt;/h2&gt;&lt;h3 id=&#34;程序源代码-1&#34;&gt;&lt;a href=&#34;#程序源代码-1&#34; class=&#34;headerlink&#34; title=&#34;程序源代码&#34;&gt;&lt;/a&gt;程序源代码&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.8&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; b[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9.9&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&amp;#125;;&lt;br&gt;	__m256d v0;&lt;br&gt;	__m256d v1;&lt;br&gt;	__m256d v2;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-4&lt;/span&gt;;i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&lt;br&gt;	&amp;#123;	&lt;br&gt;			v0 = _mm256_loadu_pd(a+i);&lt;br&gt;			v1 = _mm256_loadu_pd(b+i);&lt;br&gt;			v2=_mm256_add_pd(v0,v1);&lt;br&gt;		 	_mm256_storeu_pd(c+i,v2);&lt;br&gt;			&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		c[i]=a[i]+b[i];&lt;br&gt;	&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;this is c with AVX.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%lf\n&amp;quot;&lt;/span&gt;,c[i]);&lt;br&gt;	&amp;#125;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt; &amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;程序输出-1&#34;&gt;&lt;a href=&#34;#程序输出-1&#34; class=&#34;headerlink&#34; title=&#34;程序输出&#34;&gt;&lt;/a&gt;程序输出&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; is c with AVX.&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3.200000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;5.400000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9.700000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;13.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9.200000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;16.500000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;12.800000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;13.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8.700000&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;相关链接&#34;&gt;&lt;a href=&#34;#相关链接&#34; class=&#34;headerlink&#34; title=&#34;相关链接&#34;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;p&gt;[&lt;a href=&#34;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&#34;&gt;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&lt;/a&gt;: 	“ Intel® Intrinsics Guide”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/01/17/AVX005/</guid>
            <title>AVX向量化学习(五)-INT型数组相加操作</title>
            <link>http://example.com/2022/01/17/AVX005/</link>
            <category>AVX</category>
            <pubDate>Mon, 17 Jan 2022 21:28:22 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;AVX向量化学习-五-INT型数组相加操作&#34;&gt;&lt;a href=&#34;#AVX向量化学习-五-INT型数组相加操作&#34; class=&#34;headerlink&#34; title=&#34;AVX向量化学习(五)-INT型数组相加操作&#34;&gt;&lt;/a&gt;AVX向量化学习(五)-INT型数组相加操作&lt;/h1&gt;&lt;p&gt;使用AVX指令集进行2个INT型的数组相加操作&lt;/p&gt;
&lt;h2 id=&#34;使用到的AVX函数介绍&#34;&gt;&lt;a href=&#34;#使用到的AVX函数介绍&#34; class=&#34;headerlink&#34; title=&#34;使用到的AVX函数介绍&#34;&gt;&lt;/a&gt;使用到的AVX函数介绍&lt;/h2&gt;&lt;h3 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1.&#34;&gt;&lt;/a&gt;1.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256i _mm256_loadu_si256 (__m256i &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; * mem_addr)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;m256i _mm256_loadu_si256 (m256i const * mem_addr)&lt;br&gt;#include &amp;lt;immintrin.h&amp;gt;&lt;br&gt;Instruction: vmovdqu ymm, m256&lt;br&gt;CPUID Flags: AVX&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Load 256-bits of integer data from memory into dst. mem_addr does not need to be aligned on any particular boundary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;dst[&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] := MEM[mem_addr+&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;:mem_addr] &lt;br&gt;dst[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Architecture&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Latency&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Throughput (CPI)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Icelake&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Skylake&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Broadwell&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Haswell&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ivy Bridge&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;2&#34;&gt;&lt;a href=&#34;#2&#34; class=&#34;headerlink&#34; title=&#34;2.&#34;&gt;&lt;/a&gt;2.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256i _mm256_add_epi32 (__m256i a, __m256i b)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;m256i _mm256_add_epi32 (m256i a, __m256i b)&lt;br&gt;#include &amp;lt;immintrin.h&amp;gt;&lt;br&gt;Instruction: vpaddd ymm, ymm, ymm&lt;br&gt;CPUID Flags: AVX2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add packed 32-bit integers in a and b, and store the results in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;FOR&lt;/span&gt; j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; &lt;br&gt;	     &lt;span class=&#34;hljs-attribute&#34;&gt;i&lt;/span&gt; := j*&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt; &lt;br&gt;	     &lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i] := a[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i] + b[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i] &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;ENDFOR&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Architecture&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Latency&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Throughput (CPI)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Icelake&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Skylake&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Broadwell&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Haswell&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;程序源代码&#34;&gt;&lt;a href=&#34;#程序源代码&#34; class=&#34;headerlink&#34; title=&#34;程序源代码&#34;&gt;&lt;/a&gt;程序源代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;];&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; b[&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;];&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ans1[&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;];    &lt;span class=&#34;hljs-comment&#34;&gt;//记录串行结果 &lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ans2[&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;];	 &lt;span class=&#34;hljs-comment&#34;&gt;//记录AVX向量化后的结果&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		a[i]=i;&lt;br&gt;		b[i]=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;*i;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		ans1[i]=a[i]+b[i];&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;串行计算结果：\n&amp;quot;&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,ans1[i]);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;br&gt;	__m256i v0;&lt;br&gt;	__m256i v1;&lt;br&gt;	__m256i v2;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-8&lt;/span&gt;;i+=&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;)&lt;br&gt;	&amp;#123;	&lt;br&gt;		v0 = _mm256_loadu_si256((&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; __m256i*)(a+i));	 &lt;span class=&#34;hljs-comment&#34;&gt;//强制类型转换&lt;/span&gt;&lt;br&gt;		v1 = _mm256_loadu_si256((&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; __m256i*)(b+i));	 &lt;span class=&#34;hljs-comment&#34;&gt;//强制类型转化&lt;/span&gt;&lt;br&gt;		v2 = _mm256_add_epi32(v0,v1);     &lt;span class=&#34;hljs-comment&#34;&gt;//v0+v1&lt;/span&gt;&lt;br&gt;		_mm256_storeu_si256((__m256i*)(ans2+i),v2);&lt;br&gt;		&lt;br&gt;	&amp;#125;&lt;span class=&#34;hljs-comment&#34;&gt;//边界处理&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		ans2[i]=a[i]+b[i];&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;并行计算结果：\n&amp;quot;&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,ans2[i]);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;程序输出&#34;&gt;&lt;a href=&#34;#程序输出&#34; class=&#34;headerlink&#34; title=&#34;程序输出&#34;&gt;&lt;/a&gt;程序输出&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;串行计算结果：&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;39&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;45&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;48&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;51&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;54&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;69&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;72&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;75&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;78&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;81&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;93&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;96&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;99&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;102&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;105&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;108&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;111&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;114&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;117&lt;/span&gt;&lt;br&gt;并行计算结果：&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;39&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;45&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;48&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;51&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;54&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;69&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;72&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;75&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;78&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;81&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;93&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;96&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;99&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;102&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;105&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;108&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;111&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;114&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;相关链接&#34;&gt;&lt;a href=&#34;#相关链接&#34; class=&#34;headerlink&#34; title=&#34;相关链接&#34;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;p&gt;[&lt;a href=&#34;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&#34;&gt;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&lt;/a&gt;: 	“ Intel® Intrinsics Guide”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/01/17/AVX004/</guid>
            <title>AVX向量化学习(四)-INT类型转化成DOUBLE类型</title>
            <link>http://example.com/2022/01/17/AVX004/</link>
            <category>AVX</category>
            <pubDate>Mon, 17 Jan 2022 20:41:56 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;AVX向量化学习-四-INT类型转化成DOUBLE类型&#34;&gt;&lt;a href=&#34;#AVX向量化学习-四-INT类型转化成DOUBLE类型&#34; class=&#34;headerlink&#34; title=&#34;AVX向量化学习(四)-INT类型转化成DOUBLE类型&#34;&gt;&lt;/a&gt;AVX向量化学习(四)-INT类型转化成DOUBLE类型&lt;/h1&gt;&lt;p&gt;使用AVX指令集把INT类型转化为DOUBLE类型&lt;/p&gt;
&lt;h2 id=&#34;使用到的AVX函数介绍&#34;&gt;&lt;a href=&#34;#使用到的AVX函数介绍&#34; class=&#34;headerlink&#34; title=&#34;使用到的AVX函数介绍&#34;&gt;&lt;/a&gt;使用到的AVX函数介绍&lt;/h2&gt;&lt;h3 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1.&#34;&gt;&lt;/a&gt;1.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m128i _mm_setr_epi32 (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; e3, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; e2, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; e1, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; e0)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;__m128i _mm_setr_epi32 (int e3, int e2, int e1, int e0)&lt;br&gt;#include &amp;lt;emmintrin.h&amp;gt;&lt;br&gt;Instruction: &lt;strong&gt;Sequence&lt;/strong&gt;&lt;br&gt;CPUID Flags: SSE2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set packed 32-bit integers in dst with the supplied values in reverse order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;dst[&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] := e3 &lt;br&gt;dst[&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;] := e2 &lt;br&gt;dst[&lt;span class=&#34;hljs-number&#34;&gt;95&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;] := e1 &lt;br&gt;dst[&lt;span class=&#34;hljs-number&#34;&gt;127&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;96&lt;/span&gt;] := e0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2&#34;&gt;&lt;a href=&#34;#2&#34; class=&#34;headerlink&#34; title=&#34;2.&#34;&gt;&lt;/a&gt;2.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256d _mm256_cvtepi32_pd (__m128i a)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;m256d _mm256_cvtepi32_pd (m128i a)&lt;br&gt;#include &amp;lt;immintrin.h&amp;gt;&lt;br&gt;Instruction: vcvtdq2pd ymm, xmm&lt;br&gt;CPUID Flags: AVX&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Convert packed signed 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;FOR j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;br&gt;    i := j*&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt; &lt;br&gt;    m := j*&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt; &lt;br&gt;    dst[m+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:m] := &lt;span class=&#34;hljs-built_in&#34;&gt;Convert_Int32_To_FP64&lt;/span&gt;(a[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i]) &lt;br&gt;ENDFOR &lt;br&gt;dst[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Architecture&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Latency&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Throughput (CPI)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Icelake&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Skylake&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Broadwell&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Haswell&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ivy Bridge&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;程序运行平台&#34;&gt;&lt;a href=&#34;#程序运行平台&#34; class=&#34;headerlink&#34; title=&#34;程序运行平台&#34;&gt;&lt;/a&gt;程序运行平台&lt;/h2&gt;&lt;p&gt;北京超级云计算中心A3分区&lt;/p&gt;
&lt;h2 id=&#34;编译指令&#34;&gt;&lt;a href=&#34;#编译指令&#34; class=&#34;headerlink&#34; title=&#34;编译指令&#34;&gt;&lt;/a&gt;编译指令&lt;/h2&gt;&lt;p&gt;g++ int_to_double.cpp -msse2 -mavx -o test01&lt;/p&gt;
&lt;h2 id=&#34;运行指令&#34;&gt;&lt;a href=&#34;#运行指令&#34; class=&#34;headerlink&#34; title=&#34;运行指令&#34;&gt;&lt;/a&gt;运行指令&lt;/h2&gt;&lt;p&gt;.&amp;#x2F;test01&lt;/p&gt;
&lt;h2 id=&#34;程序源代码&#34;&gt;&lt;a href=&#34;#程序源代码&#34; class=&#34;headerlink&#34; title=&#34;程序源代码&#34;&gt;&lt;/a&gt;程序源代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;]=&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; b[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&amp;#125;;&lt;br&gt;    __m128i x = _mm_setr_epi32(a[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], a[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], a[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;],a[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]);   &lt;span class=&#34;hljs-comment&#34;&gt;//load&lt;/span&gt;&lt;br&gt; 	__m256d v5=_mm256_cvtepi32_pd(x);       &lt;span class=&#34;hljs-comment&#34;&gt;//convert&lt;/span&gt;&lt;br&gt;    _mm256_storeu_pd(b,v5);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;    &amp;#123;&lt;br&gt;    	cout&amp;lt;&amp;lt;b[i]&amp;lt;&amp;lt;endl;&lt;br&gt;	&amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;程序输出&#34;&gt;&lt;a href=&#34;#程序输出&#34; class=&#34;headerlink&#34; title=&#34;程序输出&#34;&gt;&lt;/a&gt;程序输出&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;相关链接&#34;&gt;&lt;a href=&#34;#相关链接&#34; class=&#34;headerlink&#34; title=&#34;相关链接&#34;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;p&gt;[&lt;a href=&#34;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&#34;&gt;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&lt;/a&gt;: 	“ Intel® Intrinsics Guide”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/11/24/AVX003/</guid>
            <title>AVX向量化学习(三)-if判断的处理</title>
            <link>http://example.com/2021/11/24/AVX003/</link>
            <category>AVX</category>
            <pubDate>Wed, 24 Nov 2021 17:42:35 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;AVX-if判断的处理&#34;&gt;&lt;a href=&#34;#AVX-if判断的处理&#34; class=&#34;headerlink&#34; title=&#34;AVX-if判断的处理&#34;&gt;&lt;/a&gt;AVX-if判断的处理&lt;/h1&gt;&lt;p&gt;使用AVX指令集对if判断进行处理&lt;/p&gt;
&lt;h2 id=&#34;使用到的AVX函数介绍&#34;&gt;&lt;a href=&#34;#使用到的AVX函数介绍&#34; class=&#34;headerlink&#34; title=&#34;使用到的AVX函数介绍&#34;&gt;&lt;/a&gt;使用到的AVX函数介绍&lt;/h2&gt;&lt;h3 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1.&#34;&gt;&lt;/a&gt;1.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256d _mm256_blendv_pd (__m256d a, __m256d b, __m256d mask)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Blend packed double-precision (64-bit) floating-point elements from a and b using mask, and store the results in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;FOR j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;	i := j*&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;&lt;br&gt;	IF mask[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;]&lt;br&gt;		dst[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] := b[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i]&lt;br&gt;	ELSE&lt;br&gt;		dst[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] := a[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i]&lt;br&gt;	FI&lt;br&gt;ENDFOR&lt;br&gt;dst[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2&#34;&gt;&lt;a href=&#34;#2&#34; class=&#34;headerlink&#34; title=&#34;2.&#34;&gt;&lt;/a&gt;2.&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256d _mm256_cmp_pd (__m256d a, __m256d b, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; imm8)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Compare packed double-precision (64-bit) floating-point elements in a and b based on the comparison operand specified by imm8, and store the results in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;CASE&lt;/span&gt; (imm8[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]) OF&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: OP := _CMP_EQ_OQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;: OP := _CMP_LT_OS&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;: OP := _CMP_LE_OS&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;: OP := _CMP_UNORD_Q &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;: OP := _CMP_NEQ_UQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;: OP := _CMP_NLT_US&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;: OP := _CMP_NLE_US&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;: OP := _CMP_ORD_Q&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;: OP := _CMP_EQ_UQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;: OP := _CMP_NGE_US&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;: OP := _CMP_NGT_US&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt;: OP := _CMP_FALSE_OQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;: OP := _CMP_NEQ_OQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;13&lt;/span&gt;: OP := _CMP_GE_OS&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;: OP := _CMP_GT_OS&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;: OP := _CMP_TRUE_UQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;: OP := _CMP_EQ_OS&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;: OP := _CMP_LT_OQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt;: OP := _CMP_LE_OQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;19&lt;/span&gt;: OP := _CMP_UNORD_S&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;: OP := _CMP_NEQ_US&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;21&lt;/span&gt;: OP := _CMP_NLT_UQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;: OP := _CMP_NLE_UQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;23&lt;/span&gt;: OP := _CMP_ORD_S&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;: OP := _CMP_EQ_US&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;25&lt;/span&gt;: OP := _CMP_NGE_UQ &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;: OP := _CMP_NGT_UQ &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;27&lt;/span&gt;: OP := _CMP_FALSE_OS &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;28&lt;/span&gt;: OP := _CMP_NEQ_OS &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;29&lt;/span&gt;: OP := _CMP_GE_OQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;: OP := _CMP_GT_OQ&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;: OP := _CMP_TRUE_US&lt;br&gt;ESAC&lt;br&gt;FOR j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;	i := j*&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;&lt;br&gt;	dst[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] := ( a[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] OP b[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] ) ? &lt;span class=&#34;hljs-number&#34;&gt;0xFFFFFFFFFFFFFFFF&lt;/span&gt; : &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;ENDFOR&lt;br&gt;dst[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;程序源代码&#34;&gt;&lt;a href=&#34;#程序源代码&#34; class=&#34;headerlink&#34; title=&#34;程序源代码&#34;&gt;&lt;/a&gt;程序源代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.8&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; b[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;2.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8.6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3.7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9.9&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5.1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4.2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6.6&lt;/span&gt;&amp;#125;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&amp;#125;;     &lt;span class=&#34;hljs-comment&#34;&gt;//记录原始if判断后的值&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; e[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&amp;#125;;     &lt;span class=&#34;hljs-comment&#34;&gt;//记录AVX-if判断后的值&lt;/span&gt;&lt;br&gt;	&lt;br&gt;	__m256d v0;&lt;br&gt;	__m256d v1;&lt;br&gt;	__m256d v2,v3;&lt;br&gt;	__m256d v4;&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(a[i]&amp;gt;b[i])&lt;br&gt;		&amp;#123;&lt;br&gt;			d[i] = a[i];&lt;br&gt;		&amp;#125;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;		&amp;#123;&lt;br&gt;			d[i]=b[i];&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-4&lt;/span&gt;;i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&lt;br&gt;	&amp;#123;	&lt;br&gt;			v0 = _mm256_loadu_pd(a+i);&lt;br&gt;			v1 = _mm256_loadu_pd(b+i);&lt;br&gt;			v2=_mm256_add_pd(v0,v1);&lt;br&gt;			v3 =_mm256_blendv_pd(v0,v1,_mm256_cmp_pd(v0,v1,_CMP_LE_OQ));&lt;br&gt;			_mm256_storeu_pd(e+i,v3);&lt;br&gt;			&lt;br&gt;	&amp;#125;&lt;br&gt;    &lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(a[i]&amp;gt;b[i])&lt;br&gt;		&amp;#123;&lt;br&gt;			e[i] = a[i];&lt;br&gt;		&amp;#125;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;		&amp;#123;&lt;br&gt;			e[i]=b[i];&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;    &lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;this is d.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%lf\n&amp;quot;&lt;/span&gt;,d[i]);&lt;br&gt;	&amp;#125;&lt;br&gt;    &lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;this is e with AVX.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;;i++)&lt;br&gt;	&amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%lf\n&amp;quot;&lt;/span&gt;,e[i]);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt; &amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;程序输出&#34;&gt;&lt;a href=&#34;#程序输出&#34; class=&#34;headerlink&#34; title=&#34;程序输出&#34;&gt;&lt;/a&gt;程序输出&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; is d.&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2.100000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3.200000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;6.400000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8.600000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;5.500000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9.900000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;7.700000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8.800000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;6.600000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; is e with AVX.&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2.100000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3.200000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;6.400000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8.600000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;5.500000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;9.900000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;7.700000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;8.800000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;6.600000&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;相关链接&#34;&gt;&lt;a href=&#34;#相关链接&#34; class=&#34;headerlink&#34; title=&#34;相关链接&#34;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;p&gt;[&lt;a href=&#34;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&#34;&gt;https://software.intel.com/sites/landingpage/IntrinsicsGuide/]&lt;/a&gt;: 	“ Intel® Intrinsics Guide”&lt;/p&gt;
&lt;p&gt;[&lt;a href=&#34;https://stackoverflow.com/questions/16988199/how-to-choose-avx-compare-predicate-variants&#34;&gt;simd - How to choose AVX compare predicate variants - Stack Overflow&lt;/a&gt;]: 	“Stack Overflow”&lt;/p&gt;
&lt;p&gt;[&lt;a href=&#34;https://www.officedaytime.com/simd512e/simdimg/si.php?f=blendvpd&#34;&gt;blendvpd (officedaytime.com)&lt;/a&gt;]: 	“_mm256_Blendv_pd()原理解释”&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
