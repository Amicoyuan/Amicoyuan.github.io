{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"avx\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/01/28/avx006/",
            "url": "http://example.com/2023/01/28/avx006/",
            "title": "如何使用AVX和AVX2处理数据(个人翻译)[未完成]",
            "date_published": "2023-01-28T06:51:44.000Z",
            "content_html": "<h2 id=\"1-文章来源\"><a href=\"#1-文章来源\" class=\"headerlink\" title=\"1.文章来源\"></a>1.文章来源</h2><p><strong>Matt Scarpino</strong></p>\n<p><a href=\"https://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX\">Crunching Numbers with AVX and AVX2 - CodeProject</a></p>\n<h2 id=\"2-介绍\"><a href=\"#2-介绍\" class=\"headerlink\" title=\"2.介绍\"></a>2.介绍</h2><p>在2003年，<a href=\"https://www.codeproject.com/script/Membership/View.aspx?mid=22834\">Alex Fr</a>写了一篇优秀的<a href=\"https://www.codeproject.com/Articles/4522/Introduction-to-SSE-Programming\">文章</a>[该文章现在已经被原作者删除]，解释了如何使用Intel的流式SIMD扩展(SSE)执行SIMD(单指令，多数据)处理。SSE是英特尔处理器支持的一组指令，可对大量数据执行高速运算。</p>\n<p>2008年，英特尔推出了一套新的高性能指令，称为高级向量扩展(AVX)。AVX执行许多与SSE指令相同的操作，但以更快的速度对更大的数据块进行操作。最近，英特尔在AVX2和AVX512系列中发布了额外的指令。本文的重点是通过称为intrinsic funtions的特殊C函数访问AVX和AVX2指令。</p>\n<p>本文不介绍整个AVX&#x2F;AVX2 intrinsics，而是侧重于数学计算。特别地，目标是复数相乘。要使用AVX&#x2F;AVX2执行此操作，需要三种类型的intrinsic:</p>\n<ol>\n<li>Initialization intrinscis</li>\n<li>Arithmetic intrinsics</li>\n<li>Permute&#x2F;shuffle intrinsics</li>\n</ol>\n<p>\t\t</p>\n<p>本文讨论每个类别中的intrinsics，并解释如何在代码中使用它们。本文的最后将展示如何用这些intrinsic进行乘法复数运算。</p>\n<p>理解处理器指令和intrinsic function之间的区别是很重要的。AVX指令是执行不可分割操作的汇编命令。例如，AVX指令vaddps添加了两个操作数，并将结果放在第三个操作数中。</p>\n<p>要在C&#x2F;C++中执行操作，the intrinsic funtion _mm256_add_ps()直接映射到vaddps，将汇编的性能与高级函数的便利性结合起来。An intrinsic funtion不一定映射到单个指令，但与其他C&#x2F; C++函数相比，AVX&#x2F;AVX2 intrinsics提供了可靠的高性能。</p>\n<h2 id=\"3-基本要求\"><a href=\"#3-基本要求\" class=\"headerlink\" title=\"3.基本要求\"></a>3.基本要求</h2><p>要理解本文的内容，您需要基本熟悉C语言和SIMD处理。要执行代码，您需要一个支持AVX或AVX&#x2F;AVX2的CPU。以下是支持AVX的cpu:</p>\n<ul>\n<li>Intel’s Sandy Bridge&#x2F;Sandy Bridge E&#x2F;Ivy Bridge&#x2F;Ivy Bridge E</li>\n<li>Intel’s Haswell&#x2F;Haswell E&#x2F;Broadwell&#x2F;Broadwell E</li>\n<li>AMD’s Bulldozer&#x2F;Piledriver&#x2F;Steamroller&#x2F;Excavator</li>\n</ul>\n<p>支持AVX2的CPU也支持AVX。以下是这些设备:</p>\n<ul>\n<li>Intel’s Haswell&#x2F;Haswell E&#x2F;Broadwell&#x2F;Broadwell E</li>\n<li>AMD’s Excavator</li>\n</ul>\n<p>本文中讨论的大多数函数都是由AVX提供的。但也有一些是AVX2特有的。为了区分它们，在本文的表中，我在AVX2 intrinsic的名称前面加上(2)。</p>\n<p>[个人补充]</p>\n<p>判断自己电脑CPU是否支持AVX和AVX2，最简单的就是在命令行执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">lscpu<br></code></pre></div></td></tr></table></figure>\n\n<p>你会得到以下结果：</p>\n<p><img src=\"/2023/01/28/avx006/image-20230129153048825.png\" alt=\"image-20230129153048825\"></p>\n<p>在Flags里面你可以清楚的看到你的电脑是否支持AVX以及AVX2。</p>\n<h2 id=\"4-向量化概述\"><a href=\"#4-向量化概述\" class=\"headerlink\" title=\"4.向量化概述\"></a>4.向量化概述</h2><p>AVX指令通过同时处理大块值而不是单独处理值来提高应用程序的性能。这些值块称为向量，AVX向量最多可以包含256位数据。</p>\n<p>常见的AVX向量包含4个double (4 x 64位&#x3D; 256)，8个float (8 x 32位&#x3D; 256)或8个int (8 x 32位&#x3D; 256)。[double 8B, flout 4B, int 4B]</p>\n<p>一个示例将演示AVX&#x2F;AVX2处理的强大功能。假设一个函数需要将一个数组的8个浮点数乘以第二个数组的8个浮点数，并将结果添加到第三个数组。如果没有向量化，函数可能是这样的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">multiply_and_add</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* b, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* c, <span class=\"hljs-keyword\">float</span>* d) &#123;  <br><br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">8</span>; i++) &#123;<br>    d[i] = a[i] * b[i];<br>    d[i] = d[i] + c[i];<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>下面是使用AVX2函数的例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__m256 <span class=\"hljs-title\">multiply_and_add</span><span class=\"hljs-params\">(__m256 a, __m256 b, __m256 c)</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">return</span> _mm256_fmadd_ps(a, b, c);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>This AVX2 intrinsic funtion _mm256_fmadd_ps处理24个floats，但它不映射到单个指令。相反，它执行三个指令:vfmadd132ps、vfmadd213ps和vfmadd231ps。尽管如此，它执行得很快，比遍历单个元素快得多。尽管英特尔的intrinsics功能强大，但它们还是让许多程序员感到紧张。这通常有两个原因。首先，数据类型有奇怪的名字，比如__m256。其次，函数有奇怪的名称，如_mm256_fmadd_ps。因此，在详细讨论intrinsic funtions之前，我想先讨论一下Intel的数据类型和命名约定。</p>\n<h2 id=\"5-AVX编程基础\"><a href=\"#5-AVX编程基础\" class=\"headerlink\" title=\"5.AVX编程基础\"></a>5.AVX编程基础</h2><p>本文主要关注AVX和AVX2提供的与数学相关的intrinsic functions。但在看函数之前，有三点很重要:</p>\n<ul>\n<li>Data types</li>\n<li>Function naming conventions</li>\n<li>Compiling AVX applications</li>\n</ul>\n<p>本节涉及这些要点，并提供一个简单的应用程序，用于从一个向量减去另一个向量。</p>\n<h3 id=\"5-1数据类型\"><a href=\"#5-1数据类型\" class=\"headerlink\" title=\"5.1数据类型\"></a>5.1数据类型</h3><p>少数intrinsic接受传统的数据类型，如ints或floats，但大多数intrinsic操作有特定的AVX和AVX2的数据类型。有六种主要的向量类型，表1列出了它们。</p>\n<p><strong>Table 1:AVX&#x2F;AVX2 Data Types</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>__m128</code></td>\n<td>128-bit vector containing 4 <code>float</code>s</td>\n</tr>\n<tr>\n<td><code>__m128d</code></td>\n<td>128-bit vector containing 2 <code>double</code>s</td>\n</tr>\n<tr>\n<td><code>__m128i</code></td>\n<td>128-bit vector containing integers</td>\n</tr>\n<tr>\n<td><code>__m256</code></td>\n<td>256-bit vector containing 8 <code>float</code>s</td>\n</tr>\n<tr>\n<td><code>__m256d</code></td>\n<td>256-bit vector containing 4 <code>double</code>s</td>\n</tr>\n<tr>\n<td><code>__m256i</code></td>\n<td>256-bit vector containing integers</td>\n</tr>\n</tbody></table>\n<p>每种类型都以两个下划线、一个m和向量的宽度(以位为单位)开始。AVX512支持以_m512开头的512位向量类型，但AVX&#x2F;AVX2向量不超过256位。如果向量类型以d结尾，则代表double，如果没有后缀，则代表float。看起来_m128i和_m256i向量必须包含int型，但事实并非如此。整数向量类型可以包含任何类型的整数，from chars to shorts to unsigned long longs.That is, an _m256i may contain 32 chars, 16 shorts, 8 ints, or 4 longs.  These integers can be signed or unsigned.</p>\n<h3 id=\"5-3函数命名约定\"><a href=\"#5-3函数命名约定\" class=\"headerlink\" title=\"5.3函数命名约定\"></a>5.3函数命名约定</h3><p>AVX&#x2F;AVX2 intrinsics的名称一开始可能令人困惑，但命名约定确是非常直白的。一旦你理解了它，你就可以通过看它的名字来大致判断一个函数是做什么的。AVX&#x2F;AVX2 intrinsics的一般形式如下:</p>\n<p>_mm<bit_width>_<name>_<data_type></data_type></name></bit_width></p>\n<p>该格式的各部分如下所示:</p>\n<ol>\n<li><code>&lt;bit_width&gt;</code> identifies the size of the vector returned by the function. For 128-bit vectors, this is empty. For 256-bit vectors, this is set to <code>256</code>.</li>\n<li><code>&lt;name&gt;</code> describes the operation performed by the intrinsic</li>\n<li><code>&lt;data_type&gt;</code> identifies the data type of the function’s primary arguments</li>\n</ol>\n<p>最后一部分<data_type>有点复杂。它标识输入值的内容，可以设置为以下任何值:</data_type></p>\n<ul>\n<li><code>ps</code> - vectors contain <code>float</code>s (<code>ps</code> stands for packed single-precision)</li>\n<li><code>pd</code> - vectors contain <code>double</code>s (<code>pd</code> stands for packed double-precision)</li>\n<li><code>epi8/epi16/epi32/epi64</code> - vectors contain 8-bit&#x2F;16-bit&#x2F;32-bit&#x2F;64-bit signed integers</li>\n<li><code>epu8/epu16/epu32/epu64</code> - vectors contain 8-bit&#x2F;16-bit&#x2F;32-bit&#x2F;64-bit unsigned integers</li>\n<li><code>si128</code>&#x2F;<code>si256</code> - unspecified 128-bit vector or 256-bit vector</li>\n<li><code>m128/m128i/m128d/m256/m256i/m256d</code> - identifies input vector types when they’re different than the type of the returned vector</li>\n</ul>\n<p>例如，考虑_mm256_srlv_epi64。即使您不知道srlv是什么意思，_mm256前缀告诉您该函数返回一个256位向量，_epi64告诉您参数包含64位有符号整数。</p>\n<p>作为第二个示例，考虑_mm_testnzc_ps。_mm表示函数返回一个128位的向量。末尾的_ps表示参数向量包含浮点数。</p>\n<p>AVX数据类型以两个下划线和一个m开头。函数以一个下划线和两个ms开头。我很容易搞混这一点，所以我想出了一种方法来记住它们的区别:数据类型代表内存，函数代表多媒体操作。这是我能做的最好的了。</p>\n<h3 id=\"5-4构建AVX应用程序\"><a href=\"#5-4构建AVX应用程序\" class=\"headerlink\" title=\"5.4构建AVX应用程序\"></a>5.4构建AVX应用程序</h3><p>要构建使用AVX intrinsic的应用程序，不需要链接任何库。但是您需要包含imminrin .h头文件。此头文件包括将AVX&#x2F;AVX2函数映射到指令的其他头文件。</p>\n<p>hello_avx.c中的代码显示了一个基本的AVX应用程序的样子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  <span class=\"hljs-comment\">/* Initialize the two argument vectors */</span>\t\t\t<span class=\"hljs-comment\">//初始化</span><br>  __m256 evens = _mm256_set_ps(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">8.0</span>, <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">12.0</span>, <span class=\"hljs-number\">14.0</span>, <span class=\"hljs-number\">16.0</span>);<br>  __m256 odds = _mm256_set_ps(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">11.0</span>, <span class=\"hljs-number\">13.0</span>, <span class=\"hljs-number\">15.0</span>);<br><br>  <span class=\"hljs-comment\">/* Compute the difference between the two vectors */</span><br>  __m256 result = _mm256_sub_ps(evens, odds);\t\t\t<span class=\"hljs-comment\">//减法</span><br><br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">float</span>* f = (<span class=\"hljs-keyword\">float</span>*)&amp;result;\t\t\t\t\t<span class=\"hljs-comment\">//类型转换</span><br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%f %f %f %f %f %f %f %f\\n&quot;</span>,<br>    f[<span class=\"hljs-number\">0</span>], f[<span class=\"hljs-number\">1</span>], f[<span class=\"hljs-number\">2</span>], f[<span class=\"hljs-number\">3</span>], f[<span class=\"hljs-number\">4</span>], f[<span class=\"hljs-number\">5</span>], f[<span class=\"hljs-number\">6</span>], f[<span class=\"hljs-number\">7</span>]);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>要构建应用程序，需要告诉编译器该体系结构支持AVX。这个标志取决于编译器，gcc需要-mavx标志。因此，可以使用以下命令编译hello_avx.c源文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">gcc -mavx -o hello_avx hello_avx.c<br></code></pre></div></td></tr></table></figure>\n\n<p>在本例中，所有函数都以_mm256开始，以_ps结束，因此我希望所有操作都清楚地涉及包含floats的256位向量。我还希望结果向量中的每个元素都等于1.0。如果运行应用程序，您将看到情况就是这样。</p>\n<h3 id=\"5-5初始化intrinsics\"><a href=\"#5-5初始化intrinsics\" class=\"headerlink\" title=\"5.5初始化intrinsics\"></a>5.5初始化intrinsics</h3><p>在对AVX向量进行操作之前，需要用数据填充向量。因此，本文讨论的第一组intrinsics用数据初始化向量。有两种方法:用标量值初始化向量和用从内存加载的数据初始化向量。</p>\n<h4 id=\"5-5-4使用标量值初始化\"><a href=\"#5-5-4使用标量值初始化\" class=\"headerlink\" title=\"5.5.4使用标量值初始化\"></a>5.5.4使用标量值初始化</h4><p>AVX提供了将一个或多个值组合成256位向量的intrinsics funtions。表2列出了它们的名称，并提供了每个名称的描述。也有类似的intrinsics初始化128位向量，但它们是由SSE提供的，而不是AVX。函数名的唯一区别是_mm256_被替换为_mm_。</p>\n<p><strong>Table 2: Initialization Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_setzero_ps/pd</code></td>\n<td>Returns a floating-point vector filled with zeros</td>\n</tr>\n<tr>\n<td><code>_mm256_setzero_si256</code></td>\n<td>Returns an integer vector whose bytes are set to zero</td>\n</tr>\n<tr>\n<td><code>_mm256_set1_ps/pd</code></td>\n<td>Fill a vector with a floating-point value</td>\n</tr>\n<tr>\n<td><code>_mm256_set1_epi8/epi16</code> <code>_mm256_set1_epi32/epi64</code></td>\n<td>Fill a vector with an integer</td>\n</tr>\n<tr>\n<td><code>_mm256_set_ps/pd</code></td>\n<td>Initialize a vector with eight floats (ps) or four doubles (pd)</td>\n</tr>\n<tr>\n<td><code>_mm256_set_epi8/epi16</code> <code>_mm256_set_epi32/epi64</code></td>\n<td>Initialize a vector with integers</td>\n</tr>\n<tr>\n<td><code>_mm256_set_m128/m128d/</code> <code>_mm256_set_m128i</code></td>\n<td>Initialize a 256-bit vector with two 128-bit vectors</td>\n</tr>\n<tr>\n<td><code>_mm256_setr_ps/pd</code></td>\n<td>Initialize a vector with eight floats (ps) or four doubles (pd) in reverse order</td>\n</tr>\n<tr>\n<td><code>_mm256_setr_epi8/epi16</code> <code>_mm256_setr_epi32/epi64</code></td>\n<td>Initialize a vector with integers in reverse order</td>\n</tr>\n</tbody></table>\n<p>表中的第一个函数是最容易理解的。_m256_setzero_ps返回一个__m256向量，包含8个设置为0的浮点数。类似地，_m256_setzero_si256返回一个__m256i向量，其字节被设置为0。例如，下面这行代码创建了一个256位的向量，其中包含4个设为0的double:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256d dbl_vector = _m256_setzero_pd();<br></code></pre></div></td></tr></table></figure>\n\n<p>名称中包含set1的函数接受一个值，并在整个向量中重复该值。例如，下面这行代码创建了一个__m256i，它的16个short value被设置为47:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256i short_vector = _m256_set1_pd();<br></code></pre></div></td></tr></table></figure>\n\n<p>表2中的其他函数包含_set_或_setr_。这些函数接受一系列值，每个向量的元素对应一个值。这些值被放置在返回的向量中，理解顺序很重要。下面的函数调用返回一个包含8个整数的向量，其值范围为1到8:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256i int_vector = _m256_set_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br></code></pre></div></td></tr></table></figure>\n\n<p>您可能希望值按照给定的顺序存储。但英特尔的架构是小端存储类型的，所以最低有效值(8)先存储，最高有效值(1)最后存储。您可以通过将int_vector转换为int指针并打印存储的值来验证这一点。如下代码所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i int_vector = _mm256_set_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br><span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span>*)&amp;int_vector;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, ptr[<span class=\"hljs-number\">0</span>], ptr[<span class=\"hljs-number\">1</span>], ptr[<span class=\"hljs-number\">2</span>], ptr[<span class=\"hljs-number\">3</span>], ptr[<span class=\"hljs-number\">4</span>], ptr[<span class=\"hljs-number\">5</span>], ptr[<span class=\"hljs-number\">6</span>], ptr[<span class=\"hljs-number\">7</span>]);<br>--&gt; <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br></code></pre></div></td></tr></table></figure>\n\n<p>如果希望值按给定顺序存储，可以使用_setr_函数之一创建向量，其中r可能代表reverse。下面的代码展示了它是如何工作的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i int_vector = _mm256_setr_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br><span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span>*)&amp;int_vector;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, ptr[<span class=\"hljs-number\">0</span>], ptr[<span class=\"hljs-number\">1</span>], ptr[<span class=\"hljs-number\">2</span>], ptr[<span class=\"hljs-number\">3</span>], ptr[<span class=\"hljs-number\">4</span>], ptr[<span class=\"hljs-number\">5</span>], ptr[<span class=\"hljs-number\">6</span>], ptr[<span class=\"hljs-number\">7</span>]);<br>--&gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">8</span><br></code></pre></div></td></tr></table></figure>\n\n<p>有趣的是，AVX和AVX2都没有提供用无符号整数初始化向量的intrinsic。但是，它们提供了对带无符号整数的向量进行操作的函数。</p>\n",
            "tags": [
                "AVX",
                "AVX2"
            ]
        },
        {
            "id": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/",
            "url": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/",
            "title": "AVX向量化学习(二)-内存对齐的应用",
            "date_published": "2022-06-12T07:11:29.549Z",
            "content_html": "<h1 id=\"AVX指令集的简单操作-内存对齐版\"><a href=\"#AVX指令集的简单操作-内存对齐版\" class=\"headerlink\" title=\"AVX指令集的简单操作(内存对齐版)\"></a>AVX指令集的简单操作(内存对齐版)</h1><p>使用AVX指令集进行2个double型的数组相加操作</p>\n<h2 id=\"常用的内存对齐函数\"><a href=\"#常用的内存对齐函数\" class=\"headerlink\" title=\"常用的内存对齐函数\"></a>常用的内存对齐函数</h2><p>因为AVX中要求mem__addr必须在32字节边界上对齐，否则可能会产生通用保护异常。  </p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)_mm_malloc(<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>),<span class=\"hljs-number\">32</span>);<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">aligned_alloc</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__attribute__ ((<span class=\"hljs-built_in\">aligned</span>(<span class=\"hljs-number\">32</span>)))<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>]  =&#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256d _mm256_load_pd (<span class=\"hljs-keyword\">double</span> <span class=\"hljs-keyword\">const</span> * mem_addr)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into dst. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>] := MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr]<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-1\"><a href=\"#2-1\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256 _mm256_add_ps (__m256 a, __m256 b)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">7</span><br>\t<span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">32</span><br>\t<span class=\"hljs-attribute\">dst</span>[i+<span class=\"hljs-number\">31</span>:i] := a[i+<span class=\"hljs-number\">31</span>:i] + b[i+<span class=\"hljs-number\">31</span>:i]<br><span class=\"hljs-attribute\">ENDFOR</span><br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-stream的作用：绕过缓存直接写入内存\"><a href=\"#3-stream的作用：绕过缓存直接写入内存\" class=\"headerlink\" title=\"3.stream的作用：绕过缓存直接写入内存\"></a>3.stream的作用：绕过缓存直接写入内存</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> _mm256_stream_pd (<span class=\"hljs-keyword\">double</span> * mem_addr, __m256d a)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory using a non-temporal memory hint. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr] := a[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>]<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"样例程序举例：\"><a href=\"#样例程序举例：\" class=\"headerlink\" title=\"样例程序举例：\"></a>样例程序举例：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;malloc.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">double</span>*\tb =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">4</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">double</span> af[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125; ;<br>\t<span class=\"hljs-keyword\">double</span> bf[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span>*\tc =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">4</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i =<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\ta[i]=af[i];<br>\t\tb[i]=bf[i];<br>\t&#125;<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t__m256d v0;<br>\t__m256d v1;<br>\t__m256d v2;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span><span class=\"hljs-number\">-4</span>;i+=<span class=\"hljs-number\">4</span>)<br>\t&#123;\t<br>\t\t\tv0 = _mm256_load_pd(a+i);<br>\t\t\tv1 = _mm256_load_pd(b+i);<br>\t\t\tv2=_mm256_add_pd(v0,v1);<br>\t\t \t_mm256_stream_pd(c+i,v2);<br>\t\t\t<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"样例程序输出：\"><a href=\"#样例程序输出：\" class=\"headerlink\" title=\"样例程序输出：\"></a>样例程序输出：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "url": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "title": "AVX向量化学习(一)",
            "date_published": "2022-06-12T07:11:29.538Z",
            "content_html": "<h1 id=\"AVX指令集的简单操作\"><a href=\"#AVX指令集的简单操作\" class=\"headerlink\" title=\"AVX指令集的简单操作\"></a>AVX指令集的简单操作</h1><p>使用AVX指令集进行2个double型的数组相加操作</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256 _mm256_loadu_ps (<span class=\"hljs-keyword\">float</span> <span class=\"hljs-keyword\">const</span> * mem_addr)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into dst. mem_addr does not need to be aligned on any particular boundary.</p>\n<h3 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>] := MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr]<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256d _mm256_add_pd (__m256d a, __m256d b)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Description-1\"><a href=\"#Description-1\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.</p>\n<h3 id=\"Operation-1\"><a href=\"#Operation-1\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span><br>\ti := j*<span class=\"hljs-number\">64</span><br>\tdst[i+<span class=\"hljs-number\">63</span>:i] := a[i+<span class=\"hljs-number\">63</span>:i] + b[i+<span class=\"hljs-number\">63</span>:i]<br>ENDFOR<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> _mm256_storeu_pd (<span class=\"hljs-keyword\">double</span> * mem_addr, __m256d a)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Description-2\"><a href=\"#Description-2\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory. mem_addr does not need to be aligned on any particular boundary.</p>\n<h3 id=\"Operation-2\"><a href=\"#Operation-2\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr] := a[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>]<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"未进行AVX向量化的情况\"><a href=\"#未进行AVX向量化的情况\" class=\"headerlink\" title=\"未进行AVX向量化的情况\"></a>未进行AVX向量化的情况</h2><h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> c[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span> ;i&lt;<span class=\"hljs-number\">9</span>;i++)\t<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t\t<br>\t&#125;<br>\t<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c.\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"进行AVX向量化的情况\"><a href=\"#进行AVX向量化的情况\" class=\"headerlink\" title=\"进行AVX向量化的情况\"></a>进行AVX向量化的情况</h2><h3 id=\"程序源代码-1\"><a href=\"#程序源代码-1\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> c[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>\t__m256d v0;<br>\t__m256d v1;<br>\t__m256d v2;<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span><span class=\"hljs-number\">-4</span>;i+=<span class=\"hljs-number\">4</span>)<br>\t&#123;\t<br>\t\t\tv0 = _mm256_loadu_pd(a+i);<br>\t\t\tv1 = _mm256_loadu_pd(b+i);<br>\t\t\tv2=_mm256_add_pd(v0,v1);<br>\t\t \t_mm256_storeu_pd(c+i,v2);<br>\t\t\t<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c with AVX.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出-1\"><a href=\"#程序输出-1\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c with AVX.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/01/17/AVX005/",
            "url": "http://example.com/2022/01/17/AVX005/",
            "title": "AVX向量化学习(五)-INT型数组相加操作",
            "date_published": "2022-01-17T13:28:22.000Z",
            "content_html": "<h1 id=\"AVX向量化学习-五-INT型数组相加操作\"><a href=\"#AVX向量化学习-五-INT型数组相加操作\" class=\"headerlink\" title=\"AVX向量化学习(五)-INT型数组相加操作\"></a>AVX向量化学习(五)-INT型数组相加操作</h1><p>使用AVX指令集进行2个INT型的数组相加操作</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i _mm256_loadu_si256 (__m256i <span class=\"hljs-keyword\">const</span> * mem_addr)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Synopsis</strong></p>\n<p>m256i _mm256_loadu_si256 (m256i const * mem_addr)<br>#include &lt;immintrin.h&gt;<br>Instruction: vmovdqu ymm, m256<br>CPUID Flags: AVX</p>\n<p><strong>Description</strong></p>\n<p>Load 256-bits of integer data from memory into dst. mem_addr does not need to be aligned on any particular boundary.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>] := MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr] <br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Performance</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Architecture</th>\n<th align=\"center\">Latency</th>\n<th align=\"center\">Throughput (CPI)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Icelake</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0.5</td>\n</tr>\n<tr>\n<td align=\"left\">Skylake</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0.5</td>\n</tr>\n<tr>\n<td align=\"left\">Broadwell</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.25</td>\n</tr>\n<tr>\n<td align=\"left\">Haswell</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.25</td>\n</tr>\n<tr>\n<td align=\"left\">Ivy Bridge</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.5</td>\n</tr>\n</tbody></table>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i _mm256_add_epi32 (__m256i a, __m256i b)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Synopsis</strong></p>\n<p>m256i _mm256_add_epi32 (m256i a, __m256i b)<br>#include &lt;immintrin.h&gt;<br>Instruction: vpaddd ymm, ymm, ymm<br>CPUID Flags: AVX2</p>\n<p><strong>Description</strong></p>\n<p>Add packed 32-bit integers in a and b, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">7</span> <br>\t     <span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">32</span> <br>\t     <span class=\"hljs-attribute\">dst</span>[i+<span class=\"hljs-number\">31</span>:i] := a[i+<span class=\"hljs-number\">31</span>:i] + b[i+<span class=\"hljs-number\">31</span>:i] <br><span class=\"hljs-attribute\">ENDFOR</span> <br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Performance</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Architecture</th>\n<th align=\"center\">Latency</th>\n<th align=\"center\">Throughput (CPI)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Icelake</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.33</td>\n</tr>\n<tr>\n<td align=\"left\">Skylake</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.33</td>\n</tr>\n<tr>\n<td align=\"left\">Broadwell</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.5</td>\n</tr>\n<tr>\n<td align=\"left\">Haswell</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.5</td>\n</tr>\n</tbody></table>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">40</span>];<br>\t<span class=\"hljs-keyword\">int</span> b[<span class=\"hljs-number\">40</span>];<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">int</span> ans1[<span class=\"hljs-number\">40</span>];    <span class=\"hljs-comment\">//记录串行结果 </span><br>\t<span class=\"hljs-keyword\">int</span> ans2[<span class=\"hljs-number\">40</span>];\t <span class=\"hljs-comment\">//记录AVX向量化后的结果</span><br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\ta[i]=i;<br>\t\tb[i]=<span class=\"hljs-number\">2</span>*i;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\tans1[i]=a[i]+b[i];<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;串行计算结果：\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,ans1[i]);<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>\t__m256i v0;<br>\t__m256i v1;<br>\t__m256i v2;<br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span><span class=\"hljs-number\">-8</span>;i+=<span class=\"hljs-number\">8</span>)<br>\t&#123;\t<br>\t\tv0 = _mm256_loadu_si256((<span class=\"hljs-keyword\">const</span> __m256i*)(a+i));\t <span class=\"hljs-comment\">//强制类型转换</span><br>\t\tv1 = _mm256_loadu_si256((<span class=\"hljs-keyword\">const</span> __m256i*)(b+i));\t <span class=\"hljs-comment\">//强制类型转化</span><br>\t\tv2 = _mm256_add_epi32(v0,v1);     <span class=\"hljs-comment\">//v0+v1</span><br>\t\t_mm256_storeu_si256((__m256i*)(ans2+i),v2);<br>\t\t<br>\t&#125;<span class=\"hljs-comment\">//边界处理</span><br>\t<span class=\"hljs-keyword\">for</span> (;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\tans2[i]=a[i]+b[i];<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;并行计算结果：\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,ans2[i]);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">串行计算结果：<br><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">24</span> <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">33</span> <span class=\"hljs-number\">36</span> <span class=\"hljs-number\">39</span> <span class=\"hljs-number\">42</span> <span class=\"hljs-number\">45</span> <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">51</span> <span class=\"hljs-number\">54</span> <span class=\"hljs-number\">57</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">63</span> <span class=\"hljs-number\">66</span> <span class=\"hljs-number\">69</span> <span class=\"hljs-number\">72</span> <span class=\"hljs-number\">75</span> <span class=\"hljs-number\">78</span> <span class=\"hljs-number\">81</span> <span class=\"hljs-number\">84</span> <span class=\"hljs-number\">87</span> <span class=\"hljs-number\">90</span> <span class=\"hljs-number\">93</span> <span class=\"hljs-number\">96</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">102</span> <span class=\"hljs-number\">105</span> <span class=\"hljs-number\">108</span> <span class=\"hljs-number\">111</span> <span class=\"hljs-number\">114</span> <span class=\"hljs-number\">117</span><br>并行计算结果：<br><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">24</span> <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">33</span> <span class=\"hljs-number\">36</span> <span class=\"hljs-number\">39</span> <span class=\"hljs-number\">42</span> <span class=\"hljs-number\">45</span> <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">51</span> <span class=\"hljs-number\">54</span> <span class=\"hljs-number\">57</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">63</span> <span class=\"hljs-number\">66</span> <span class=\"hljs-number\">69</span> <span class=\"hljs-number\">72</span> <span class=\"hljs-number\">75</span> <span class=\"hljs-number\">78</span> <span class=\"hljs-number\">81</span> <span class=\"hljs-number\">84</span> <span class=\"hljs-number\">87</span> <span class=\"hljs-number\">90</span> <span class=\"hljs-number\">93</span> <span class=\"hljs-number\">96</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">102</span> <span class=\"hljs-number\">105</span> <span class=\"hljs-number\">108</span> <span class=\"hljs-number\">111</span> <span class=\"hljs-number\">114</span> <span class=\"hljs-number\">117</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/01/17/AVX004/",
            "url": "http://example.com/2022/01/17/AVX004/",
            "title": "AVX向量化学习(四)-INT类型转化成DOUBLE类型",
            "date_published": "2022-01-17T12:41:56.000Z",
            "content_html": "<h1 id=\"AVX向量化学习-四-INT类型转化成DOUBLE类型\"><a href=\"#AVX向量化学习-四-INT类型转化成DOUBLE类型\" class=\"headerlink\" title=\"AVX向量化学习(四)-INT类型转化成DOUBLE类型\"></a>AVX向量化学习(四)-INT类型转化成DOUBLE类型</h1><p>使用AVX指令集把INT类型转化为DOUBLE类型</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m128i _mm_setr_epi32 (<span class=\"hljs-keyword\">int</span> e3, <span class=\"hljs-keyword\">int</span> e2, <span class=\"hljs-keyword\">int</span> e1, <span class=\"hljs-keyword\">int</span> e0)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Synopsis</strong></p>\n<p>__m128i _mm_setr_epi32 (int e3, int e2, int e1, int e0)<br>#include &lt;emmintrin.h&gt;<br>Instruction: <strong>Sequence</strong><br>CPUID Flags: SSE2</p>\n<p><strong>Description</strong></p>\n<p>Set packed 32-bit integers in dst with the supplied values in reverse order.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">31</span>:<span class=\"hljs-number\">0</span>] := e3 <br>dst[<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">32</span>] := e2 <br>dst[<span class=\"hljs-number\">95</span>:<span class=\"hljs-number\">64</span>] := e1 <br>dst[<span class=\"hljs-number\">127</span>:<span class=\"hljs-number\">96</span>] := e0<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256d _mm256_cvtepi32_pd (__m128i a)<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p><strong>Synopsis</strong></p>\n<p>m256d _mm256_cvtepi32_pd (m128i a)<br>#include &lt;immintrin.h&gt;<br>Instruction: vcvtdq2pd ymm, xmm<br>CPUID Flags: AVX</p>\n<p><strong>Description</strong></p>\n<p>Convert packed signed 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span> <br>    i := j*<span class=\"hljs-number\">32</span> <br>    m := j*<span class=\"hljs-number\">64</span> <br>    dst[m+<span class=\"hljs-number\">63</span>:m] := <span class=\"hljs-built_in\">Convert_Int32_To_FP64</span>(a[i+<span class=\"hljs-number\">31</span>:i]) <br>ENDFOR <br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Performance</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Architecture</th>\n<th align=\"center\">Latency</th>\n<th align=\"center\">Throughput (CPI)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Icelake</td>\n<td align=\"center\">7</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Skylake</td>\n<td align=\"center\">7</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Broadwell</td>\n<td align=\"center\">6</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Haswell</td>\n<td align=\"center\">6</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Ivy Bridge</td>\n<td align=\"center\">4</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<h2 id=\"程序运行平台\"><a href=\"#程序运行平台\" class=\"headerlink\" title=\"程序运行平台\"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p>\n<h2 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h2><p>g++ int_to_double.cpp -msse2 -mavx -o test01</p>\n<h2 id=\"运行指令\"><a href=\"#运行指令\" class=\"headerlink\" title=\"运行指令\"></a>运行指令</h2><p>.&#x2F;test01</p>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">4</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br>    __m128i x = _mm_setr_epi32(a[<span class=\"hljs-number\">0</span>], a[<span class=\"hljs-number\">1</span>], a[<span class=\"hljs-number\">2</span>],a[<span class=\"hljs-number\">3</span>]);   <span class=\"hljs-comment\">//load</span><br> \t__m256d v5=_mm256_cvtepi32_pd(x);       <span class=\"hljs-comment\">//convert</span><br>    _mm256_storeu_pd(b,v5);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>    &#123;<br>    \tcout&lt;&lt;b[i]&lt;&lt;endl;<br>\t&#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2021/11/24/AVX003/",
            "url": "http://example.com/2021/11/24/AVX003/",
            "title": "AVX向量化学习(三)-if判断的处理",
            "date_published": "2021-11-24T09:42:35.000Z",
            "content_html": "<h1 id=\"AVX-if判断的处理\"><a href=\"#AVX-if判断的处理\" class=\"headerlink\" title=\"AVX-if判断的处理\"></a>AVX-if判断的处理</h1><p>使用AVX指令集对if判断进行处理</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256d _mm256_blendv_pd (__m256d a, __m256d b, __m256d mask)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Blend packed double-precision (64-bit) floating-point elements from a and b using mask, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span><br>\ti := j*<span class=\"hljs-number\">64</span><br>\tIF mask[i+<span class=\"hljs-number\">63</span>]<br>\t\tdst[i+<span class=\"hljs-number\">63</span>:i] := b[i+<span class=\"hljs-number\">63</span>:i]<br>\tELSE<br>\t\tdst[i+<span class=\"hljs-number\">63</span>:i] := a[i+<span class=\"hljs-number\">63</span>:i]<br>\tFI<br>ENDFOR<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256d _mm256_cmp_pd (__m256d a, __m256d b, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> imm8)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Compare packed double-precision (64-bit) floating-point elements in a and b based on the comparison operand specified by imm8, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">CASE</span> (imm8[<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">0</span>]) OF<br><span class=\"hljs-number\">0</span>: OP := _CMP_EQ_OQ<br><span class=\"hljs-number\">1</span>: OP := _CMP_LT_OS<br><span class=\"hljs-number\">2</span>: OP := _CMP_LE_OS<br><span class=\"hljs-number\">3</span>: OP := _CMP_UNORD_Q <br><span class=\"hljs-number\">4</span>: OP := _CMP_NEQ_UQ<br><span class=\"hljs-number\">5</span>: OP := _CMP_NLT_US<br><span class=\"hljs-number\">6</span>: OP := _CMP_NLE_US<br><span class=\"hljs-number\">7</span>: OP := _CMP_ORD_Q<br><span class=\"hljs-number\">8</span>: OP := _CMP_EQ_UQ<br><span class=\"hljs-number\">9</span>: OP := _CMP_NGE_US<br><span class=\"hljs-number\">10</span>: OP := _CMP_NGT_US<br><span class=\"hljs-number\">11</span>: OP := _CMP_FALSE_OQ<br><span class=\"hljs-number\">12</span>: OP := _CMP_NEQ_OQ<br><span class=\"hljs-number\">13</span>: OP := _CMP_GE_OS<br><span class=\"hljs-number\">14</span>: OP := _CMP_GT_OS<br><span class=\"hljs-number\">15</span>: OP := _CMP_TRUE_UQ<br><span class=\"hljs-number\">16</span>: OP := _CMP_EQ_OS<br><span class=\"hljs-number\">17</span>: OP := _CMP_LT_OQ<br><span class=\"hljs-number\">18</span>: OP := _CMP_LE_OQ<br><span class=\"hljs-number\">19</span>: OP := _CMP_UNORD_S<br><span class=\"hljs-number\">20</span>: OP := _CMP_NEQ_US<br><span class=\"hljs-number\">21</span>: OP := _CMP_NLT_UQ<br><span class=\"hljs-number\">22</span>: OP := _CMP_NLE_UQ<br><span class=\"hljs-number\">23</span>: OP := _CMP_ORD_S<br><span class=\"hljs-number\">24</span>: OP := _CMP_EQ_US<br><span class=\"hljs-number\">25</span>: OP := _CMP_NGE_UQ <br><span class=\"hljs-number\">26</span>: OP := _CMP_NGT_UQ <br><span class=\"hljs-number\">27</span>: OP := _CMP_FALSE_OS <br><span class=\"hljs-number\">28</span>: OP := _CMP_NEQ_OS <br><span class=\"hljs-number\">29</span>: OP := _CMP_GE_OQ<br><span class=\"hljs-number\">30</span>: OP := _CMP_GT_OQ<br><span class=\"hljs-number\">31</span>: OP := _CMP_TRUE_US<br>ESAC<br>FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span><br>\ti := j*<span class=\"hljs-number\">64</span><br>\tdst[i+<span class=\"hljs-number\">63</span>:i] := ( a[i+<span class=\"hljs-number\">63</span>:i] OP b[i+<span class=\"hljs-number\">63</span>:i] ) ? <span class=\"hljs-number\">0xFFFFFFFFFFFFFFFF</span> : <span class=\"hljs-number\">0</span><br>ENDFOR<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;     <span class=\"hljs-comment\">//记录原始if判断后的值</span><br>\t<span class=\"hljs-keyword\">double</span> e[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;     <span class=\"hljs-comment\">//记录AVX-if判断后的值</span><br>\t<br>\t__m256d v0;<br>\t__m256d v1;<br>\t__m256d v2,v3;<br>\t__m256d v4;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span>(a[i]&gt;b[i])<br>\t\t&#123;<br>\t\t\td[i] = a[i];<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span><br>\t\t&#123;<br>\t\t\td[i]=b[i];<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span><span class=\"hljs-number\">-4</span>;i+=<span class=\"hljs-number\">4</span>)<br>\t&#123;\t<br>\t\t\tv0 = _mm256_loadu_pd(a+i);<br>\t\t\tv1 = _mm256_loadu_pd(b+i);<br>\t\t\tv2=_mm256_add_pd(v0,v1);<br>\t\t\tv3 =_mm256_blendv_pd(v0,v1,_mm256_cmp_pd(v0,v1,_CMP_LE_OQ));<br>\t\t\t_mm256_storeu_pd(e+i,v3);<br>\t\t\t<br>\t&#125;<br>    <br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span>(a[i]&gt;b[i])<br>\t\t&#123;<br>\t\t\te[i] = a[i];<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span><br>\t\t&#123;<br>\t\t\te[i]=b[i];<br>\t\t&#125;<br>\t&#125;<br>    <br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is d.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,d[i]);<br>\t&#125;<br>    <br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is e with AVX.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,e[i]);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is d.<br><span class=\"hljs-number\">2.100000</span><br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">6.400000</span><br><span class=\"hljs-number\">8.600000</span><br><span class=\"hljs-number\">5.500000</span><br><span class=\"hljs-number\">9.900000</span><br><span class=\"hljs-number\">7.700000</span><br><span class=\"hljs-number\">8.800000</span><br><span class=\"hljs-number\">6.600000</span><br><span class=\"hljs-keyword\">this</span> is e with AVX.<br><span class=\"hljs-number\">2.100000</span><br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">6.400000</span><br><span class=\"hljs-number\">8.600000</span><br><span class=\"hljs-number\">5.500000</span><br><span class=\"hljs-number\">9.900000</span><br><span class=\"hljs-number\">7.700000</span><br><span class=\"hljs-number\">8.800000</span><br><span class=\"hljs-number\">6.600000</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n<p>[<a href=\"https://stackoverflow.com/questions/16988199/how-to-choose-avx-compare-predicate-variants\">simd - How to choose AVX compare predicate variants - Stack Overflow</a>]: \t“Stack Overflow”</p>\n<p>[<a href=\"https://www.officedaytime.com/simd512e/simdimg/si.php?f=blendvpd\">blendvpd (officedaytime.com)</a>]: \t“_mm256_Blendv_pd()原理解释”</p>\n",
            "tags": [
                "AVX"
            ]
        }
    ]
}