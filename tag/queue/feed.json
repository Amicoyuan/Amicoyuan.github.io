{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"queue\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/07/30/DS004/",
            "url": "http://example.com/2022/07/30/DS004/",
            "title": "队列应用题",
            "date_published": "2022-07-30T06:23:10.000Z",
            "content_html": "<h1 id=\"队列应用题\"><a href=\"#队列应用题\" class=\"headerlink\" title=\"队列应用题\"></a>队列应用题</h1><h2 id=\"1-队列的顺序存储结构\"><a href=\"#1-队列的顺序存储结构\" class=\"headerlink\" title=\"1.队列的顺序存储结构\"></a>1.队列的顺序存储结构</h2><h3 id=\"图像描述\"><a href=\"#图像描述\" class=\"headerlink\" title=\"图像描述\"></a>图像描述</h3><p><strong>特别提醒：注意头尾指针初始位置，以及队列满时的位置！</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730143027917.png\" alt=\"image-20220730143027917\"></p>\n<h3 id=\"队列的顺序储存类型描述\"><a href=\"#队列的顺序储存类型描述\" class=\"headerlink\" title=\"队列的顺序储存类型描述\"></a>队列的顺序储存类型描述</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 100\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//定义队列中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> data[MaxSize];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//存放队列指针</span><br>    <span class=\"hljs-keyword\">int</span> rear,front;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//对头元素和队尾指针</span><br>&#125;SqQueue; <br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"2-循环队列\"><a href=\"#2-循环队列\" class=\"headerlink\" title=\"2.循环队列\"></a>2.循环队列</h2><h3 id=\"1-图像描述\"><a href=\"#1-图像描述\" class=\"headerlink\" title=\"1.图像描述\"></a>1.图像描述</h3><p><strong>特别提醒：方案一的本质就是牺牲掉一个储存单位来区分是对空还是队满！</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730143502062.png\" alt=\"image-20220730143502062\"></p>\n<h3 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    Q.front=Q.rear=<span class=\"hljs-number\">0</span>;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始化队首、队尾指针</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-判断空\"><a href=\"#3-判断空\" class=\"headerlink\" title=\"3.判断空\"></a>3.判断空</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">(SqQueue &amp;Q)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\t\t\t\t<span class=\"hljs-comment\">//队空条件</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-入队\"><a href=\"#4-入队\" class=\"headerlink\" title=\"4.入队\"></a>4.入队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">EnQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q,Elemtype x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>((Q.rear+<span class=\"hljs-number\">1</span>)%MaxSize == Q.front ) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t\t<span class=\"hljs-comment\">//队满则报错</span><br>    Q.data=[Q.rear]=x;<br>    Q.rear=(Q.rear+<span class=\"hljs-number\">1</span>)%Maxsize;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队尾指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-出队\"><a href=\"#5-出队\" class=\"headerlink\" title=\"5.出队\"></a>5.出队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(Squeue &amp;Q,Elemtype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear == Q.front )  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//队空则报错</span><br>    x=Q.data[Q.front];<br>    Q.front=(Q.front+<span class=\"hljs-number\">1</span>)%MaxSize;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//对头指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"3-队列的链式储存结构\"><a href=\"#3-队列的链式储存结构\" class=\"headerlink\" title=\"3.队列的链式储存结构\"></a>3.队列的链式储存结构</h2><h3 id=\"1-图像描述-1\"><a href=\"#1-图像描述-1\" class=\"headerlink\" title=\"1.图像描述\"></a>1.图像描述</h3><p><strong>不带头节点：</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730144635084.png\" alt=\"image-20220730144635084\"></p>\n<p><strong>带头节点：</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730144714656.png\" alt=\"image-20220730144714656\"></p>\n<h3 id=\"2-队列的链式储存类型描述为\"><a href=\"#2-队列的链式储存类型描述为\" class=\"headerlink\" title=\"2.队列的链式储存类型描述为\"></a>2.队列的链式储存类型描述为</h3><p><strong>特别提醒：这里需要强加掌握！</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span>&#123;</span>\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列结点</span><br>    <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span> *<span class=\"hljs-title\">next</span>;</span><br>&#125;LinkNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列</span><br>    linkNode *front,*rear;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队列的队头和队尾指针</span><br>&#125;LinkQueue;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3.初始化\"></a>3.初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q)</span></span>&#123;<br>    Q.front=Q.rear=(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));\t\t\t\t<span class=\"hljs-comment\">//建立头结点</span><br>    Q.front-&gt;next =<span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始为空</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-判队空\"><a href=\"#4-判队空\" class=\"headerlink\" title=\"4.判队空\"></a>4.判队空</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsEmpty</span><span class=\"hljs-params\">(LinkQueue &amp;Q)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-入队\"><a href=\"#5-入队\" class=\"headerlink\" title=\"5.入队\"></a>5.入队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Enqueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,Elentype x)</span></span>&#123;<br>    LinkNode *s =(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));<br>    s&gt;data = x;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//创建新结点，插入到表尾</span><br>    s-&gt;next =<span class=\"hljs-literal\">NULL</span>;<br>    Q.rear-&gt;next = s;<br>    Q.rear = s;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"6-出队\"><a href=\"#6-出队\" class=\"headerlink\" title=\"6.出队\"></a>6.出队</h3><p><strong>特别提醒：这里需要注意如果删除后变为空队列需要怎么处理！</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,Elentype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear)  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>   \tLinkNode *p=Q.front-&gt;next;<br>    x=p-&gt;data;<br>    Q.front-&gt;next = p-&gt;next;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear = p)<br>        Q.rear = Q.front;\t\t\t\t\t\t<span class=\"hljs-comment\">//若原队列中只有一个结点，删除后变空</span><br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Queue"
            ]
        }
    ]
}