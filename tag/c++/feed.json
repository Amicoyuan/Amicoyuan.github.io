{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"c++\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/23/Algorithm032/",
            "url": "http://example.com/2022/04/23/Algorithm032/",
            "title": "L2-036 网红点打卡攻略 (25 分)",
            "date_published": "2022-04-23T13:50:27.000Z",
            "content_html": "<h2 id=\"L2-036-网红点打卡攻略-25-分\"><a href=\"#L2-036-网红点打卡攻略-25-分\" class=\"headerlink\" title=\"L2-036 网红点打卡攻略 (25 分)\"></a>L2-036 网红点打卡攻略 (25 分)</h2><p>一个旅游景点，如果被带火了的话，就被称为“网红点”。大家来网红点游玩，俗称“打卡”。在各个网红点打卡的快（省）乐（钱）方法称为“攻略”。你的任务就是从一大堆攻略中，找出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>首先第一行给出两个正整数：网红点的个数 <em>N</em>（1&lt;<em>N</em>≤200）和网红点之间通路的条数 <em>M</em>。随后 <em>M</em> 行，每行给出有通路的两个网红点、以及这条路上的旅行花费（为正整数），格式为“网红点1 网红点2 费用”，其中网红点从 1 到 <em>N</em> 编号；同时也给出你家到某些网红点的花费，格式相同，其中你家的编号固定为 <code>0</code>。</p>\n<p>再下一行给出一个正整数 <em>K</em>，是待检验的攻略的数量。随后 <em>K</em> 行，每行给出一条待检攻略，格式为：</p>\n<p><em>n</em> <em>V</em>1 <em>V</em>2 ⋯ Vn</p>\n<p>其中 <em>n</em>(≤200) 是攻略中的网红点数，<em>Vi</em> 是路径上的网红点编号。这里假设你从家里出发，从 <em>V</em>1 开始打卡，最后从 <em>Vn</em> 回家。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在第一行输出满足要求的攻略的个数。</p>\n<p>在第二行中，首先输出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略的序号（从 1 开始），然后输出这个攻略的总路费，其间以一个空格分隔。如果这样的攻略不唯一，则输出序号最小的那个。</p>\n<p>题目保证至少存在一个有效攻略，并且总路费不超过 109。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">6 13\n0 5 2\n6 2 2\n6 0 1\n3 4 2\n1 5 2\n2 5 1\n3 1 1\n4 1 2\n1 6 1\n6 3 2\n1 2 1\n4 5 3\n2 0 2\n7\n6 5 1 4 3 6 2\n6 5 2 1 6 3 4\n8 6 2 1 6 3 4 5 2\n3 2 1 5\n6 6 1 3 4 5 2\n7 6 2 1 3 4 5 2\n6 5 2 1 4 3 6\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">3\n5 11\n</code></pre>\n<h3 id=\"样例说明：\"><a href=\"#样例说明：\" class=\"headerlink\" title=\"样例说明：\"></a>样例说明：</h3><p>第 2、3、4、6 条都不满足攻略的基本要求，即不能做到从家里出发，在每个网红点打卡仅一次，且能回到家里。所以满足条件的攻略有 3 条。</p>\n<p>第 1 条攻略的总路费是：(0-&gt;5) 2 + (5-&gt;1) 2 + (1-&gt;4) 2 + (4-&gt;3) 2 + (3-&gt;6) 2 + (6-&gt;2) 2 + (2-&gt;0) 2 &#x3D; 14；</p>\n<p>第 5 条攻略的总路费同理可算得：1 + 1 + 1 + 2 + 3 + 1 + 2 &#x3D; 11，是一条更省钱的攻略；</p>\n<p>第 7 条攻略的总路费同理可算得：2 + 1 + 1 + 2 + 2 + 2 + 1 &#x3D; 11，与第 5 条花费相同，但序号较大，所以不输出。</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint n,m;\nint g[205][205];\nint minsize=INT_MAX;\t\t\t//初始化为INT_MAX\nint minid=0;\nint main()\n&#123;\n    cin&gt;&gt;n&gt;&gt;m;\n    int cnt=0;\n    memset(g,0,sizeof(g));\n    for (int i = 0; i &lt;m ; ++i) &#123;\n        int a,b,c;\n        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;\n        g[a][b]=c;\n        g[b][a]=c;\n    &#125;\n    int time;\n    cin&gt;&gt;time;\n    for (int j = 0; j &lt;time ; ++j) &#123;\n        int k;\n        cin&gt;&gt;k;\n        int roll[k+5];\n        int has[k+5];\n        memset(has,0,sizeof(has));\n        roll[0]=roll[k+1]=0;\t\t\t\t\t//起点和终点必定是家\n        for (int i = 1; i &lt;=k ; ++i) &#123;\n            cin&gt;&gt;roll[i];\n            if(has[roll[i]]) has[0]=1;\t\t\t//每个打卡点仅能打卡一次\n            else has[roll[i]]=1;\n        &#125;\n        int flag=1;\n        int tmpsize=0;\n        if(k!=n||has[0]) continue;\n        for (int l = 1; l &lt;=k+1 ; ++l) &#123;\n            if(g[roll[l-1]][roll[l]]==0)\n            &#123;\n                flag=0;\n                break;\n            &#125;\n            tmpsize+=g[roll[l-1]][roll[l]];\n        &#125;\n        if(flag==1)\n        &#123;\n            if(tmpsize&lt;minsize)&#123;\n                minsize=tmpsize;\n                minid=j+1;\n\n            &#125;\n            cnt++;\n        &#125;\n    &#125;\n    cout&lt;&lt;cnt&lt;&lt;endl;\n    cout&lt;&lt;minid&lt;&lt;&quot; &quot;&lt;&lt;minsize&lt;&lt;endl;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482059\">题目详情 - L2-036 网红点打卡攻略 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵"
            ]
        },
        {
            "id": "http://example.com/2022/04/23/Algorithm031/",
            "url": "http://example.com/2022/04/23/Algorithm031/",
            "title": "L2-039 清点代码库 (25 分)",
            "date_published": "2022-04-23T13:44:47.000Z",
            "content_html": "<h2 id=\"L2-039-清点代码库-25-分\"><a href=\"#L2-039-清点代码库-25-分\" class=\"headerlink\" title=\"L2-039 清点代码库 (25 分)\"></a>L2-039 清点代码库 (25 分)</h2><p><img src=\"/2022/04/23/Algorithm031/58e6a034-993d-4049-8deb-23d769c8597e.jpg\" alt=\"code.jpg\"></p>\n<p>上图转自新浪微博：“阿里代码库有几亿行代码，但其中有很多功能重复的代码，比如单单快排就被重写了几百遍。请设计一个程序，能够将代码库中所有功能重复的代码找出。各位大佬有啥想法，我当时就懵了，然后就挂了。。。”</p>\n<p>这里我们把问题简化一下：首先假设两个功能模块如果接受同样的输入，总是给出同样的输出，则它们就是功能重复的；其次我们把每个模块的输出都简化为一个整数（在 <strong>int</strong> 范围内）。于是我们可以设计一系列输入，检查所有功能模块的对应输出，从而查出功能重复的代码。你的任务就是设计并实现这个简化问题的解决方案。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出 2 个正整数，依次为 <em>N</em>（≤104）和 <em>M</em>（≤102），对应功能模块的个数和系列测试输入的个数。</p>\n<p>随后 <em>N</em> 行，每行给出一个功能模块的 <em>M</em> 个对应输出，数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在第一行输出不同功能的个数 <em>K</em>。随后 <em>K</em> 行，每行给出具有这个功能的模块的个数，以及这个功能的对应输出。数字间以 1 个空格分隔，行首尾不得有多余空格。输出首先按模块个数非递增顺序，如果有并列，则按输出序列的递增序给出。</p>\n<p>注：所谓数列 { <em>A</em>1, …, <em>A</em>M } 比 { <em>B</em>1, …, <em>B</em>M } 大，是指存在 1≤i&lt;*M*，使得 *A*1&#x3D;*B*1，…，*Ai*&#x3D;*Bi* 成立，且 *Ai*+1&gt;<em>B</em>+1。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">7 3\n35 28 74\n-1 -1 22\n28 74 35\n-1 -1 22\n11 66 0\n35 28 74\n35 28 74\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">4\n3 35 28 74\n2 -1 -1 22\n1 11 66 0\n1 28 74 35\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>利用map的映射关系</strong></p>\n<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nmap&lt;vector&lt;int&gt;,int&gt; mp;   //key，value\nvector&lt;int&gt; tmp;\nint n,m;\nbool cmp(pair&lt;vector&lt;int&gt;,int&gt; a,pair&lt;vector&lt;int&gt;,int&gt; b)\n&#123;\n    if(a.second==b.second)\n    &#123;\n        return a.first&lt;b.first;\n    &#125;\n    return a.second&gt;b.second;\n\n&#125;\nint main()\n&#123;\n    cin&gt;&gt;n&gt;&gt;m;\n    for (int i = 0; i &lt;n ; ++i) &#123;\n        for (int j = 0; j &lt; m; ++j) &#123;\n            int num;\n            cin&gt;&gt;num;\n            tmp.push_back(num);\n        &#125;\n        mp[tmp]++;\n        tmp.clear();\n    &#125;\n    vector&lt;pair&lt;vector&lt;int&gt;,int&gt;&gt; v(mp.begin(),mp.end());\t\t//把map类型转化成vector\n    cout&lt;&lt;v.size()&lt;&lt;endl;\n    sort(v.begin(),v.end(),cmp);\t\t\t\t\t\t\t\t//sort排序，注意终点和起点\n    for (int k = 0; k &lt;v.size() ; ++k) &#123;\n        cout&lt;&lt;v[k].second&lt;&lt;&quot; &quot;;\n        for (int i = 0; i &lt;m ; ++i) &#123;\n            if(i!=m-1)&#123;\n                cout&lt;&lt;v[k].first[i]&lt;&lt;&quot; &quot;;\n            &#125; else&#123;\n                cout&lt;&lt;v[k].first[i]&lt;&lt;endl;\n            &#125;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652362\">题目详情 - L2-039 清点代码库 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "Vector",
                "Map",
                "Pair"
            ]
        },
        {
            "id": "http://example.com/2022/04/23/Algorithm030/",
            "url": "http://example.com/2022/04/23/Algorithm030/",
            "title": "L2-005 集合相似度 (25 分)",
            "date_published": "2022-04-23T13:39:53.000Z",
            "content_html": "<h2 id=\"L2-005-集合相似度-25-分\"><a href=\"#L2-005-集合相似度-25-分\" class=\"headerlink\" title=\"L2-005 集合相似度 (25 分)\"></a>L2-005 集合相似度 (25 分)</h2><p>给定两个整数集合，它们的相似度定义为：Nc&#x2F;Nt×100%。其中Nc是两个集合都有的不相等整数的个数，Nt是两个集合一共有的不相等整数的个数。你的任务就是计算任意一对给定集合的相似度。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤50），是集合的个数。随后<em>N</em>行，每行对应一个集合。每个集合首先给出一个正整数<em>M</em>（≤104），是集合中元素的个数；然后跟<em>M</em>个[0,109]区间内的整数。</p>\n<p>之后一行给出一个正整数<em>K</em>（≤2000），随后<em>K</em>行，每行对应一对需要计算相似度的集合的编号（集合从1到<em>N</em>编号）。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每一对需要计算的集合，在一行中输出它们的相似度，为保留小数点后2位的百分比数字。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">3\n3 99 87 101\n4 87 101 5 87\n7 99 101 18 5 135 18 99\n2\n1 2\n1 3\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">50.00%\n33.33%\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>双set模拟</strong></p>\n<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n&#123;\n    int n;\n    set&lt;int&gt; s[55];\n    cin&gt;&gt;n;\n    for (int i = 0; i &lt;n ; ++i) &#123;\n        int time;\n        cin&gt;&gt;time;\n        for (int j = 0; j &lt;time ; ++j) &#123;\n            int num;\n            cin&gt;&gt;num;\n            s[i].insert(num);\n        &#125;\n    &#125;\n    int find;\n    cin&gt;&gt;find;\n    for (int l = 0; l &lt;find ; ++l) &#123;\n        int a,b;\n        cin&gt;&gt;a&gt;&gt;b;\n        int sum=0;\n        set&lt;int&gt;::iterator it;\t\t\t\t\t\t\t\t//迭代器\n        int cnt=0;\n        for (it=s[a-1].begin(); it!=s[a-1].end() ; it++) &#123;\n            if(s[b-1].find(*it)!=s[b-1].end())&#123;\t\t\t\t//找到了\n                cnt++;\t\t\t\t\t\t\t\t\t\t//Nc\n            &#125;\n        &#125;\n        sum=s[a-1].size()+s[b-1].size()-cnt;\t\t\t\t//Nt=两个集合的总个数-相同个数\n        double ans=double(double(cnt)/double(sum))*100.0;\n        printf(&quot;%.2lf%\\n&quot;,ans);\n\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805070149828608\">题目详情 - L2-005 集合相似度 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "Set",
                "团体程序设计天梯赛",
                "模拟"
            ]
        },
        {
            "id": "http://example.com/2022/04/16/Algorithm028/",
            "url": "http://example.com/2022/04/16/Algorithm028/",
            "title": "L2-010 排座位 (25 分)",
            "date_published": "2022-04-16T06:57:46.000Z",
            "content_html": "<h2 id=\"L2-010-排座位-25-分\"><a href=\"#L2-010-排座位-25-分\" class=\"headerlink\" title=\"L2-010 排座位 (25 分)\"></a><strong>L2-010 排座位 (25 分)</strong></h2><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1 宾客2 关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p>\n<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OK but...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">7 8 4\n5 6 1\n2 7 -1\n1 3 1\n3 4 1\n6 7 -1\n1 2 1\n1 4 1\n2 3 -1\n3 4\n5 7\n2 3\n7 2\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">No problem\nOK\nOK but...\nNo way\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵 + 并查集</strong></p>\n<p><strong>并查集具体链接：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/01/04/Algorithm004/\">并查集 - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint pre[100];\t\t\t\t//父节点\nint deep[100];\t\t\t\t//深度\nint g[101][101];\t\t\t//邻接矩阵建图\nvoid init(int n)&#123;\n    for (int i = 0; i &lt;n ; ++i) &#123;\n        pre[i]=i;\n        deep[i]=0;\n    &#125;\n&#125;\nint find(int x)&#123;\n    if(pre[x]==x)&#123;\n        return x;\n    &#125; else&#123;\n        return pre[x]=find(pre[x]);\n    &#125;\n&#125;\nvoid unit(int x,int y)&#123;\n    x=find(x);\n    y=find(y);\n    if(x==y) return;\n    if(deep[x]&lt;deep[y])&#123;\n        pre[x]=y;\n    &#125;else&#123;\n        pre[y]=x;\n        if(deep[x]==deep[y])&#123;\n            deep[x]++;\n        &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    int n,m,k;\n    init(105);\n    memset(g,0,sizeof(g));\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;\n    for (int i = 0; i &lt;m ; ++i) &#123;\n        int a,b,c;\n        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;\n        g[a][b]=g[b][a]=c;\n        if(c==1) unit(a,b);\t\t\t\t\t//如果是朋友则合并\n    &#125;\n    for (int j = 0; j &lt;k ; ++j) &#123;\n        int a,b;\n        cin&gt;&gt;a&gt;&gt;b;\n        if(g[a][b]==1&amp;&amp;g[b][a]==1) cout&lt;&lt;&quot;No problem&quot;&lt;&lt;endl;\n        else if(g[a][b]==0&amp;&amp;g[b][a]==0) cout&lt;&lt;&quot;OK&quot;&lt;&lt;endl;\t\t\t//两人毫无关系\n        else if(g[a][b]==-1&amp;&amp;g[b][a]==-1&amp;&amp;find(a)==find(b)) cout&lt;&lt;&quot;OK but...&quot;&lt;&lt;endl;\t//敌对且有共同朋友\n        else if(g[a][b]==-1&amp;&amp;g[b][a]==-1) cout&lt;&lt;&quot;No way&quot;&lt;&lt;endl;\t\t//仅敌对\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/weixin_45260385/article/details/109752008\">(20条消息) 【PTA】 L2-010 排座位 (25分) 【简单并查集】_黑桃️的博客-CSDN博客</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066135879680\">题目详情 - L2-010 排座位 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "并查集"
            ]
        },
        {
            "id": "http://example.com/2022/04/16/Algorithm027/",
            "url": "http://example.com/2022/04/16/Algorithm027/",
            "title": "L2-009 抢红包 (25 分)",
            "date_published": "2022-04-16T06:57:38.000Z",
            "content_html": "<h2 id=\"L2-009-抢红包-25-分\"><a href=\"#L2-009-抢红包-25-分\" class=\"headerlink\" title=\"L2-009 抢红包 (25 分)\"></a><strong>L2-009 抢红包 (25 分)</strong></h2><p>没有人没抢过红包吧…… 这里给出<em>N</em>个人之间互相发红包、抢红包的记录，请你统计一下他们抢红包的收获。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤104），即参与发红包和抢红包的总人数，则这些人从1到<em>N</em>编号。随后<em>N</em>行，第<em>i</em>行给出编号为<em>i</em>的人发红包的记录，格式如下：</p>\n<p><em>K     N</em>1 <em>P</em>1⋯ NK PK</p>\n<p>其中<em>K</em>（0≤<em>K</em>≤20）是发出去的红包个数，<em>N</em>i<em>是抢到红包的人的编号，</em>Pi（&gt;0）是其抢到的红包金额（以分为单位）。注意：对于同一个人发出的红包，每人最多只能抢1次，不能重复抢。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>按照收入金额从高到低的递减顺序输出每个人的编号和收入金额（以元为单位，输出小数点后2位）。每个人的信息占一行，两数字间有1个空格。如果收入金额有并列，则按抢到红包的个数递减输出；如果还有并列，则按个人编号递增输出。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">10\n3 2 22 10 58 8 125\n5 1 345 3 211 5 233 7 13 8 101\n1 7 8800\n2 1 1000 2 1000\n2 4 250 10 320\n6 5 11 9 22 8 33 7 44 10 55 4 2\n1 3 8800\n2 1 23 2 123\n1 8 250\n4 2 121 4 516 7 112 9 10\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">1 11.63\n2 3.63\n8 3.63\n3 2.11\n7 1.69\n6 -1.67\n9 -2.18\n10 -3.26\n5 -3.26\n4 -12.32\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>结构体 + Sort</strong></p>\n<p><strong>需要注意的就是double类型相等的比较</strong></p>\n<p><strong>首先，浮点数在计算机中并不能精确的表示，所以在判断两个double类型的数时需要其他的手段，而不是直接 a&#x3D;&#x3D; b</strong></p>\n<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct student&#123;\n    int id=0;\n    double money=0;\n    int cnt=0;\n&#125;;\ndouble dis=1e-6;\t\t\t\t//定义一个误差\nbool cmp(student a,student b)&#123;\n    if(abs(a.money-b.money)&lt;dis)&#123;\t\t\t\t//如果两个double型相减在误差的范围内，我们认定这两个double类型相等\n        if(a.cnt==b.cnt)&#123;\n            return a.id&lt;b.id;\n        &#125;else&#123;\n            return a.cnt&gt;b.cnt;\n        &#125;\n    &#125;\n    return a.money&gt;b.money;\n&#125;\nint main()\n&#123;\n    int n;\n    cin&gt;&gt;n;\n    student st[n+5];\n    for (int i = 0; i &lt;n ; ++i) &#123;\n        int time;\n        cin&gt;&gt;time;\n        st[i].id=i+1;\n        for (int j = 0; j &lt;time ; ++j) &#123;\n            int p;\n            double x;\n            cin&gt;&gt;p&gt;&gt;x;\n            st[p-1].money+=x/100;\n            st[i].money-=x/100;\n            st[p-1].cnt++;\t\t\t\t\t//记录抢到的红包数\n        &#125;\n    &#125;\n    sort(st,st+n,cmp);\t\t\t\t\t\t//sort从数组下标0开始排序，左闭右开\n    for (int k = 0; k &lt;n ; ++k) &#123;\n        printf(&quot;%d %.2lf\\n&quot;,st[k].id,st[k].money);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/dingpiao190/article/details/73512811?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=1\">(20条消息) double类型是否相等的判断方法_dingpiao190的博客-CSDN博客_double判断相等</a></p>\n<p><a href=\"https://blog.csdn.net/patrick_star_cowboy/article/details/82083392\">(20条消息) 如何判断两个double类型的数是否相等？_Patrick-Star的博客-CSDN博客_两个double怎么判断相等</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066890854400\">题目详情 - L2-009 抢红包 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "结构体",
                "Double类型相等比较"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/Algorithm026/",
            "url": "http://example.com/2022/04/15/Algorithm026/",
            "title": "L2-003 月饼 (25 分)",
            "date_published": "2022-04-15T14:03:52.000Z",
            "content_html": "<h2 id=\"L2-003-月饼-25-分\"><a href=\"#L2-003-月饼-25-分\" class=\"headerlink\" title=\"L2-003 月饼 (25 分)\"></a>L2-003 月饼 (25 分)</h2><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p>\n<p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45&#x2F;2 &#x3D; 94.5（亿元）。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em> 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 <em>D</em> 表示市场最大需求量。随后一行给出 <em>N</em> 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 <em>N</em> 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">3 20\n18 15 10\n75 72 45\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">94.50\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>贪心 + Sort</strong></p>\n<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct mooncake&#123;\n    double pow;\n    double price;\n&#125;;\nbool cmp(mooncake a,mooncake b)&#123;\n    return a.price*1.0/a.pow&gt;b.price*1.0/b.pow;\t\t\t\t//返回单价高的\n&#125;\nint main()\n&#123;\n    int n;\n    double d;\n    cin&gt;&gt;n&gt;&gt;d;\n    mooncake m[n];\n    for (int i = 0; i &lt; n; ++i) &#123;\n        cin&gt;&gt;m[i].pow;\n    &#125;\n    for (int j = 0; j &lt;n ; ++j) &#123;\n        cin&gt;&gt;m[j].price;\n    &#125;\n    sort(m,m+n,cmp);\n    double price=0.0;\n    double tmpd=d;\n    for (int k = 0; k &lt;n ; ++k) &#123;\t\t\t\t\t\t//模拟求解\n        if(m[k].pow&lt;=tmpd)&#123;\n            tmpd-=m[k].pow;\n            price+=m[k].price;\n        &#125;else if(m[k].pow&gt;tmpd)&#123;\n            price+=tmpd*(m[k].price/m[k].pow);\n            break;\n        &#125;\n    &#125;\n    printf(&quot;%.2f\\n&quot;,price);\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805071789801472\">题目详情 - L2-003 月饼 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "结构体",
                "贪心"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/Algorithm025/",
            "url": "http://example.com/2022/04/15/Algorithm025/",
            "title": "L2-013 红色警报 (25 分)",
            "date_published": "2022-04-15T13:09:30.000Z",
            "content_html": "<h2 id=\"L2-013-红色警报-25-分\"><a href=\"#L2-013-红色警报-25-分\" class=\"headerlink\" title=\"L2-013 红色警报 (25 分)\"></a>L2-013 红色警报 (25 分)</h2><p>战争中保持各个城市间的连通性非常重要。本题要求你编写一个报警程序，当失去一个城市导致国家被分裂为多个无法连通的区域时，就发出红色警报。注意：若该国本来就不完全连通，是分裂的k个区域，而失去一个城市并不改变其他城市之间的连通性，则不要发出警报。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出两个整数<code>N</code>（0 &lt; <code>N</code> ≤ 500）和<code>M</code>（≤ 5000），分别为城市个数（于是默认城市从0到<code>N</code>-1编号）和连接两城市的通路条数。随后<code>M</code>行，每行给出一条通路所连接的两个城市的编号，其间以1个空格分隔。在城市信息之后给出被攻占的信息，即一个正整数<code>K</code>和随后的<code>K</code>个被攻占的城市的编号。</p>\n<p>注意：输入保证给出的被攻占的城市编号都是合法的且无重复，但并不保证给出的通路没有重复。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个被攻占的城市，如果它会改变整个国家的连通性，则输出<code>Red Alert: City k is lost!</code>，其中<code>k</code>是该城市的编号；否则只输出<code>City k is lost.</code>即可。如果该国失去了最后一个城市，则增加一行输出<code>Game Over.</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">5 4\n0 1\n1 3\n3 0\n0 4\n5\n1 2 0 4 3\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">City 1 is lost.\nCity 2 is lost.\nRed Alert: City 0 is lost!\nCity 4 is lost.\nCity 3 is lost.\nGame Over.\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵建图 + DFS统计连通分量数</strong></p>\n<p><strong>对于无向图来说，dfstrave()中dfs()或bfstrave()中bfs()的调用次数等于该图的连通分量数</strong></p>\n<p><strong>无向图中的极大连通子图称为连通分量</strong></p>\n<p><strong>极大连通子图必须连通，且包含尽可能多的顶点和边</strong></p>\n<pre><code class=\"c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint n,m;\nint g[505][505];\t\t\t\t\t\t//邻接矩阵存图\nint visit[505];\t\t\t\t\t\t\t//标记访问数组\nint lost[505];\t\t\t\t\t\t\t//记录被攻占的城市\nvoid dfs(int node)&#123;\t\t\t\t\t\t//正常的DFS\n    visit[node]=1;\n    for(int i=0;i&lt;n;i++)\n    &#123;\n        if(visit[i]==0&amp;&amp;g[node][i]==1)\n        &#123;\n            dfs(i);\n        &#125;\n    &#125;\n&#125;\nint dfstrave()&#123;\n    int cnt=0;\n    memset(visit,0,sizeof(visit));\t\t\t//初始化访问数组\n    for(int i=0;i&lt;n;i++)&#123;\n        if(lost[i]==1) visit[i]=1;\t\t\t//如果该城市被攻占，则标记他为以访问\n    &#125;\n    for(int i=0;i&lt;n;i++)&#123;\n        if(visit[i]==0)&#123;\n            dfs(i);\n            cnt++;      \t\t\t\t\t//统计连通分量数\n        &#125;\n    &#125;\n    return cnt;\n&#125;\nint main()\n&#123;\n    cin&gt;&gt;n&gt;&gt;m;\n    memset(lost,0,sizeof(lost));\t\t\t//初始化\n    memset(g,0,sizeof(g));\t\t\t\t\t//初始化\n    for(int i=0;i&lt;m;i++)&#123;\n        int a,b;\n        cin&gt;&gt;a&gt;&gt;b;\n        g[a][b]=g[b][a]=1;\t\t\t\t\t//存储无向图\n    &#125;\n    int cnt=dfstrave();\t\t\t\t\t\t//获得初始的连通分量数\n    int k;\n    cin&gt;&gt;k;\n    for(int w=0;w&lt;k;w++)&#123;\n        int city;\n        cin&gt;&gt;city;\n        lost[city]=1;\t\t\t\t\t\t//记录该城市被攻占\n        for(int i=0;i&lt;n;i++)&#123;\n            if(g[city][i]==1)&#123;\t\t\t\t\n                g[city][i]=g[i][city]=0;\t//标记和他相连的城市不再相连\n            &#125;\n        &#125;\n        int tempcnt=dfstrave();\t\t\t\t//当前的连通分量\n        if(tempcnt&lt;=cnt)&#123;\t\t\t\t\t//如果当前的连通分量小于等于原来的连通分量，说明图的连通性没有被改变\n            printf(&quot;City %d is lost.\\n&quot;, city);\n        &#125;else&#123;\t\t\t\t\t\t\t\t//否则，连通性被改变了\n            printf(&quot;Red Alert: City %d is lost!\\n&quot;, city);\n        &#125;\n        cnt=tempcnt;\t\t\t\t\t\t//更新连通分量\n        if(w==n-1)&#123;\t\t\t\t\t\t\t//城市已经被攻占完毕\n            printf(&quot;Game Over.\\n&quot;);\n        &#125;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805063963230208\">题目详情 - L2-013 红色警报 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "DFS"
            ]
        },
        {
            "id": "http://example.com/2022/04/14/Algorithm024/",
            "url": "http://example.com/2022/04/14/Algorithm024/",
            "title": "L2-011 玩转二叉树 (25 分)",
            "date_published": "2022-04-14T06:01:10.000Z",
            "content_html": "<h2 id=\"L2-011-玩转二叉树-25-分\"><a href=\"#L2-011-玩转二叉树-25-分\" class=\"headerlink\" title=\"L2-011 玩转二叉树 (25 分)\"></a><strong>L2-011 玩转二叉树 (25 分)</strong></h2><p>给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<code>N</code>（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">7\n1 2 3 4 5 6 7\n4 1 3 2 6 5 7\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">4 6 1 7 5 3 2\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>镜面反转即为在层序遍历时交换左右子树的遍历顺序，左-&gt;右变成右-&gt;左</strong></p>\n<p><strong>前序 + 中序 建树 + BFS</strong></p>\n<p><strong>建树详细过程：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/04/07/Algorithm014/\">由遍历顺序构建二叉树(前序+中序;后序+中序) - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef struct BiTNode&#123;\n    int data;\n    struct BiTNode *lchild,*rchild;\n&#125;BiTNode,*BiTree;\nint n;\nint in[35];\nint pre[35];\nBiTree PostCreate(int prel,int prer,int inl,int inr)&#123;\t\t\t\t\t//前序加中序建树\n    if(prel&gt;prer)&#123;\n        return NULL;\n    &#125;\n    BiTNode *root;\n    root=(BiTNode*)malloc(sizeof(BiTNode));\n    root-&gt;data=pre[prel];\n    int index=0;\n    for (int i = inl; i &lt;=inr; ++i) &#123;\n        if(pre[prel]==in[i])&#123;\n            index=i;\n            break;\n        &#125;\n    &#125;\n    int numleft=index-inl;\n    root-&gt;lchild=PostCreate(prel+1,prel+numleft,inl,index-1);\n    root-&gt;rchild=PostCreate(prel+numleft+1,prer,index+1,inr);\n    return root;\n&#125;\nvoid LevelOrder(BiTree T)\n&#123;\n    queue&lt;BiTree&gt; q;\n    q.push(T);\n    int i=0;\n    while (!q.empty())&#123;\n        BiTNode *tmp =q.front();\n        q.pop();\n        if(i!=n-1)&#123;\t\t\t\t\t\t\t\t\t\t//输出格式控制\n            cout&lt;&lt;tmp-&gt;data&lt;&lt;&quot; &quot;;\n        &#125;else&#123;\n            cout&lt;&lt;tmp-&gt;data;\n        &#125;\n        i++;\n        if(tmp-&gt;rchild!=NULL)&#123;\t\t\t\t\t\t\t//镜面反转，左-&gt;右变成右-&gt;左\n            q.push(tmp-&gt;rchild);\n        &#125;\n        if(tmp-&gt;lchild!=NULL)&#123;\n            q.push(tmp-&gt;lchild);\n        &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    BiTree tree;\n    tree=NULL;\n    cin&gt;&gt;n;\n    for (int i = 0; i &lt;n ; ++i) &#123;\n        cin&gt;&gt;in[i];\n    &#125;\n    for (int j = 0; j &lt;n ; ++j) &#123;\n        cin&gt;&gt;pre[j];\n    &#125;\n    tree=PostCreate(0,n-1,0,n-1);\n    LevelOrder(tree);\n    cout&lt;&lt;endl;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805065406070784\">题目详情 - L2-011 玩转二叉树 (25 分) (pintia.cn)</a></p>\n<p><a href=\"https://xingyuanjie.top/2022/04/07/Algorithm014/\">由遍历顺序构建二叉树(前序+中序;后序+中序) - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree",
                "BFS"
            ]
        },
        {
            "id": "http://example.com/2022/04/14/Algorithm023/",
            "url": "http://example.com/2022/04/14/Algorithm023/",
            "title": "L2-035 完全二叉树的层序遍历 (25 分)",
            "date_published": "2022-04-14T06:01:05.000Z",
            "content_html": "<h2 id=\"L2-035-完全二叉树的层序遍历-25-分\"><a href=\"#L2-035-完全二叉树的层序遍历-25-分\" class=\"headerlink\" title=\"L2-035 完全二叉树的层序遍历 (25 分)\"></a>L2-035 完全二叉树的层序遍历 (25 分)</h2><p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是<strong>完美二叉树</strong>。对于深度为 <em>D</em> 的，有 <em>N</em> 个结点的二叉树，若其结点对应于相同深度完美二叉树的层序遍历的前 <em>N</em> 个结点，这样的树就是<strong>完全二叉树</strong>。</p>\n<p>给定一棵完全二叉树的后序遍历，请你给出这棵树的层序遍历结果。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出正整数 <em>N</em>（≤30），即树中结点个数。第二行给出后序遍历序列，为 <em>N</em> 个不超过 100 的正整数。同一行中所有数字都以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出该树的层序遍历序列。所有数字都以 1 个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">8\n91 71 2 34 10 15 55 18\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">18 34 55 71 2 10 15 91\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>后序遍历建树 + 完全二叉树性质</strong></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint tree[10001];\nint n;\nvoid post(int i)&#123;\t\t//根据后序遍历建树\n    if(2*i&lt;=n)&#123;\t\t\t//当2*i&lt;=n时，结点i的左孩子编号为2*i，否则无左孩子\n        post(2*i);\n    &#125;\n    if(2*i+1&lt;=n)&#123;\t\t//当2*i+1&lt;=n时，结点i的右孩子编号为2*i+1，否则无右孩子\n        post(2*i+1);\n    &#125;\n    cin&gt;&gt;tree[i];\n&#125;\nint main()\n&#123;\n\n    cin&gt;&gt;n;\n    post(1);           //后序遍历建树\n    for (int i = 1; i &lt;=n ; ++i) &#123;\t\t\t\t\t\t//顺序输出即为层序遍历\n        if(i!=n)&#123;\n            cout&lt;&lt;tree[i]&lt;&lt;&quot; &quot;;\n        &#125;else&#123;\n            cout&lt;&lt;tree[i];\n        &#125;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482058\">https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482058</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree"
            ]
        },
        {
            "id": "http://example.com/2022/04/13/Algorithm022/",
            "url": "http://example.com/2022/04/13/Algorithm022/",
            "title": "L2-031 深入虎穴 (25 分)",
            "date_published": "2022-04-13T11:09:46.000Z",
            "content_html": "<p>著名的王牌间谍 007 需要执行一次任务，获取敌方的机密情报。已知情报藏在一个地下迷宫里，迷宫只有一个入口，里面有很多条通路，每条路通向一扇门。每一扇门背后或者是一个房间，或者又有很多条路，同样是每条路通向一扇门…… 他的手里有一张表格，是其他间谍帮他收集到的情报，他们记下了每扇门的编号，以及这扇门背后的每一条通路所到达的门的编号。007 发现不存在两条路通向同一扇门。</p>\n<p>内线告诉他，情报就藏在迷宫的最深处。但是这个迷宫太大了，他需要你的帮助 —— 请编程帮他找出距离入口最远的那扇门。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入首先在一行中给出正整数 <em>N</em>（&lt;105），是门的数量。最后 <em>N</em> 行，第 <em>i</em> 行（1≤<em>i</em>≤<em>N</em>）按以下格式描述编号为 <em>i</em> 的那扇门背后能通向的门：</p>\n<pre><code>K D[1] D[2] ... D[K]\n</code></pre>\n<p>其中 <code>K</code> 是通道的数量，其后是每扇门的编号。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">13\n3 2 3 4\n2 5 6\n1 7\n1 8\n1 9\n0\n2 11 10\n1 13\n0\n0\n1 12\n0\n0\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">12\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表 + BFS</strong></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; v[100005];\nint book[100005];\nint start=0;\nint bfs()&#123;\t\t\t\t\t\t\t\t//BFS\n    queue&lt;int&gt; q;\n    q.push(start);\t\t\t\t\t\t//根节点入队\n    int x;\n    while(!q.empty())&#123;\n        x=q.front();\n        q.pop();\n        for (int i = 0; i &lt;v[x].size() ; ++i) &#123;\t\t\t\t\n            q.push(v[x][i]);\n        &#125;\n    &#125;\t\t\t\t\t\t\t\t\t//在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。\n    return x;\t\t\t\t\t\t\t//所以最后一层只有一个结点，所以BFS最后一个元素，即为最远的门\n&#125;\nint main()\n&#123;\n    int n;\n    cin&gt;&gt;n;\n    for (int i = 1; i &lt;=n ; ++i) &#123;\n        int time;\n        cin&gt;&gt;time;\n        for (int j = 1; j &lt;=time ; ++j) &#123;\n            int num;\n            cin&gt;&gt;num;\n            book[num]=1;\n            v[i].push_back(num);\n\n        &#125;\n    &#125;\n    for (int k = 1; k &lt;=n ; ++k) &#123;\t\t\t//找入口\n        if(book[k]==0) start=k;\t\t\t\t//没有门通向的门，即为入口\n    &#125;\n    int ans=bfs();\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1111914599412858888\">题目详情 - L2-031 深入虎穴 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "邻接表",
                "Vector",
                "Binary tree",
                "BFS"
            ]
        },
        {
            "id": "http://example.com/2022/04/13/Algorithm021/",
            "url": "http://example.com/2022/04/13/Algorithm021/",
            "title": "L2-040 哲哲打游戏 (25 分)",
            "date_published": "2022-04-13T11:09:41.000Z",
            "content_html": "<h2 id=\"L2-040-哲哲打游戏-25-分\"><a href=\"#L2-040-哲哲打游戏-25-分\" class=\"headerlink\" title=\"L2-040 哲哲打游戏 (25 分)\"></a><strong>L2-040 哲哲打游戏 (25 分)</strong></h2><p>哲哲是一位硬核游戏玩家。最近一款名叫《达诺达诺》的新游戏刚刚上市，哲哲自然要快速攻略游戏，守护硬核游戏玩家的一切！</p>\n<p>为简化模型，我们不妨假设游戏有 <em>N</em> 个剧情点，通过游戏里不同的操作或选择可以从某个剧情点去往另外一个剧情点。此外，游戏还设置了一些<strong>存档</strong>，在某个剧情点可以将玩家的游戏进度保存在一个档位上，读取存档后可以回到剧情点，重新进行操作或者选择，到达不同的剧情点。</p>\n<p>为了追踪硬核游戏玩家哲哲的攻略进度，你打算写一个程序来完成这个工作。假设你已经知道了游戏的全部剧情点和流程，以及哲哲的游戏操作，请你输出哲哲的游戏进度。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行是两个正整数 <em>N</em> 和 <em>M</em> (1≤<em>N</em>,<em>M</em>≤105)，表示总共有 <em>N</em> 个剧情点，哲哲有 <em>M</em> 个游戏操作。</p>\n<p>接下来的 <em>N</em> 行，每行对应一个剧情点的发展设定。第 <em>i</em> 行的第一个数字是 <em>K**i</em>，表示剧情点 <em>i</em> 通过一些操作或选择能去往下面 <em>K**i</em> 个剧情点；接下来有 <em>K**i</em> 个数字，第 <em>k</em> 个数字表示做第 <em>k</em> 个操作或选择可以去往的剧情点编号。</p>\n<p>最后有 <em>M</em> 行，每行第一个数字是 0、1 或 2，分别表示：</p>\n<ul>\n<li>0 表示哲哲做出了某个操作或选择，后面紧接着一个数字 <em>j</em>，表示哲哲在当前剧情点做出了第 <em>j</em> 个选择。我们保证哲哲的选择永远是合法的。</li>\n<li>1 表示哲哲进行了一次存档，后面紧接着是一个数字 <em>j</em>，表示存档放在了第 <em>j</em> 个档位上。</li>\n<li>2 表示哲哲进行了一次读取存档的操作，后面紧接着是一个数字 <em>j</em>，表示读取了放在第 <em>j</em> 个位置的存档。</li>\n</ul>\n<p>约定：所有操作或选择以及剧情点编号都从 1 号开始。存档的档位不超过 100 个，编号也从 1 开始。游戏默认从 1 号剧情点开始。总的选项数（即 ∑<em>K**i</em>）不超过 106。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对于每个 1（即存档）操作，在一行中输出存档的剧情点编号。</p>\n<p>最后一行输出哲哲最后到达的剧情点编号。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">10 11\n3 2 3 4\n1 6\n3 4 7 5\n1 3\n1 9\n2 3 5\n3 1 8 5\n1 9\n2 8 10\n0\n1 1\n0 3\n0 1\n1 2\n0 2\n0 2\n2 2\n0 3\n0 1\n1 1\n0 2\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">1\n3\n9\n10\n</code></pre>\n<h3 id=\"样例解释：\"><a href=\"#样例解释：\" class=\"headerlink\" title=\"样例解释：\"></a>样例解释：</h3><p>简单给出样例中经过的剧情点顺序：</p>\n<p>1 -&gt; 4 -&gt; 3 -&gt; 7 -&gt; 8 -&gt; 3 -&gt; 5 -&gt; 9 -&gt; 10。</p>\n<p>档位 1 开始存的是 1 号剧情点；档位 2 存的是 3 号剧情点；档位 1 后来又存了 9 号剧情点。</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表 + 模拟，主要是理解题意</strong></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n&#123;\n    int n,k;\n    cin&gt;&gt;n&gt;&gt;k;\n    vector&lt;int&gt; v[n+1];\n    int save[105];\t\t\t\t\t\t\t//存档点\n    int now=1;\t\t\t\t\t\t\t\t//当前剧情点\n    for (int i = 1; i &lt;=n ; ++i) &#123;\n        int num;\n        cin&gt;&gt;num;\n        for (int j = 0; j &lt;num ; ++j) &#123;\n            int x;\n            cin&gt;&gt;x;\n            v[i].push_back(x);\t\t\t\t//邻接表存操作数\n        &#125;\n    &#125;\n    for (int l = 0; l &lt;k ; ++l) &#123;\t\t\t//模拟过程\n        int a,b;\n        cin&gt;&gt;a&gt;&gt;b;\n        if(a==1)&#123;\n            save[b]=now;\n            cout&lt;&lt;now&lt;&lt;endl;\n        &#125;\n        if(a==0)&#123;\n            now=v[now][b-1];\n        &#125;\n        if(a==2)&#123;\n            now=save[b];\n        &#125;\n    &#125;\n    cout&lt;&lt;now&lt;&lt;endl;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652363\">题目详情 - L2-040 哲哲打游戏 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "邻接表",
                "Vector",
                "模拟"
            ]
        },
        {
            "id": "http://example.com/2022/04/13/Algorithm020/",
            "url": "http://example.com/2022/04/13/Algorithm020/",
            "title": "L2-027 名人堂与代金券 (25 分)",
            "date_published": "2022-04-13T01:45:55.000Z",
            "content_html": "<h2 id=\"L2-027-名人堂与代金券-25-分\"><a href=\"#L2-027-名人堂与代金券-25-分\" class=\"headerlink\" title=\"L2-027 名人堂与代金券 (25 分)\"></a>L2-027 名人堂与代金券 (25 分)</h2><p>对于在中国大学MOOC（<a href=\"http://www.icourse163.org/\">http://www.icourse163.org/</a> ）学习“数据结构”课程的学生，想要获得一张合格证书，总评成绩必须达到 60 分及以上，并且有另加福利：总评分在 [G, 100] 区间内者，可以得到 50 元 PAT 代金券；在 [60, G) 区间内者，可以得到 20 元PAT代金券。全国考点通用，一年有效。同时任课老师还会把总评成绩前 K 名的学生列入课程“名人堂”。本题就请你编写程序，帮助老师列出名人堂的学生，并统计一共发出了面值多少元的 PAT 代金券。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出 3 个整数，分别是 N（不超过 10 000 的正整数，为学生总数）、G（在 (60,100) 区间内的整数，为题面中描述的代金券等级分界线）、K（不超过 100 且不超过 N 的正整数，为进入名人堂的最低名次）。接下来 N 行，每行给出一位学生的账号（长度不超过15位、不带空格的字符串）和总评成绩（区间 [0, 100] 内的整数），其间以空格分隔。题目保证没有重复的账号。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在一行中输出发出的 PAT 代金券的总面值。然后按总评成绩非升序输出进入名人堂的学生的名次、账号和成绩，其间以 1 个空格分隔。需要注意的是：成绩相同的学生享有并列的排名，排名并列时，按账号的字母序升序输出。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">10 80 5\ncy@zju.edu.cn 78\ncy@pat-edu.com 87\n1001@qq.com 65\nuh-oh@163.com 96\ntest@126.com 39\nanyone@qq.com 87\nzoe@mit.edu 80\njack@ucla.edu 88\nbob@cmu.edu 80\nken@163.com 70\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">360\n1 uh-oh@163.com 96\n2 jack@ucla.edu 88\n3 anyone@qq.com 87\n3 cy@pat-edu.com 87\n5 bob@cmu.edu 80\n5 zoe@mit.edu 80\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>结构体数组+sort排序，需要注意输出格式控制</strong></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct student&#123;\n    int score=0;\n    string email;\n&#125;;\nbool cmp(student a,student b)&#123;\n    if(a.score==b.score) return a.email&lt;b.email;\t\t//如果分数相同返回字典序小的\n    return a.score&gt;b.score;\t\t\t\t//返回分数最大的\n&#125;\nint main()\n&#123;\n    int n,g,k;\n    cin&gt;&gt;n&gt;&gt;g&gt;&gt;k;\n    student st[n];\n    int money=0;\n    for (int i = 0; i &lt;n ; ++i) &#123;\t\t\t\t\t//输入加存钱\n        cin&gt;&gt;st[i].email&gt;&gt;st[i].score;\n        if(g&lt;=st[i].score&amp;&amp;st[i].score&lt;=100)&#123;\n            money+=50;\n        &#125;\n        if(60&lt;=st[i].score&amp;&amp;st[i].score&lt;g)&#123;\n            money+=20;\n        &#125;\n    &#125;\n    sort(st,st+n,cmp);\t\t\t\t\t\t\t\t//排序\n    cout&lt;&lt;money&lt;&lt;endl;\n    int cnt =1;\t\t\t\t\t\t\t\t\t\t//用来判断用否超过名人堂个数\n    int i=0;\t\t\t\t\t\t\t\t\t\t//遍历st结构体数组\n    int same=1;\t\t\t\t\t\t\t\t\t\t//分数相同的个数\n    int fscore=st[0].score;\t\t\t\t\t\t\t//用来判断分数是否相同\n    //这道题就格式输出需要注意下！\n    while(true) &#123;\n\n        if(fscore==st[i].score)&#123;\n            cout&lt;&lt;cnt&lt;&lt;&quot; &quot;&lt;&lt;st[i].email&lt;&lt;&quot; &quot;&lt;&lt;st[i].score&lt;&lt;endl;\t//相同即输出\n            if(i!=0) same++;\t\t//不为0号，则same++。\n        &#125;\n        if(fscore&gt;st[i].score)&#123;\n            cnt=cnt+same;\t\t\t//不等，更新cnt值\n            same=1;\t\t\t\t\t//更新same值\n            if(cnt&gt;k)&#123; break;&#125;\t\t//大于名人堂个数结束\n            cout&lt;&lt;cnt&lt;&lt;&quot; &quot;&lt;&lt;st[i].email&lt;&lt;&quot; &quot;&lt;&lt;st[i].score&lt;&lt;endl;\n            fscore=st[i].score;\t\t//更新用来判断分数是否相同的fscore\n\n        &#125;\n        i++;\n\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805055176163328\">题目详情 - L2-027 名人堂与代金券 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort"
            ]
        },
        {
            "id": "http://example.com/2022/04/13/Algorithm019/",
            "url": "http://example.com/2022/04/13/Algorithm019/",
            "title": "L2-026 小字辈 (25 分)",
            "date_published": "2022-04-13T01:45:49.000Z",
            "content_html": "<h2 id=\"L2-026-小字辈-25-分\"><a href=\"#L2-026-小字辈-25-分\" class=\"headerlink\" title=\"L2-026 小字辈 (25 分)\"></a><strong>L2-026 小字辈 (25 分)</strong></h2><p>本题给定一个庞大家族的家谱，要请你给出最小一辈的名单。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出家族人口总数 N（不超过 100 000 的正整数） —— 简单起见，我们把家族成员从 1 到 N 编号。随后第二行给出 N 个编号，其中第 i 个编号对应第 i 位成员的父&#x2F;母。家谱中辈分最高的老祖宗对应的父&#x2F;母编号为 -1。一行中的数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先输出最小的辈分（老祖宗的辈分为 1，以下逐级递增）。然后在第二行按递增顺序输出辈分最小的成员的编号。编号间以一个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">9\n2 6 5 5 -1 5 6 4 7\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">4\n1 9\n</code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表建树+BFS</strong></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; tree[100005];\t\t\t\t//邻接表建树\nint deeptree[100005];\t\t\t\t\t//记录树的深度\nint n;\nint root;\t\t\t\t\t\t\t\t//根节点\nint bfs()&#123;\t\t\t\t\t\t\t\t//bfs\n    queue&lt;int&gt; q;\n    q.push(root);\t\t\t\t\t\t//根节点入队\n    int x;\t\t\t\t\t\t\t\t\n    while(!q.empty())&#123;\n        x=q.front();\n        q.pop();\n        for (int i = 0; i &lt;tree[x].size() ; ++i) &#123;\n            deeptree[tree[x][i]]=deeptree[x]+1;\t\t\t\t\t\t//每一层的深度为上一层加1\n            q.push(tree[x][i]);\n\n        &#125;\n    &#125;\n    return deeptree[x];\t\t\t\t//返回最后一个结点的深度，即深度的最大值\n&#125;\nint main()\n&#123;\n    n;\n    cin&gt;&gt;n;\n    int a[n];\n    for (int i = 1; i &lt;=n ; ++i) &#123;\n        cin&gt;&gt;a[i];\n        if(a[i]==-1)&#123;\n            root=i;\t\t\t\t//找根节点\n        &#125;\n    &#125;\n    for (int j = 1; j &lt;=n ; ++j) &#123;\t\t\t\t\t//建树\n        tree[a[j]].push_back(j);\t\t\t\t\t//j是a[j]的孩子节点\n        if(a[j]==-1) deeptree[j]=1;\t\t\t\t\t//初始化根节点深度为1\n    &#125;\n    int ans=bfs();\n    cout&lt;&lt;ans&lt;&lt;endl;\n    int maxdeepcnt=0;\t\t\t\t\t\t\t\t//记录最大深度的个数\n    int tmp[n];\t\t\t\t\t\t\t\t\t\t//找最大深度的id\n    for (int k = 1; k &lt;=n ; ++k) &#123;\t\t\t\t\t\n        if(ans==deeptree[k])&#123;\n            maxdeepcnt++;\n            tmp[maxdeepcnt]=k;\n        &#125;\n    &#125;\n    //输出格式控制\n    for (int l = 1; l &lt;=maxdeepcnt ; ++l) &#123;\n        if(l!=maxdeepcnt) cout&lt;&lt;tmp[l]&lt;&lt;&quot; &quot;;\n        else cout&lt;&lt;tmp[l]&lt;&lt;endl;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805055679479808\">题目详情 - L2-026 小字辈 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "邻接表",
                "Vector",
                "Binary tree",
                "BFS"
            ]
        },
        {
            "id": "http://example.com/2022/04/12/Algorithm018/",
            "url": "http://example.com/2022/04/12/Algorithm018/",
            "title": "L2-023 图着色问题 (25 分)",
            "date_published": "2022-04-12T10:59:52.000Z",
            "content_html": "<h2 id=\"L2-023-图着色问题-25-分\"><a href=\"#L2-023-图着色问题-25-分\" class=\"headerlink\" title=\"L2-023 图着色问题 (25 分)\"></a>L2-023 图着色问题 (25 分)</h2><p>图着色问题是一个著名的NP完全问题。给定无向图<em>G</em>&#x3D;(<em>V</em>,<em>E</em>)，问可否用<em>K</em>种颜色为<em>V</em>中的每一个顶点分配一种颜色，使得不会有两个相邻顶点具有同一种颜色？</p>\n<p>但本题并不是要你解决这个着色问题，而是对给定的一种颜色分配，请你判断这是否是图着色问题的一个解。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出3个整数<em>V</em>（0&lt;<em>V</em>≤500）、<em>E</em>（≥0）和<em>K</em>（0&lt;<em>K</em>≤<em>V</em>），分别是无向图的顶点数、边数、以及颜色数。顶点和颜色都从1到<em>V</em>编号。随后<em>E</em>行，每行给出一条边的两个端点的编号。在图的信息给出之后，给出了一个正整数<em>N</em>（≤20），是待检查的颜色分配方案的个数。随后<em>N</em>行，每行顺次给出<em>V</em>个顶点的颜色（第<em>i</em>个数字表示第<em>i</em>个顶点的颜色），数字间以空格分隔。题目保证给定的无向图是合法的（即不存在自回路和重边）。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每种颜色分配方案，如果是图着色问题的一个解则输出<code>Yes</code>，否则输出<code>No</code>，每句占一行。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><img src=\"/2022/04/12/Algorithm018/graph.png\" alt=\"graph\" style=\"zoom: 67%;\">\n\n<pre><code class=\"in\">6 8 3\n2 1\n1 3\n4 6\n2 5\n2 4\n5 4\n5 6\n3 6\n4\n1 2 3 3 1 2\n4 5 6 6 4 5\n1 2 3 4 5 6\n2 3 4 2 3 4\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">Yes\nYes\nNo\nNo\n</code></pre>\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><p><strong>Set + 邻接表</strong></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n&#123;\n    int v,e,k;\n    cin&gt;&gt;v&gt;&gt;e&gt;&gt;k;\n    vector&lt;int&gt; g[505];\t\t\t//邻接表\n    int color[505];\t\t\t\t//记录颜色\n    for (int i = 0; i &lt;e ; ++i) &#123;       //建立邻接表\n        int a,b;\n        cin&gt;&gt;a&gt;&gt;b;\n        g[a].push_back(b);\n        g[b].push_back(a);\n    &#125;\n    int time;\n    cin&gt;&gt;time;\n    for (int j = 0; j &lt;time ; ++j) &#123;\n        int flag=1;\n        set&lt;int&gt; s;\t\t\t\t\t//用来统计颜色总数\n        s.clear();\n        for (int i = 1; i &lt;=v; ++i) &#123;\n            int num;\n            cin&gt;&gt;num;\n            color[i]=num;\n            s.insert(num);\n        &#125;\n        if(s.size()!=k)&#123;\t\t\t//如果颜色数不等于k即非法\n            cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;\n            continue;\n        &#125;\n        for (int l = 1; l &lt;=v ; ++l) &#123;\t\t\t\t\t\t//遍历邻接表\n            for (int i = 0; i &lt;g[l].size(); ++i) &#123;\n                if(color[l]==color[g[l][i]])&#123;\t\t\t\t//如果相邻结点颜色一样则为假\n                    flag=0;\n                    break;\n                &#125;\n            &#125;\n        &#125;\n        if(flag==1)&#123;\n            cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;\n        &#125;else&#123;\n            cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805057298481152\">题目详情 - L2-023 图着色问题 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "Set",
                "团体程序设计天梯赛",
                "Graph",
                "邻接表",
                "Vector"
            ]
        },
        {
            "id": "http://example.com/2022/04/12/Algorithm017/",
            "url": "http://example.com/2022/04/12/Algorithm017/",
            "title": "L2-022 重排链表 (25 分)",
            "date_published": "2022-04-12T01:50:11.000Z",
            "content_html": "<h2 id=\"L2-022-重排链表-25-分\"><a href=\"#L2-022-重排链表-25-分\" class=\"headerlink\" title=\"L2-022 重排链表 (25 分)\"></a>L2-022 重排链表 (25 分)</h2><p>给定一个单链表 <em>L</em>1→<em>L</em>2→⋯→<em>Ln</em>−1→<em>Ln</em>，请编写程序将链表重新排列为 <em>Ln</em>→<em>L</em>1→<em>Ln</em>−1→<em>L</em>2→⋯。例如：给定<em>L</em>为1→2→3→4→5→6，则输出应该为6→1→5→2→4→3。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址和结点总个数，即正整数<em>N</em> (≤105)。结点的地址是5位非负整数，NULL地址用−1表示。</p>\n<p>接下来有<em>N</em>行，每行格式为：</p>\n<pre><code>Address Data Next\n</code></pre>\n<p>其中<code>Address</code>是结点地址；<code>Data</code>是该结点保存的数据，为不超过105的正整数；<code>Next</code>是下一结点的地址。题目保证给出的链表上至少有两个结点。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个测试用例，顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">00100 6\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">68237 6 00100\n00100 1 99999\n99999 5 12309\n12309 2 00000\n00000 4 33218\n33218 3 -1\n</code></pre>\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><p><strong>利用双向链表，头尾指针来模拟</strong></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct linklist&#123;\n    int address=0;\t\t\t//记录当前结点的地址，虽然也没用到\n    int data=0;\t\t\t\t//记录数据域\n    int next=0;\t\t\t\t//指向下一个结点的地址\n    int pre=0;\t\t\t\t//指向上一个结点的地址\n&#125;l[100005];\nint main()\n&#123;\n    int start,back=-1;\t\t//头尾指针\n    int tmp;\t\t\t\t//用来遍历当前链表用于统计链表的长度\n    int n;\n    cin&gt;&gt;start&gt;&gt;n;\n    tmp=start;\n    int address, data, next;\n    l[start].pre=-1;\t   //初始化第一个结点的前一个结点位置为-1\n    int cnt=0;\t\t\t  \t//记录链表长\n    for (int i = 0; i &lt;n ; ++i) &#123;\n       cin&gt;&gt;address&gt;&gt;data&gt;&gt;next;\n       l[address].address=address;\n       l[address].data=data;\n       l[address].next=next;\n       if(next!=-1)&#123;\n           l[next].pre=address;\t\t\t\t//设值上一个结点的地址\n       &#125;\n    &#125;\n    //这道题比较坑的地方是会出现不是这个链表的结点，所以n不是真正的链表长，需要统计真正的链表长\n    //如果没注意这点，第三个测试点会不通过，不过也能得到21分\n    while (true) &#123;\n        cnt++;\t\t\t\t//统计链表长\t\n        if(l[tmp].next==-1)&#123;\n            back=tmp;       //尾指针\n            break;\n        &#125;\n        tmp=l[tmp].next;\n    &#125;\n    int flag=0;\n    //flag=0动尾指针,flag=1动头指针。我并没有改变原来链表！\n    for (int k = 0; k &lt;cnt ; ++k) &#123;\n            if(flag==0)&#123;\n                if(k==cnt-1)&#123;\n                    printf(&quot;%05d %d %d\\n&quot;,l[back].address,l[back].data,-1);\n                &#125;else&#123;\n                    printf(&quot;%05d %d %05d\\n&quot;,l[back].address,l[back].data,start);\n                &#125;\n                back=l[back].pre;\n                flag=1;\n            &#125;\n            else if(flag==1)&#123;\n                if(k==cnt-1)&#123;\n                    printf(&quot;%05d %d %d\\n&quot;,l[start].address,l[start].data,-1);\n                &#125;else&#123;\n                    printf(&quot;%05d %d %05d\\n&quot;,l[start].address,l[start].data,back);\n                &#125;\n                start=l[start].next;\n                flag=0;\n            &#125;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805057860517888\">题目详情 - L2-022 重排链表 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "LinkList",
                "双向链表"
            ]
        },
        {
            "id": "http://example.com/2022/04/11/Algorithm016/",
            "url": "http://example.com/2022/04/11/Algorithm016/",
            "title": "L2-021 点赞狂魔 (25 分)",
            "date_published": "2022-04-11T11:21:06.000Z",
            "content_html": "<h1 id=\"L2-021-点赞狂魔-25-分\"><a href=\"#L2-021-点赞狂魔-25-分\" class=\"headerlink\" title=\"L2-021 点赞狂魔 (25 分)\"></a>L2-021 点赞狂魔 (25 分)</h1><p>微博上有个“点赞”功能，你可以为你喜欢的博文点个赞表示支持。每篇博文都有一些刻画其特性的标签，而你点赞的博文的类型，也间接刻画了你的特性。然而有这么一种人，他们会通过给自己看到的一切内容点赞来狂刷存在感，这种人就被称为“点赞狂魔”。他们点赞的标签非常分散，无法体现出明显的特性。本题就要求你写个程序，通过统计每个人点赞的不同标签的数量，找出前3名点赞狂魔。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出一个正整数<em>N</em>（≤100），是待统计的用户数。随后<em>N</em>行，每行列出一位用户的点赞标签。格式为“<code>Name</code> <em>K</em> <em>F</em>1⋯<em>F**K</em>”，其中<code>Name</code>是不超过8个英文小写字母的非空用户名，1≤<em>K</em>≤1000，<em>F**i</em>（<em>i</em>&#x3D;1,⋯,<em>K</em>）是特性标签的编号，我们将所有特性标签从 1 到 107 编号。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>统计每个人点赞的不同标签的数量，找出数量最大的前3名，在一行中顺序输出他们的用户名,其间以1个空格分隔,且行末不得有多余空格。如果有并列，则输出标签出现次数平均值最小的那个，题目保证这样的用户没有并列。若不足3人，则用<code>-</code>补齐缺失，例如<code>mike jenny -</code>就表示只有2人。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre><code class=\"in\">5\nbob 11 101 102 103 104 105 106 107 108 108 107 107\npeter 8 1 2 3 4 3 2 5 1\nchris 12 1 2 3 4 5 6 7 8 9 1 2 3\njohn 10 8 7 6 5 4 3 2 1 7 5\njack 9 6 7 8 9 10 11 12 13 14\n</code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre><code class=\"out\">jack chris john\n</code></pre>\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><p><strong>结构体数组 + sort排序</strong></p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct person&#123;\n    char name[10];\n    set&lt;int&gt; s;\t\t\t\t//set容器中的每个元素值唯一\n    int all=0;\t\t\t\t//记录点赞次数\n&#125;;\nbool cmp(person a,person b)&#123;\n    if(a.s.size()==b.s.size()) return a.all&lt;b.all;\t\t\t//如果有并列，则输出标签出现次数平均值最小的那个\n    return a.s.size()&gt;b.s.size();\t\t\t\t\t\t\t//点赞的不同标签的数量最多的\n&#125;\nint main()\n&#123;\n    int n;\n    cin&gt;&gt;n;\n    person p[n];\n    for (int i = 0; i &lt;n ; ++i) &#123;\n        cin&gt;&gt;p[i].name;\n        int time;\n        cin&gt;&gt;time;\n        p[i].all=time;\t\t\t\t\t\t\t\t\t\t//记录点赞次数\n        for (int j = 0; j &lt; time; ++j) &#123;\n            int tmp;\n            cin&gt;&gt;tmp;\n            p[i].s.insert(tmp);\t\t\t\t\t\t\t\t//插入set容器\n        &#125;\n    &#125;\n    sort(p,p+n,cmp);\t\t\t\t\t\t\t\t\t\t//排序\n    if(n&gt;=3)&#123;\n        cout&lt;&lt;p[0].name&lt;&lt;&quot; &quot;&lt;&lt;p[1].name&lt;&lt;&quot; &quot;&lt;&lt;p[2].name&lt;&lt;endl;\n    &#125; else if(n==2)&#123;\n        cout&lt;&lt;p[0].name&lt;&lt;&quot; &quot;&lt;&lt;p[1].name&lt;&lt;&quot; &quot;&lt;&lt;&quot;-&quot;&lt;&lt;endl;\n    &#125;else if(n==1)&#123;\n        cout&lt;&lt;p[0].name&lt;&lt;&quot; &quot;&lt;&lt;&quot;-&quot;&lt;&lt;&quot; &quot;&lt;&lt;&quot;-&quot;&lt;&lt;endl;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805058485469184\">题目详情 - L2-021 点赞狂魔 (25 分) (pintia.cn)</a></p>\n<p><a href=\"https://blog.csdn.net/changjiale110/article/details/79108447\">(19条消息) STL中的set使用方法详细！！！！_知足–常乐的博客-CSDN博客_set stl</a></p>\n",
            "tags": [
                "STL",
                "C++",
                "Set",
                "团体程序设计天梯赛",
                "Sort"
            ]
        },
        {
            "id": "http://example.com/2022/04/08/Algorithm015/",
            "url": "http://example.com/2022/04/08/Algorithm015/",
            "title": "C++的STL中字符串string自带方法find查找",
            "date_published": "2022-04-08T11:18:57.000Z",
            "content_html": "<h1 id=\"C-的STL中字符串string自带方法find查找\"><a href=\"#C-的STL中字符串string自带方法find查找\" class=\"headerlink\" title=\"C++的STL中字符串string自带方法find查找\"></a>C++的STL中字符串string自带方法find查找</h1><h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><pre><code class=\"c++\">string str = &quot;abcd&quot;;\n    cout &lt;&lt; str.find(&#39;a&#39;);\n    //返回的是下标的值而不是指针或是迭代器\n</code></pre>\n<pre><code class=\"c++\">string str = &quot;abcd&quot;\nstring sub = &quot;cd&quot;\nif(str.find(sub)!=string::npos)&#123;\n    cout&lt;&lt;&quot;找到了&quot;&lt;&lt;endl;\n&#125;else&#123;\n    cout&lt;&lt;&quot;没有找到&quot;&lt;&lt;endl;\n&#125;\n</code></pre>\n<p>要是没有找到，返回的是str::npos<br>注意，只有string的find方法是返回的下标，因为string是顺序索引，set,map,multiset,multimap都不是顺序索引的数据结构，所以返回的是迭代器。</p>\n<h2 id=\"样例一-L1-070-吃火锅-15-分\"><a href=\"#样例一-L1-070-吃火锅-15-分\" class=\"headerlink\" title=\"样例一:L1-070 吃火锅 (15 分)\"></a>样例一:<strong>L1-070 吃火锅 (15 分)</strong></h2><p><strong>题目链接：</strong></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053\">https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053</a></p>\n<p><img src=\"/2022/04/08/Algorithm015/68518b64-f2f7-4694-aaeb-d32afe657f7b.jpg\" alt=\"chg.jpg\"></p>\n<p>以上图片来自微信朋友圈：这种天气你有什么破事打电话给我基本没用。但是如果你说“吃火锅”，那就厉害了，我们的故事就开始了。</p>\n<p>本题要求你实现一个程序，自动检查你朋友给你发来的信息里有没有 <code>chi1 huo3 guo1</code>。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入每行给出一句不超过 80 个字符的、以回车结尾的朋友信息，信息为非空字符串，仅包括字母、数字、空格、可见的半角标点符号。当读到某一行只有一个英文句点 <code>.</code> 时，输入结束，此行不算在朋友信息里。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在一行中输出朋友信息的总条数。然后对朋友的每一行信息，检查其中是否包含 <code>chi1 huo3 guo1</code>，并且统计这样厉害的信息有多少条。在第二行中首先输出第一次出现 <code>chi1 huo3 guo1</code> 的信息是第几条（从 1 开始计数），然后输出这类信息的总条数，其间以一个空格分隔。题目保证输出的所有数字不超过 100。</p>\n<p>如果朋友从头到尾都没提 <code>chi1 huo3 guo1</code> 这个关键词，则在第二行输出一个表情 <code>-_-#</code>。</p>\n<h3 id=\"输入样例-1：\"><a href=\"#输入样例-1：\" class=\"headerlink\" title=\"输入样例 1：\"></a>输入样例 1：</h3><pre><code class=\"in\">Hello!\nare you there?\nwantta chi1 huo3 guo1?\nthat&#39;s so li hai le\nour story begins from chi1 huo3 guo1 le\n.\n</code></pre>\n<h3 id=\"输出样例-1：\"><a href=\"#输出样例-1：\" class=\"headerlink\" title=\"输出样例 1：\"></a>输出样例 1：</h3><pre><code class=\"out\">5\n3 2\n</code></pre>\n<h3 id=\"输入样例-2：\"><a href=\"#输入样例-2：\" class=\"headerlink\" title=\"输入样例 2：\"></a>输入样例 2：</h3><pre><code class=\"in\">Hello!\nare you there?\nwantta qi huo3 guo1 chi1huo3guo1?\nthat&#39;s so li hai le\nour story begins from ci1 huo4 guo2 le\n.\n</code></pre>\n<h3 id=\"输出样例-2：\"><a href=\"#输出样例-2：\" class=\"headerlink\" title=\"输出样例 2：\"></a>输出样例 2：</h3><pre><code class=\"out\">5\n-_-#\n</code></pre>\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n&#123;\n    int flag=0;\t\t\t\t\t//用来判断是否是第一次找到吃火锅\n    int cnt=0;\t\t\t\t\t//用来记录总行数\n    int count=0;\t\t\t\t//用来记录有多少个吃火锅\n    int firstp=0;\t\t\t\t//用来记录第一次出现吃火锅的位置\n    string cmp=&quot;chi1 huo3 guo1&quot;;\n    while (true)\n    &#123;\n        string s;\n        s.clear();\n        getline(cin,s);\n        if(s.size()==1&amp;&amp;s==&quot;.&quot;)&#123;\n            break;\n        &#125;\n        string tmp =s;\n        if(tmp.find(cmp)!=string::npos)&#123;\n            if(flag==0) &#123;\n                flag =1;\n                firstp = cnt+1;\n            &#125;\n            count=count+1;\n        &#125;\n        cnt=cnt+1;\n\n    &#125;\n    if(count==0)&#123;\n        cout&lt;&lt;cnt&lt;&lt;endl;\n        cout&lt;&lt;&quot;-_-#&quot;&lt;&lt;endl;\n    &#125; else&#123;\n        cout&lt;&lt;cnt&lt;&lt;endl;\n        cout&lt;&lt;firstp&lt;&lt;&quot; &quot;&lt;&lt;count&lt;&lt;endl;\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/qq_50675813/article/details/113313343\">(18条消息) c++STL中的find()函数 有两种使用方法_我们不生产代码，只是代码的搬运工的博客-CSDN博客_c++中find函数的使用方法</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053\">https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482053</a></p>\n",
            "tags": [
                "String",
                "Find",
                "STL",
                "C++"
            ]
        }
    ]
}