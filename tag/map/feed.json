{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"map\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/23/Algorithm031/",
            "url": "http://example.com/2022/04/23/Algorithm031/",
            "title": "L2-039 清点代码库 (25 分)",
            "date_published": "2022-04-23T13:44:47.000Z",
            "content_html": "<h2 id=\"L2-039-清点代码库-25-分\"><a href=\"#L2-039-清点代码库-25-分\" class=\"headerlink\" title=\"L2-039 清点代码库 (25 分)\"></a>L2-039 清点代码库 (25 分)</h2><p><img src=\"/2022/04/23/Algorithm031/58e6a034-993d-4049-8deb-23d769c8597e.jpg\" alt=\"code.jpg\"></p>\n<p>上图转自新浪微博：“阿里代码库有几亿行代码，但其中有很多功能重复的代码，比如单单快排就被重写了几百遍。请设计一个程序，能够将代码库中所有功能重复的代码找出。各位大佬有啥想法，我当时就懵了，然后就挂了。。。”</p>\n<p>这里我们把问题简化一下：首先假设两个功能模块如果接受同样的输入，总是给出同样的输出，则它们就是功能重复的；其次我们把每个模块的输出都简化为一个整数（在 <strong>int</strong> 范围内）。于是我们可以设计一系列输入，检查所有功能模块的对应输出，从而查出功能重复的代码。你的任务就是设计并实现这个简化问题的解决方案。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出 2 个正整数，依次为 <em>N</em>（≤104）和 <em>M</em>（≤102），对应功能模块的个数和系列测试输入的个数。</p>\n<p>随后 <em>N</em> 行，每行给出一个功能模块的 <em>M</em> 个对应输出，数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在第一行输出不同功能的个数 <em>K</em>。随后 <em>K</em> 行，每行给出具有这个功能的模块的个数，以及这个功能的对应输出。数字间以 1 个空格分隔，行首尾不得有多余空格。输出首先按模块个数非递增顺序，如果有并列，则按输出序列的递增序给出。</p>\n<p>注：所谓数列 { <em>A</em>1, …, <em>A</em>M } 比 { <em>B</em>1, …, <em>B</em>M } 大，是指存在 1≤i&lt;*M*，使得 *A*1&#x3D;*B*1，…，*Ai*&#x3D;*Bi* 成立，且 *Ai*+1&gt;<em>B</em>+1。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre class=\"line-numbers language-in\"><code class=\"language-in\">7 3\n35 28 74\n-1 -1 22\n28 74 35\n-1 -1 22\n11 66 0\n35 28 74\n35 28 74\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre class=\"line-numbers language-out\"><code class=\"language-out\">4\n3 35 28 74\n2 -1 -1 22\n1 11 66 0\n1 28 74 35\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>利用map的映射关系</strong></p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<bits/stdc++.h>\nusing namespace std;\nmap<vector<int>,int> mp;   //key，value\nvector<int> tmp;\nint n,m;\nbool cmp(pair<vector<int>,int> a,pair<vector<int>,int> b)\n&#123;\n    if(a.second==b.second)\n    &#123;\n        return a.first<b.first;\n    &#125;\n    return a.second>b.second;\n\n&#125;\nint main()\n&#123;\n    cin>>n>>m;\n    for (int i = 0; i <n ; ++i) &#123;\n        for (int j = 0; j < m; ++j) &#123;\n            int num;\n            cin>>num;\n            tmp.push_back(num);\n        &#125;\n        mp[tmp]++;\n        tmp.clear();\n    &#125;\n    vector<pair<vector<int>,int>> v(mp.begin(),mp.end());\t\t//把map类型转化成vector\n    cout<<v.size()<<endl;\n    sort(v.begin(),v.end(),cmp);\t\t\t\t\t\t\t\t//sort排序，注意终点和起点\n    for (int k = 0; k <v.size() ; ++k) &#123;\n        cout<<v[k].second<<\" \";\n        for (int i = 0; i <m ; ++i) &#123;\n            if(i!=m-1)&#123;\n                cout<<v[k].first[i]<<\" \";\n            &#125; else&#123;\n                cout<<v[k].first[i]<<endl;\n            &#125;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652362\">题目详情 - L2-039 清点代码库 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "Vector",
                "Map",
                "Pair"
            ]
        },
        {
            "id": "http://example.com/2022/04/16/Algorithm029/",
            "url": "http://example.com/2022/04/16/Algorithm029/",
            "title": "STL中map的使用",
            "date_published": "2022-04-16T08:26:03.000Z",
            "content_html": "<h2 id=\"STL中map的使用\"><a href=\"#STL中map的使用\" class=\"headerlink\" title=\"STL中map的使用\"></a>STL中map的使用</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>map 是 STL 的一个关联容器，它提供一对一的数据处理能力。</p>\n<p>map 对象是<strong>模板类</strong>，需要<strong>关键字</strong>和<strong>存储对象</strong>两个模板参数：其中第一个参数称为关键字，每个关键字只能在 map 中出现一次；第二个参数称为该关键字的值。可以将关键字和存储对象理解为“{键，值}对”。</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">map<int,string> mp;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"map的数据插入操作\"><a href=\"#map的数据插入操作\" class=\"headerlink\" title=\"map的数据插入操作\"></a>map的数据插入操作</h3><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">//使用insert函数插入pair数据\nmp.insert(pair<int,string>(3,\"xingyuanjie\"));\n//使用数组方式插入数据\nmp[2]=\"wangzhouyang\";\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：上面的两种方法是有区别的，用 insert 函数插入数据，涉及到集合的唯一性这个概念，即当 map 中有这个关键字时，insert 操作是不能实现数据插入的；但是数组方式能够插入数据，插入的数据会覆盖该关键字之前对应的值。</strong></p>\n<h3 id=\"map中数据的遍历\"><a href=\"#map中数据的遍历\" class=\"headerlink\" title=\"map中数据的遍历\"></a>map中数据的遍历</h3><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">map<int,string>::iterator it;\t\t\t\t\t//迭代器\nfor (it=mp.begin();it!=mp.end();it++) &#123;\n    cout<<it->first<<\" \"<<it->second<<endl;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"map中数据的查找\"><a href=\"#map中数据的查找\" class=\"headerlink\" title=\"map中数据的查找\"></a>map中数据的查找</h3><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">map<int,string>::iterator it;\t\t\t\t\t//迭代器\nit=mp.find(1);\nif(it!=mp.end())&#123;\n        cout << \"Find it, the relative value is: \" << it->second << endl;\n&#125;\nelse&#123;\n           cout << \"Can not find the relative value.\" << endl;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"map中数据的删除\"><a href=\"#map中数据的删除\" class=\"headerlink\" title=\"map中数据的删除\"></a>map中数据的删除</h3><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">map<int,string>::iterator it;\t\t\t\t\t//迭代器\nit = mp.find(2);\nmp.erase(it);\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"map中数据的排序\"><a href=\"#map中数据的排序\" class=\"headerlink\" title=\"map中数据的排序\"></a>map中数据的排序</h3><p><strong>map 中的所有元素都会根据元素的键值，自动进行升序排序。</strong></p>\n<h3 id=\"完整操作\"><a href=\"#完整操作\" class=\"headerlink\" title=\"完整操作\"></a>完整操作</h3><h4 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h4><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<bits/stdc++.h>\nusing namespace std;\nmap<int,string> mp;\nint main()\n&#123;\n    //使用insert函数插入pair数据\n    mp.insert(pair<int,string>(3,\"xingyuanjie\"));\n    mp.insert(pair<int,string>(1,\"shicheng\"));\n    mp.insert(pair<int,string>(4,\"tanghaipeng\"));\n    mp.insert(pair<int,string>(6,\"zhouyuhao\"));\n    mp.insert(pair<int,string>(5,\"heqichuan\"));\n    //使用数组方式插入数据\n    mp[2]=\"wangzhouyang\";\n    //map的遍历\n    map<int,string>::iterator it;\n    for (it=mp.begin();it!=mp.end();it++) &#123;\n        cout<<it->first<<\" \"<<it->second<<endl;\n    &#125;\n    //查找操作\n    it=mp.find(1);\n    if(it!=mp.end())&#123;\n        cout << \"Find it, the relative value is: \" << it->second << endl;\n    &#125;\n    else &#123;\n        cout << \"Can not find the relative value.\" << endl;\n    &#125;\n    //删除操作\n    it = mp.find(2);\n    mp.erase(it);\n    for (it=mp.begin();it!=mp.end();it++) &#123;\n        cout<<it->first<<\" \"<<it->second<<endl;\n    &#125;\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h4><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">1 shicheng\n2 wangzhouyang\n3 xingyuanjie\n4 tanghaipeng\n5 heqichuan\n6 zhouyuhao\nFind it, the relative value is: shicheng\n1 shicheng\n3 xingyuanjie\n4 tanghaipeng\n5 heqichuan\n6 zhouyuhao\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/liitdar/article/details/80009712\">(20条消息) STL中map介绍_liitdar的博客-CSDN博客_stlmap</a></p>\n",
            "tags": [
                "STL",
                "Map"
            ]
        }
    ]
}