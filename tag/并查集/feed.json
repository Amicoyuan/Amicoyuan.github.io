{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"并查集\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/16/Algorithm028/",
            "url": "http://example.com/2022/04/16/Algorithm028/",
            "title": "L2-010 排座位 (25 分)",
            "date_published": "2022-04-16T06:57:46.000Z",
            "content_html": "<h2 id=\"L2-010-排座位-25-分\"><a href=\"#L2-010-排座位-25-分\" class=\"headerlink\" title=\"L2-010 排座位 (25 分)\"></a><strong>L2-010 排座位 (25 分)</strong></h2><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1 宾客2 关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p>\n<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OK but...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><pre class=\"line-numbers language-in\"><code class=\"language-in\">7 8 4\n5 6 1\n2 7 -1\n1 3 1\n3 4 1\n6 7 -1\n1 2 1\n1 4 1\n2 3 -1\n3 4\n5 7\n2 3\n7 2\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><pre class=\"line-numbers language-out\"><code class=\"language-out\">No problem\nOK\nOK but...\nNo way\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵 + 并查集</strong></p>\n<p><strong>并查集具体链接：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/01/04/Algorithm004/\">并查集 - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include<bits/stdc++.h>\nusing namespace std;\nint pre[100];\t\t\t\t//父节点\nint deep[100];\t\t\t\t//深度\nint g[101][101];\t\t\t//邻接矩阵建图\nvoid init(int n)&#123;\n    for (int i = 0; i <n ; ++i) &#123;\n        pre[i]=i;\n        deep[i]=0;\n    &#125;\n&#125;\nint find(int x)&#123;\n    if(pre[x]==x)&#123;\n        return x;\n    &#125; else&#123;\n        return pre[x]=find(pre[x]);\n    &#125;\n&#125;\nvoid unit(int x,int y)&#123;\n    x=find(x);\n    y=find(y);\n    if(x==y) return;\n    if(deep[x]<deep[y])&#123;\n        pre[x]=y;\n    &#125;else&#123;\n        pre[y]=x;\n        if(deep[x]==deep[y])&#123;\n            deep[x]++;\n        &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    int n,m,k;\n    init(105);\n    memset(g,0,sizeof(g));\n    cin>>n>>m>>k;\n    for (int i = 0; i <m ; ++i) &#123;\n        int a,b,c;\n        cin>>a>>b>>c;\n        g[a][b]=g[b][a]=c;\n        if(c==1) unit(a,b);\t\t\t\t\t//如果是朋友则合并\n    &#125;\n    for (int j = 0; j <k ; ++j) &#123;\n        int a,b;\n        cin>>a>>b;\n        if(g[a][b]==1&&g[b][a]==1) cout<<\"No problem\"<<endl;\n        else if(g[a][b]==0&&g[b][a]==0) cout<<\"OK\"<<endl;\t\t\t//两人毫无关系\n        else if(g[a][b]==-1&&g[b][a]==-1&&find(a)==find(b)) cout<<\"OK but...\"<<endl;\t//敌对且有共同朋友\n        else if(g[a][b]==-1&&g[b][a]==-1) cout<<\"No way\"<<endl;\t\t//仅敌对\n    &#125;\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/weixin_45260385/article/details/109752008\">(20条消息) 【PTA】 L2-010 排座位 (25分) 【简单并查集】_黑桃️的博客-CSDN博客</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066135879680\">题目详情 - L2-010 排座位 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "并查集"
            ]
        }
    ]
}