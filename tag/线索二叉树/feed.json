{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"线索二叉树\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/05/04/Algorithm035/",
            "url": "http://example.com/2022/05/04/Algorithm035/",
            "title": "线索二叉树",
            "date_published": "2022-05-04T12:05:19.000Z",
            "content_html": "<h2 id=\"线索二叉树\"><a href=\"#线索二叉树\" class=\"headerlink\" title=\"线索二叉树\"></a>线索二叉树</h2><h3 id=\"线索二叉树的存储结构\"><a href=\"#线索二叉树的存储结构\" class=\"headerlink\" title=\"线索二叉树的存储结构\"></a>线索二叉树的存储结构</h3><p>线索二叉树的存储结构描述如下</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">ltag = 0 lchild域指示结点的左孩子\nltag = 1 lchild域指示结点的前驱\n//\nrtag = 0 rchild域指示结点的右孩子\nrtag = 1 rchild域指示结点的后继\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">typedef struct ThreadNode&#123;\n    ElemType data;\t\t\t\t\t\t//数据元素\n    struct ThreadNode *lchild,*rchild;\t\t\t\t//左右孩子指针\n    int ltag,rtag;\t\t\t\t\t\t\t\t\t//左右线索标志\n&#125;ThreadNode，*ThreadTree;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"中序线索二叉树的构造\"><a href=\"#中序线索二叉树的构造\" class=\"headerlink\" title=\"中序线索二叉树的构造\"></a>中序线索二叉树的构造</h3><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">void InThread(ThreadTree &p,ThreadNode &pre)&#123;\n    if(p!=NULL)&#123;\n        InThread(p->lchild,pre);\t\t\t//递归，线索化左子树\n        &#123;\n            if(p->lchild==NULL)&#123;\t\t\t//左子树为空，建立前驱线索\n                p->lchild=pre;\n                p->ltag=1;\n            &#125;\n            if(pre!=NULL&&pre->rchild==NULL)&#123;\n                pre->rchild=p;\t\t\t\t//建立前驱结点的后继线索\n                pre->rtag=1;\n            &#125;\n            pre=p;\t\t\t\t\t\t\t//标记当前结点成为刚刚访问过的结点\n            InThread(p->rchild,pre);\t\t//递归，线索化右子树\n        &#125;//if(p!=NULL)\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">void CreateInThread(ThreadTree T)&#123;\n    ThreadTree pre = NULL;\n    if(T!=NULL)&#123;\t\t\t\t\t\t//非空二叉树。线索化\n        InThread(T,pre);\t\t\t\t//线索化二叉树\n        pre->rchild=NULL;\t\t\t\t//处理遍历的最后一个结点\n        pre->rtag=1;\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"中序线索二叉树的遍历\"><a href=\"#中序线索二叉树的遍历\" class=\"headerlink\" title=\"中序线索二叉树的遍历\"></a>中序线索二叉树的遍历</h3><p>1)求中序线索二叉树中中序序列下的第一个结点</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">Thread *Firstnode(ThreadNode *p)&#123;\n    while(p->ltag==0) p=p->lchild;\t\t//最左下结点（不一定是叶结点）\n    return p;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2)求中序线索二叉树中结点p在中序序列下的后继</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">ThreadNode *Nextnode(ThreadNode *p)&#123;\n    if(p->rtag==0) return Firstnode(p->rchild);\n    else return p->rchild;\t\t\t//rtag==1直接返回后继线索\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3)利用上面两个算法，可以写出不含头节点的中序线索二叉树的中序遍历算法</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">void Inorder(ThreadNode *T)&#123;\n    for(ThreadNode *p=Firstnode;p!=NULL;p=Nextnode(p))\n        visit(p);\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Data Structure",
                "Binary tree",
                "线索二叉树"
            ]
        }
    ]
}