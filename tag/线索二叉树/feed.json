{
    "version": "https://jsonfeed.org/version/1",
    "title": "计算机奇妙之旅 • All posts by \"线索二叉树\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/05/04/Algorithm035/",
            "url": "http://example.com/2022/05/04/Algorithm035/",
            "title": "线索二叉树",
            "date_published": "2022-05-04T12:05:19.000Z",
            "content_html": "<h2 id=\"线索二叉树\"><a href=\"#线索二叉树\" class=\"headerlink\" title=\"线索二叉树\"></a>线索二叉树</h2><h3 id=\"线索二叉树的存储结构\"><a href=\"#线索二叉树的存储结构\" class=\"headerlink\" title=\"线索二叉树的存储结构\"></a>线索二叉树的存储结构</h3><p>线索二叉树的存储结构描述如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">ltag = <span class=\"hljs-number\">0</span> lchild域指示结点的左孩子<br>ltag = <span class=\"hljs-number\">1</span> lchild域指示结点的前驱<br><span class=\"hljs-comment\">//</span><br>rtag = <span class=\"hljs-number\">0</span> rchild域指示结点的右孩子<br>rtag = <span class=\"hljs-number\">1</span> rchild域指示结点的后继<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t<span class=\"hljs-comment\">//数据元素</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>\t\t\t\t<span class=\"hljs-comment\">//左右孩子指针</span><br>    <span class=\"hljs-keyword\">int</span> ltag,rtag;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//左右线索标志</span><br>&#125;ThreadNode，*ThreadTree;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"中序线索二叉树的构造\"><a href=\"#中序线索二叉树的构造\" class=\"headerlink\" title=\"中序线索二叉树的构造\"></a>中序线索二叉树的构造</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InThread</span><span class=\"hljs-params\">(ThreadTree &amp;p,ThreadNode &amp;pre)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-built_in\">InThread</span>(p-&gt;lchild,pre);\t\t\t<span class=\"hljs-comment\">//递归，线索化左子树</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(p-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t<span class=\"hljs-comment\">//左子树为空，建立前驱线索</span><br>                p-&gt;lchild=pre;<br>                p-&gt;ltag=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(pre!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;pre-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)&#123;<br>                pre-&gt;rchild=p;\t\t\t\t<span class=\"hljs-comment\">//建立前驱结点的后继线索</span><br>                pre-&gt;rtag=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            pre=p;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//标记当前结点成为刚刚访问过的结点</span><br>            <span class=\"hljs-built_in\">InThread</span>(p-&gt;rchild,pre);\t\t<span class=\"hljs-comment\">//递归，线索化右子树</span><br>        &#125;<span class=\"hljs-comment\">//if(p!=NULL)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CreateInThread</span><span class=\"hljs-params\">(ThreadTree T)</span></span>&#123;<br>    ThreadTree pre = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(T!=<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//非空二叉树。线索化</span><br>        <span class=\"hljs-built_in\">InThread</span>(T,pre);\t\t\t\t<span class=\"hljs-comment\">//线索化二叉树</span><br>        pre-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;\t\t\t\t<span class=\"hljs-comment\">//处理遍历的最后一个结点</span><br>        pre-&gt;rtag=<span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"中序线索二叉树的遍历\"><a href=\"#中序线索二叉树的遍历\" class=\"headerlink\" title=\"中序线索二叉树的遍历\"></a>中序线索二叉树的遍历</h3><p>1)求中序线索二叉树中中序序列下的第一个结点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">Thread *<span class=\"hljs-title\">Firstnode</span><span class=\"hljs-params\">(ThreadNode *p)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(p-&gt;ltag==<span class=\"hljs-number\">0</span>) p=p-&gt;lchild;\t\t<span class=\"hljs-comment\">//最左下结点（不一定是叶结点）</span><br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2)求中序线索二叉树中结点p在中序序列下的后继</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">ThreadNode *<span class=\"hljs-title\">Nextnode</span><span class=\"hljs-params\">(ThreadNode *p)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(p-&gt;rtag==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Firstnode</span>(p-&gt;rchild);<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> p-&gt;rchild;\t\t\t<span class=\"hljs-comment\">//rtag==1直接返回后继线索</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3)利用上面两个算法，可以写出不含头节点的中序线索二叉树的中序遍历算法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Inorder</span><span class=\"hljs-params\">(ThreadNode *T)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(ThreadNode *p=Firstnode;p!=<span class=\"hljs-literal\">NULL</span>;p=<span class=\"hljs-built_in\">Nextnode</span>(p))<br>        <span class=\"hljs-built_in\">visit</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Binary tree",
                "线索二叉树"
            ]
        }
    ]
}