{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"linklist\" tag",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2022/04/12/Algorithm017/",
            "url": "https://xingyuanjie.top/2022/04/12/Algorithm017/",
            "title": "L2-022 重排链表 (25 分)",
            "date_published": "2022-04-12T01:50:11.000Z",
            "content_html": "<h2 id=\"L2-022-重排链表-25-分\"><a href=\"#L2-022-重排链表-25-分\" class=\"headerlink\" title=\"L2-022 重排链表 (25 分)\"></a>L2-022 重排链表 (25 分)</h2><p>给定一个单链表 <em>L</em>1→<em>L</em>2→⋯→<em>Ln</em>−1→<em>Ln</em>，请编写程序将链表重新排列为 <em>Ln</em>→<em>L</em>1→<em>Ln</em>−1→<em>L</em>2→⋯。例如：给定<em>L</em>为1→2→3→4→5→6，则输出应该为6→1→5→2→4→3。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址和结点总个数，即正整数<em>N</em> (≤105)。结点的地址是5位非负整数，NULL地址用−1表示。</p>\n<p>接下来有<em>N</em>行，每行格式为：</p>\n<figure class=\"highlight purebasic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs purebasic\">Address <span class=\"hljs-keyword\">Data</span> <span class=\"hljs-keyword\">Next</span><br></code></pre></div></td></tr></table></figure>\n\n<p>其中<code>Address</code>是结点地址；<code>Data</code>是该结点保存的数据，为不超过105的正整数；<code>Next</code>是下一结点的地址。题目保证给出的链表上至少有两个结点。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个测试用例，顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">00100 6<br>00000 4 99999<br>00100 1 12309<br>68237 6 -1<br>33218 3 00000<br>99999 5 68237<br>12309 2 33218<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">68237 6 00100<br>00100 1 99999<br>99999 5 12309<br>12309 2 00000<br>00000 4 33218<br>33218 3 -1<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><p><strong>利用双向链表，头尾指针来模拟</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">linklist</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> address=<span class=\"hljs-number\">0</span>;\t\t\t<span class=\"hljs-comment\">//记录当前结点的地址，虽然也没用到</span><br>    <span class=\"hljs-keyword\">int</span> data=<span class=\"hljs-number\">0</span>;\t\t\t\t<span class=\"hljs-comment\">//记录数据域</span><br>    <span class=\"hljs-keyword\">int</span> next=<span class=\"hljs-number\">0</span>;\t\t\t\t<span class=\"hljs-comment\">//指向下一个结点的地址</span><br>    <span class=\"hljs-keyword\">int</span> pre=<span class=\"hljs-number\">0</span>;\t\t\t\t<span class=\"hljs-comment\">//指向上一个结点的地址</span><br>&#125;l[<span class=\"hljs-number\">100005</span>];<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> start,back=<span class=\"hljs-number\">-1</span>;\t\t<span class=\"hljs-comment\">//头尾指针</span><br>    <span class=\"hljs-keyword\">int</span> tmp;\t\t\t\t<span class=\"hljs-comment\">//用来遍历当前链表用于统计链表的长度</span><br>    <span class=\"hljs-keyword\">int</span> n;<br>    cin&gt;&gt;start&gt;&gt;n;<br>    tmp=start;<br>    <span class=\"hljs-keyword\">int</span> address, data, next;<br>    l[start].pre=<span class=\"hljs-number\">-1</span>;\t   <span class=\"hljs-comment\">//初始化第一个结点的前一个结点位置为-1</span><br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;\t\t\t  \t<span class=\"hljs-comment\">//记录链表长</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>       cin&gt;&gt;address&gt;&gt;data&gt;&gt;next;<br>       l[address].address=address;<br>       l[address].data=data;<br>       l[address].next=next;<br>       <span class=\"hljs-keyword\">if</span>(next!=<span class=\"hljs-number\">-1</span>)&#123;<br>           l[next].pre=address;\t\t\t\t<span class=\"hljs-comment\">//设值上一个结点的地址</span><br>       &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//这道题比较坑的地方是会出现不是这个链表的结点，所以n不是真正的链表长，需要统计真正的链表长</span><br>    <span class=\"hljs-comment\">//如果没注意这点，第三个测试点会不通过，不过也能得到21分</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        cnt++;\t\t\t\t<span class=\"hljs-comment\">//统计链表长\t</span><br>        <span class=\"hljs-keyword\">if</span>(l[tmp].next==<span class=\"hljs-number\">-1</span>)&#123;<br>            back=tmp;       <span class=\"hljs-comment\">//尾指针</span><br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        tmp=l[tmp].next;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//flag=0动尾指针,flag=1动头指针。我并没有改变原来链表！</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt;cnt ; ++k) &#123;<br>            <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">0</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(k==cnt<span class=\"hljs-number\">-1</span>)&#123;<br>                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%05d %d %d\\n&quot;</span>,l[back].address,l[back].data,<span class=\"hljs-number\">-1</span>);<br>                &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%05d %d %05d\\n&quot;</span>,l[back].address,l[back].data,start);<br>                &#125;<br>                back=l[back].pre;<br>                flag=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(k==cnt<span class=\"hljs-number\">-1</span>)&#123;<br>                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%05d %d %d\\n&quot;</span>,l[start].address,l[start].data,<span class=\"hljs-number\">-1</span>);<br>                &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%05d %d %05d\\n&quot;</span>,l[start].address,l[start].data,back);<br>                &#125;<br>                start=l[start].next;<br>                flag=<span class=\"hljs-number\">0</span>;<br>            &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805057860517888\">题目详情 - L2-022 重排链表 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "团体程序设计天梯赛",
                "C++",
                "LinkList",
                "双向链表"
            ]
        }
    ]
}