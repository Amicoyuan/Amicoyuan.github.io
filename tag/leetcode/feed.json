{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"leetcode\" tag",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/03/02/leetcode189/",
            "url": "https://xingyuanjie.top/2023/03/02/leetcode189/",
            "title": "189.轮转数组",
            "date_published": "2023-03-02T12:03:32.000Z",
            "content_html": "<h2 id=\"189-轮转数组\"><a href=\"#189-轮转数组\" class=\"headerlink\" title=\"189.轮转数组\"></a>189.轮转数组</h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://leetcode.cn/problems/rotate-array/\">189. 轮转数组 - 力扣（LeetCode）</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p><img src=\"/2023/03/02/leetcode189/image-20230302200538871.png\" alt=\"image-20230302200538871\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">reverse</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; nums,<span class=\"hljs-keyword\">int</span> begin,<span class=\"hljs-keyword\">int</span> end)</span></span><br><span class=\"hljs-function\">    </span>&#123;<br>        <span class=\"hljs-keyword\">while</span>(begin&lt;end)&#123;<br>            <span class=\"hljs-built_in\">swap</span>(nums[begin], nums[end]);<br>            begin++;<br>            end--;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rotate</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; nums, <span class=\"hljs-keyword\">int</span> k)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//数组翻转</span><br>        <span class=\"hljs-keyword\">int</span> p = k%nums.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-built_in\">reverse</span>(nums,<span class=\"hljs-number\">0</span>,nums.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>);<br>        <span class=\"hljs-built_in\">reverse</span>(nums,<span class=\"hljs-number\">0</span>,p<span class=\"hljs-number\">-1</span>);<br>        <span class=\"hljs-built_in\">reverse</span>(nums,p,nums.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://leetcode.cn/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/\">旋转数组 - 轮转数组 - 力扣（LeetCode）</a></p>\n",
            "tags": [
                "C++",
                "LeetCode",
                "数组翻转"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/01/leetcode724/",
            "url": "https://xingyuanjie.top/2023/03/01/leetcode724/",
            "title": "724.寻找数组的中心下标",
            "date_published": "2023-03-01T09:35:03.000Z",
            "content_html": "<h1 id=\"724-寻找数组的中心下标\"><a href=\"#724-寻找数组的中心下标\" class=\"headerlink\" title=\"724.寻找数组的中心下标\"></a>724.寻找数组的中心下标</h1><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://leetcode.cn/problems/find-pivot-index/\">724. 寻找数组的中心下标 - 力扣（LeetCode）</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p><img src=\"/2023/03/01/leetcode724/image-20230301173931031.png\" alt=\"image-20230301173931031\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">pivotIndex</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> total=<span class=\"hljs-built_in\">accumulate</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>(),<span class=\"hljs-number\">0</span>);\t<span class=\"hljs-comment\">//第三个形参是累加的初始值</span><br>        <span class=\"hljs-keyword\">int</span> sum=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.<span class=\"hljs-built_in\">size</span>();i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span>*sum+nums[i] == total)&#123;<br>                <span class=\"hljs-keyword\">return</span> i;<br>            &#125;<br>            sum+=nums[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://leetcode.cn/problems/find-pivot-index/solution/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/\">寻找数组的中心索引 - 寻找数组的中心下标 - 力扣（LeetCode）</a></p>\n",
            "tags": [
                "C++",
                "LeetCode",
                "前缀和"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/18/leetcode11/",
            "url": "https://xingyuanjie.top/2023/02/18/leetcode11/",
            "title": "11. 盛最多水的容器",
            "date_published": "2023-02-18T08:27:01.000Z",
            "content_html": "<h2 id=\"11-盛最多水的容器\"><a href=\"#11-盛最多水的容器\" class=\"headerlink\" title=\"11.盛最多水的容器\"></a>11.盛最多水的容器</h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><h4 id=\"11-盛最多水的容器-1\"><a href=\"#11-盛最多水的容器-1\" class=\"headerlink\" title=\"11. 盛最多水的容器\"></a><a href=\"https://leetcode.cn/problems/container-with-most-water/\">11. 盛最多水的容器</a></h4><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">maxArea</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//双指针；</span><br>        <span class=\"hljs-keyword\">int</span> ans =<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">int</span> left=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">int</span> right=height.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">while</span>(left&lt;right)&#123;<br>            <span class=\"hljs-keyword\">int</span> temp=<span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">if</span>(height[left]&lt;=height[right])&#123;<br>                temp = height[left]*(right-left);<br>                ans = std::<span class=\"hljs-built_in\">max</span>(ans,temp);<br>                left++;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                temp = height[right]*(right-left);<br>                ans = std::<span class=\"hljs-built_in\">max</span>(ans,temp);<br>                right--;<br>            &#125;<br>            <br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>        <br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://leetcode.cn/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/\">盛最多水的容器 - 盛最多水的容器 - 力扣（LeetCode）</a></p>\n",
            "tags": [
                "C++",
                "LeetCode",
                "双指针"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/17/leetcode001/",
            "url": "https://xingyuanjie.top/2023/02/17/leetcode001/",
            "title": "146.LRU cache",
            "date_published": "2023-02-17T06:31:45.000Z",
            "content_html": "<h2 id=\"146-LRU-cache\"><a href=\"#146-LRU-cache\" class=\"headerlink\" title=\"146.LRU cache\"></a>146.LRU cache</h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://leetcode.cn/problems/lru-cache/\">146. LRU 缓存 - 力扣（LeetCode）</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LRUCache</span> &#123;</span><br><span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-keyword\">int</span> cap=<span class=\"hljs-number\">0</span>;<br>    list&lt;pair&lt;<span class=\"hljs-keyword\">int</span>,<span class=\"hljs-keyword\">int</span>&gt;&gt; lru;   <span class=\"hljs-comment\">//真正的cache</span><br>    unordered_map&lt;<span class=\"hljs-keyword\">int</span>,list&lt;pair&lt;<span class=\"hljs-keyword\">int</span>,<span class=\"hljs-keyword\">int</span>&gt;&gt;::iterator&gt; mp;   <span class=\"hljs-comment\">//主要用处就是查找</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-built_in\">LRUCache</span>(<span class=\"hljs-keyword\">int</span> capacity) &#123;<br>        cap = capacity;\t\t\t\t\t\t<span class=\"hljs-comment\">//容量</span><br>    &#125;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> key)</span> </span>&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//作为就是把最近访问的放在表头</span><br>        <span class=\"hljs-keyword\">if</span>(mp.<span class=\"hljs-built_in\">find</span>(key)!=mp.<span class=\"hljs-built_in\">end</span>())&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//有这个元素</span><br>            lru.<span class=\"hljs-built_in\">splice</span>(lru.<span class=\"hljs-built_in\">begin</span>(),lru,mp[key]);\t\t\t<span class=\"hljs-comment\">//将一个 list 容器中的元素插入到另一个容器的指定位置</span><br>            <span class=\"hljs-keyword\">return</span> lru.<span class=\"hljs-built_in\">begin</span>()-&gt;second;\t\t\t\t<span class=\"hljs-comment\">//返回元素</span><br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//没有这个元素</span><br>        &#125;<br>    &#125;<br><br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">put</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> key, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">get</span>(key)!=<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t<span class=\"hljs-comment\">//cache中有key，调用get后自动插入到表头【key存在】</span><br>            lru.<span class=\"hljs-built_in\">begin</span>()-&gt;second = value;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;\t\t\t<span class=\"hljs-comment\">//【key不存在】</span><br>            <span class=\"hljs-keyword\">if</span>(lru.<span class=\"hljs-built_in\">size</span>()==cap)&#123;\t\t\t<span class=\"hljs-comment\">//如果容量满了</span><br>                <span class=\"hljs-keyword\">int</span> delkey = lru.<span class=\"hljs-built_in\">back</span>().first;\t\t <span class=\"hljs-comment\">//记录最久未访问的key</span><br>                lru.<span class=\"hljs-built_in\">pop_back</span>();\t\t\t\t\t\t <span class=\"hljs-comment\">//pop掉，置换</span><br>                mp.<span class=\"hljs-built_in\">erase</span>(delkey);\t\t\t\t\t <span class=\"hljs-comment\">//查找表中也删除\t</span><br>            &#125;<br>            lru.<span class=\"hljs-built_in\">emplace_front</span>(key,value);\t\t\t<span class=\"hljs-comment\">//头部生成一个元素</span><br>            mp[key]=lru.<span class=\"hljs-built_in\">begin</span>();\t\t\t\t\t<span class=\"hljs-comment\">//加入查找表</span><br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your LRUCache object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * LRUCache* obj = new LRUCache(capacity);</span><br><span class=\"hljs-comment\"> * int param_1 = obj-&gt;get(key);</span><br><span class=\"hljs-comment\"> * obj-&gt;put(key,value);</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.jianshu.com/p/bbea4b2410e6\">C++实现LRU缓存——LeetCode146 - 简书 (jianshu.com)</a></p>\n",
            "tags": [
                "C++",
                "LeetCode"
            ]
        }
    ]
}