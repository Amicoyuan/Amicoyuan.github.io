{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"graph\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/23/Algorithm032/",
            "url": "http://example.com/2022/04/23/Algorithm032/",
            "title": "L2-036 网红点打卡攻略 (25 分)",
            "date_published": "2022-04-23T13:50:27.000Z",
            "content_html": "<h2 id=\"L2-036-网红点打卡攻略-25-分\"><a href=\"#L2-036-网红点打卡攻略-25-分\" class=\"headerlink\" title=\"L2-036 网红点打卡攻略 (25 分)\"></a>L2-036 网红点打卡攻略 (25 分)</h2><p>一个旅游景点，如果被带火了的话，就被称为“网红点”。大家来网红点游玩，俗称“打卡”。在各个网红点打卡的快（省）乐（钱）方法称为“攻略”。你的任务就是从一大堆攻略中，找出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>首先第一行给出两个正整数：网红点的个数 <em>N</em>（1&lt;<em>N</em>≤200）和网红点之间通路的条数 <em>M</em>。随后 <em>M</em> 行，每行给出有通路的两个网红点、以及这条路上的旅行花费（为正整数），格式为“网红点1 网红点2 费用”，其中网红点从 1 到 <em>N</em> 编号；同时也给出你家到某些网红点的花费，格式相同，其中你家的编号固定为 <code>0</code>。</p>\n<p>再下一行给出一个正整数 <em>K</em>，是待检验的攻略的数量。随后 <em>K</em> 行，每行给出一条待检攻略，格式为：</p>\n<p><em>n</em> <em>V</em>1 <em>V</em>2 ⋯ Vn</p>\n<p>其中 <em>n</em>(≤200) 是攻略中的网红点数，<em>Vi</em> 是路径上的网红点编号。这里假设你从家里出发，从 <em>V</em>1 开始打卡，最后从 <em>Vn</em> 回家。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在第一行输出满足要求的攻略的个数。</p>\n<p>在第二行中，首先输出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略的序号（从 1 开始），然后输出这个攻略的总路费，其间以一个空格分隔。如果这样的攻略不唯一，则输出序号最小的那个。</p>\n<p>题目保证至少存在一个有效攻略，并且总路费不超过 109。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">6 13<br>0 5 2<br>6 2 2<br>6 0 1<br>3 4 2<br>1 5 2<br>2 5 1<br>3 1 1<br>4 1 2<br>1 6 1<br>6 3 2<br>1 2 1<br>4 5 3<br>2 0 2<br>7<br>6 5 1 4 3 6 2<br>6 5 2 1 6 3 4<br>8 6 2 1 6 3 4 5 2<br>3 2 1 5<br>6 6 1 3 4 5 2<br>7 6 2 1 3 4 5 2<br>6 5 2 1 4 3 6<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">3<br>5 11<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"样例说明：\"><a href=\"#样例说明：\" class=\"headerlink\" title=\"样例说明：\"></a>样例说明：</h3><p>第 2、3、4、6 条都不满足攻略的基本要求，即不能做到从家里出发，在每个网红点打卡仅一次，且能回到家里。所以满足条件的攻略有 3 条。</p>\n<p>第 1 条攻略的总路费是：(0-&gt;5) 2 + (5-&gt;1) 2 + (1-&gt;4) 2 + (4-&gt;3) 2 + (3-&gt;6) 2 + (6-&gt;2) 2 + (2-&gt;0) 2 &#x3D; 14；</p>\n<p>第 5 条攻略的总路费同理可算得：1 + 1 + 1 + 2 + 3 + 1 + 2 &#x3D; 11，是一条更省钱的攻略；</p>\n<p>第 7 条攻略的总路费同理可算得：2 + 1 + 1 + 2 + 2 + 2 + 1 &#x3D; 11，与第 5 条花费相同，但序号较大，所以不输出。</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">205</span>][<span class=\"hljs-number\">205</span>];<br><span class=\"hljs-keyword\">int</span> minsize=INT_MAX;\t\t\t<span class=\"hljs-comment\">//初始化为INT_MAX</span><br><span class=\"hljs-keyword\">int</span> minid=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b,c;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=c;<br>        g[b][a]=c;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> time;<br>    cin&gt;&gt;time;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class=\"hljs-keyword\">int</span> roll[k+<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-keyword\">int</span> has[k+<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-built_in\">memset</span>(has,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(has));<br>        roll[<span class=\"hljs-number\">0</span>]=roll[k+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;\t\t\t\t\t<span class=\"hljs-comment\">//起点和终点必定是家</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=k ; ++i) &#123;<br>            cin&gt;&gt;roll[i];<br>            <span class=\"hljs-keyword\">if</span>(has[roll[i]]) has[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//每个打卡点仅能打卡一次</span><br>            <span class=\"hljs-keyword\">else</span> has[roll[i]]=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> flag=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">int</span> tmpsize=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span>(k!=n||has[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">continue</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=k+<span class=\"hljs-number\">1</span> ; ++l) &#123;<br>            <span class=\"hljs-keyword\">if</span>(g[roll[l<span class=\"hljs-number\">-1</span>]][roll[l]]==<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                flag=<span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            tmpsize+=g[roll[l<span class=\"hljs-number\">-1</span>]][roll[l]];<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(tmpsize&lt;minsize)&#123;<br>                minsize=tmpsize;<br>                minid=j+<span class=\"hljs-number\">1</span>;<br><br>            &#125;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt&lt;&lt;endl;<br>    cout&lt;&lt;minid&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;minsize&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482059\">题目详情 - L2-036 网红点打卡攻略 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "团体程序设计天梯赛",
                "C++",
                "Graph",
                "邻接矩阵"
            ]
        },
        {
            "id": "http://example.com/2022/04/16/Algorithm028/",
            "url": "http://example.com/2022/04/16/Algorithm028/",
            "title": "L2-010 排座位 (25 分)",
            "date_published": "2022-04-16T06:57:46.000Z",
            "content_html": "<h2 id=\"L2-010-排座位-25-分\"><a href=\"#L2-010-排座位-25-分\" class=\"headerlink\" title=\"L2-010 排座位 (25 分)\"></a><strong>L2-010 排座位 (25 分)</strong></h2><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1 宾客2 关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p>\n<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OK but...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7 8 4<br>5 6 1<br>2 7 -1<br>1 3 1<br>3 4 1<br>6 7 -1<br>1 2 1<br>1 4 1<br>2 3 -1<br>3 4<br>5 7<br>2 3<br>7 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">No problem<br>OK<br>OK but...<br>No way<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵 + 并查集</strong></p>\n<p><strong>并查集具体链接：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/01/04/Algorithm004/\">并查集 - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> pre[<span class=\"hljs-number\">100</span>];\t\t\t\t<span class=\"hljs-comment\">//父节点</span><br><span class=\"hljs-keyword\">int</span> deep[<span class=\"hljs-number\">100</span>];\t\t\t\t<span class=\"hljs-comment\">//深度</span><br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">101</span>][<span class=\"hljs-number\">101</span>];\t\t\t<span class=\"hljs-comment\">//邻接矩阵建图</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        pre[i]=i;<br>        deep[i]=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(pre[x]==x)&#123;<br>        <span class=\"hljs-keyword\">return</span> x;<br>    &#125; <span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> pre[x]=<span class=\"hljs-built_in\">find</span>(pre[x]);<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x,<span class=\"hljs-keyword\">int</span> y)</span></span>&#123;<br>    x=<span class=\"hljs-built_in\">find</span>(x);<br>    y=<span class=\"hljs-built_in\">find</span>(y);<br>    <span class=\"hljs-keyword\">if</span>(x==y) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">if</span>(deep[x]&lt;deep[y])&#123;<br>        pre[x]=y;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        pre[y]=x;<br>        <span class=\"hljs-keyword\">if</span>(deep[x]==deep[y])&#123;<br>            deep[x]++;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n,m,k;<br>    <span class=\"hljs-built_in\">init</span>(<span class=\"hljs-number\">105</span>);<br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b,c;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=g[b][a]=c;<br>        <span class=\"hljs-keyword\">if</span>(c==<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">unit</span>(a,b);\t\t\t\t\t<span class=\"hljs-comment\">//如果是朋友则合并</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;k ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">1</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;No problem&quot;</span>&lt;&lt;endl;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">0</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">0</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;OK&quot;</span>&lt;&lt;endl;\t\t\t<span class=\"hljs-comment\">//两人毫无关系</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">-1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">-1</span>&amp;&amp;<span class=\"hljs-built_in\">find</span>(a)==<span class=\"hljs-built_in\">find</span>(b)) cout&lt;&lt;<span class=\"hljs-string\">&quot;OK but...&quot;</span>&lt;&lt;endl;\t<span class=\"hljs-comment\">//敌对且有共同朋友</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">-1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">-1</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;No way&quot;</span>&lt;&lt;endl;\t\t<span class=\"hljs-comment\">//仅敌对</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/weixin_45260385/article/details/109752008\">(20条消息) 【PTA】 L2-010 排座位 (25分) 【简单并查集】_黑桃️的博客-CSDN博客</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066135879680\">题目详情 - L2-010 排座位 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "团体程序设计天梯赛",
                "C++",
                "Graph",
                "邻接矩阵",
                "并查集"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/Algorithm025/",
            "url": "http://example.com/2022/04/15/Algorithm025/",
            "title": "L2-013 红色警报 (25 分)",
            "date_published": "2022-04-15T13:09:30.000Z",
            "content_html": "<h2 id=\"L2-013-红色警报-25-分\"><a href=\"#L2-013-红色警报-25-分\" class=\"headerlink\" title=\"L2-013 红色警报 (25 分)\"></a>L2-013 红色警报 (25 分)</h2><p>战争中保持各个城市间的连通性非常重要。本题要求你编写一个报警程序，当失去一个城市导致国家被分裂为多个无法连通的区域时，就发出红色警报。注意：若该国本来就不完全连通，是分裂的k个区域，而失去一个城市并不改变其他城市之间的连通性，则不要发出警报。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出两个整数<code>N</code>（0 &lt; <code>N</code> ≤ 500）和<code>M</code>（≤ 5000），分别为城市个数（于是默认城市从0到<code>N</code>-1编号）和连接两城市的通路条数。随后<code>M</code>行，每行给出一条通路所连接的两个城市的编号，其间以1个空格分隔。在城市信息之后给出被攻占的信息，即一个正整数<code>K</code>和随后的<code>K</code>个被攻占的城市的编号。</p>\n<p>注意：输入保证给出的被攻占的城市编号都是合法的且无重复，但并不保证给出的通路没有重复。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个被攻占的城市，如果它会改变整个国家的连通性，则输出<code>Red Alert: City k is lost!</code>，其中<code>k</code>是该城市的编号；否则只输出<code>City k is lost.</code>即可。如果该国失去了最后一个城市，则增加一行输出<code>Game Over.</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">5 4<br>0 1<br>1 3<br>3 0<br>0 4<br>5<br>1 2 0 4 3<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">City 1 is lost.<br>City 2 is lost.<br>Red Alert: City 0 is lost!<br>City 4 is lost.<br>City 3 is lost.<br>Game Over.<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵建图 + DFS统计连通分量数</strong></p>\n<p><strong>对于无向图来说，dfstrave()中dfs()或bfstrave()中bfs()的调用次数等于该图的连通分量数</strong></p>\n<p><strong>无向图中的极大连通子图称为连通分量</strong></p>\n<p><strong>极大连通子图必须连通，且包含尽可能多的顶点和边</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">505</span>][<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t<span class=\"hljs-comment\">//邻接矩阵存图</span><br><span class=\"hljs-keyword\">int</span> visit[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//标记访问数组</span><br><span class=\"hljs-keyword\">int</span> lost[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//记录被攻占的城市</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> node)</span></span>&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//正常的DFS</span><br>    visit[node]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>&amp;&amp;g[node][i]==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">dfstrave</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(visit,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(visit));\t\t\t<span class=\"hljs-comment\">//初始化访问数组</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(lost[i]==<span class=\"hljs-number\">1</span>) visit[i]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//如果该城市被攻占，则标记他为以访问</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>            cnt++;      \t\t\t\t\t<span class=\"hljs-comment\">//统计连通分量数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> cnt;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-built_in\">memset</span>(lost,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(lost));\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));\t\t\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++)&#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        g[a][b]=g[b][a]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//存储无向图</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t\t\t<span class=\"hljs-comment\">//获得初始的连通分量数</span><br>    <span class=\"hljs-keyword\">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> w=<span class=\"hljs-number\">0</span>;w&lt;k;w++)&#123;<br>        <span class=\"hljs-keyword\">int</span> city;<br>        cin&gt;&gt;city;<br>        lost[city]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//记录该城市被攻占</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(g[city][i]==<span class=\"hljs-number\">1</span>)&#123;\t\t\t\t<br>                g[city][i]=g[i][city]=<span class=\"hljs-number\">0</span>;\t<span class=\"hljs-comment\">//标记和他相连的城市不再相连</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> tempcnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t<span class=\"hljs-comment\">//当前的连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(tempcnt&lt;=cnt)&#123;\t\t\t\t\t<span class=\"hljs-comment\">//如果当前的连通分量小于等于原来的连通分量，说明图的连通性没有被改变</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;City %d is lost.\\n&quot;</span>, city);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//否则，连通性被改变了</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Red Alert: City %d is lost!\\n&quot;</span>, city);<br>        &#125;<br>        cnt=tempcnt;\t\t\t\t\t\t<span class=\"hljs-comment\">//更新连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(w==n<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//城市已经被攻占完毕</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Game Over.\\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805063963230208\">题目详情 - L2-013 红色警报 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "团体程序设计天梯赛",
                "C++",
                "Graph",
                "邻接矩阵",
                "DFS"
            ]
        },
        {
            "id": "http://example.com/2022/04/12/Algorithm018/",
            "url": "http://example.com/2022/04/12/Algorithm018/",
            "title": "L2-023 图着色问题 (25 分)",
            "date_published": "2022-04-12T10:59:52.000Z",
            "content_html": "<h2 id=\"L2-023-图着色问题-25-分\"><a href=\"#L2-023-图着色问题-25-分\" class=\"headerlink\" title=\"L2-023 图着色问题 (25 分)\"></a>L2-023 图着色问题 (25 分)</h2><p>图着色问题是一个著名的NP完全问题。给定无向图<em>G</em>&#x3D;(<em>V</em>,<em>E</em>)，问可否用<em>K</em>种颜色为<em>V</em>中的每一个顶点分配一种颜色，使得不会有两个相邻顶点具有同一种颜色？</p>\n<p>但本题并不是要你解决这个着色问题，而是对给定的一种颜色分配，请你判断这是否是图着色问题的一个解。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出3个整数<em>V</em>（0&lt;<em>V</em>≤500）、<em>E</em>（≥0）和<em>K</em>（0&lt;<em>K</em>≤<em>V</em>），分别是无向图的顶点数、边数、以及颜色数。顶点和颜色都从1到<em>V</em>编号。随后<em>E</em>行，每行给出一条边的两个端点的编号。在图的信息给出之后，给出了一个正整数<em>N</em>（≤20），是待检查的颜色分配方案的个数。随后<em>N</em>行，每行顺次给出<em>V</em>个顶点的颜色（第<em>i</em>个数字表示第<em>i</em>个顶点的颜色），数字间以空格分隔。题目保证给定的无向图是合法的（即不存在自回路和重边）。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每种颜色分配方案，如果是图着色问题的一个解则输出<code>Yes</code>，否则输出<code>No</code>，每句占一行。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><img src=\"/2022/04/12/Algorithm018/graph.png\" alt=\"graph\" style=\"zoom: 67%;\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">6 8 3<br>2 1<br>1 3<br>4 6<br>2 5<br>2 4<br>5 4<br>5 6<br>3 6<br>4<br>1 2 3 3 1 2<br>4 5 6 6 4 5<br>1 2 3 4 5 6<br>2 3 4 2 3 4<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">Yes<br>Yes<br>No<br>No<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><p><strong>Set + 邻接表</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> v,e,k;<br>    cin&gt;&gt;v&gt;&gt;e&gt;&gt;k;<br>    vector&lt;<span class=\"hljs-keyword\">int</span>&gt; g[<span class=\"hljs-number\">505</span>];\t\t\t<span class=\"hljs-comment\">//邻接表</span><br>    <span class=\"hljs-keyword\">int</span> color[<span class=\"hljs-number\">505</span>];\t\t\t\t<span class=\"hljs-comment\">//记录颜色</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;e ; ++i) &#123;       <span class=\"hljs-comment\">//建立邻接表</span><br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        g[a].<span class=\"hljs-built_in\">push_back</span>(b);<br>        g[b].<span class=\"hljs-built_in\">push_back</span>(a);<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> time;<br>    cin&gt;&gt;time;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> flag=<span class=\"hljs-number\">1</span>;<br>        set&lt;<span class=\"hljs-keyword\">int</span>&gt; s;\t\t\t\t\t<span class=\"hljs-comment\">//用来统计颜色总数</span><br>        s.<span class=\"hljs-built_in\">clear</span>();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=v; ++i) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            color[i]=num;<br>            s.<span class=\"hljs-built_in\">insert</span>(num);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(s.<span class=\"hljs-built_in\">size</span>()!=k)&#123;\t\t\t<span class=\"hljs-comment\">//如果颜色数不等于k即非法</span><br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;No&quot;</span>&lt;&lt;endl;<br>            <span class=\"hljs-keyword\">continue</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=v ; ++l) &#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//遍历邻接表</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;g[l].<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>                <span class=\"hljs-keyword\">if</span>(color[l]==color[g[l][i]])&#123;\t\t\t\t<span class=\"hljs-comment\">//如果相邻结点颜色一样则为假</span><br>                    flag=<span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">1</span>)&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;Yes&quot;</span>&lt;&lt;endl;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;No&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805057298481152\">题目详情 - L2-023 图着色问题 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "Set",
                "团体程序设计天梯赛",
                "C++",
                "Graph",
                "邻接表",
                "Vector"
            ]
        },
        {
            "id": "http://example.com/2021/12/22/algorithm002/",
            "url": "http://example.com/2021/12/22/algorithm002/",
            "title": "Graph-Data Structure",
            "date_published": "2021-12-22T13:25:36.000Z",
            "content_html": "<h1 id=\"Graph-Data-Structure\"><a href=\"#Graph-Data-Structure\" class=\"headerlink\" title=\"Graph-Data Structure\"></a>Graph-Data Structure</h1><h2 id=\"1-邻接表的应用\"><a href=\"#1-邻接表的应用\" class=\"headerlink\" title=\"1.邻接表的应用\"></a>1.邻接表的应用</h2><h3 id=\"样题一：L2-025-分而治之-25-分\"><a href=\"#样题一：L2-025-分而治之-25-分\" class=\"headerlink\" title=\"样题一：L2-025 分而治之 (25 分)\"></a>样题一：L2-025 分而治之 (25 分)</h3><h4 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h4><p>分而治之，各个击破是兵家常用的策略之一。在战争中，我们希望首先攻下敌方的部分城市，使其剩余的城市变成孤立无援，然后再分头各个击破。为此参谋部提供了若干打击方案。本题就请你编写程序，判断每个方案的可行性。</p>\n<h4 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h4><p>输入在第一行给出两个正整数 N 和 M（均不超过10 000），分别为敌方城市个数（于是默认城市从 1 到 N 编号）和连接两城市的通路条数。随后 M 行，每行给出一条通路所连接的两个城市的编号，其间以一个空格分隔。在城市信息之后给出参谋部的系列方案，即一个正整数 K （≤ 100）和随后的 K 行方案，每行按以下格式给出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs css\">Np v<span class=\"hljs-selector-attr\">[1]</span> v<span class=\"hljs-selector-attr\">[2]</span> ... v<span class=\"hljs-selector-attr\">[Np]</span><br></code></pre></div></td></tr></table></figure>\n\n<p>其中 <code>Np</code> 是该方案中计划攻下的城市数量，后面的系列 <code>v[i]</code> 是计划攻下的城市编号。</p>\n<h4 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h4><p>对每一套方案，如果可行就输出<code>YES</code>，否则输出<code>NO</code>。</p>\n<h4 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v[<span class=\"hljs-number\">10005</span>]; <span class=\"hljs-comment\">//声明邻接表</span><br>    <span class=\"hljs-keyword\">int</span> n,num;<br>    cin&gt;&gt;n&gt;&gt;num;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;num ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> start,end;<br>        cin&gt;&gt;start&gt;&gt;end;<br>        <span class=\"hljs-comment\">//创建邻接表</span><br>        v[start].<span class=\"hljs-built_in\">push_back</span>(end); <br>        v[end].<span class=\"hljs-built_in\">push_back</span>(start);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">int</span> k;<br>    cin&gt;&gt;k;<br>    <br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;k ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> np;<br>        cin&gt;&gt;np;<br>        <span class=\"hljs-keyword\">int</span> flag=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">int</span> book[<span class=\"hljs-number\">10005</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<span class=\"hljs-comment\">//每轮炸毁城市初始化</span><br>        <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=np ; ++i) &#123;<br>            <span class=\"hljs-keyword\">int</span> dead;<br>            cin&gt;&gt;dead;<br>            book[dead]=<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//被炸毁的城市标记为1</span><br>        &#125;<br>        <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=n ; ++l) &#123;<br>            <br>            <span class=\"hljs-keyword\">if</span>(book[l]==<span class=\"hljs-number\">0</span>)<span class=\"hljs-comment\">//没有被炸毁的城市</span><br>            &#123;<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;v[l].<span class=\"hljs-built_in\">size</span>() ; ++i) &#123; <span class=\"hljs-comment\">//遍历该城市的邻接表</span><br>                    <br>                    <span class=\"hljs-keyword\">if</span>(book[v[l][i]]==<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//存在着还连通的城市</span><br>                    &#123;<br>                        flag=<span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//说明方案不可行</span><br>                        <span class=\"hljs-keyword\">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;YES&quot;</span>&lt;&lt;endl;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;NO&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"程序输入：\"><a href=\"#程序输入：\" class=\"headerlink\" title=\"程序输入：\"></a>程序输入：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">10</span> <span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">8</span> <span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">6</span> <span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">8</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">8</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">9</span> <span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">9</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">6</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">7</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2</span><br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">NO<br>YES<br>YES<br>NO<br>NO<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"题目相关链接：\"><a href=\"#题目相关链接：\" class=\"headerlink\" title=\"题目相关链接：\"></a>题目相关链接：</h2><p>[<a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805056195379200]\">https://pintia.cn/problem-sets/994805046380707840/problems/994805056195379200]</a>: \t“样例一:L2-025 分而治之 (25 分)”</p>\n",
            "tags": [
                "Data Structure",
                "Graph"
            ]
        }
    ]
}