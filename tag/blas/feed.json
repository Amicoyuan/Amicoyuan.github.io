{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"blas\" tag",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/07/11/gemm0010/",
            "url": "https://xingyuanjie.top/2023/07/11/gemm0010/",
            "title": "论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures",
            "date_published": "2023-07-11T13:47:35.000Z",
            "content_html": "<h2 id=\"论文阅读：Towards-Efficient-SpMV-on-Sunway-Manycore-Architectures\"><a href=\"#论文阅读：Towards-Efficient-SpMV-on-Sunway-Manycore-Architectures\" class=\"headerlink\" title=\"论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures\"></a>论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures</h2><h2 id=\"文章链接：\"><a href=\"#文章链接：\" class=\"headerlink\" title=\"文章链接：\"></a>文章链接：</h2><p><a href=\"https://dl.acm.org/doi/pdf/10.1145/3205289.3205313?accessTab=true\">Towards Efficient SpMV on Sunway Manycore Architectures | Proceedings of the 2018 International Conference on Supercomputing (acm.org)</a></p>\n<h2 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h2><h3 id=\"dual-side-multi-level-partitioning-technique\"><a href=\"#dual-side-multi-level-partitioning-technique\" class=\"headerlink\" title=\"dual-side multi-level partitioning technique\"></a>dual-side multi-level partitioning technique</h3><p>三层分块：Block-&gt;Tile-&gt;Slice</p>\n<p>其中在Tile这一层会有空Tile块，不需要计算</p>\n<p>其中Slice这一层也会有空Slice切片，不需要计算</p>\n<p>最底层Slice切片是我们的计算核心</p>\n<p>多级队列：负载均衡—&gt;The work sharing mechanism in the block and slice queuesguarantee the workload balance across fleets and cores.</p>\n<p><img src=\"/2023/07/11/gemm0010/image-20230711215435026.png\" alt=\"image-20230711215435026\"></p>\n<p><strong>映射细节：</strong></p>\n<p><img src=\"/2023/07/11/gemm0010/image-20230711220304175.png\" alt=\"image-20230711220304175\"></p>\n<h3 id=\"计算核心处理逻辑\"><a href=\"#计算核心处理逻辑\" class=\"headerlink\" title=\"计算核心处理逻辑\"></a>计算核心处理逻辑</h3><p>一行8个核心：7个计算核心，1个I&#x2F;O核心</p>\n<p>计算核心负责SPMV计算</p>\n<p>I&#x2F;O核心负责将结果写回内存</p>\n<p>多个slice组合—&gt;batch，方便DMA，并进行数据预取(单位batch)，注意计算核心slice依然没有改变</p>\n<p>利用向量寄存器，巧妙搭载msg</p>\n<p><img src=\"/2023/07/11/gemm0010/image-20230711221015472.png\" alt=\"image-20230711221015472\"></p>\n<h3 id=\"I-x2F-O核心的处理逻辑\"><a href=\"#I-x2F-O核心的处理逻辑\" class=\"headerlink\" title=\"I&#x2F;O核心的处理逻辑\"></a>I&#x2F;O核心的处理逻辑</h3><p>整个block计算完才写回，避免反复访存</p>\n<p>向量计算器meg-&gt;reduce</p>\n<p><strong>利用神威RMA</strong></p>\n",
            "tags": [
                "blas",
                "spmv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/07/03/gemm0009/",
            "url": "https://xingyuanjie.top/2023/07/03/gemm0009/",
            "title": "论文阅读：稀疏矩阵向量乘法在申威众核架构上的性能优化",
            "date_published": "2023-07-03T13:56:03.000Z",
            "content_html": "<h2 id=\"稀疏矩阵向量乘法在申威众核架构上的性能优化\"><a href=\"#稀疏矩阵向量乘法在申威众核架构上的性能优化\" class=\"headerlink\" title=\"稀疏矩阵向量乘法在申威众核架构上的性能优化\"></a>稀疏矩阵向量乘法在申威众核架构上的性能优化</h2><h2 id=\"文章链接：\"><a href=\"#文章链接：\" class=\"headerlink\" title=\"文章链接：\"></a>文章链接：</h2><p><a href=\"https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C44YLTlOAiTRKibYlV5Vjs7i8oRR1PAr7RxjuAJk4dHXos_BuYfGFXVp2oi-VeHUWWPMdimPFvuCr6UTXzh1QasE&uniplatform=NZKPT\">稀疏矩阵向量乘法在申威众核架构上的性能优化 - 中国知网 (cnki.net)</a></p>\n<h2 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h2><h3 id=\"固定划分方法\"><a href=\"#固定划分方法\" class=\"headerlink\" title=\"固定划分方法\"></a>固定划分方法</h3><ol>\n<li>所有计算完再写回</li>\n<li>子矩阵(任务)-&gt;子矩阵小块(核心计算)</li>\n<li>将子矩阵小块中的非零元存储在一起，以适应申威处理器上的DMA操作。(Packing)</li>\n<li>核心：寄存器通信-&gt;RMA</li>\n<li>根据LDM大小提前计算，充分利用LDM空间，换句话说就是保证计算所需都在LDM中</li>\n<li>加载冗余X，避免DMA隔断</li>\n</ol>\n<h3 id=\"一维负载均衡划分方法\"><a href=\"#一维负载均衡划分方法\" class=\"headerlink\" title=\"一维负载均衡划分方法\"></a>一维负载均衡划分方法</h3><ol>\n<li>尽量使从核处理非零元数量相当</li>\n<li>4个层次：原矩阵-&gt;矩阵带-&gt;子矩阵-&gt;小块</li>\n<li>交替分配矩阵带给从核行</li>\n<li>核心计算依然是子矩阵小块，同固定划分方法</li>\n</ol>\n<h3 id=\"二维负载均衡划分方法\"><a href=\"#二维负载均衡划分方法\" class=\"headerlink\" title=\"二维负载均衡划分方法\"></a>二维负载均衡划分方法</h3><ol>\n<li>矩阵带分配采取贪心的方法，尽可能保证不同行之间的负载均衡</li>\n<li>解决一维负载均衡方法带来的细粒度同步问题</li>\n<li>非零元过少的矩阵带，交给一个从核完成，而不再均分给同行上的几个从核</li>\n<li>一维和二维主要解决预处理，计算还是固定划分中的子矩阵小块</li>\n<li>排序-&gt;根据矩阵带非零元数量从大到小排序(逻辑排序)</li>\n<li>Select函数会在所有ROWS行的从核中，选择出目前非零元数量最少的一行，并将当前的矩阵带i分配给它</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">输入：tiles,nnz_tile，ROWS<br>输出：set<br>nnz_set&lt;<span class=\"hljs-number\">-0</span><br><span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">0</span> to tiles - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span><br>    Select id <span class=\"hljs-keyword\">if</span> nnz_set[id] is minimal   <span class=\"hljs-comment\">//注意：这里是选从核行，不是矩阵带</span><br>    nnz_set[id] += nnz_tiles[i]<br>    set[id] =  set[id]U&#123;i&#125;   <span class=\"hljs-comment\">//任务分配</span><br>end <span class=\"hljs-keyword\">for</span> <br></code></pre></div></td></tr></table></figure>\n\n<p>这里注意，我们在固定划分那里解决了数据局部性差等问题，之后的一二维划分，都是在做任务分配，核心计算子矩阵小块一直未改变</p>\n",
            "tags": [
                "blas",
                "spmv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/09/gemm0008/",
            "url": "https://xingyuanjie.top/2023/06/09/gemm0008/",
            "title": "论文阅读：面向国产申威 26010 众核处理器的 SpMV 实现与优化",
            "date_published": "2023-06-08T16:20:37.000Z",
            "content_html": "<h2 id=\"面向国产申威-26010-众核处理器的-SpMV-实现与优化\"><a href=\"#面向国产申威-26010-众核处理器的-SpMV-实现与优化\" class=\"headerlink\" title=\"面向国产申威 26010 众核处理器的 SpMV 实现与优化\"></a>面向国产申威 26010 众核处理器的 SpMV 实现与优化</h2><h2 id=\"文章链接：\"><a href=\"#文章链接：\" class=\"headerlink\" title=\"文章链接：\"></a>文章链接：</h2><p><a href=\"https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C44YLTlOAiTRKibYlV5Vjs7iLik5jEcCI09uHa3oBxtWoDjpNvZMhBwTwYhU5_aacU5_o2Scyx5dsHMxE0wqndQa&uniplatform=NZKPT\">面向国产申威26010众核处理器的SpMV实现与优化 - 中国知网 (cnki.net)</a></p>\n<h2 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h2><p>存储格式：CSR</p>\n<p>数据名称定义：</p>\n<ul>\n<li>col:非零元的列号</li>\n<li>data:非零元数值，连续存放</li>\n<li>row_off:x数组，每行第一个元素前面的非零元素，最后一个rowoff代表总的非零元素</li>\n<li>vec:计算向量</li>\n<li>y:结果向量</li>\n<li>rows:行号</li>\n<li>srow:为当前申威处理器一个从核的 LDM 可以容纳的最多稀疏行大小</li>\n</ul>\n<h3 id=\"X动静态buffer\"><a href=\"#X动静态buffer\" class=\"headerlink\" title=\"X动静态buffer\"></a>X动静态buffer</h3><p>x静态buffer，初始化后一直不改变。(论文中有两种初始化方法)</p>\n<p>x动态buffer，未命中，则用dma更新x动态buffer</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//slave.c</span><br>LDM-&gt;malloc   x_sbuffer   <span class=\"hljs-comment\">//x静态buffer</span><br>LDM-&gt;malloc   x_dbuffer   <span class=\"hljs-comment\">//x动态buffer</span><br>sstart,send,dstart,<span class=\"hljs-function\">dend</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">dma</span><span class=\"hljs-params\">(vec-&gt;x_sbuffer,sstart,send)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">dma</span><span class=\"hljs-params\">(vec-&gt;x_dbuffer,dstart,dend)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> srow</span><br><span class=\"hljs-function\">    <span class=\"hljs-keyword\">for</span> row</span><br><span class=\"hljs-function\">        <span class=\"hljs-title\">if</span><span class=\"hljs-params\">(in x_sbuffer)</span></span><br><span class=\"hljs-function\">            cal</span><br><span class=\"hljs-function\">        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title\">if</span><span class=\"hljs-params\">(in x_dbuffer)</span></span><br><span class=\"hljs-function\">            cal</span><br><span class=\"hljs-function\">        <span class=\"hljs-keyword\">else</span></span><br><span class=\"hljs-function\">            <span class=\"hljs-title\">update_dma</span><span class=\"hljs-params\">(vec-&gt;x_dbuffer,dstart,dend)</span></span><br><span class=\"hljs-function\">            cal</span><br><span class=\"hljs-function\">     store</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>动静态划分</p>\n<p>第一轮静态：每个从核分配相同的任务量即srow</p>\n<p>后续采用动态：哪个从核先计算完，就先从任务池里面拿新的任务</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//slave.c</span><br>eg:<span class=\"hljs-number\">64</span>个从核<br>task_num <span class=\"hljs-comment\">//任务数</span><br>now_addr <span class=\"hljs-comment\">//当前任务计算到哪里了</span><br><span class=\"hljs-comment\">//第一轮  每个从核执行相同的任务量即srow</span><br>    <br>cal srow<br><br><span class=\"hljs-comment\">//其余任务保存到任务池，用锁保护，实现互斥操作</span><br><br><span class=\"hljs-comment\">//任务池，当task_num为0时计算完毕</span><br>mutex = <span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">P</span>(mutex)<br><span class=\"hljs-comment\">//互斥区</span><br>task_num<br>now_addr<br><span class=\"hljs-built_in\">V</span>(mutex)<br><span class=\"hljs-comment\">//取now_addr</span><br>cal  srow<br><span class=\"hljs-comment\">//随后 继续loop，直到task_num为0</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "spmv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0007/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0007/",
            "title": "Packing into contiguous memory",
            "date_published": "2023-06-07T05:47:39.000Z",
            "content_html": "<h2 id=\"Packing-into-contiguous-memory\"><a href=\"#Packing-into-contiguous-memory\" class=\"headerlink\" title=\"Packing into contiguous memory\"></a>Packing into contiguous memory</h2><ul>\n<li>首先，我们打包A块，这样我们就可以连续地穿过它(march through it)。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_12\">Optimization_4x4_12 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_13\">Optimization_4x4_13 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>这将带来惊人的性能提升:</p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult0_MMult-4x4-13.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult-4x4-11_MMult-4x4-13.png\" alt=\"img\"></p>\n<ul>\n<li>最后，我们打包B块，以便连续地遍历它。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14\">https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14\">Optimization_4x4_14 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>我们现在达到了处理器90%的涡轮增压峰值!</p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult0_MMult-4x4-15.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult-4x4-13_MMult-4x4-15.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-4x4-12\"><a href=\"#Optimization-4x4-12\" class=\"headerlink\" title=\"Optimization_4x4_12\"></a>Optimization_4x4_12</h2><p>在调用AddDot4x4之前，我们现在打包到4xk的A块。我们看到性能下降。如果检查内部内核，就会注意到每个4xk的A块都被重复打包，每次执行外部循环一次。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-keyword\">double</span> <br>    packedA[ m * k ];<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>      <span class=\"hljs-built_in\">PackMatrixA</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i, <span class=\"hljs-number\">0</span> ), lda, &amp;packedA[ i*k ] );<br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;packedA[ i*k ], <span class=\"hljs-number\">4</span>, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *a_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> j;<br><br>  <span class=\"hljs-keyword\">for</span>( j=<span class=\"hljs-number\">0</span>; j&lt;k; j++)&#123;  <span class=\"hljs-comment\">/* loop over columns of A */</span><br>    <span class=\"hljs-keyword\">double</span> <br>      *a_ij_pntr = &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, j );<br><br>    *a_to++ = *a_ij_pntr;<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">1</span>);<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">2</span>);<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">3</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) );<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-13\"><a href=\"#Optimization-4x4-13\" class=\"headerlink\" title=\"Optimization_4x4_13\"></a>Optimization_4x4_13</h2><p>这个版本保存了A的打包块，以便在InnerKernel的外部循环的第一次迭代之后，使用保存的版本。性能的提升是显而易见的!与上一个版本相比，唯一的变化是增加了if (j&#x3D;&#x3D; 0)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs C++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-keyword\">double</span> <br>    packedA[ m * k ];<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>      <span class=\"hljs-keyword\">if</span> ( j == <span class=\"hljs-number\">0</span> ) <span class=\"hljs-built_in\">PackMatrixA</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i, <span class=\"hljs-number\">0</span> ), lda, &amp;packedA[ i*k ] );<br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;packedA[ i*k ], <span class=\"hljs-number\">4</span>, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *a_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> j;<br><br>  <span class=\"hljs-keyword\">for</span>( j=<span class=\"hljs-number\">0</span>; j&lt;k; j++)&#123;  <span class=\"hljs-comment\">/* loop over columns of A */</span><br>    <span class=\"hljs-keyword\">double</span> <br>      *a_ij_pntr = &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, j );<br><br>    *a_to++ = *a_ij_pntr;<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">1</span>);<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">2</span>);<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">3</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) a );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) ( a+<span class=\"hljs-number\">2</span> ) );<br>    a += <span class=\"hljs-number\">4</span>;<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-14\"><a href=\"#Optimization-4x4-14\" class=\"headerlink\" title=\"Optimization_4x4_14\"></a>Optimization_4x4_14</h2><p>我们现在打包b的kx4块，注意，在这个版本中，面板是重复打包的，这会对性能产生不利影响。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixB</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc, i==<span class=\"hljs-number\">0</span> );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc, <span class=\"hljs-keyword\">int</span> first_time )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-keyword\">double</span> <br>    packedA[ m * k ], packedB[ k*n ];<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-built_in\">PackMatrixB</span>( k, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, j ), ldb, &amp;packedB[ j*k ] );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>      <span class=\"hljs-keyword\">if</span> ( j == <span class=\"hljs-number\">0</span> ) <br>\t<span class=\"hljs-built_in\">PackMatrixA</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i, <span class=\"hljs-number\">0</span> ), lda, &amp;packedA[ i*k ] );<br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;packedA[ i*k ], <span class=\"hljs-number\">4</span>, &amp;packedB[ j*k ], k, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *a_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> j;<br><br>  <span class=\"hljs-keyword\">for</span>( j=<span class=\"hljs-number\">0</span>; j&lt;k; j++)&#123;  <span class=\"hljs-comment\">/* loop over columns of A */</span><br>    <span class=\"hljs-keyword\">double</span> <br>      *a_ij_pntr = &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, j );<br><br>    *a_to     = *a_ij_pntr;<br>    *(a_to+<span class=\"hljs-number\">1</span>) = *(a_ij_pntr+<span class=\"hljs-number\">1</span>);<br>    *(a_to+<span class=\"hljs-number\">2</span>) = *(a_ij_pntr+<span class=\"hljs-number\">2</span>);<br>    *(a_to+<span class=\"hljs-number\">3</span>) = *(a_ij_pntr+<span class=\"hljs-number\">3</span>);<br><br>    a_to += <span class=\"hljs-number\">4</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixB</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *b_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i;<br>  <span class=\"hljs-keyword\">double</span> <br>    *b_i0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), *b_i1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ),<br>    *b_i2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), *b_i3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  <span class=\"hljs-keyword\">for</span>( i=<span class=\"hljs-number\">0</span>; i&lt;k; i++)&#123;  <span class=\"hljs-comment\">/* loop over rows of B */</span><br>    *b_to++ = *b_i0_pntr++;<br>    *b_to++ = *b_i1_pntr++;<br>    *b_to++ = *b_i2_pntr++;<br>    *b_to++ = *b_i3_pntr++;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) a );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) ( a+<span class=\"hljs-number\">2</span> ) );<br>    a += <span class=\"hljs-number\">4</span>;<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b );       <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">1</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">2</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">3</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    b += <span class=\"hljs-number\">4</span>;<br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-15\"><a href=\"#Optimization-4x4-15\" class=\"headerlink\" title=\"Optimization_4x4_15\"></a>Optimization_4x4_15</h2><p>并且，我们再次添加了一些代码，这样我们就可以避免重新打包b的kx4块。现在性能令人印象深刻!</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> nb 1000</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixB</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc, i==<span class=\"hljs-number\">0</span> );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc, <span class=\"hljs-keyword\">int</span> first_time )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-keyword\">double</span> <br>    packedA[ m * k ];<br>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">double</span> <br>    packedB[ kc*nb ];    <span class=\"hljs-comment\">/* Note: using a static buffer is not thread safe... */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">if</span> ( first_time )<br>      <span class=\"hljs-built_in\">PackMatrixB</span>( k, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, j ), ldb, &amp;packedB[ j*k ] );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>      <span class=\"hljs-keyword\">if</span> ( j == <span class=\"hljs-number\">0</span> ) <br>\t<span class=\"hljs-built_in\">PackMatrixA</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i, <span class=\"hljs-number\">0</span> ), lda, &amp;packedA[ i*k ] );<br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;packedA[ i*k ], <span class=\"hljs-number\">4</span>, &amp;packedB[ j*k ], k, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *a_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> j;<br><br>  <span class=\"hljs-keyword\">for</span>( j=<span class=\"hljs-number\">0</span>; j&lt;k; j++)&#123;  <span class=\"hljs-comment\">/* loop over columns of A */</span><br>    <span class=\"hljs-keyword\">double</span> <br>      *a_ij_pntr = &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, j );<br><br>    *a_to     = *a_ij_pntr;<br>    *(a_to+<span class=\"hljs-number\">1</span>) = *(a_ij_pntr+<span class=\"hljs-number\">1</span>);<br>    *(a_to+<span class=\"hljs-number\">2</span>) = *(a_ij_pntr+<span class=\"hljs-number\">2</span>);<br>    *(a_to+<span class=\"hljs-number\">3</span>) = *(a_ij_pntr+<span class=\"hljs-number\">3</span>);<br><br>    a_to += <span class=\"hljs-number\">4</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixB</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *b_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i;<br>  <span class=\"hljs-keyword\">double</span> <br>    *b_i0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), *b_i1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ),<br>    *b_i2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), *b_i3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  <span class=\"hljs-keyword\">for</span>( i=<span class=\"hljs-number\">0</span>; i&lt;k; i++)&#123;  <span class=\"hljs-comment\">/* loop over rows of B */</span><br>    *b_to++ = *b_i0_pntr++;<br>    *b_to++ = *b_i1_pntr++;<br>    *b_to++ = *b_i2_pntr++;<br>    *b_to++ = *b_i3_pntr++;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) a );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) ( a+<span class=\"hljs-number\">2</span> ) );<br>    a += <span class=\"hljs-number\">4</span>;<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b );       <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">1</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">2</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">3</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    b += <span class=\"hljs-number\">4</span>;<br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0006/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0006/",
            "title": "Blocking to maintain performance",
            "date_published": "2023-06-07T05:41:06.000Z",
            "content_html": "<h2 id=\"Blocking-to-maintain-performance\"><a href=\"#Blocking-to-maintain-performance\" class=\"headerlink\" title=\"Blocking to maintain performance\"></a>Blocking to maintain performance</h2><ul>\n<li>为了保持较小问题规模的性能，我们分块矩阵C(以及相应的A和B):</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_11\">Optimization_4x4_11 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>现在，性能得到了保持:</p>\n<p><img src=\"/2023/06/07/gemm0006/compare_MMult0_MMult-4x4-11.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0006/compare_MMult-4x4-10_MMult-4x4-11.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-4x4-11\"><a href=\"#Optimization-4x4-11\" class=\"headerlink\" title=\"Optimization_4x4_11\"></a>Optimization_4x4_11</h2><p>我们注意到，对于迄今为止的所有优化，当涉及的矩阵比L2缓存所能容纳的矩阵大得多时，性能会大幅下降。在这个优化中，我们创建了一个额外的分块级别来克服这个问题。我们现在有一个主例程，它调用GotoBLAS和BLIS使用的内部内核，然后AddDot4x4例程是BLIS使用的微内核。</p>\n<p>这一步主要是为了分块，把原来的MY_MMult变成了InnerKernel，而现在的MY_MMult作用就是为了分块。分块大小通过宏定义给出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) );<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0005/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0005/",
            "title": "Further optimizing",
            "date_published": "2023-06-07T05:18:10.000Z",
            "content_html": "<h2 id=\"Further-optimizing\"><a href=\"#Further-optimizing\" class=\"headerlink\" title=\"Further optimizing\"></a>Further optimizing</h2><p>现在我们开始以不同的方式优化1x4的情况。</p>\n<ul>\n<li>我们在寄存器中存储一行k × 4矩阵B</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_8\">https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_8</a></li>\n</ul>\n<p>请注意，我们现在使用的常规寄存器比物理上可用的寄存器多得多……</p>\n<ul>\n<li>我们重新安排计算，以便一次计算两行4x4的C块。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_9\">Optimization_4x4_9 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用向量寄存器和向量运算。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_10\">Optimization_4x4_10 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>We notice a considerable performance boost:</p>\n<p><img src=\"/2023/06/07/gemm0005/compare_MMult0_MMult-4x4-10.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0005/compare_MMult-1x4-9_MMult-4x4-10.png\" alt=\"img\"></p>\n<p>不过，还有很大的改进空间。</p>\n<h2 id=\"Optimization-4x4-8\"><a href=\"#Optimization-4x4-8\" class=\"headerlink\" title=\"Optimization_4x4_8\"></a>Optimization_4x4_8</h2><p>现在我们使用寄存器来存储B当前行的元素。(注意，对于一次计算C四个元素的情况，我们没有这样做。)性能实际上略有下降。但是这个步骤支持进一步的优化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use registers for elements in the current row</span><br><span class=\"hljs-comment\">     of B as well */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg,<br>       b_p0_reg,<br>       b_p1_reg,<br>       b_p2_reg,<br>       b_p3_reg;<br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    b_p0_reg = *b_p0_pntr++;<br>    b_p1_reg = *b_p1_pntr++;<br>    b_p2_reg = *b_p2_pntr++;<br>    b_p3_reg = *b_p3_pntr++;<br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * b_p0_reg;<br>    c_01_reg += a_0p_reg * b_p1_reg;<br>    c_02_reg += a_0p_reg * b_p2_reg;<br>    c_03_reg += a_0p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * b_p0_reg;<br>    c_11_reg += a_1p_reg * b_p1_reg;<br>    c_12_reg += a_1p_reg * b_p2_reg;<br>    c_13_reg += a_1p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * b_p0_reg;<br>    c_21_reg += a_2p_reg * b_p1_reg;<br>    c_22_reg += a_2p_reg * b_p2_reg;<br>    c_23_reg += a_2p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * b_p0_reg;<br>    c_31_reg += a_3p_reg * b_p1_reg;<br>    c_32_reg += a_3p_reg * b_p2_reg;<br>    c_33_reg += a_3p_reg * b_p3_reg;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-9\"><a href=\"#Optimization-4x4-9\" class=\"headerlink\" title=\"Optimization_4x4_9\"></a>Optimization_4x4_9</h2><p>从4x4_8到4x4_9是一个微妙的变化:我们不是一次一行地更新4x4块C的行，而是一次计算两行。这为我们使用向量操作做好了准备，我们用向量操作更新对C(0,j)和C(1,j) (j &#x3D;0，…，3)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     A simple rearrangement to prepare for the use of vector registers */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg,<br>       b_p0_reg,<br>       b_p1_reg,<br>       b_p2_reg,<br>       b_p3_reg;<br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    b_p0_reg = *b_p0_pntr++;<br>    b_p1_reg = *b_p1_pntr++;<br>    b_p2_reg = *b_p2_pntr++;<br>    b_p3_reg = *b_p3_pntr++;<br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_reg += a_0p_reg * b_p0_reg;<br>    c_10_reg += a_1p_reg * b_p0_reg;<br><br>    c_01_reg += a_0p_reg * b_p1_reg;<br>    c_11_reg += a_1p_reg * b_p1_reg;<br><br>    c_02_reg += a_0p_reg * b_p2_reg;<br>    c_12_reg += a_1p_reg * b_p2_reg;<br><br>    c_03_reg += a_0p_reg * b_p3_reg;<br>    c_13_reg += a_1p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_reg += a_2p_reg * b_p0_reg;<br>    c_30_reg += a_3p_reg * b_p0_reg;<br><br>    c_21_reg += a_2p_reg * b_p1_reg;<br>    c_31_reg += a_3p_reg * b_p1_reg;<br><br>    c_22_reg += a_2p_reg * b_p2_reg;<br>    c_32_reg += a_3p_reg * b_p2_reg;<br><br>    c_23_reg += a_2p_reg * b_p3_reg;<br>    c_33_reg += a_3p_reg * b_p3_reg;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-10\"><a href=\"#Optimization-4x4-10\" class=\"headerlink\" title=\"Optimization_4x4_10\"></a>Optimization_4x4_10</h2><p>在这里，我们开始使用向量寄存器和向量操作。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) );<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows *  向量化，一次计算两个double/</span><br><span class=\"hljs-comment\">    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;</span><br><span class=\"hljs-comment\">    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;</span><br><span class=\"hljs-comment\">    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;</span><br><span class=\"hljs-comment\">    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    /* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/31/gemm0004/",
            "url": "https://xingyuanjie.top/2023/05/31/gemm0004/",
            "title": "Repeating the same optimizations",
            "date_published": "2023-05-31T07:16:29.000Z",
            "content_html": "<h2 id=\"Repeating-the-same-optimizations\"><a href=\"#Repeating-the-same-optimizations\" class=\"headerlink\" title=\"Repeating the same optimizations\"></a>Repeating the same optimizations</h2><ul>\n<li>我们在AddDot4x4子程序中一次计算4个C元素，该子程序一次执行16个乘积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_3\">Optimization_4x4_3 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>现在我们内联16个独立的内积，并将循环融合为一个，从而在一个循环中同时计算16个乘积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_4\">Optimization_4x4_4 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_5\">Optimization_4x4_5 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>在这一点上，我们再次开始看到一些性能改进:</p>\n<p><img src=\"/2023/05/31/gemm0004/compare_MMult0_MMult-4x4-5.png\" alt=\"img\"></p>\n<p><img src=\"/2023/05/31/gemm0004/compare_MMult-1x4-5_MMult-4x4-5.png\" alt=\"img\"></p>\n<ul>\n<li>我们将C的元素累加到寄存器中，并使用寄存器存储a的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_6\">Optimization_4x4_6 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用指针来定位B中的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_7\">Optimization_4x4_7 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<h1 id=\"Optimization-4x4-3\"><a href=\"#Optimization-4x4-3\" class=\"headerlink\" title=\"Optimization_4x4_3\"></a>Optimization_4x4_3</h1><p>对循环变量i进行展开。由原来AddDot1x4变为AddDot4x4，一次计算16个乘积。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C */</span> <br><br>  <span class=\"hljs-comment\">/* First row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Second row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Third row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Four row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) );<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-4\"><a href=\"#Optimization-4x4-4\" class=\"headerlink\" title=\"Optimization_4x4_4\"></a>Optimization_4x4_4</h1><p>把AddDot计算kernel合并到AddDot4x4里面。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we &quot;inline&quot; AddDot */</span> <br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-comment\">/* First row 第一行*/</span>   <br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Second row 第二行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 1, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 1, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 1, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 1, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Third row 第三行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 2, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 2, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 2, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 2, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Four row 第四行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 3, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 3, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 3, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 3, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-5\"><a href=\"#Optimization-4x4-5\" class=\"headerlink\" title=\"Optimization_4x4_5\"></a>Optimization_4x4_5</h1><p>合并16个for循环。</p>\n<p>现在，当矩阵变大时，我们看到了性能上的好处，因为数据在被放入寄存器后会得到更多的重用。</p>\n<p>以前是：1x4_5(一次计算C的4个元素)现在是：4x4_5(一次计算C的16个元素)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we merge each set of four loops, computing four</span><br><span class=\"hljs-comment\">     inner products simultaneously. */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-comment\">/* First row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Fourth row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-6\"><a href=\"#Optimization-4x4-6\" class=\"headerlink\" title=\"Optimization_4x4_6\"></a>Optimization_4x4_6</h1><p>矩阵C和A采用寄存器来存。</p>\n<p>我们为C的4x4块和A的当前4x1列的元素使用(常规)寄存器，这一事实使性能受益。请注意，我们使用的是比实际存在的更多的常规寄存器，所以任何人都可以猜测编译器会用它做什么。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we accumulate in registers and put A( 0, p ) in a register */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg;<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_01_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_02_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_03_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_11_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_12_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_13_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_21_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_22_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_23_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_31_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_32_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_33_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-7\"><a href=\"#Optimization-4x4-7\" class=\"headerlink\" title=\"Optimization_4x4_7\"></a>Optimization_4x4_7</h1><p>这里我们改为使用指针来跟踪B的当前4x1块。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use pointer to track where in four columns of B we are */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br>\t  <br>    b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );<br>    b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );<br>    b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );<br>    b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );\t  <br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * *b_p0_pntr;     <br>    c_01_reg += a_0p_reg * *b_p1_pntr;     <br>    c_02_reg += a_0p_reg * *b_p2_pntr;     <br>    c_03_reg += a_0p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * *b_p0_pntr;     <br>    c_11_reg += a_1p_reg * *b_p1_pntr;     <br>    c_12_reg += a_1p_reg * *b_p2_pntr;     <br>    c_13_reg += a_1p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * *b_p0_pntr;     <br>    c_21_reg += a_2p_reg * *b_p1_pntr;     <br>    c_22_reg += a_2p_reg * *b_p2_pntr;     <br>    c_23_reg += a_2p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * *b_p0_pntr++;     <br>    c_31_reg += a_3p_reg * *b_p1_pntr++;     <br>    c_32_reg += a_3p_reg * *b_p2_pntr++;     <br>    c_33_reg += a_3p_reg * *b_p3_pntr++;     <br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0003/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0003/",
            "title": "Further optimizing",
            "date_published": "2023-05-26T09:20:18.000Z",
            "content_html": "<h2 id=\"Further-optimizing\"><a href=\"#Further-optimizing\" class=\"headerlink\" title=\"Further optimizing\"></a>Further optimizing</h2><ul>\n<li>我们将C的元素累加到寄存器中，并使用寄存器存储a的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_6\">Optimization_1x4_6 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用指针来定位B中的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_7\">Optimization_1x4_7 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们将循环展开4次(展开因子的选择相对任意)</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_8\">Optimization_1x4_8 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用间接寻址来减少需要更新指针的次数</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_9\">Optimization_1x4_9 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>对于问题大小适合L2缓存(至少部分地)有相当大的改进。不过，还有很大的改进空间。</p>\n<p><img src=\"/2023/05/26/gemm0003/compare_MMult0_MMult-1x4-9.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-1x4-6\"><a href=\"#Optimization-1x4-6\" class=\"headerlink\" title=\"Optimization_1x4_6\"></a>Optimization_1x4_6</h2><p>我们在寄存器中对当前1x4行C的更新累积，并将元素A(p, 0)放在寄存器中，以减少缓存(cache)和寄存器(reg)之间的流量(traffic)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we accumulate in registers and put A( 0, p ) in a register */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>    <br>    <br>  <span class=\"hljs-comment\">//C的累加在寄存器中，同时A也放在寄存器中</span><br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>    <br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_01_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_02_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_03_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//计算完成后，再通过寄存器写回C</span><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-7\"><a href=\"#Optimization-1x4-7\" class=\"headerlink\" title=\"Optimization_1x4_7\"></a>Optimization_1x4_7</h2><p>现在使用bp0_pntr、bp1_pntr、bp2_pntr和bp3_pntr四个指针来访问元素B(p, 0)、B(p, 1)、B(p, 2)、B(p, 3)。这减少了索引开销。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use pointer to track where in four columns of B we are */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>  <span class=\"hljs-comment\">//由于使用了宏定义，每次B(i,j)都会计算B中元素的位置</span><br>  <span class=\"hljs-comment\">//使用指针后，后续访问不需要再额外计算B中元素位置，只需在当前指针向后移动一位即可</span><br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-8\"><a href=\"#Optimization-1x4-8\" class=\"headerlink\" title=\"Optimization_1x4_8\"></a>Optimization_1x4_8</h2><p>我们现在展开了4个循环。有趣的是，这会略微降低性能。这可能意味着，通过添加优化，我们混淆了编译器，因此它不能做以前做的优化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     We now unroll the loop */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>    <br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  <span class=\"hljs-comment\">//这里对循环变量p进行了展开，注意这里计算是顺序的</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=<span class=\"hljs-number\">4</span> )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">2</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">3</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-9\"><a href=\"#Optimization-1x4-9\" class=\"headerlink\" title=\"Optimization_1x4_9\"></a>Optimization_1x4_9</h2><p>在这里，*a0p_reg保存元素A(0, p+1)。</p>\n<ul>\n<li><p>我们希望bp0_pntr指向元素B（p，0）。因此，bp0_pntr+1寻址元素B（p+1，0）。有一条特殊的机器指令可以访问bp0_pntr+1处的元素，该指令不需要更新指针。</p>\n</li>\n<li><p>因此，指向B列中元素的指针只需要在循环的第四次迭代中更新一次。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     We next use indirect addressing */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>    <br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=<span class=\"hljs-number\">4</span> )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr;<br>    c_01_reg += a_0p_reg * *bp1_pntr;<br>    c_02_reg += a_0p_reg * *bp2_pntr;<br>    c_03_reg += a_0p_reg * *bp3_pntr;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span> );<br>\t<br>    <span class=\"hljs-comment\">//现在我们使用间接寻址，&#x27;indirect addressing&#x27;</span><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">1</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">1</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">1</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">1</span>);<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">2</span> );<br><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">2</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">2</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">2</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">2</span>);<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">3</span> );<br><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">3</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">3</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">3</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">3</span>);<br>\t<br>      <br>    <span class=\"hljs-comment\">//更新指针，4次迭代中仅更新一次</span><br>    bp0_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp1_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp2_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp3_pntr+=<span class=\"hljs-number\">4</span>;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "title": "Computing four elements at a time",
            "date_published": "2023-05-26T08:37:45.000Z",
            "content_html": "<h2 id=\"Computing-four-elements-at-a-time\"><a href=\"#Computing-four-elements-at-a-time\" class=\"headerlink\" title=\"Computing four elements at a time\"></a>Computing four elements at a time</h2><ul>\n<li>我们在子程序AddDot1x4中一次计算4个元素，该子程序一次执行4个内部乘积</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_3\">Optimization_1x4_3 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>现在我们内联(inline)四个独立的内积，并将循环融合为一个，从而在一个循环中同时计算四个内积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_4\">Optimization_1x4_4 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_5\">Optimization_1x4_5 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>在这一点上，我们开始看到一些性能改进:</p>\n<p><img src=\"/2023/05/26/gemm0002/compare_MMult0_MMult-1x4-5.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-1x4-3\"><a href=\"#Optimization-1x4-3\" class=\"headerlink\" title=\"Optimization_1x4_3\"></a>Optimization_1x4_3</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>\t  <span class=\"hljs-comment\">//相交于上个版本，把4个AddDot合并成了一个AddDot1x4</span><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C */</span> <br>  <span class=\"hljs-comment\">//一次AddDot1x4完成四次AddDot运算</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) );<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-4\"><a href=\"#Optimization-1x4-4\" class=\"headerlink\" title=\"Optimization_1x4_4\"></a>Optimization_1x4_4</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we &quot;inline&quot; AddDot */</span> <br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//在这里我们把AddDot中的运算，全部集成到了AddDot1x4中，即4段for执行4个内部乘积</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-5\"><a href=\"#Optimization-1x4-5\" class=\"headerlink\" title=\"Optimization_1x4_5\"></a>Optimization_1x4_5</h2><p>在这个版本，我们开始看到性能上的好处。原因是四个循环已经融合，因此四个内部乘积运算现在正在同时进行。这有以下好处:</p>\n<ul>\n<li>索引p只需要每8次浮点操作更新一次(4次乘法4次加法)。</li>\n<li>元素A(0, p)只需要从内存中取出一次，而不是四次。(只有当矩阵不再适合二级缓存时，这才有好处)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we merge the four loops, computing four inner</span><br><span class=\"hljs-comment\">     products simultaneously. */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//在这个版本中，我们合并了4个for循环，使得可以同时计算4个乘积运算</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <span class=\"hljs-comment\">//第一次取A( 0, p )</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "title": "Hiding computation in a subroutine",
            "date_published": "2023-05-26T07:06:49.000Z",
            "content_html": "<h2 id=\"Hiding-computation-in-a-subroutine\"><a href=\"#Hiding-computation-in-a-subroutine\" class=\"headerlink\" title=\"Hiding computation in a subroutine\"></a>Hiding computation in a subroutine</h2><ul>\n<li>我们首先重写基本实现，将内部循环隐藏在子程序AddDot中:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization1\">Optimization1 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization2\">Optimization2 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>这一步不会产生任何性能提升：</p>\n<p><img src=\"https://github.com/flame/how-to-optimize-gemm/raw/master/figures/compare_MMult0_MMult2.png\" alt=\"img\"></p>\n<p>它其实是为我们下一步做好准备。</p>\n<h2 id=\"Optimization1\"><a href=\"#Optimization1\" class=\"headerlink\" title=\"Optimization1\"></a>Optimization1</h2><p>这里最原始的矩阵乘代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-comment\">//创建宏，使矩阵是列主序</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j, p;<br>  <span class=\"hljs-comment\">//loop i j p</span><br>  <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i++ )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C 遍历C的行 */</span>   <br>    <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j++ )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C 遍历C的列 */</span><br>      <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;        <span class=\"hljs-comment\">/* Update C( i,j ) with the inner</span><br><span class=\"hljs-comment\">\t\t\t\t       product of the ith row of A and</span><br><span class=\"hljs-comment\">\t\t\t\t       the jth column of B */</span><br>    <span class=\"hljs-comment\">//A的一行B的一列更新C(i,j)</span><br>\t<span class=\"hljs-built_in\">C</span>( i,j ) = <span class=\"hljs-built_in\">C</span>( i,j ) +  <span class=\"hljs-built_in\">A</span>( i,p ) * <span class=\"hljs-built_in\">B</span>( p,j );<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>拆分内部循环，把乘加运算放在子程序AddDot中:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>\t<br>   <span class=\"hljs-comment\">//loop j i p   在这里更改了循环变量的顺序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br>\t  <span class=\"hljs-comment\">//拆分内部循环(循环变量p)，把乘加运算放在子程序AddDot中:</span><br>      <span class=\"hljs-comment\">//A的第i行，B的第j列</span><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//列主序，同行访问带跨步，同列访问无需跨步。跨步大小lda</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization2\"><a href=\"#Optimization2\" class=\"headerlink\" title=\"Optimization2\"></a>Optimization2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-comment\">//在这里对C的列进行了循环展开，展开数为4。列主序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+1 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">1</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+2 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+2)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">2</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+3 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">3</span> ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-comment\">//内层核心相较于上次来说，并没有修改</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/22/blas/",
            "url": "https://xingyuanjie.top/2023/05/22/blas/",
            "title": "BLAS（Basic Linear Algebra Subprograms）-基础线性代数子程序库",
            "date_published": "2023-05-22T12:35:17.000Z",
            "content_html": "<h2 id=\"how-to-optimize-gemm\"><a href=\"#how-to-optimize-gemm\" class=\"headerlink\" title=\"how-to-optimize-gemm\"></a>how-to-optimize-gemm</h2><p><strong>项目地址：</strong><a href=\"https://github.com/flame/how-to-optimize-gemm\">flame&#x2F;how-to-optimize-gemm (github.com)</a></p>\n<h3 id=\"Computing-four-elements-of-C-at-a-time\"><a href=\"#Computing-four-elements-of-C-at-a-time\" class=\"headerlink\" title=\"Computing four elements of C at a time\"></a>Computing four elements of C at a time</h3><p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0001/\">Hiding computation in a subroutine - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0002/\">Computing four elements at a time - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0003/\">Further optimizing - Amicoyuan (xingyuanjie.top)</a></p>\n<h3 id=\"Computing-a-4-x-4-block-of-C-at-a-time\"><a href=\"#Computing-a-4-x-4-block-of-C-at-a-time\" class=\"headerlink\" title=\"Computing a 4 x 4 block of C at a time\"></a>Computing a 4 x 4 block of C at a time</h3><p>为了有效地使用向量指令和向量寄存器，我们现在一次计算一个4 x 4的C代码块。其思想如下:作为SSE3指令集的一部分，有一些特殊的指令允许每个时钟周期执行两次“乘法累加”操作(两次乘法和两次加法)，每个时钟周期总共执行四个浮点操作。要使用这些，必须将数据放入“向量寄存器”中。有16个这样的向量寄存器，每个向量寄存器可以容纳两个双精度数。因此，我们可以在寄存器中保存32个双精度数。我们将使用其中的16个来保存C的元素，一个4 x 4的块。</p>\n<p><a href=\"https://xingyuanjie.top/2023/05/31/gemm0004/\">Repeating the same optimizations - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/06/07/gemm0005/\">Further optimizing - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/06/07/gemm0006/\">Blocking to maintain performance - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/06/07/gemm0007/\">Packing into contiguous memory - Amicoyuan (xingyuanjie.top)</a></p>\n<h3 id=\"Acknowledgement\"><a href=\"#Acknowledgement\" class=\"headerlink\" title=\"Acknowledgement\"></a>Acknowledgement</h3><p>This material was partially sponsored by grants from the National Science Foundation (Awards ACI-1148125&#x2F;1340293).</p>\n<p><em>Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation (NSF).</em></p>\n<h2 id=\"论文阅读\"><a href=\"#论文阅读\" class=\"headerlink\" title=\"论文阅读\"></a>论文阅读</h2><p><a href=\"https://xingyuanjie.top/2023/06/09/gemm0008/\">论文阅读：面向国产申威 26010 众核处理器的 SpMV 实现与优化 - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/07/03/gemm0009/\">论文阅读：稀疏矩阵向量乘法在申威众核架构上的性能优化 - Amicoyuan (xingyuanjie.top)</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客:\"></a>博客:</h3><p><a href=\"https://www.jianshu.com/p/e01024892afb\">矩阵相乘在GPU上的终极优化：深度解析Maxas汇编器工作原理 - 简书 (jianshu.com)</a></p>\n<p><a href=\"https://www.leiphone.com/category/yanxishe/Puevv3ZWxn0heoEv.html\">OpenBLAS项目与矩阵乘法优化 | AI 研习社 | 雷峰网 (leiphone.com)</a></p>\n<p><a href=\"https://jcf94.com/2021/08/28/2021-08-28-simd/\">矩阵乘法与 SIMD | Chenfan Blog (jcf94.com)</a></p>\n<p><a href=\"https://zhenhuaw.me/blog/2019/gemm-optimization.html\">通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/383115932\">大佬是怎么优雅实现矩阵乘法的？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/65436463\">OpenBLAS gemm从零入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://harleyszhang.github.io/cv_note/\">Introduction · cv算法工程师成长之路 (harleyszhang.github.io)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/435908830\">深入浅出GPU优化系列：GEMM优化（一） - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/410278370\">CUDA 矩阵乘法终极优化指南 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/368870275\">矩阵乘法的并行优化（1）：OPENMP、CUDA实现 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/617296073\">并行计算入门 UIUC ECE408 Lecture 7&amp;8 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/143328317\">移动端arm cpu优化学习笔记第4弹–内联汇编入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/348372132\">C语言的内嵌汇编 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/105616727\">内嵌汇编学习 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://blog.csdn.net/unbutun/article/details/6123472\">(88条消息) #define barrier() <strong>asm</strong> <strong>volatile</strong>(“”: : :”memory”) 中的memory是gcc的东西_unbutun的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_38669561/article/details/105192200?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control\">(88条消息) MIPS指令集：内嵌汇编asm语法介绍_daddu指令_无色云的博客-CSDN博客</a></p>\n<h3 id=\"论文：\"><a href=\"#论文：\" class=\"headerlink\" title=\"论文：\"></a>论文：</h3><p><a href=\"https://www.cs.utexas.edu/users/flame/FLAMEPublications.html\">Publications Related to the FLAME Project (utexas.edu)</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/1356052.1356053\">Anatomy of high-performance matrix multiplication | ACM Transactions on Mathematical Software</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/3018743.3018755\">Understanding the GPU Microarchitecture to Achieve Bare-Metal Performance Tuning | Proceedings of the 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</a></p>\n<p>[<a href=\"https://arxiv.org/abs/1804.06826\">1804.06826] Dissecting the NVIDIA Volta GPU Architecture via Microbenchmarking (arxiv.org)</a></p>\n<p><a href=\"https://ieeexplore.ieee.org/document/6114452\">Fast implementation of DGEMM on Fermi GPU | IEEE Conference Publication | IEEE Xplore</a></p>\n<p><a href=\"https://dl.acm.org/doi/abs/10.1145/3369583.3393611\">High Performance is All about Minimizing Data Movement | Proceedings of the 29th International Symposium on High-Performance Parallel and Distributed Computing (acm.org)</a></p>\n<h3 id=\"社区-x2F-论坛\"><a href=\"#社区-x2F-论坛\" class=\"headerlink\" title=\"社区&#x2F;论坛:\"></a>社区&#x2F;论坛:</h3><p><a href=\"http://tvm.d2l.ai/chapter_gpu_schedules/vector_add.html#cuda-programming\">2. Vector Add — Dive into Deep Learning Compiler 0.1 documentation (d2l.ai)</a></p>\n<p><a href=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html\">Intel® Intrinsics Guide</a></p>\n<p><a href=\"https://github.com/pytorch/QNNPACK\">https://github.com/pytorch/QNNPACK</a></p>\n<p><a href=\"https://github.com/flame/blis\">https://github.com/flame/blis</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/ulmBLAS/\">ulmBLAS (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/sghpc/gemm/index.html\">work&#x2F;sghpc (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://shpc.oden.utexas.edu/\">The Science of High-Performance Computing Group (utexas.edu)</a></p>\n<p><a href=\"https://github.com/BBuf/how-to-optimize-gemm\">GitHub - BBuf&#x2F;how-to-optimize-gemm</a></p>\n<p><a href=\"https://github.com/Liu-xiandong/How_to_optimize_in_GPU\">GitHub - Liu-xiandong&#x2F;How_to_optimize_in_GPU: This is a series of GPU optimization topics. Here we will introduce how to optimize the CUDA kernel in detail. I will introduce several basic kernel optimizations, including: elementwise, reduce, sgemv, sgemm, etc. The performance of these kernels is basically at or near the theoretical limit.</a></p>\n<p><a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/#\">CUDA C++ Programming Guide (nvidia.com)</a></p>\n<p><a href=\"https://github.com/NervanaSystems/maxas/wiki/SGEMM\">SGEMM · NervanaSystems&#x2F;maxas Wiki · GitHub</a></p>\n<p><a href=\"https://github.com/Cjkkkk/CUDA_gemm\">GitHub - Cjkkkk&#x2F;CUDA_gemm: A simple high performance CUDA GEMM implementation.</a></p>\n<p><a href=\"https://github.com/yzhaiustc/Optimizing-SGEMM-on-NVIDIA-Turing-GPUs\">GitHub - yzhaiustc&#x2F;Optimizing-SGEMM-on-NVIDIA-Turing-GPUs: Optimizing SGEMM kernel functions on NVIDIA GPUs to a close-to-cuBLAS performance.</a></p>\n<p><a href=\"https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/\">https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/</a></p>\n<p><a href=\"https://wiki.illinois.edu/wiki/display/ECE408/Class+Schedule\">Class Schedule - ECE408 - Illinois Wiki</a></p>\n<p><a href=\"https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#toc2\">GCC-Inline-Assembly-HOWTO (ibiblio.org)</a></p>\n<p><a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课 · the missing semester of your cs education (missing-semester-cn.github.io)</a></p>\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        }
    ]
}