{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0007/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0007/",
            "title": "Packing into contiguous memory",
            "date_published": "2023-06-07T05:47:39.000Z",
            "content_html": "<h2 id=\"Packing-into-contiguous-memory\"><a href=\"#Packing-into-contiguous-memory\" class=\"headerlink\" title=\"Packing into contiguous memory\"></a>Packing into contiguous memory</h2><ul>\n<li>首先，我们打包A块，这样我们就可以连续地穿过它(march through it)。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_12\">Optimization_4x4_12 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_13\">Optimization_4x4_13 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>这将带来惊人的性能提升:</p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult0_MMult-4x4-13.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult-4x4-11_MMult-4x4-13.png\" alt=\"img\"></p>\n<ul>\n<li>最后，我们打包B块，以便连续地遍历它。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14\">https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14\">Optimization_4x4_14 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>我们现在达到了处理器90%的涡轮增压峰值!</p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult0_MMult-4x4-15.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult-4x4-13_MMult-4x4-15.png\" alt=\"img\"></p>\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0006/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0006/",
            "title": "Blocking to maintain performance",
            "date_published": "2023-06-07T05:41:06.000Z",
            "content_html": "<h2 id=\"Blocking-to-maintain-performance\"><a href=\"#Blocking-to-maintain-performance\" class=\"headerlink\" title=\"Blocking to maintain performance\"></a>Blocking to maintain performance</h2><ul>\n<li>为了保持较小问题规模的性能，我们分块矩阵C(以及相应的A和B):</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_11\">Optimization_4x4_11 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>现在，性能得到了保持:</p>\n<p><img src=\"/2023/06/07/gemm0006/compare_MMult0_MMult-4x4-11.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0006/compare_MMult-4x4-10_MMult-4x4-11.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-4x4-11\"><a href=\"#Optimization-4x4-11\" class=\"headerlink\" title=\"Optimization_4x4_11\"></a>Optimization_4x4_11</h2><p>我们注意到，对于迄今为止的所有优化，当涉及的矩阵比L2缓存所能容纳的矩阵大得多时，性能会大幅下降。在这个优化中，我们创建了一个额外的分块级别来克服这个问题。我们现在有一个主例程，它调用GotoBLAS和BLIS使用的内部内核，然后AddDot4x4例程是BLIS使用的微内核。</p>\n<p>这一步主要是为了分块，把原来的MY_MMult变成了InnerKernel，而现在的MY_MMult作用就是为了分块。分块大小通过宏定义给出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) );<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0005/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0005/",
            "title": "Further optimizing",
            "date_published": "2023-06-07T05:18:10.000Z",
            "content_html": "<h2 id=\"Further-optimizing\"><a href=\"#Further-optimizing\" class=\"headerlink\" title=\"Further optimizing\"></a>Further optimizing</h2><p>现在我们开始以不同的方式优化1x4的情况。</p>\n<ul>\n<li>我们在寄存器中存储一行k × 4矩阵B</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_8\">https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_8</a></li>\n</ul>\n<p>请注意，我们现在使用的常规寄存器比物理上可用的寄存器多得多……</p>\n<ul>\n<li>我们重新安排计算，以便一次计算两行4x4的C块。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_9\">Optimization_4x4_9 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用向量寄存器和向量运算。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_10\">Optimization_4x4_10 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>We notice a considerable performance boost:</p>\n<p><img src=\"/2023/06/07/gemm0005/compare_MMult0_MMult-4x4-10.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0005/compare_MMult-1x4-9_MMult-4x4-10.png\" alt=\"img\"></p>\n<p>不过，还有很大的改进空间。</p>\n<h2 id=\"Optimization-4x4-8\"><a href=\"#Optimization-4x4-8\" class=\"headerlink\" title=\"Optimization_4x4_8\"></a>Optimization_4x4_8</h2><p>现在我们使用寄存器来存储B当前行的元素。(注意，对于一次计算C四个元素的情况，我们没有这样做。)性能实际上略有下降。但是这个步骤支持进一步的优化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use registers for elements in the current row</span><br><span class=\"hljs-comment\">     of B as well */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg,<br>       b_p0_reg,<br>       b_p1_reg,<br>       b_p2_reg,<br>       b_p3_reg;<br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    b_p0_reg = *b_p0_pntr++;<br>    b_p1_reg = *b_p1_pntr++;<br>    b_p2_reg = *b_p2_pntr++;<br>    b_p3_reg = *b_p3_pntr++;<br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * b_p0_reg;<br>    c_01_reg += a_0p_reg * b_p1_reg;<br>    c_02_reg += a_0p_reg * b_p2_reg;<br>    c_03_reg += a_0p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * b_p0_reg;<br>    c_11_reg += a_1p_reg * b_p1_reg;<br>    c_12_reg += a_1p_reg * b_p2_reg;<br>    c_13_reg += a_1p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * b_p0_reg;<br>    c_21_reg += a_2p_reg * b_p1_reg;<br>    c_22_reg += a_2p_reg * b_p2_reg;<br>    c_23_reg += a_2p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * b_p0_reg;<br>    c_31_reg += a_3p_reg * b_p1_reg;<br>    c_32_reg += a_3p_reg * b_p2_reg;<br>    c_33_reg += a_3p_reg * b_p3_reg;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-9\"><a href=\"#Optimization-4x4-9\" class=\"headerlink\" title=\"Optimization_4x4_9\"></a>Optimization_4x4_9</h2><p>从4x4_8到4x4_9是一个微妙的变化:我们不是一次一行地更新4x4块C的行，而是一次计算两行。这为我们使用向量操作做好了准备，我们用向量操作更新对C(0,j)和C(1,j) (j &#x3D;0，…，3)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     A simple rearrangement to prepare for the use of vector registers */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg,<br>       b_p0_reg,<br>       b_p1_reg,<br>       b_p2_reg,<br>       b_p3_reg;<br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    b_p0_reg = *b_p0_pntr++;<br>    b_p1_reg = *b_p1_pntr++;<br>    b_p2_reg = *b_p2_pntr++;<br>    b_p3_reg = *b_p3_pntr++;<br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_reg += a_0p_reg * b_p0_reg;<br>    c_10_reg += a_1p_reg * b_p0_reg;<br><br>    c_01_reg += a_0p_reg * b_p1_reg;<br>    c_11_reg += a_1p_reg * b_p1_reg;<br><br>    c_02_reg += a_0p_reg * b_p2_reg;<br>    c_12_reg += a_1p_reg * b_p2_reg;<br><br>    c_03_reg += a_0p_reg * b_p3_reg;<br>    c_13_reg += a_1p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_reg += a_2p_reg * b_p0_reg;<br>    c_30_reg += a_3p_reg * b_p0_reg;<br><br>    c_21_reg += a_2p_reg * b_p1_reg;<br>    c_31_reg += a_3p_reg * b_p1_reg;<br><br>    c_22_reg += a_2p_reg * b_p2_reg;<br>    c_32_reg += a_3p_reg * b_p2_reg;<br><br>    c_23_reg += a_2p_reg * b_p3_reg;<br>    c_33_reg += a_3p_reg * b_p3_reg;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-10\"><a href=\"#Optimization-4x4-10\" class=\"headerlink\" title=\"Optimization_4x4_10\"></a>Optimization_4x4_10</h2><p>在这里，我们开始使用向量寄存器和向量操作。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) );<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows *  向量化，一次计算两个double/</span><br><span class=\"hljs-comment\">    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;</span><br><span class=\"hljs-comment\">    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;</span><br><span class=\"hljs-comment\">    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;</span><br><span class=\"hljs-comment\">    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    /* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/31/gemm0004/",
            "url": "https://xingyuanjie.top/2023/05/31/gemm0004/",
            "title": "Repeating the same optimizations",
            "date_published": "2023-05-31T07:16:29.000Z",
            "content_html": "<h2 id=\"Repeating-the-same-optimizations\"><a href=\"#Repeating-the-same-optimizations\" class=\"headerlink\" title=\"Repeating the same optimizations\"></a>Repeating the same optimizations</h2><ul>\n<li>我们在AddDot4x4子程序中一次计算4个C元素，该子程序一次执行16个乘积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_3\">Optimization_4x4_3 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>现在我们内联16个独立的内积，并将循环融合为一个，从而在一个循环中同时计算16个乘积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_4\">Optimization_4x4_4 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_5\">Optimization_4x4_5 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>在这一点上，我们再次开始看到一些性能改进:</p>\n<p><img src=\"/2023/05/31/gemm0004/compare_MMult0_MMult-4x4-5.png\" alt=\"img\"></p>\n<p><img src=\"/2023/05/31/gemm0004/compare_MMult-1x4-5_MMult-4x4-5.png\" alt=\"img\"></p>\n<ul>\n<li>我们将C的元素累加到寄存器中，并使用寄存器存储a的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_6\">Optimization_4x4_6 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用指针来定位B中的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_7\">Optimization_4x4_7 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<h1 id=\"Optimization-4x4-3\"><a href=\"#Optimization-4x4-3\" class=\"headerlink\" title=\"Optimization_4x4_3\"></a>Optimization_4x4_3</h1><p>对循环变量i进行展开。由原来AddDot1x4变为AddDot4x4，一次计算16个乘积。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C */</span> <br><br>  <span class=\"hljs-comment\">/* First row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Second row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Third row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Four row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) );<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-4\"><a href=\"#Optimization-4x4-4\" class=\"headerlink\" title=\"Optimization_4x4_4\"></a>Optimization_4x4_4</h1><p>把AddDot计算kernel合并到AddDot4x4里面。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we &quot;inline&quot; AddDot */</span> <br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-comment\">/* First row 第一行*/</span>   <br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Second row 第二行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 1, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 1, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 1, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 1, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Third row 第三行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 2, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 2, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 2, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 2, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Four row 第四行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 3, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 3, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 3, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 3, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-5\"><a href=\"#Optimization-4x4-5\" class=\"headerlink\" title=\"Optimization_4x4_5\"></a>Optimization_4x4_5</h1><p>合并16个for循环。</p>\n<p>现在，当矩阵变大时，我们看到了性能上的好处，因为数据在被放入寄存器后会得到更多的重用。</p>\n<p>以前是：1x4_5(一次计算C的4个元素)现在是：4x4_5(一次计算C的16个元素)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we merge each set of four loops, computing four</span><br><span class=\"hljs-comment\">     inner products simultaneously. */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-comment\">/* First row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Fourth row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-6\"><a href=\"#Optimization-4x4-6\" class=\"headerlink\" title=\"Optimization_4x4_6\"></a>Optimization_4x4_6</h1><p>矩阵C和A采用寄存器来存。</p>\n<p>我们为C的4x4块和A的当前4x1列的元素使用(常规)寄存器，这一事实使性能受益。请注意，我们使用的是比实际存在的更多的常规寄存器，所以任何人都可以猜测编译器会用它做什么。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we accumulate in registers and put A( 0, p ) in a register */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg;<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_01_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_02_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_03_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_11_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_12_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_13_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_21_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_22_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_23_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_31_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_32_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_33_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-7\"><a href=\"#Optimization-4x4-7\" class=\"headerlink\" title=\"Optimization_4x4_7\"></a>Optimization_4x4_7</h1><p>这里我们改为使用指针来跟踪B的当前4x1块。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use pointer to track where in four columns of B we are */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br>\t  <br>    b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );<br>    b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );<br>    b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );<br>    b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );\t  <br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * *b_p0_pntr;     <br>    c_01_reg += a_0p_reg * *b_p1_pntr;     <br>    c_02_reg += a_0p_reg * *b_p2_pntr;     <br>    c_03_reg += a_0p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * *b_p0_pntr;     <br>    c_11_reg += a_1p_reg * *b_p1_pntr;     <br>    c_12_reg += a_1p_reg * *b_p2_pntr;     <br>    c_13_reg += a_1p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * *b_p0_pntr;     <br>    c_21_reg += a_2p_reg * *b_p1_pntr;     <br>    c_22_reg += a_2p_reg * *b_p2_pntr;     <br>    c_23_reg += a_2p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * *b_p0_pntr++;     <br>    c_31_reg += a_3p_reg * *b_p1_pntr++;     <br>    c_32_reg += a_3p_reg * *b_p2_pntr++;     <br>    c_33_reg += a_3p_reg * *b_p3_pntr++;     <br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0003/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0003/",
            "title": "Further optimizing",
            "date_published": "2023-05-26T09:20:18.000Z",
            "content_html": "<h2 id=\"Further-optimizing\"><a href=\"#Further-optimizing\" class=\"headerlink\" title=\"Further optimizing\"></a>Further optimizing</h2><ul>\n<li>我们将C的元素累加到寄存器中，并使用寄存器存储a的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_6\">Optimization_1x4_6 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用指针来定位B中的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_7\">Optimization_1x4_7 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们将循环展开4次(展开因子的选择相对任意)</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_8\">Optimization_1x4_8 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用间接寻址来减少需要更新指针的次数</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_9\">Optimization_1x4_9 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>对于问题大小适合L2缓存(至少部分地)有相当大的改进。不过，还有很大的改进空间。</p>\n<p><img src=\"/2023/05/26/gemm0003/compare_MMult0_MMult-1x4-9.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-1x4-6\"><a href=\"#Optimization-1x4-6\" class=\"headerlink\" title=\"Optimization_1x4_6\"></a>Optimization_1x4_6</h2><p>我们在寄存器中对当前1x4行C的更新累积，并将元素A(p, 0)放在寄存器中，以减少缓存(cache)和寄存器(reg)之间的流量(traffic)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we accumulate in registers and put A( 0, p ) in a register */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>    <br>    <br>  <span class=\"hljs-comment\">//C的累加在寄存器中，同时A也放在寄存器中</span><br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>    <br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_01_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_02_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_03_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//计算完成后，再通过寄存器写回C</span><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-7\"><a href=\"#Optimization-1x4-7\" class=\"headerlink\" title=\"Optimization_1x4_7\"></a>Optimization_1x4_7</h2><p>现在使用bp0_pntr、bp1_pntr、bp2_pntr和bp3_pntr四个指针来访问元素B(p, 0)、B(p, 1)、B(p, 2)、B(p, 3)。这减少了索引开销。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use pointer to track where in four columns of B we are */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>  <span class=\"hljs-comment\">//由于使用了宏定义，每次B(i,j)都会计算B中元素的位置</span><br>  <span class=\"hljs-comment\">//使用指针后，后续访问不需要再额外计算B中元素位置，只需在当前指针向后移动一位即可</span><br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-8\"><a href=\"#Optimization-1x4-8\" class=\"headerlink\" title=\"Optimization_1x4_8\"></a>Optimization_1x4_8</h2><p>我们现在展开了4个循环。有趣的是，这会略微降低性能。这可能意味着，通过添加优化，我们混淆了编译器，因此它不能做以前做的优化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     We now unroll the loop */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>    <br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  <span class=\"hljs-comment\">//这里对循环变量p进行了展开，注意这里计算是顺序的</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=<span class=\"hljs-number\">4</span> )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">2</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">3</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-9\"><a href=\"#Optimization-1x4-9\" class=\"headerlink\" title=\"Optimization_1x4_9\"></a>Optimization_1x4_9</h2><p>在这里，*a0p_reg保存元素A(0, p+1)。</p>\n<ul>\n<li><p>我们希望bp0_pntr指向元素B（p，0）。因此，bp0_pntr+1寻址元素B（p+1，0）。有一条特殊的机器指令可以访问bp0_pntr+1处的元素，该指令不需要更新指针。</p>\n</li>\n<li><p>因此，指向B列中元素的指针只需要在循环的第四次迭代中更新一次。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     We next use indirect addressing */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>    <br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=<span class=\"hljs-number\">4</span> )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr;<br>    c_01_reg += a_0p_reg * *bp1_pntr;<br>    c_02_reg += a_0p_reg * *bp2_pntr;<br>    c_03_reg += a_0p_reg * *bp3_pntr;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span> );<br>\t<br>    <span class=\"hljs-comment\">//现在我们使用间接寻址，&#x27;indirect addressing&#x27;</span><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">1</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">1</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">1</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">1</span>);<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">2</span> );<br><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">2</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">2</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">2</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">2</span>);<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">3</span> );<br><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">3</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">3</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">3</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">3</span>);<br>\t<br>      <br>    <span class=\"hljs-comment\">//更新指针，4次迭代中仅更新一次</span><br>    bp0_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp1_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp2_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp3_pntr+=<span class=\"hljs-number\">4</span>;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "title": "Computing four elements at a time",
            "date_published": "2023-05-26T08:37:45.000Z",
            "content_html": "<h2 id=\"Computing-four-elements-at-a-time\"><a href=\"#Computing-four-elements-at-a-time\" class=\"headerlink\" title=\"Computing four elements at a time\"></a>Computing four elements at a time</h2><ul>\n<li>我们在子程序AddDot1x4中一次计算4个元素，该子程序一次执行4个内部乘积</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_3\">Optimization_1x4_3 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>现在我们内联(inline)四个独立的内积，并将循环融合为一个，从而在一个循环中同时计算四个内积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_4\">Optimization_1x4_4 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_5\">Optimization_1x4_5 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>在这一点上，我们开始看到一些性能改进:</p>\n<p><img src=\"/2023/05/26/gemm0002/compare_MMult0_MMult-1x4-5.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-1x4-3\"><a href=\"#Optimization-1x4-3\" class=\"headerlink\" title=\"Optimization_1x4_3\"></a>Optimization_1x4_3</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>\t  <span class=\"hljs-comment\">//相交于上个版本，把4个AddDot合并成了一个AddDot1x4</span><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C */</span> <br>  <span class=\"hljs-comment\">//一次AddDot1x4完成四次AddDot运算</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) );<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-4\"><a href=\"#Optimization-1x4-4\" class=\"headerlink\" title=\"Optimization_1x4_4\"></a>Optimization_1x4_4</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we &quot;inline&quot; AddDot */</span> <br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//在这里我们把AddDot中的运算，全部集成到了AddDot1x4中，即4段for执行4个内部乘积</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-5\"><a href=\"#Optimization-1x4-5\" class=\"headerlink\" title=\"Optimization_1x4_5\"></a>Optimization_1x4_5</h2><p>在这个版本，我们开始看到性能上的好处。原因是四个循环已经融合，因此四个内部乘积运算现在正在同时进行。这有以下好处:</p>\n<ul>\n<li>索引p只需要每8次浮点操作更新一次(4次乘法4次加法)。</li>\n<li>元素A(0, p)只需要从内存中取出一次，而不是四次。(只有当矩阵不再适合二级缓存时，这才有好处)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we merge the four loops, computing four inner</span><br><span class=\"hljs-comment\">     products simultaneously. */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//在这个版本中，我们合并了4个for循环，使得可以同时计算4个乘积运算</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <span class=\"hljs-comment\">//第一次取A( 0, p )</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "title": "Hiding computation in a subroutine",
            "date_published": "2023-05-26T07:06:49.000Z",
            "content_html": "<h2 id=\"Hiding-computation-in-a-subroutine\"><a href=\"#Hiding-computation-in-a-subroutine\" class=\"headerlink\" title=\"Hiding computation in a subroutine\"></a>Hiding computation in a subroutine</h2><ul>\n<li>我们首先重写基本实现，将内部循环隐藏在子程序AddDot中:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization1\">Optimization1 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization2\">Optimization2 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>这一步不会产生任何性能提升：</p>\n<p><img src=\"https://github.com/flame/how-to-optimize-gemm/raw/master/figures/compare_MMult0_MMult2.png\" alt=\"img\"></p>\n<p>它其实是为我们下一步做好准备。</p>\n<h2 id=\"Optimization1\"><a href=\"#Optimization1\" class=\"headerlink\" title=\"Optimization1\"></a>Optimization1</h2><p>这里最原始的矩阵乘代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-comment\">//创建宏，使矩阵是列主序</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j, p;<br>  <span class=\"hljs-comment\">//loop i j p</span><br>  <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i++ )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C 遍历C的行 */</span>   <br>    <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j++ )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C 遍历C的列 */</span><br>      <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;        <span class=\"hljs-comment\">/* Update C( i,j ) with the inner</span><br><span class=\"hljs-comment\">\t\t\t\t       product of the ith row of A and</span><br><span class=\"hljs-comment\">\t\t\t\t       the jth column of B */</span><br>    <span class=\"hljs-comment\">//A的一行B的一列更新C(i,j)</span><br>\t<span class=\"hljs-built_in\">C</span>( i,j ) = <span class=\"hljs-built_in\">C</span>( i,j ) +  <span class=\"hljs-built_in\">A</span>( i,p ) * <span class=\"hljs-built_in\">B</span>( p,j );<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>拆分内部循环，把乘加运算放在子程序AddDot中:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>\t<br>   <span class=\"hljs-comment\">//loop j i p   在这里更改了循环变量的顺序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br>\t  <span class=\"hljs-comment\">//拆分内部循环(循环变量p)，把乘加运算放在子程序AddDot中:</span><br>      <span class=\"hljs-comment\">//A的第i行，B的第j列</span><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//列主序，同行访问带跨步，同列访问无需跨步。跨步大小lda</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization2\"><a href=\"#Optimization2\" class=\"headerlink\" title=\"Optimization2\"></a>Optimization2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-comment\">//在这里对C的列进行了循环展开，展开数为4。列主序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+1 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">1</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+2 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+2)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">2</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+3 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">3</span> ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-comment\">//内层核心相较于上次来说，并没有修改</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/22/blas/",
            "url": "https://xingyuanjie.top/2023/05/22/blas/",
            "title": "BLAS（Basic Linear Algebra Subprograms）-基础线性代数子程序库",
            "date_published": "2023-05-22T12:35:17.000Z",
            "content_html": "<h2 id=\"how-to-optimize-gemm\"><a href=\"#how-to-optimize-gemm\" class=\"headerlink\" title=\"how-to-optimize-gemm\"></a>how-to-optimize-gemm</h2><p><strong>项目地址：</strong><a href=\"https://github.com/flame/how-to-optimize-gemm\">flame&#x2F;how-to-optimize-gemm (github.com)</a></p>\n<h3 id=\"Computing-four-elements-of-C-at-a-time\"><a href=\"#Computing-four-elements-of-C-at-a-time\" class=\"headerlink\" title=\"Computing four elements of C at a time\"></a>Computing four elements of C at a time</h3><p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0001/\">Hiding computation in a subroutine - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0002/\">Computing four elements at a time - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0003/\">Further optimizing - Amicoyuan (xingyuanjie.top)</a></p>\n<h3 id=\"Computing-a-4-x-4-block-of-C-at-a-time\"><a href=\"#Computing-a-4-x-4-block-of-C-at-a-time\" class=\"headerlink\" title=\"Computing a 4 x 4 block of C at a time\"></a>Computing a 4 x 4 block of C at a time</h3><p>为了有效地使用向量指令和向量寄存器，我们现在一次计算一个4 x 4的C代码块。其思想如下:作为SSE3指令集的一部分，有一些特殊的指令允许每个时钟周期执行两次“乘法累加”操作(两次乘法和两次加法)，每个时钟周期总共执行四个浮点操作。要使用这些，必须将数据放入“向量寄存器”中。有16个这样的向量寄存器，每个向量寄存器可以容纳两个双精度数。因此，我们可以在寄存器中保存32个双精度数。我们将使用其中的16个来保存C的元素，一个4 x 4的块。</p>\n<p><a href=\"https://xingyuanjie.top/2023/05/31/gemm0004/\">Repeating the same optimizations - Amicoyuan (xingyuanjie.top)</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客:\"></a>博客:</h3><p><a href=\"https://www.jianshu.com/p/e01024892afb\">矩阵相乘在GPU上的终极优化：深度解析Maxas汇编器工作原理 - 简书 (jianshu.com)</a></p>\n<p><a href=\"https://www.leiphone.com/category/yanxishe/Puevv3ZWxn0heoEv.html\">OpenBLAS项目与矩阵乘法优化 | AI 研习社 | 雷峰网 (leiphone.com)</a></p>\n<p><a href=\"https://jcf94.com/2021/08/28/2021-08-28-simd/\">矩阵乘法与 SIMD | Chenfan Blog (jcf94.com)</a></p>\n<p><a href=\"https://zhenhuaw.me/blog/2019/gemm-optimization.html\">通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/383115932\">大佬是怎么优雅实现矩阵乘法的？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/65436463\">OpenBLAS gemm从零入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://harleyszhang.github.io/cv_note/\">Introduction · cv算法工程师成长之路 (harleyszhang.github.io)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/435908830\">深入浅出GPU优化系列：GEMM优化（一） - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/410278370\">CUDA 矩阵乘法终极优化指南 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/368870275\">矩阵乘法的并行优化（1）：OPENMP、CUDA实现 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/617296073\">并行计算入门 UIUC ECE408 Lecture 7&amp;8 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/143328317\">移动端arm cpu优化学习笔记第4弹–内联汇编入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/348372132\">C语言的内嵌汇编 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/105616727\">内嵌汇编学习 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://blog.csdn.net/unbutun/article/details/6123472\">(88条消息) #define barrier() <strong>asm</strong> <strong>volatile</strong>(“”: : :”memory”) 中的memory是gcc的东西_unbutun的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_38669561/article/details/105192200?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control\">(88条消息) MIPS指令集：内嵌汇编asm语法介绍_daddu指令_无色云的博客-CSDN博客</a></p>\n<h3 id=\"论文：\"><a href=\"#论文：\" class=\"headerlink\" title=\"论文：\"></a>论文：</h3><p><a href=\"https://www.cs.utexas.edu/users/flame/FLAMEPublications.html\">Publications Related to the FLAME Project (utexas.edu)</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/1356052.1356053\">Anatomy of high-performance matrix multiplication | ACM Transactions on Mathematical Software</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/3018743.3018755\">Understanding the GPU Microarchitecture to Achieve Bare-Metal Performance Tuning | Proceedings of the 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</a></p>\n<p>[<a href=\"https://arxiv.org/abs/1804.06826\">1804.06826] Dissecting the NVIDIA Volta GPU Architecture via Microbenchmarking (arxiv.org)</a></p>\n<p><a href=\"https://ieeexplore.ieee.org/document/6114452\">Fast implementation of DGEMM on Fermi GPU | IEEE Conference Publication | IEEE Xplore</a></p>\n<p><a href=\"https://dl.acm.org/doi/abs/10.1145/3369583.3393611\">High Performance is All about Minimizing Data Movement | Proceedings of the 29th International Symposium on High-Performance Parallel and Distributed Computing (acm.org)</a></p>\n<h3 id=\"社区-x2F-论坛\"><a href=\"#社区-x2F-论坛\" class=\"headerlink\" title=\"社区&#x2F;论坛:\"></a>社区&#x2F;论坛:</h3><p><a href=\"http://tvm.d2l.ai/chapter_gpu_schedules/vector_add.html#cuda-programming\">2. Vector Add — Dive into Deep Learning Compiler 0.1 documentation (d2l.ai)</a></p>\n<p><a href=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html\">Intel® Intrinsics Guide</a></p>\n<p><a href=\"https://github.com/pytorch/QNNPACK\">https://github.com/pytorch/QNNPACK</a></p>\n<p><a href=\"https://github.com/flame/blis\">https://github.com/flame/blis</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/ulmBLAS/\">ulmBLAS (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/sghpc/gemm/index.html\">work&#x2F;sghpc (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://shpc.oden.utexas.edu/\">The Science of High-Performance Computing Group (utexas.edu)</a></p>\n<p><a href=\"https://github.com/BBuf/how-to-optimize-gemm\">GitHub - BBuf&#x2F;how-to-optimize-gemm</a></p>\n<p><a href=\"https://github.com/Liu-xiandong/How_to_optimize_in_GPU\">GitHub - Liu-xiandong&#x2F;How_to_optimize_in_GPU: This is a series of GPU optimization topics. Here we will introduce how to optimize the CUDA kernel in detail. I will introduce several basic kernel optimizations, including: elementwise, reduce, sgemv, sgemm, etc. The performance of these kernels is basically at or near the theoretical limit.</a></p>\n<p><a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/#\">CUDA C++ Programming Guide (nvidia.com)</a></p>\n<p><a href=\"https://github.com/NervanaSystems/maxas/wiki/SGEMM\">SGEMM · NervanaSystems&#x2F;maxas Wiki · GitHub</a></p>\n<p><a href=\"https://github.com/Cjkkkk/CUDA_gemm\">GitHub - Cjkkkk&#x2F;CUDA_gemm: A simple high performance CUDA GEMM implementation.</a></p>\n<p><a href=\"https://github.com/yzhaiustc/Optimizing-SGEMM-on-NVIDIA-Turing-GPUs\">GitHub - yzhaiustc&#x2F;Optimizing-SGEMM-on-NVIDIA-Turing-GPUs: Optimizing SGEMM kernel functions on NVIDIA GPUs to a close-to-cuBLAS performance.</a></p>\n<p><a href=\"https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/\">https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/</a></p>\n<p><a href=\"https://wiki.illinois.edu/wiki/display/ECE408/Class+Schedule\">Class Schedule - ECE408 - Illinois Wiki</a></p>\n<p><a href=\"https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#toc2\">GCC-Inline-Assembly-HOWTO (ibiblio.org)</a></p>\n<p><a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课 · the missing semester of your cs education (missing-semester-cn.github.io)</a></p>\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/04/30/enum/",
            "url": "https://xingyuanjie.top/2023/04/30/enum/",
            "title": "C/C++枚举类型 enum",
            "date_published": "2023-04-30T07:44:23.000Z",
            "content_html": "<h2 id=\"C-x2F-C-枚举类型-enum\"><a href=\"#C-x2F-C-枚举类型-enum\" class=\"headerlink\" title=\"C&#x2F;C++枚举类型 enum\"></a>C&#x2F;C++枚举类型 enum</h2><p><strong>枚举类型的定义：</strong>枚举类型(enumeration)是 C++ 中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p>\n<p>定义格式：枚举类型的定义格式为：</p>\n<figure class=\"highlight bnf\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bnf\">enum <span class=\"hljs-attribute\">&lt;类型名&gt;</span> &#123;<span class=\"hljs-attribute\">&lt;枚举常量表&gt;</span>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>格式说明：</strong></p>\n<ul>\n<li>关键字enum——指明其后的标识符是一个枚举类型的名字。</li>\n<li>枚举常量表——由枚举常量构成。”枚举常量”或称”枚举成员”，是以标识符形式表示的整型量，表示枚举类型的取值。枚举常量表列出枚举类型的所有取值，各枚举常量之间以”，”间隔，且必须各不相同。取值类型与条件表达式相同。</li>\n</ul>\n<p><strong>应用举例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">color_set1</span> &#123;</span>RED, BLUE, WHITE, BLACK&#125;; <span class=\"hljs-comment\">// 定义枚举类型color_set1</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">week</span> &#123;</span>Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;; <span class=\"hljs-comment\">// 定义枚举类型week</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>重要提示：</strong></p>\n<p>枚举常量代表该枚举类型的变量可能取的值，编译系统为每个枚举常量指定一个整数值，默认状态下，这个整数就是所列举元素的序号，序号从0开始。 可以在定义枚举类型时为部分或全部枚举常量指定整数值，在指定值之前的枚举常量仍按默认方式取值，而指定值之后的枚举常量按依次加1的原则取值。 各枚举常量的值可以重复。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">fruit_set</span> &#123;</span>apple, orange, banana=<span class=\"hljs-number\">1</span>, peach, grape&#125;<br><span class=\"hljs-comment\">//枚举常量apple=0,orange=1, banana=1,peach=2,grape=3。</span><br><span class=\"hljs-keyword\">enum</span> week &#123;Sun=<span class=\"hljs-number\">7</span>, Mon=<span class=\"hljs-number\">1</span>, Tue, Wed, Thu, Fri, Sat&#125;;<br><span class=\"hljs-comment\">//枚举常量Sun,Mon,Tue,Wed,Thu,Fri,Sat的值分别为7、1、2、3、4、5、6。</span><br></code></pre></div></td></tr></table></figure>\n\n<p>枚举常量只能以标识符形式表示，而不能是整型、字符型等文字常量。例如，以下定义非法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">letter_set</span> &#123;</span><span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;d&#x27;</span>,<span class=\"hljs-string\">&#x27;F&#x27;</span>,<span class=\"hljs-string\">&#x27;s&#x27;</span>,<span class=\"hljs-string\">&#x27;T&#x27;</span>&#125;; <span class=\"hljs-comment\">//枚举常量不能是字符常量</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">year_set</span>&#123;</span><span class=\"hljs-number\">2000</span>,<span class=\"hljs-number\">2001</span>,<span class=\"hljs-number\">2002</span>,<span class=\"hljs-number\">2003</span>,<span class=\"hljs-number\">2004</span>,<span class=\"hljs-number\">2005</span>&#125;; <span class=\"hljs-comment\">//枚举常量不能是整型常量</span><br></code></pre></div></td></tr></table></figure>\n\n<p>可改为以下形式则定义合法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">letter_set</span> &#123;</span>a, d, F, s, T&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">year_set</span>&#123;</span>y2000, y2001, y2002, y2003, y2004, y2005&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<hr>\n<h2 id=\"枚举变量的使用\"><a href=\"#枚举变量的使用\" class=\"headerlink\" title=\"枚举变量的使用\"></a>枚举变量的使用</h2><p>定义枚举类型的主要目的是：增加程序的可读性。枚举类型最常见也最有意义的用处之一就是用来描述状态量，这点将在第9章 输入输出流类看到。</p>\n<p>定义格式：定义枚举类型之后，就可以定义该枚举类型的变量，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">color_set1 color1, color2;<br></code></pre></div></td></tr></table></figure>\n\n<p>亦可类型与变量同时定义（甚至类型名可省），格式如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> &#123;</span>Sun,Mon,Tue,Wed,Thu,Fri,Sat&#125; weekday1, weekday2;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"相关操作\"><a href=\"#相关操作\" class=\"headerlink\" title=\"相关操作\"></a>相关操作</h3><p>枚举变量的值只能取枚举常量表中所列的值，就是整型数的一个子集。</p>\n<p>枚举变量占用内存的大小与整型数相同。</p>\n<p>枚举变量只能参与赋值和关系运算以及输出操作，参与运算时用其本身的整数值。例如，设有定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">color_set1</span> &#123;</span>RED, BLUE, WHITE, BLACK&#125; color1, color2;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">color_set2</span> &#123;</span> GREEN, RED, YELLOW, WHITE&#125; color3, color4;<br></code></pre></div></td></tr></table></figure>\n\n<p>则允许的赋值操作如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">color3=RED;           <span class=\"hljs-comment\">//将枚举常量值赋给枚举变量</span><br>color4=color3;        <span class=\"hljs-comment\">//相同类型的枚举变量赋值，color4的值为RED</span><br><span class=\"hljs-keyword\">int</span>  i=color3;        <span class=\"hljs-comment\">//将枚举变量赋给整型变量，i的值为1</span><br><span class=\"hljs-keyword\">int</span>  j=GREEN;         <span class=\"hljs-comment\">//将枚举常量赋给整型变量，j的值为0</span><br></code></pre></div></td></tr></table></figure>\n\n<p>允许的关系运算有：&#x3D;&#x3D;、&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、!&#x3D;等，例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//比较同类型枚举变量color3，color4是否相等</span><br><span class=\"hljs-keyword\">if</span> (color3==color4) cout&lt;&lt;<span class=\"hljs-string\">&quot;相等&quot;</span>；<br><span class=\"hljs-comment\">//输出的是变量color3与WHITE的比较结果，结果为1</span><br>cout&lt;&lt; color3&lt;WHITE;<br></code></pre></div></td></tr></table></figure>\n\n<p>枚举变量可以直接输出，输出的是变量的整数值。例如：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cout</span>&lt;&lt; color<span class=\"hljs-number\">3</span>;         //输出的是color<span class=\"hljs-number\">3</span>的整数值，即RED的整数值<span class=\"hljs-number\">1</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"重要提示\"><a href=\"#重要提示\" class=\"headerlink\" title=\"重要提示\"></a>重要提示</h3><ul>\n<li>枚举变量可以直接输出，但不能直接输入。如：cout &gt;&gt; color3;  &#x2F;&#x2F;非法</li>\n<li>不能直接将常量赋给枚举变量。如： color1&#x3D;1; &#x2F;&#x2F;非法</li>\n<li>不同类型的枚举变量之间不能相互赋值。如： color1&#x3D;color3; &#x2F;&#x2F;非法</li>\n<li>枚举变量的输入输出一般都采用switch语句将其转换为字符或字符串；枚举类型数据的其他处理也往往应用switch语句，以保证程序的合法性和可读性。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.runoob.com/w3cnote/cpp-enum-intro.html\">C++ 枚举类型详解 | 菜鸟教程 (runoob.com)</a></p>\n",
            "tags": [
                "C/C++"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/04/30/violate/",
            "url": "https://xingyuanjie.top/2023/04/30/violate/",
            "title": "C/C++ volatile关键字",
            "date_published": "2023-04-30T07:30:24.000Z",
            "content_html": "<h2 id=\"C-x2F-C-volatile关键字\"><a href=\"#C-x2F-C-volatile关键字\" class=\"headerlink\" title=\"C&#x2F;C++ volatile关键字\"></a>C&#x2F;C++ volatile关键字</h2><p><strong>volatile后面的变量，是常变量，会直接访问地址，如果没有这个关键字，就可能会暂时使用寄存器的值，而不是读取地址。</strong></p>\n<p>C&#x2F;C++ 中的 volatile 关键字和 const 对应，用来修饰变量。volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">10</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。</p>\n<p>volatile 指出 i 是随时可能发生变化的，每次使用它的时候必须从 i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在 b 中。而优化做法是，由于编译器发现两次从 i读数据的代码之间的代码没有对 i 进行过操作，它会自动把上次读的数据放在 b 中。而不是重新从 i 里面读。这样以来，如果 i是一个寄存器变量或者表示一个端口数据就容易出错，所以说 volatile 可以保证对特殊地址的稳定访问。</p>\n<p><strong>volatile关键字的实现：如在并行环境下，进行同步操作，用volatile修饰回答字地址，即可实现并行环境下的同步。这种方法一般使用在非阻塞通信中。</strong></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/ijn842/article/details/81273232\">浅谈C语言的volatile关键字_琼琼的博客的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/GreatTang/article/details/90454011\">C++ volatile_c++ violate_来日梦多长的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/jerry_wuhao/article/details/113247800\">C&#x2F;C++ 中 volatile 关键字_c++ violate关键字_王俊洁、�的博客-CSDN博客</a></p>\n",
            "tags": [
                "C/C++"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/04/05/life001/",
            "url": "https://xingyuanjie.top/2023/04/05/life001/",
            "title": "厦门",
            "date_published": "2023-04-05T12:20:25.000Z",
            "content_html": "<h1 id=\"厦门-待更新完成\"><a href=\"#厦门-待更新完成\" class=\"headerlink\" title=\"厦门[待更新完成]\"></a>厦门[待更新完成]</h1><h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>记得大三的时候就一直想去海边，因为封校+疫情也没怎么去成。考完后，自己也是一直想出去走走，春节看了很多的旅游地方，挑了好久(制定旅游计划)后终于决定出发了，结果天气预报下一周的雨，只有被迫取消了。后面就是学校毕业设计开题答辩和春招忙了一段时间，最后解决后也是顺利出发，哈哈哈哈哈哈！</p>\n<h2 id=\"第一天：\"><a href=\"#第一天：\" class=\"headerlink\" title=\"第一天：\"></a>第一天：</h2><p>大早上收拾行李，出门吃了小学就喜欢吃的米粉(味道真的好)，随后就坐上了摆渡车去新都的华桂路地铁站，天府机场真的好远，地铁做了2个多小时，人都麻了(途中因为担心赶不上飞机还忐忑了一会)。还有到了机场我左问西问快速解决(天府机场也好大，但是感觉配套还不是很完善)。</p>\n<img src=\"/2023/04/05/life001/image-20230405203721650.png\" height=\"500px\">\n\n<img src=\"/2023/04/05/life001/image-20230405210557733.png\" height=\"500px\">\n\n<p>厦门降落的时候就感觉是在居民楼上面飞，看网上很多人都在这边（殿前村）拍飞机哈哈哈！飞机餐没吃饱，以下飞机就回酒店，然后出发中华街了。</p>\n<p>下面就是中华街买的吃的，除了海鲜(主要我不喜欢吃海鲜哈哈哈)，其他都还可以！</p>\n<p>鸡蛋汉堡排队巨多人，然后这个奶茶就是打卡类奶茶(不好喝)</p>\n<img src=\"/2023/04/05/life001/image-20230405211537092.png\" height=\"500px\">\n\n<img src=\"/2023/04/05/life001/image-20230405211633710.png\" height=\"500px\">\n\n<p>沙茶里脊肉，只能说有点特色，以前没吃过这种口味的。这个咖啡美式有点焦味感觉和KFC差不多。还和卖咖啡的小姐姐聊了聊哈哈哈她也是四川的，一听我口音就暴露了。。。。</p>\n<img src=\"/2023/04/05/life001/image-20230405211654127.png\" height=\"500px\">\n\n<img src=\"/2023/04/05/life001/image-20230405211803539.png\" height=\"500px\">\n",
            "tags": [
                "Travel"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/13/CMU15-213001/",
            "url": "https://xingyuanjie.top/2023/03/13/CMU15-213001/",
            "title": "CMU 15-213 Lecture 01:Course Overview",
            "date_published": "2023-03-13T12:29:35.000Z",
            "content_html": "<h2 id=\"2015-CMU-15-213-CSAPP-深入理解计算机系统-Lecture-01-Course-Overview\"><a href=\"#2015-CMU-15-213-CSAPP-深入理解计算机系统-Lecture-01-Course-Overview\" class=\"headerlink\" title=\"2015 CMU 15-213 CSAPP 深入理解计算机系统 Lecture 01: Course Overview\"></a>2015 CMU 15-213 CSAPP 深入理解计算机系统 Lecture 01: Course Overview</h2><h3 id=\"例子一：\"><a href=\"#例子一：\" class=\"headerlink\" title=\"例子一：\"></a>例子一：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">2</span>];<br>    <span class=\"hljs-keyword\">double</span> d;<br>&#125;<span class=\"hljs-keyword\">struct_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;<br>    <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-keyword\">struct_t</span> s;   <span class=\"hljs-comment\">//volatile关键字</span><br>    s.d = <span class=\"hljs-number\">3.14</span>;<br>    s.a[i] = <span class=\"hljs-number\">1073741824</span>;   <span class=\"hljs-comment\">/*Possibly out of bounds*/</span><br>    <span class=\"hljs-keyword\">return</span> s.d;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">fun(0)   -&gt;   3.14<br>fun(1)   -&gt;   3.14<br>fun(2)   -&gt;   3.1399998664856<br>fun(3)   -&gt;   2.00000061035156<br>fun(4)   -&gt;   3.14<br>fun(6)   -&gt;   Segmentation falut<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/CMU15-213001/image-20230313201550219.png\" alt=\"image-20230313201550219\"></p>\n<p>【图中假设memory line大小为4B】根据结构体可知我们拥有一个int型的数组大小为2，一个double型的变量。因为int数组的大小为2，当fun(0),fun(1)时，s.a[i]访问是正确的，所以fun(0),fun(1)返回正确值s.d及3.14。而当fun(i):i&gt;1时，就会返回奇怪的结果，这是因为数组大小为2，我们越界了，实际上s.a[i]写的是double的内存空间，如图中的2，3。而6代表程序状态，我们去修改它就会造成程序状态的改变，导致Segmentation fault。这里提醒我们在写C代码的时候一定要注意边界处理。【这里需要清楚C语言中堆区和栈区存的是什么】</p>\n<h3 id=\"例子二：\"><a href=\"#例子二：\" class=\"headerlink\" title=\"例子二：\"></a>例子二：</h3><p><img src=\"/2023/03/13/CMU15-213001/image-20230313202535864.png\" alt=\"image-20230313202535864\"></p>\n<p>【src和dst是大小2048*2048的二维数组】上面的图片，我们可以十分清楚代码的逻辑。他想把src数组的值拷贝到dst。而左右代码的功能完全一样，仅仅是for循环顺序不一样，但是却会有这么大的性能差距，这是什么原因呢？总的来说就是左边代码cache命中率高，右边cache命中率的。cache命中和cache miss的速度差距很大甚至是数量级别的差距，这是导致两者差距巨大的原因。【注意这里还可以更细致的分析，但是会有很多其他因素会影响】</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/index.html\">15-213: Introduction to Computer Systems (cmu.edu)</a></p>\n",
            "tags": [
                "CMU",
                "CSAPP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/13/CMU15-213/",
            "url": "https://xingyuanjie.top/2023/03/13/CMU15-213/",
            "title": "2015 CMU 15-213 CSAPP 深入理解计算机系统",
            "date_published": "2023-03-13T10:29:35.000Z",
            "content_html": "<h1 id=\"2015-CMU-15-213-CSAPP-深入理解计算机系统\"><a href=\"#2015-CMU-15-213-CSAPP-深入理解计算机系统\" class=\"headerlink\" title=\"2015 CMU 15-213 CSAPP 深入理解计算机系统\"></a>2015 CMU 15-213 CSAPP 深入理解计算机系统</h1><p><strong>项目地址：</strong><a href=\"https://github.com/EugeneLiu/translationCSAPP\">EugeneLiu&#x2F;translationCSAPP: 为 CSAPP 视频课程提供字幕，翻译 PPT，Lab。 (github.com)</a></p>\n<p><strong>bilibili翻译：</strong><a href=\"https://www.bilibili.com/video/av31289365/\">【精校中英字幕】2015 CMU 15-213 CSAPP 深入理解计算机系统 课程视频_哔哩哔哩_bilibili</a></p>\n<h2 id=\"CSAPP-3e-官方链接\"><a href=\"#CSAPP-3e-官方链接\" class=\"headerlink\" title=\"CSAPP:3e 官方链接\"></a>CSAPP:3e 官方链接</h2><ul>\n<li><a href=\"http://csapp.cs.cmu.edu/\">课程主页</a></li>\n<li><a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/schedule.html\">课件下载链接</a></li>\n<li><a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">课程 Lab 页面</a></li>\n<li><a href=\"https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22b96d90ae-9871-4fae-91e2-b1627b43e25e%22&sortColumn=0&sortAscending=true\">课程视频地址</a></li>\n</ul>\n",
            "tags": [
                "CMU",
                "CSAPP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/13/ML003/",
            "url": "https://xingyuanjie.top/2023/03/13/ML003/",
            "title": "线性回归的梯度下降",
            "date_published": "2023-03-13T06:37:12.000Z",
            "content_html": "<h2 id=\"线性回归的梯度下降\"><a href=\"#线性回归的梯度下降\" class=\"headerlink\" title=\"线性回归的梯度下降\"></a>线性回归的梯度下降</h2><p><img src=\"/2023/03/13/ML003/image-20230313145346118.png\" alt=\"image-20230313145346118\"></p>\n<h2 id=\"Goals\"><a href=\"#Goals\" class=\"headerlink\" title=\"Goals\"></a>Goals</h2><p>在本实验中，您将:</p>\n<ul>\n<li>使用梯度下降自动优化w和b的过程</li>\n</ul>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>在本实验中，我们将使用:</p>\n<ul>\n<li>NumPy，一个用于科学计算的流行库</li>\n<li>Matplotlib，用于绘制数据的流行库</li>\n<li>在本地目录的lab_utils.py文件中绘制例程</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> math, copy<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br>plt.style.use(<span class=\"hljs-string\">&#x27;./deeplearning.mplstyle&#x27;</span>)<br><span class=\"hljs-keyword\">from</span> lab_utils_uni <span class=\"hljs-keyword\">import</span> plt_house_x, plt_contour_wgrad, plt_divergence, plt_gradients<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Problem-Statement\"><a href=\"#Problem-Statement\" class=\"headerlink\" title=\"Problem Statement\"></a>Problem Statement</h2><p>让我们使用与之前相同的两个数据点——1000平方英尺的房子以30万美元的价格出售，2000平方英尺的房子以50万美元的价格出售。</p>\n<table>\n<thead>\n<tr>\n<th>Size(1000 sqft)</th>\n<th>Price(1000s of dollars)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#Load our data set</span><br>x_train = np.array([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>])\t<span class=\"hljs-comment\">#features</span><br>y_train = np.array([<span class=\"hljs-number\">300.0</span>,<span class=\"hljs-number\">500.0</span>])\t<span class=\"hljs-comment\">#target value</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Compute-Cost\"><a href=\"#Compute-Cost\" class=\"headerlink\" title=\"Compute_Cost\"></a>Compute_Cost</h2><p>这是上一个实验室开发的。我们在这里还会用到它。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs pyhton\">#Function to calculate the cost<br>def compute_cost(x, y, w, b,):<br>\t<br>\tm = x.shape[0]<br>\tcost = 0<br>\t<br>\tfor i in range(m):<br>\t\tf_wb = w * x[i] + b<br>\t\tcost = cost + (f_wb - y[i])**2<br>\ttotal_cost = 1 / (2 * m)*cost<br>\t<br>\treturn total_cost<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Gradient-descent-summary\"><a href=\"#Gradient-descent-summary\" class=\"headerlink\" title=\"Gradient descent summary\"></a>Gradient descent summary</h2><p>到目前为止，在这门课程中，你已经建立了一个线性模型来预测f_w,b(x^i):</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313150848463.png\" alt=\"image-20230313150848463\"></p>\n<p>在线性回归中，您使用输入训练数据来拟合参数𝑤,𝑏;来最小化我们的预测之间的误差测量f_𝑤，𝑏(𝑥^(𝑖))和实际数据𝑦(𝑖)。这种测量成为代价，J（w,b）。在训练中，你可以衡量我们所有训练样本的成本𝑥(𝑖)，𝑦(𝑖)。</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313151251919.png\" alt=\"image-20230313151251919\"></p>\n<p>在课堂上，梯度下降被描述为:</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313151329621.png\" alt=\"image-20230313151329621\"></p>\n<p>其中参数𝑤,𝑏同时更新。</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313151450500.png\" alt=\"image-20230313151450500\"></p>\n<p>这里同时意味着在更新任何参数之前计算所有参数的偏导数。</p>\n<h2 id=\"Implement-Gradient-Descent\"><a href=\"#Implement-Gradient-Descent\" class=\"headerlink\" title=\"Implement Gradient Descent\"></a>Implement Gradient Descent</h2><p>你将为一个特征实现梯度下降算法。你需要三个函数。</p>\n<ul>\n<li>compute_gradient实现上述式(4)和(5)</li>\n<li>上面的compute_cost实现方程(2)(代码来自以前的实验室)</li>\n<li>gradient_descent，使用compute_gradient和compute_cost</li>\n</ul>\n<p>Conventions:</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313151857315.png\" alt=\"image-20230313151857315\"></p>\n<h2 id=\"compute-gradient\"><a href=\"#compute-gradient\" class=\"headerlink\" title=\"compute_gradient\"></a>compute_gradient</h2><p><img src=\"/2023/03/13/ML003/image-20230313151947363.png\" alt=\"image-20230313151947363\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">compute_gradient</span>(<span class=\"hljs-params\">x, y, w, b</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Computes the gradient for linear regression</span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">    \tx (ndarray (m,)): Data, m examples</span><br><span class=\"hljs-string\">    \ty (ndarray (m,)): target values</span><br><span class=\"hljs-string\">    \tw,b (scalar)\t: model parameters</span><br><span class=\"hljs-string\">    Returns</span><br><span class=\"hljs-string\">    \tdj_dw (scalar): The gradient of the cost w.r.t. the parameters w</span><br><span class=\"hljs-string\">    \tdj_db (scalar): The gradient of the cost w.r.t. the parameter b </span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <br>    <span class=\"hljs-comment\">#Number of training examples</span><br>    m = x.shape[<span class=\"hljs-number\">0</span>]<br>    dj_de = <span class=\"hljs-number\">0</span><br>    dj_db = <span class=\"hljs-number\">0</span><br>    <br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):<br>        f_wb = w * x[i] + b;<br>        dj_dw_i = (f_wb - y[i]) * x[i]<br>        dj_db_i = f_wb - y[i]<br>        dj_db += dj_db_i<br>        dj_dw += dj_dw_i<br>    dj_dw = dj_dw / m<br>    dj_db = dj_db / m<br>    <br>    <span class=\"hljs-keyword\">return</span> dj_dw, dj_db<br></code></pre></div></td></tr></table></figure>\n\n<p>课程描述了梯度下降如何利用在某一点上对参数代价的偏导数来更新该参数。</p>\n<p>让我们使用compute_gradient函数来查找并绘制代价函数相对于其中一个参数𝑤0的偏导数。</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313154012173.png\" alt=\"image-20230313154012173\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt_gradients(x_train,y_train, compute_cost, compute_gradient)<br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313154210478.png\" alt=\"image-20230313154210478\"></p>\n<p><img src=\"/2023/03/13/ML003/image-20230313154333429.png\" alt=\"image-20230313154333429\"></p>\n<h2 id=\"Gradient-Descent\"><a href=\"#Gradient-Descent\" class=\"headerlink\" title=\"Gradient Descent\"></a>Gradient Descent</h2><p>现在可以计算梯度，上面公式(3)中描述的梯度下降可以在下面的gradient_descent中实现。注释中描述了实现的细节。下面，您将利用这个函数在训练数据上找到w和b的最佳值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">gradient_descent</span>(<span class=\"hljs-params\">x, y, w_in, b_in, alpha, num_iters, cost_function, gradient_function</span>):</span> <br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Performs gradient descent to fit w,b. Updates w,b by taking </span><br><span class=\"hljs-string\">    num_iters gradient steps with learning rate alpha</span><br><span class=\"hljs-string\">    </span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">      x (ndarray (m,))  : Data, m examples </span><br><span class=\"hljs-string\">      y (ndarray (m,))  : target values</span><br><span class=\"hljs-string\">      w_in,b_in (scalar): initial values of model parameters  </span><br><span class=\"hljs-string\">      alpha (float):     Learning rate</span><br><span class=\"hljs-string\">      num_iters (int):   number of iterations to run gradient descent</span><br><span class=\"hljs-string\">      cost_function:     function to call to produce cost</span><br><span class=\"hljs-string\">      gradient_function: function to call to produce gradient</span><br><span class=\"hljs-string\">      </span><br><span class=\"hljs-string\">    Returns:</span><br><span class=\"hljs-string\">      w (scalar): Updated value of parameter after running gradient descent</span><br><span class=\"hljs-string\">      b (scalar): Updated value of parameter after running gradient descent</span><br><span class=\"hljs-string\">      J_history (List): History of cost values</span><br><span class=\"hljs-string\">      p_history (list): History of parameters [w,b] </span><br><span class=\"hljs-string\">      &quot;&quot;&quot;</span><br>    <br>    w = copy.deepcopy(w_in) <span class=\"hljs-comment\"># avoid modifying global w_in</span><br>    <span class=\"hljs-comment\"># An array to store cost J and w&#x27;s at each iteration primarily for graphing later</span><br>    J_history = []<br>    p_history = []<br>    b = b_in<br>    w = w_in<br>    <br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num_iters):<br>        <span class=\"hljs-comment\"># Calculate the gradient and update the parameters using gradient_function</span><br>        dj_dw, dj_db = gradient_function(x, y, w , b)     <br><br>        <span class=\"hljs-comment\"># Update Parameters using equation (3) above</span><br>        b = b - alpha * dj_db                            <br>        w = w - alpha * dj_dw                            <br><br>        <span class=\"hljs-comment\"># Save cost J at each iteration</span><br>        <span class=\"hljs-keyword\">if</span> i&lt;<span class=\"hljs-number\">100000</span>:      <span class=\"hljs-comment\"># prevent resource exhaustion </span><br>            J_history.append( cost_function(x, y, w , b))<br>            p_history.append([w,b])<br>        <span class=\"hljs-comment\"># Print cost every at intervals 10 times or as many iterations if &lt; 10</span><br>        <span class=\"hljs-keyword\">if</span> i% math.ceil(num_iters/<span class=\"hljs-number\">10</span>) == <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Iteration <span class=\"hljs-subst\">&#123;i:<span class=\"hljs-number\">4</span>&#125;</span>: Cost <span class=\"hljs-subst\">&#123;J_history[-<span class=\"hljs-number\">1</span>]:<span class=\"hljs-number\">0.2</span>e&#125;</span> &quot;</span>,<br>                  <span class=\"hljs-string\">f&quot;dj_dw: <span class=\"hljs-subst\">&#123;dj_dw: <span class=\"hljs-number\">0.3</span>e&#125;</span>, dj_db: <span class=\"hljs-subst\">&#123;dj_db: <span class=\"hljs-number\">0.3</span>e&#125;</span>  &quot;</span>,<br>                  <span class=\"hljs-string\">f&quot;w: <span class=\"hljs-subst\">&#123;w: <span class=\"hljs-number\">0.3</span>e&#125;</span>, b:<span class=\"hljs-subst\">&#123;b: <span class=\"hljs-number\">0.5</span>e&#125;</span>&quot;</span>)<br> <br>    <span class=\"hljs-keyword\">return</span> w, b, J_history, p_history <span class=\"hljs-comment\">#return w and J,w history for graphing</span><br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">Iteration    <span class=\"hljs-number\">0</span>: Cost <span class=\"hljs-number\">7.93e+04</span>  dj_dw: -<span class=\"hljs-number\">6.500e+02</span>, dj_db: -<span class=\"hljs-number\">4.000e+02</span>   w:  <span class=\"hljs-number\">6.500e+00</span>, b: <span class=\"hljs-number\">4.00000e+00</span><br>Iteration <span class=\"hljs-number\">1000</span>: Cost <span class=\"hljs-number\">3.41e+00</span>  dj_dw: -<span class=\"hljs-number\">3.712e-01</span>, dj_db:  <span class=\"hljs-number\">6.007e-01</span>   w:  <span class=\"hljs-number\">1.949e+02</span>, b: <span class=\"hljs-number\">1.08228e+02</span><br>Iteration <span class=\"hljs-number\">2000</span>: Cost <span class=\"hljs-number\">7.93e-01</span>  dj_dw: -<span class=\"hljs-number\">1.789e-01</span>, dj_db:  <span class=\"hljs-number\">2.895e-01</span>   w:  <span class=\"hljs-number\">1.975e+02</span>, b: <span class=\"hljs-number\">1.03966e+02</span><br>Iteration <span class=\"hljs-number\">3000</span>: Cost <span class=\"hljs-number\">1.84e-01</span>  dj_dw: -<span class=\"hljs-number\">8.625e-02</span>, dj_db:  <span class=\"hljs-number\">1.396e-01</span>   w:  <span class=\"hljs-number\">1.988e+02</span>, b: <span class=\"hljs-number\">1.01912e+02</span><br>Iteration <span class=\"hljs-number\">4000</span>: Cost <span class=\"hljs-number\">4.28e-02</span>  dj_dw: -<span class=\"hljs-number\">4.158e-02</span>, dj_db:  <span class=\"hljs-number\">6.727e-02</span>   w:  <span class=\"hljs-number\">1.994e+02</span>, b: <span class=\"hljs-number\">1.00922e+02</span><br>Iteration <span class=\"hljs-number\">5000</span>: Cost <span class=\"hljs-number\">9.95e-03</span>  dj_dw: -<span class=\"hljs-number\">2.004e-02</span>, dj_db:  <span class=\"hljs-number\">3.243e-02</span>   w:  <span class=\"hljs-number\">1.997e+02</span>, b: <span class=\"hljs-number\">1.00444e+02</span><br>Iteration <span class=\"hljs-number\">6000</span>: Cost <span class=\"hljs-number\">2.31e-03</span>  dj_dw: -<span class=\"hljs-number\">9.660e-03</span>, dj_db:  <span class=\"hljs-number\">1.563e-02</span>   w:  <span class=\"hljs-number\">1.999e+02</span>, b: <span class=\"hljs-number\">1.00214e+02</span><br>Iteration <span class=\"hljs-number\">7000</span>: Cost <span class=\"hljs-number\">5.37e-04</span>  dj_dw: -<span class=\"hljs-number\">4.657e-03</span>, dj_db:  <span class=\"hljs-number\">7.535e-03</span>   w:  <span class=\"hljs-number\">1.999e+02</span>, b: <span class=\"hljs-number\">1.00103e+02</span><br>Iteration <span class=\"hljs-number\">8000</span>: Cost <span class=\"hljs-number\">1.25e-04</span>  dj_dw: -<span class=\"hljs-number\">2.245e-03</span>, dj_db:  <span class=\"hljs-number\">3.632e-03</span>   w:  <span class=\"hljs-number\">2.000e+02</span>, b: <span class=\"hljs-number\">1.00050e+02</span><br>Iteration <span class=\"hljs-number\">9000</span>: Cost <span class=\"hljs-number\">2.90e-05</span>  dj_dw: -<span class=\"hljs-number\">1.082e-03</span>, dj_db:  <span class=\"hljs-number\">1.751e-03</span>   w:  <span class=\"hljs-number\">2.000e+02</span>, b: <span class=\"hljs-number\">1.00024e+02</span><br>(w,b) found by gradient descent: (<span class=\"hljs-number\">199.9929</span>,<span class=\"hljs-number\">100.0116</span>)<br></code></pre></div></td></tr></table></figure>\n\n<p>花点时间，注意上面打印的梯度下降过程的一些特征。</p>\n<ul>\n<li>正如课堂上的幻灯片所描述的，成本开始很大，然后迅速下降。</li>\n<li>偏导数dj_dw和dj_db也变小了，起初很快，然后变慢。正如课堂上的图表所示，随着过程接近“碗底”，由于在这一点上的导数值较小，进程会变慢。</li>\n<li>尽管学习率alpha保持不变，但进程会减慢</li>\n</ul>\n<p><img src=\"/2023/03/13/ML003/image-20230313155614815.png\" alt=\"image-20230313155614815\"></p>\n<h2 id=\"Cost-versus-iterations-of-gradient-descent\"><a href=\"#Cost-versus-iterations-of-gradient-descent\" class=\"headerlink\" title=\"Cost versus iterations of gradient descent\"></a>Cost versus iterations of gradient descent</h2><p>成本与迭代的关系图是衡量梯度下降技术进展的有用方法。在成功的运行中，成本总是会降低。最初成本的变化如此之快，用不同于最终下降的尺度来描绘最初的上升是有用的。</p>\n<p>在下面的图表中，请注意轴上的成本规模和迭代步骤。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># plot cost versus iteration  </span><br>fig, (ax1, ax2) = plt.subplots(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, constrained_layout=<span class=\"hljs-literal\">True</span>, figsize=(<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">4</span>))<br>ax1.plot(J_hist[:<span class=\"hljs-number\">100</span>])<br>ax2.plot(<span class=\"hljs-number\">1000</span> + np.arange(<span class=\"hljs-built_in\">len</span>(J_hist[<span class=\"hljs-number\">1000</span>:])), J_hist[<span class=\"hljs-number\">1000</span>:])<br>ax1.set_title(<span class=\"hljs-string\">&quot;Cost vs. iteration(start)&quot;</span>);  ax2.set_title(<span class=\"hljs-string\">&quot;Cost vs. iteration (end)&quot;</span>)<br>ax1.set_ylabel(<span class=\"hljs-string\">&#x27;Cost&#x27;</span>)            ;  ax2.set_ylabel(<span class=\"hljs-string\">&#x27;Cost&#x27;</span>) <br>ax1.set_xlabel(<span class=\"hljs-string\">&#x27;iteration step&#x27;</span>)  ;  ax2.set_xlabel(<span class=\"hljs-string\">&#x27;iteration step&#x27;</span>) <br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313160112122.png\" alt=\"image-20230313160112122\"></p>\n<h2 id=\"Predictions\"><a href=\"#Predictions\" class=\"headerlink\" title=\"Predictions\"></a>Predictions</h2><p>现在您已经发现了参数𝑤的最佳值和𝑏，您现在可以使用该模型根据我们学习的参数来预测房屋价值。正如预期的那样，在相同的住房条件下，预测值与训练值几乎相同。进一步，不在预测中的值与期望值一致。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;1000 sqft house prediction <span class=\"hljs-subst\">&#123;w_final*<span class=\"hljs-number\">1.0</span> + b_final:<span class=\"hljs-number\">0.1</span>f&#125;</span> Thousand dollars&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;1200 sqft house prediction <span class=\"hljs-subst\">&#123;w_final*<span class=\"hljs-number\">1.2</span> + b_final:<span class=\"hljs-number\">0.1</span>f&#125;</span> Thousand dollars&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;2000 sqft house prediction <span class=\"hljs-subst\">&#123;w_final*<span class=\"hljs-number\">2.0</span> + b_final:<span class=\"hljs-number\">0.1</span>f&#125;</span> Thousand dollars&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-number\">1000</span> sqft house prediction <span class=\"hljs-number\">300.0</span> Thousand dollars<br><span class=\"hljs-number\">1200</span> sqft house prediction <span class=\"hljs-number\">340.0</span> Thousand dollars<br><span class=\"hljs-number\">2000</span> sqft house prediction <span class=\"hljs-number\">500.0</span> Thousand dollars<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Plotting\"><a href=\"#Plotting\" class=\"headerlink\" title=\"Plotting\"></a>Plotting</h2><p>您可以通过在代价(w,b)的等高线图上绘制迭代的代价来显示梯度下降在执行过程中的进度。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">fig, ax = plt.subplots(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>, figsize=(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">6</span>))<br>plt_contour_wgrad(x_train, y_train, p_hist, ax)<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313160446994.png\" alt=\"image-20230313160446994\"></p>\n<p>上面的等高线图显示了𝑤和𝑏范围内的𝑐𝑜𝑠𝑡(𝑤，𝑏)。成本水平由圆环表示。用红色箭头覆盖的是梯度下降的路径。这里有一些需要注意的事情:</p>\n<ul>\n<li>这条路径朝着它的目标稳步(单调)前进。</li>\n<li>最初的步骤比接近目标的步骤要大得多。</li>\n</ul>\n<p>放大，我们可以看到梯度下降的最后步骤。注意，阶梯之间的距离随着梯度趋近于零而缩小。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">fig, ax = plt.subplots(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>, figsize=(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>))<br>plt_contour_wgrad(x_train, y_train, p_hist, ax, w_range=[<span class=\"hljs-number\">180</span>, <span class=\"hljs-number\">220</span>, <span class=\"hljs-number\">0.5</span>], b_range=[<span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">0.5</span>],<br>            contours=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>],resolution=<span class=\"hljs-number\">0.5</span>)<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313160944244.png\" alt=\"image-20230313160944244\"></p>\n<h2 id=\"Increased-Learning-Rate\"><a href=\"#Increased-Learning-Rate\" class=\"headerlink\" title=\"Increased Learning Rate\"></a>Increased Learning Rate</h2><p>在这节课中，在式(3)中有一个关于学习率的合适值𝛼的讨论。𝛼越大，梯度下降收敛到解的速度就越快。但是，如果它太大，梯度下降就会发散。上面有一个很好收敛的解的例子。让我们试着增加𝛼的值看看会发生什么:</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313161516209.png\" alt=\"image-20230313161516209\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># initialize parameters</span><br>w_init = <span class=\"hljs-number\">0</span><br>b_init = <span class=\"hljs-number\">0</span><br><span class=\"hljs-comment\"># set alpha to a large value</span><br>iterations = <span class=\"hljs-number\">10</span><br>tmp_alpha = <span class=\"hljs-number\">8.0e-1</span><br><span class=\"hljs-comment\"># run gradient descent</span><br>w_final, b_final, J_hist, p_hist = gradient_descent(x_train ,y_train, w_init, b_init, tmp_alpha, <br>                                                    iterations, compute_cost, compute_gradient)<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs pyhton\">Iteration    0: Cost 2.58e+05  dj_dw: -6.500e+02, dj_db: -4.000e+02   w:  5.200e+02, b: 3.20000e+02<br>Iteration    1: Cost 7.82e+05  dj_dw:  1.130e+03, dj_db:  7.000e+02   w: -3.840e+02, b:-2.40000e+02<br>Iteration    2: Cost 2.37e+06  dj_dw: -1.970e+03, dj_db: -1.216e+03   w:  1.192e+03, b: 7.32800e+02<br>Iteration    3: Cost 7.19e+06  dj_dw:  3.429e+03, dj_db:  2.121e+03   w: -1.551e+03, b:-9.63840e+02<br>Iteration    4: Cost 2.18e+07  dj_dw: -5.974e+03, dj_db: -3.691e+03   w:  3.228e+03, b: 1.98886e+03<br>Iteration    5: Cost 6.62e+07  dj_dw:  1.040e+04, dj_db:  6.431e+03   w: -5.095e+03, b:-3.15579e+03<br>Iteration    6: Cost 2.01e+08  dj_dw: -1.812e+04, dj_db: -1.120e+04   w:  9.402e+03, b: 5.80237e+03<br>Iteration    7: Cost 6.09e+08  dj_dw:  3.156e+04, dj_db:  1.950e+04   w: -1.584e+04, b:-9.80139e+03<br>Iteration    8: Cost 1.85e+09  dj_dw: -5.496e+04, dj_db: -3.397e+04   w:  2.813e+04, b: 1.73730e+04<br>Iteration    9: Cost 5.60e+09  dj_dw:  9.572e+04, dj_db:  5.916e+04   w: -4.845e+04, b:-2.99567e+04<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313161636772.png\" alt=\"image-20230313161636772\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt_divergence(p_hist, J_hist,x_train, y_train)<br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313161959222.png\" alt=\"image-20230313161959222\"></p>\n<p>上图中，左图显示了𝑤在梯度下降的前几个步骤中的进展。𝑤从正振荡到负，成本迅速增长。梯度下降同时在𝑤和𝑏上运行，所以需要右边的3d图才能看到完整的图片。</p>\n<h2 id=\"Congratulations\"><a href=\"#Congratulations\" class=\"headerlink\" title=\"Congratulations!\"></a>Congratulations!</h2><p>在这个实验室里，你:</p>\n<ul>\n<li>深入研究单个变量的梯度下降的细节。</li>\n<li>开发了一个计算梯度的程序</li>\n<li>看看梯度是什么</li>\n<li>完成一个梯度下降程序</li>\n<li>利用梯度下降法寻找参数</li>\n<li>检查了学习率大小的影响</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797\">https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797</a></p>\n<p><a href=\"https://github.com/kaieye/2022-Machine-Learning-Specialization\">kaieye&#x2F;2022-Machine-Learning-Specialization (github.com)</a></p>\n",
            "tags": [
                "Tensorflow",
                "Machine Learning"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/12/ML002/",
            "url": "https://xingyuanjie.top/2023/03/12/ML002/",
            "title": "代价函数",
            "date_published": "2023-03-12T08:33:17.000Z",
            "content_html": "<h2 id=\"代价函数\"><a href=\"#代价函数\" class=\"headerlink\" title=\"代价函数\"></a>代价函数</h2><p><img src=\"/2023/03/12/ML002/image-20230312164306128.png\" alt=\"image-20230312164306128\"></p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>在本实验中，你将:</p>\n<ul>\n<li>你将实现和探索成本函数的线性回归伴随一个变量。</li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>在本实验室中，我们将使用:</p>\n<ul>\n<li>NumPy，一个用于科学计算的流行库</li>\n<li>Matplotlib，用于绘制数据的流行库</li>\n<li>本地目录的lab_utils_uni.py文件中的本地绘图例程</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> nunpy <span class=\"hljs-keyword\">as</span> np<br>%matplotlib widget<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">from</span> lab_utils_uni <span class=\"hljs-keyword\">import</span> plt_intuition, plt_stationary, plt_updata_onclick, soup_bowl<br>plt.style.use(<span class=\"hljs-string\">&#x27;./deeplearning.mplstyle&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"问题意境\"><a href=\"#问题意境\" class=\"headerlink\" title=\"问题意境\"></a>问题意境</h2><p>你想要一个模型，它可以根据房子的大小预测房价。让我们使用与上一个实验室之前相同的两个数据点——一个1000平方英尺的房子卖了30万美元，一个2000平方英尺的房子卖了50万美元。</p>\n<table>\n<thead>\n<tr>\n<th>Size(1000 sqft)</th>\n<th>Price(1000s of dollars)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">x_train = np.array([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>])   <span class=\"hljs-comment\">#(size in 1000 square feet)</span><br>y_train = np.zrray([<span class=\"hljs-number\">300.0</span>, <span class=\"hljs-number\">500.0</span>])\t<span class=\"hljs-comment\">#(price in 1000s of dollars)</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"计算代价\"><a href=\"#计算代价\" class=\"headerlink\" title=\"计算代价\"></a>计算代价</h2><p>这个作业中的术语“成本”可能会让人有点困惑，因为数据是住房成本。在这里，成本是衡量我们的模型预测房子目标价格的好坏。“价格”一词指的是住房数据。</p>\n<p>含一个变量的成本方程为:</p>\n<p><img src=\"/2023/03/12/ML002/image-20230312165434160.png\" alt=\"image-20230312165434160\"></p>\n<p>在这里</p>\n<p><img src=\"/2023/03/12/ML002/image-20230312165503613.png\" alt=\"image-20230312165503613\"></p>\n<ul>\n<li>f_w,b(x^i)是我们使用参数w,b来预测例子i。</li>\n<li>（f_w,b(x^i) - y^i）^2  是目标值与预测值之间的差的平方</li>\n<li>这些差异被加在所有m例子上，再除以2m，得到代价函数 <strong>J（w,b）</strong></li>\n</ul>\n<p>注意，在讲座中，总和的范围通常是从1到m，而代码将从0到m-1。</p>\n<p>下面的代码通过遍历每个示例来计算成本。在每个循环中:</p>\n<ul>\n<li>f_wb，计算一个预测</li>\n<li>目标和预测之间的差值被计算和平方。</li>\n<li>这被加到总成本中。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">compute_cost</span>(<span class=\"hljs-params\">x, y, w, b</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Computes the cost function for linear regression</span><br><span class=\"hljs-string\">    </span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">    \tx (ndarray (m,)):Data, m examples</span><br><span class=\"hljs-string\">    \ty (ndarray (m,)):target values</span><br><span class=\"hljs-string\">    \tw,b (scalar)\t:model parameters</span><br><span class=\"hljs-string\">    </span><br><span class=\"hljs-string\">    Returns</span><br><span class=\"hljs-string\">    \ttotal_cost (float):The cost of using w,b as the parameters for linear regression to fit the data points in x and y</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-comment\">#number of training examples</span><br>    m = x.shape[<span class=\"hljs-number\">0</span>]<br>    <br>    cost_sum = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):<br>        f_wb = w * x[i] + b<br>        cost = (f_wb - y[i])**<span class=\"hljs-number\">2</span><br>        cost_sum = cost_sum + cost<br>    total_cost = (<span class=\"hljs-number\">1</span>/(<span class=\"hljs-number\">2</span>*m)) * cost_sum<br>    <br>    <span class=\"hljs-keyword\">return</span> total_cost<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Cost-Function-Intuition\"><a href=\"#Cost-Function-Intuition\" class=\"headerlink\" title=\"Cost Function Intuition\"></a>Cost Function Intuition</h2><p><img src=\"/2023/03/12/ML002/image-20230312172325465.png\" alt=\"image-20230312172325465\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt_intuition(x_train, y_train)<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/12/ML002/image-20230313144221393.png\" alt=\"image-20230313144221393\"></p>\n<p>情节中有几点值得一提。</p>\n<ul>\n<li>当𝑤&#x3D;200时，成本最小化，这与之前实验室的结果相吻合。</li>\n<li>因为在成本方程中，目标和预测之间的差异是平方，当𝑤时，成本迅速增加不是太大就是太小。</li>\n<li>使用通过最小化成本选择的w和b，可以得到与数据完美匹配的直线。</li>\n</ul>\n<h2 id=\"Cost-Function-Visualiztion-3D\"><a href=\"#Cost-Function-Visualiztion-3D\" class=\"headerlink\" title=\"Cost Function Visualiztion-3D\"></a>Cost Function Visualiztion-3D</h2><p>你可以通过三维绘图或等高线图看到成本是如何随w和b变化的。</p>\n<p>值得注意的是，这门课的一些情节会变得相当复杂。本文提供了绘图例程，虽然通读代码以熟悉这些方法是有指导意义的，但要成功完成课程并不需要这样做。例程在本地目录lab_utils_uni.py中。</p>\n<h2 id=\"Larger-Data-Set\"><a href=\"#Larger-Data-Set\" class=\"headerlink\" title=\"Larger Data Set\"></a>Larger Data Set</h2><p>较大的数据集用更多的数据点来观察一个场景是很有指导意义的。该数据集包括不在同一线上的数据点。这对成本方程意味着什么?我们能找到𝑤、𝑏那样使得代价是0?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">x_train = np.array([<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">1.7</span>,<span class=\"hljs-number\">2.0</span>,<span class=\"hljs-number\">2.5</span>,<span class=\"hljs-number\">3.0</span>,<span class=\"hljs-number\">3.2</span>])<br>y_train = np.array([<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">300</span>,<span class=\"hljs-number\">480</span>,<span class=\"hljs-number\">430</span>,<span class=\"hljs-number\">630</span>,<span class=\"hljs-number\">730</span>])<br></code></pre></div></td></tr></table></figure>\n\n<p>在等高线图中，点击一个点，选择w和b，以达到最低的成本。使用轮廓来指导你的选择。注意，更新图形可能需要几秒钟的时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt.close(<span class=\"hljs-string\">&#x27;all&#x27;</span>)<br>fig, ax ,dyn_items = plt_stationary(x_train, y_train)<br>updater = plt_update_onclick(fig, ax, x_train,y_train,dyn_items)<br></code></pre></div></td></tr></table></figure>\n\n<p>上面，注意左边图中的虚线。这些代表了你的训练集中每个例子所贡献的代价的部分。在本例中，值约为𝑤&#x3D;209和𝑏&#x3D; 2.4提供低代价。请注意，因为我们的训练示例不在一条线上，所以最小代价不为零。</p>\n<h2 id=\"Convex-Cost-surface\"><a href=\"#Convex-Cost-surface\" class=\"headerlink\" title=\"Convex Cost surface\"></a>Convex Cost surface</h2><p>成本函数平方损失的事实确保了“误差曲面”像汤碗一样凸出。它总是有一个最小值，可以通过在所有维度上跟随梯度来达到。在前面的图中，因为𝑤和𝑏尺寸比例不同，这是不容易识别的。下图，其中𝑤和𝑏都是对称的，在讲座中展示过:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">soup_bowl()<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Congratulations\"><a href=\"#Congratulations\" class=\"headerlink\" title=\"Congratulations!\"></a>Congratulations!</h2><p>您已经学习了以下内容:</p>\n<ul>\n<li>成本方程提供了一种衡量预测与训练数据匹配程度的方法。</li>\n<li>最小化成本可以提供𝑤和b的最优值。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797\">https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797</a></p>\n<p><a href=\"https://github.com/kaieye/2022-Machine-Learning-Specialization\">kaieye&#x2F;2022-Machine-Learning-Specialization (github.com)</a></p>\n",
            "tags": [
                "Tensorflow",
                "Machine Learning"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/10/avx006/",
            "url": "https://xingyuanjie.top/2023/03/10/avx006/",
            "title": "如何使用AVX和AVX2处理数据(个人翻译)",
            "date_published": "2023-03-10T06:51:44.000Z",
            "content_html": "<h2 id=\"1-文章来源\"><a href=\"#1-文章来源\" class=\"headerlink\" title=\"1.文章来源\"></a>1.文章来源</h2><p><strong>Matt Scarpino（USA）</strong></p>\n<p><a href=\"https://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX\">Crunching Numbers with AVX and AVX2 - CodeProject</a></p>\n<h2 id=\"2-介绍\"><a href=\"#2-介绍\" class=\"headerlink\" title=\"2.介绍\"></a>2.介绍</h2><p>在2003年，<a href=\"https://www.codeproject.com/script/Membership/View.aspx?mid=22834\">Alex Fr</a>写了一篇优秀的<a href=\"https://www.codeproject.com/Articles/4522/Introduction-to-SSE-Programming\">文章</a>[该文章现在已经被原作者删除]，解释了如何使用Intel的流式SIMD扩展(SSE)执行SIMD(单指令，多数据)处理。SSE是英特尔处理器支持的一组指令，可对大量数据执行高速运算。</p>\n<p>2008年，英特尔推出了一套新的高性能指令，称为高级向量扩展(AVX)。AVX执行许多与SSE指令相同的操作，但以更快的速度对更大的数据块进行操作。最近，英特尔在AVX2和AVX512系列中发布了额外的指令。本文的重点是通过称为intrinsic funtions的特殊C函数访问AVX和AVX2指令。</p>\n<p>本文不介绍整个AVX&#x2F;AVX2 intrinsics，而是侧重于数学计算。特别地，目标是复数相乘。要使用AVX&#x2F;AVX2执行此操作，需要三种类型的intrinsic:</p>\n<ol>\n<li>Initialization intrinscis</li>\n<li>Arithmetic intrinsics</li>\n<li>Permute&#x2F;shuffle intrinsics</li>\n</ol>\n<p>\t\t</p>\n<p>本文讨论每个类别中的intrinsics，并解释如何在代码中使用它们。本文的最后将展示如何用这些intrinsic进行乘法复数运算。</p>\n<p>理解处理器指令和intrinsic function之间的区别是很重要的。AVX指令是执行不可分割操作的汇编命令。例如，AVX指令vaddps添加了两个操作数，并将结果放在第三个操作数中。</p>\n<p>要在C&#x2F;C++中执行操作，the intrinsic funtion _mm256_add_ps()直接映射到vaddps，将汇编的性能与高级函数的便利性结合起来。An intrinsic funtion不一定映射到单个指令，但与其他C&#x2F; C++函数相比，AVX&#x2F;AVX2 intrinsics提供了可靠的高性能。</p>\n<h2 id=\"3-基本要求\"><a href=\"#3-基本要求\" class=\"headerlink\" title=\"3.基本要求\"></a>3.基本要求</h2><p>要理解本文的内容，您需要基本熟悉C语言和SIMD处理。要执行代码，您需要一个支持AVX或AVX&#x2F;AVX2的CPU。以下是支持AVX的cpu:</p>\n<ul>\n<li>Intel’s Sandy Bridge&#x2F;Sandy Bridge E&#x2F;Ivy Bridge&#x2F;Ivy Bridge E</li>\n<li>Intel’s Haswell&#x2F;Haswell E&#x2F;Broadwell&#x2F;Broadwell E</li>\n<li>AMD’s Bulldozer&#x2F;Piledriver&#x2F;Steamroller&#x2F;Excavator</li>\n</ul>\n<p>支持AVX2的CPU也支持AVX。以下是这些设备:</p>\n<ul>\n<li>Intel’s Haswell&#x2F;Haswell E&#x2F;Broadwell&#x2F;Broadwell E</li>\n<li>AMD’s Excavator</li>\n</ul>\n<p>本文中讨论的大多数函数都是由AVX提供的。但也有一些是AVX2特有的。为了区分它们，在本文的表中，我在AVX2 intrinsic的名称前面加上(2)。</p>\n<p>[个人补充]</p>\n<p>判断自己电脑CPU是否支持AVX和AVX2，最简单的就是在命令行执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">lscpu<br></code></pre></div></td></tr></table></figure>\n\n<p>你会得到以下结果：</p>\n<p><img src=\"/2023/03/10/avx006/image-20230129153048825.png\" alt=\"image-20230129153048825\"></p>\n<p>在Flags里面你可以清楚的看到你的电脑是否支持AVX以及AVX2。</p>\n<h2 id=\"4-向量化概述\"><a href=\"#4-向量化概述\" class=\"headerlink\" title=\"4.向量化概述\"></a>4.向量化概述</h2><p>AVX指令通过同时处理大块值而不是单独处理值来提高应用程序的性能。这些值大块称为向量，AVX向量最多可以包含256位数据。</p>\n<p>常见的AVX向量包含4个double (4 x 64位&#x3D; 256)，8个float (8 x 32位&#x3D; 256)或8个int (8 x 32位&#x3D; 256)。[double 8B, flout 4B, int 4B]</p>\n<p>一个示例将演示AVX&#x2F;AVX2处理的强大功能。假设一个函数需要将一个数组的8个浮点数乘以第二个数组的8个浮点数，并将结果添加到第三个数组。如果没有向量化，函数可能是这样的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">multiply_and_add</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* b, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* c, <span class=\"hljs-keyword\">float</span>* d) &#123;  <br><br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">8</span>; i++) &#123;<br>    d[i] = a[i] * b[i];<br>    d[i] = d[i] + c[i];<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>下面是使用AVX2函数的例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__m256 <span class=\"hljs-title\">multiply_and_add</span><span class=\"hljs-params\">(__m256 a, __m256 b, __m256 c)</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">return</span> _mm256_fmadd_ps(a, b, c);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>This AVX2 intrinsic funtion <strong>_mm256_fmadd_ps</strong>处理24个floats，但它不映射到单个指令。相反，它执行三个指令:<strong>vfmadd132ps</strong>、<strong>vfmadd213ps</strong>和<strong>vfmadd231ps</strong>。尽管如此，它执行得很快，比遍历单个元素快得多。</p>\n<p>尽管英特尔的intrinsics功能强大，但它们还是让许多程序员感到紧张。这通常有两个原因。首先，数据类型有奇怪的名字，比如**__m256<strong>。其次，函数有奇怪的名称，如</strong>_mm256_fmadd_ps**。因此，在详细讨论intrinsic funtions之前，我想先讨论一下Intel的数据类型和命名约定。</p>\n<h2 id=\"5-AVX编程基础\"><a href=\"#5-AVX编程基础\" class=\"headerlink\" title=\"5.AVX编程基础\"></a>5.AVX编程基础</h2><p>本文主要关注AVX和AVX2提供的与数学相关的intrinsic functions。但在看函数之前，有三点很重要:</p>\n<ul>\n<li>Data types</li>\n<li>Function naming conventions</li>\n<li>Compiling AVX applications</li>\n</ul>\n<p>本节涉及这些要点，并提供一个简单的应用程序，用于一个向量减去另一个向量。</p>\n<h3 id=\"5-1数据类型\"><a href=\"#5-1数据类型\" class=\"headerlink\" title=\"5.1数据类型\"></a>5.1数据类型</h3><p>少数intrinsic接受传统的数据类型，如<strong>int</strong>或<strong>float</strong>，但大多数intrinsic操作有特定的AVX和AVX2的数据类型。有六种主要的向量类型，表1列出了它们。</p>\n<p><strong>Table 1:AVX&#x2F;AVX2 Data Types</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>__m128</code></td>\n<td>128-bit vector containing 4 <code>float</code>s</td>\n</tr>\n<tr>\n<td><code>__m128d</code></td>\n<td>128-bit vector containing 2 <code>double</code>s</td>\n</tr>\n<tr>\n<td><code>__m128i</code></td>\n<td>128-bit vector containing integers</td>\n</tr>\n<tr>\n<td><code>__m256</code></td>\n<td>256-bit vector containing 8 <code>float</code>s</td>\n</tr>\n<tr>\n<td><code>__m256d</code></td>\n<td>256-bit vector containing 4 <code>double</code>s</td>\n</tr>\n<tr>\n<td><code>__m256i</code></td>\n<td>256-bit vector containing integers</td>\n</tr>\n</tbody></table>\n<p>每种类型都以两个下划线、一个m和向量的宽度(以位为单位)开始。AVX512支持以_m512开头的512位向量类型，但AVX&#x2F;AVX2向量不超过256位。如果向量类型以d结尾，则代表double，如果没有后缀，则代表float。看起来_m128i和_m256i向量必须包含int型，但事实并非如此。整数向量类型可以包含任何类型的整数，from chars to shorts to unsigned long longs.That is, an _m256i may contain 32 chars, 16 shorts, 8 ints, or 4 longs.  These integers can be signed or unsigned.</p>\n<h3 id=\"5-3函数命名约定\"><a href=\"#5-3函数命名约定\" class=\"headerlink\" title=\"5.3函数命名约定\"></a>5.3函数命名约定</h3><p>AVX&#x2F;AVX2 intrinsics的名称一开始可能令人困惑，但命名约定确是非常直白的。一旦你理解了它，你就可以通过看它的名字来大致判断一个函数是做什么的。AVX&#x2F;AVX2 intrinsics的一般形式如下:</p>\n<p>_mm<bit_width>_<name>_<data_type></data_type></name></bit_width></p>\n<p>该格式的各部分如下所示:</p>\n<ol>\n<li><code>&lt;bit_width&gt;</code> identifies the size of the vector returned by the function. For 128-bit vectors, this is empty. For 256-bit vectors, this is set to <code>256</code>.</li>\n<li><code>&lt;name&gt;</code> describes the operation performed by the intrinsic</li>\n<li><code>&lt;data_type&gt;</code> identifies the data type of the function’s primary arguments</li>\n</ol>\n<p>最后一部分<data_type>有点复杂。它标识输入值的内容，可以设置为以下任何值:</data_type></p>\n<ul>\n<li><code>ps</code> - vectors contain <code>float</code>s (<code>ps</code> stands for packed single-precision)</li>\n<li><code>pd</code> - vectors contain <code>double</code>s (<code>pd</code> stands for packed double-precision)</li>\n<li><code>epi8/epi16/epi32/epi64</code> - vectors contain 8-bit&#x2F;16-bit&#x2F;32-bit&#x2F;64-bit signed integers</li>\n<li><code>epu8/epu16/epu32/epu64</code> - vectors contain 8-bit&#x2F;16-bit&#x2F;32-bit&#x2F;64-bit unsigned integers</li>\n<li><code>si128</code>&#x2F;<code>si256</code> - unspecified 128-bit vector or 256-bit vector</li>\n<li><code>m128/m128i/m128d/m256/m256i/m256d</code> - identifies input vector types when they’re different than the type of the returned vector</li>\n</ul>\n<p>例如，考虑_mm256_srlv_epi64。即使您不知道srlv是什么意思，_mm256前缀告诉您该函数返回一个256位向量，_epi64告诉您参数包含64位有符号整数。</p>\n<p>作为第二个示例，考虑_mm_testnzc_ps。_mm表示函数返回一个128位的向量。末尾的_ps表示参数向量包含浮点数。</p>\n<p>AVX数据类型以两个下划线和一个m开头。函数以一个下划线和两个m开头。我很容易搞混这一点，所以我想出了一种方法来记住它们的区别:数据类型代表内存（<strong>m</strong>emory），函数代表多媒体操作（<strong>m</strong>ulti<strong>m</strong>edia）。这是我能做的最好的了。</p>\n<h3 id=\"5-4构建AVX应用程序\"><a href=\"#5-4构建AVX应用程序\" class=\"headerlink\" title=\"5.4构建AVX应用程序\"></a>5.4构建AVX应用程序</h3><p>要构建使用AVX intrinsic的应用程序，不需要链接任何库。但是您需要包含<strong>imminrin .h</strong>头文件。此头文件包括将AVX&#x2F;AVX2函数映射到指令的其他头文件。</p>\n<p>hello_avx.c中的代码显示了一个基本的AVX应用程序的样子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  <span class=\"hljs-comment\">/* Initialize the two argument vectors */</span>\t\t\t<span class=\"hljs-comment\">//初始化</span><br>  __m256 evens = _mm256_set_ps(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">8.0</span>, <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">12.0</span>, <span class=\"hljs-number\">14.0</span>, <span class=\"hljs-number\">16.0</span>);<br>  __m256 odds = _mm256_set_ps(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">11.0</span>, <span class=\"hljs-number\">13.0</span>, <span class=\"hljs-number\">15.0</span>);<br><br>  <span class=\"hljs-comment\">/* Compute the difference between the two vectors */</span><br>  __m256 result = _mm256_sub_ps(evens, odds);\t\t\t<span class=\"hljs-comment\">//减法</span><br><br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">float</span>* f = (<span class=\"hljs-keyword\">float</span>*)&amp;result;\t\t\t\t\t<span class=\"hljs-comment\">//类型转换</span><br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%f %f %f %f %f %f %f %f\\n&quot;</span>,<br>    f[<span class=\"hljs-number\">0</span>], f[<span class=\"hljs-number\">1</span>], f[<span class=\"hljs-number\">2</span>], f[<span class=\"hljs-number\">3</span>], f[<span class=\"hljs-number\">4</span>], f[<span class=\"hljs-number\">5</span>], f[<span class=\"hljs-number\">6</span>], f[<span class=\"hljs-number\">7</span>]);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>要构建应用程序，需要告诉编译器该体系结构支持AVX。这个标志取决于编译器，gcc需要-mavx标志。因此，可以使用以下命令编译hello_avx.c源文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">gcc -mavx -o hello_avx hello_avx.c<br></code></pre></div></td></tr></table></figure>\n\n<p>在本例中，所有函数都以_mm256开始，以_ps结束，因此我希望所有操作都清楚地涉及包含floats的256位向量。我还希望结果向量中的每个元素都等于1.0。如果运行应用程序，您将看到情况就是这样。</p>\n<p>[这就是一个简单的向量减法例子，大家可以对应数据看一下]</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-5初始化intrinsics\"><a href=\"#5-5初始化intrinsics\" class=\"headerlink\" title=\"5.5初始化intrinsics\"></a>5.5初始化intrinsics</h3><p>在对AVX向量进行操作之前，需要用数据填充向量。因此，本文讨论的第一组intrinsics用数据初始化向量。有两种方法:用标量值初始化向量和用从内存加载的数据初始化向量。</p>\n<h4 id=\"5-5-1使用标量值初始化\"><a href=\"#5-5-1使用标量值初始化\" class=\"headerlink\" title=\"5.5.1使用标量值初始化\"></a>5.5.1使用标量值初始化</h4><p>AVX提供了将一个或多个值组合成256位向量的intrinsics funtions。表2列出了它们的名称，并提供了每个名称的描述。也有类似的intrinsics初始化128位向量，但它们是由SSE提供的，而不是AVX。函数名的唯一区别是_mm256_被替换为_mm_。</p>\n<p><strong>Table 2: Initialization Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_setzero_ps/pd</code></td>\n<td>Returns a floating-point vector filled with zeros</td>\n</tr>\n<tr>\n<td><code>_mm256_setzero_si256</code></td>\n<td>Returns an integer vector whose bytes are set to zero</td>\n</tr>\n<tr>\n<td><code>_mm256_set1_ps/pd</code></td>\n<td>Fill a vector with a floating-point value</td>\n</tr>\n<tr>\n<td><code>_mm256_set1_epi8/epi16</code> <code>_mm256_set1_epi32/epi64</code></td>\n<td>Fill a vector with an integer</td>\n</tr>\n<tr>\n<td><code>_mm256_set_ps/pd</code></td>\n<td>Initialize a vector with eight floats (ps) or four doubles (pd)</td>\n</tr>\n<tr>\n<td><code>_mm256_set_epi8/epi16</code> <code>_mm256_set_epi32/epi64</code></td>\n<td>Initialize a vector with integers</td>\n</tr>\n<tr>\n<td><code>_mm256_set_m128/m128d/</code> <code>_mm256_set_m128i</code></td>\n<td>Initialize a 256-bit vector with two 128-bit vectors</td>\n</tr>\n<tr>\n<td><code>_mm256_setr_ps/pd</code></td>\n<td>Initialize a vector with eight floats (ps) or four doubles (pd) in reverse order</td>\n</tr>\n<tr>\n<td><code>_mm256_setr_epi8/epi16</code> <code>_mm256_setr_epi32/epi64</code></td>\n<td>Initialize a vector with integers in reverse order</td>\n</tr>\n</tbody></table>\n<p>表中的第一个函数是最容易理解的。_m256_setzero_ps返回一个__m256向量，包含8个设置为0的浮点数。类似地，_m256_setzero_si256返回一个__m256i向量，其字节被设置为0。例如，下面这行代码创建了一个256位的向量，其中包含4个设为0的double:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256d dbl_vector = _m256_setzero_pd();<br></code></pre></div></td></tr></table></figure>\n\n<p>名称中包含set1的函数接受一个值，并在整个向量中重复该值。例如，下面这行代码创建了一个__m256i，它的16个short value被设置为47:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256i short_vector = _m256_set1_pd();<br></code></pre></div></td></tr></table></figure>\n\n<p>表2中的其他函数包含_set_或_setr_。这些函数接受一系列值，每个向量的元素对应一个值。这些值被放置在返回的向量中，理解顺序很重要。下面的函数调用返回一个包含8个整数的向量，其值范围为1到8:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256i int_vector = _m256_set_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br></code></pre></div></td></tr></table></figure>\n\n<p>您可能希望值按照给定的顺序存储。但英特尔的架构是<strong>小端</strong>存储类型的[这里很重要]，所以最低有效值(8)先存储，最高有效值(1)最后存储。您可以通过将int_vector转换为int指针并打印存储的值来验证这一点。如下代码所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i int_vector = _mm256_set_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br><span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span>*)&amp;int_vector;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, ptr[<span class=\"hljs-number\">0</span>], ptr[<span class=\"hljs-number\">1</span>], ptr[<span class=\"hljs-number\">2</span>], ptr[<span class=\"hljs-number\">3</span>], ptr[<span class=\"hljs-number\">4</span>], ptr[<span class=\"hljs-number\">5</span>], ptr[<span class=\"hljs-number\">6</span>], ptr[<span class=\"hljs-number\">7</span>]);<br>--&gt; <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br></code></pre></div></td></tr></table></figure>\n\n<p>如果希望值按给定顺序存储，可以使用_setr_函数之一创建向量，其中r可能代表reverse。下面的代码展示了它是如何工作的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i int_vector = _mm256_setr_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br><span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span>*)&amp;int_vector;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, ptr[<span class=\"hljs-number\">0</span>], ptr[<span class=\"hljs-number\">1</span>], ptr[<span class=\"hljs-number\">2</span>], ptr[<span class=\"hljs-number\">3</span>], ptr[<span class=\"hljs-number\">4</span>], ptr[<span class=\"hljs-number\">5</span>], ptr[<span class=\"hljs-number\">6</span>], ptr[<span class=\"hljs-number\">7</span>]);<br>--&gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">8</span><br></code></pre></div></td></tr></table></figure>\n\n<p>有趣的是，AVX和AVX2都没有提供用无符号整数初始化向量的intrinsic。但是，它们提供了对带无符号整数的向量进行操作的函数。</p>\n<h4 id=\"5-5-2从内存加载数据\"><a href=\"#5-5-2从内存加载数据\" class=\"headerlink\" title=\"5.5.2从内存加载数据\"></a>5.5.2从内存加载数据</h4><p>AVX&#x2F;AVX2的一个常见用法是将数据从内存加载到向量中，对向量进行处理，并将结果存储回内存。第一步是使用表3中列出的intrinsic funtions完成的。最后两个函数前面有(2)，因为它们是由AVX2而不是AVX提供的。</p>\n<p><strong>Table 3: Vector Load Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_load_ps/pd</code></td>\n<td>Loads a floating-point vector from an  aligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_load_si256</code></td>\n<td>Loads an integer vector from an aligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_loadu_ps/pd</code></td>\n<td>Loads a floating-point vector from an  unaligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_loadu_si256</code></td>\n<td>Loads an integer vector from an unaligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm_maskload_ps/pd</code> <code>_mm256_maskload_ps/pd</code></td>\n<td>Load portions of a 128-bit&#x2F;256-bit floating-point vector according to a mask</td>\n</tr>\n<tr>\n<td><code>(2)_mm_maskload_epi32/64</code> <code>(2)_mm256_maskload_epi32/64</code></td>\n<td>Load portions of a 128-bit&#x2F;256-bit integer vector according to a mask</td>\n</tr>\n</tbody></table>\n<p>当将数据加载到向量中时，内存对齐变得特别重要。每个<strong>_mm256_load_</strong>* intrinsic接受一个必须在32字节边界上对齐的内存地址。即地址必须能被32整除。下面的代码展示了如何在实践中使用它:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">float</span>* aligned_floats = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">aligned_alloc</span>(<span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">64</span> * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>));\t\t<span class=\"hljs-comment\">//这里使用了内存对齐</span><br>... Initialize data ...<br>__m256 vec = _mm256_load_ps(aligned_floats);<br></code></pre></div></td></tr></table></figure>\n\n<p>【个人补充】关于内存对齐以及相关函数</p>\n<p><a href=\"https://xingyuanjie.top/2022/06/12/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/\">内存对齐 - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/\">AVX向量化学习(二)-内存对齐的应用 - Amicoyuan (xingyuanjie.top)</a></p>\n<p>任何使用_m256_load_*加载未对齐数据的尝试都会造成<strong>segmentation fault</strong>。如果数据不是以32位边界对齐，则应该使用_m256_loadu_*函数。如下代码所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">float</span>* unaligned_floats = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">64</span> * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>));\t\t\t\t<span class=\"hljs-comment\">//未使用内存对齐</span><br>... Initialize data ...<br>__m256 vec = _mm256_loadu_ps(unaligned_floats);<br></code></pre></div></td></tr></table></figure>\n\n<p>假设你想用AVX向量处理一个浮点数组(float)，但是数组的长度是11，不能被8整除。在这种情况下，第二个__m256向量的最后五个浮点数需要设置为0[或者使用非向量计算手段]，这样它们就不会影响计算。这种选择性加载可以用表3底部的**_maskload_**函数来完成。</p>\n<p>每个_maskload_函数接受两个参数:一个内存地址和一个与返回向量元素数量相同的整数向量。对于整数向量中最高位为1的每个元素，将从内存中读取返回向量中相应的元素。如果整数向量中的最高位为零，则返回向量中的相应元素被设置为零。</p>\n<p>一个示例将说明如何使用这些函数。mask_load.c中的代码将8个整型读入一个向量，最后3个应该设置为0。要使用的函数是_mm256_maskload_epi32，它的第二个参数应该是__m256i掩码向量。这个掩码向量包含5个最高位为1的整数和3个最高位为0的整数。下面是代码的样子:</p>\n<p>【int型在计算机的存储是补码，正数的补码最高位为0，所以这里返回0，负数的补码最高位为1，所以这里返回的是内存中相应的元素】</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">int</span> i;<br>  <br>  <span class=\"hljs-keyword\">int</span> int_array[<span class=\"hljs-number\">8</span>] = &#123;<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">600</span>, <span class=\"hljs-number\">700</span>, <span class=\"hljs-number\">800</span>&#125;;<br>  <br>  <span class=\"hljs-comment\">/* Initialize the mask vector */</span><br>  __m256i mask = _mm256_setr_epi32(<span class=\"hljs-number\">-20</span>, <span class=\"hljs-number\">-72</span>, <span class=\"hljs-number\">-48</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">-100</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>);\t<span class=\"hljs-comment\">//这里需要充分理解计算机组成原理中的补码</span><br><br>  <span class=\"hljs-comment\">/* Selectively load data into the vector */</span><br>  __m256i result = _mm256_maskload_epi32(int_array, mask);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">int</span>* res = (<span class=\"hljs-keyword\">int</span>*)&amp;result;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, <br>    res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>], res[<span class=\"hljs-number\">4</span>], res[<span class=\"hljs-number\">5</span>], res[<span class=\"hljs-number\">6</span>], res[<span class=\"hljs-number\">7</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>如果您在支持AVX2的系统上运行此应用程序，它将打印以下结果:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">100</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">300</span> <span class=\"hljs-number\">400</span> <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p>有三点是需要注意的：</p>\n<ol>\n<li>代码使用_setr_函数而不是_set_来设置掩码向量的内容，因为它在将向量元素传递给函数时对它们进行排序。</li>\n<li>负整数的最高位总是1。这就是掩码向量包含五个负数和三个正数的原因。</li>\n<li>_mm256_maskload_epi32函数由AVX2提供，而不是AVX。因此，要用gcc编译这段代码，必须使用-mavx2标志而不是-mavx。</li>\n</ol>\n<p>除了表3中列出的函数之外，AVX2还提供了从内存加载索引数据的集合函数。</p>\n<h2 id=\"6-Arithmetic-Intrinsics\"><a href=\"#6-Arithmetic-Intrinsics\" class=\"headerlink\" title=\"6.Arithmetic Intrinsics\"></a>6.Arithmetic Intrinsics</h2><p>数学是AVX存在的主要原因，基本操作是加、减、乘和除。本节将介绍执行这些操作的intrinsic funtions，还将介绍AVX2提供的新的融合乘法和加法函数。</p>\n<h3 id=\"6-1加法和减法\"><a href=\"#6-1加法和减法\" class=\"headerlink\" title=\"6.1加法和减法\"></a>6.1加法和减法</h3><p>表4列出了执行加法和减法的AVX&#x2F;AVX2 intrinsic。由于考虑到饱和度，它们大多数都作用于包含整数的向量。</p>\n<p><strong>Table 4: Addition and Subtraction Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_add_ps/pd</code></td>\n<td>Add two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>_mm256_sub_ps/pd</code></td>\n<td>Subtract two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_add_epi8/16/32/64 </code></td>\n<td>Add two integer vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm236_sub_epi8/16/32/64</code></td>\n<td>Subtract two integer vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_adds_epi8/16</code> <code>(2)_mm256_adds_epu8/16 </code></td>\n<td>Add two integer vectors with saturation</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_subs_epi8/16</code> <code>(2)_mm256_subs_epu8/16</code></td>\n<td>Subtract two integer vectors with saturation</td>\n</tr>\n<tr>\n<td><code>_mm256_hadd_ps/pd</code></td>\n<td>Add two floating-point vectors horizontally</td>\n</tr>\n<tr>\n<td><code>_mm256_hsub_ps/pd</code></td>\n<td>Subtract two floating-point vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hadd_epi16/32</code></td>\n<td>Add two integer vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hsub_epi16/32</code></td>\n<td>Subtract two integer vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hadds_epi16</code></td>\n<td>Add two vectors containing shorts horizontally with saturation</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hsubs_epi16</code></td>\n<td>Subtract two vectors containing shorts horizontally with saturation</td>\n</tr>\n<tr>\n<td><code>_mm256_addsub_ps/pd</code></td>\n<td>Add and subtract two floating-point vectors</td>\n</tr>\n</tbody></table>\n<p>加法和减法整数向量时，重要的是要查看_add_&#x2F;_sub_函数和_adds_&#x2F;_subs_函数之间的区别。额外的s代表饱和，当结果需要的内存超过向量可以存储的内存时，就会产生饱和。Functions that take saturation into account clamp the result to the minimum&#x2F;maximum value that can be stored.没有饱和的函数在发生饱和时忽略内存问题。</p>\n<p>例如，假设一个向量包含有符号字节，那么每个元素的最大值是127 (0x7F)。如果一个运算将98加到85，数学和是183 (0xB7)。</p>\n<ul>\n<li>如果使用_mm256_add_epi8添加这些值，饱和度将被忽略，存储的结果将是-73 (0xB7)。</li>\n<li>如果使用_mm256_adds_epi8添加这些值，结果将被固定为最大值127 (0x7F)。</li>\n</ul>\n<p>作为另一个例子，考虑两个包含有符号短整数的向量。最小值为-32,768。如果计算-18,000 - 19,000，数学结果是-37,000 (0xFFFF6F78作为32位整数)。</p>\n<ul>\n<li>如果用_mm256_sub_epi16减去这些值，饱和度将被忽略，存储的结果将是28,536 (0x6F78)。</li>\n<li>如果用_mm256_subs_epi16减去这些值，结果将被压缩到最小值-32,768 (0x8000)。</li>\n</ul>\n<p>_hadd_&#x2F;_hsub_函数水平执行加法和减法。也就是说，它们不是添加或减去不同向量的元素，而是在每个向量中添加或减去<strong>相邻</strong>的元素。结果以交错的方式存储。图1显示了_mm256_hadd_pd的工作原理，它水平地添加了两个向量A和B:</p>\n<p><img src=\"/2023/03/10/avx006/Fig1.jpg\" alt=\"Image 1\"></p>\n<p><strong>Figure 1: Horizontal Addition of Two Vectors</strong></p>\n<p>水平加减元素看起来可能很奇怪，但这些操作在复数相乘时很有用。本文稍后将对此进行解释。表4中的最后一个函数_mm256_addsub_ps&#x2F;pd交替减法和加法两个浮点向量的元素。也就是说，偶数元素被减去，奇数元素被加上。例如，如果vec_a包含(0.1,0.2,0.3,0.4)，vec_b包含(0.5,0.6,0.7,0.8)，则_mm256_addsub_pd(vec_a, vec_b)等于(-0.4,0.8，-0.4,1.2)【需要注意数组下标从0开始】。</p>\n<h3 id=\"6-2乘法和除法\"><a href=\"#6-2乘法和除法\" class=\"headerlink\" title=\"6.2乘法和除法\"></a>6.2乘法和除法</h3><p>表5列出了执行乘法和除法的AVX&#x2F;AVX2 intrinsic。与加法和减法一样，对整数进行运算也有一些特殊的特性。</p>\n<p><strong>Table 5: Multiplication and Division Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_mul_ps/pd</code></td>\n<td>Multiply two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mul_epi32/</code> <code>(2)_mm256_mul_epu32 </code></td>\n<td>Multiply the lowest four elements of vectors containing 32-bit integers</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mullo_epi16/32</code></td>\n<td>Multiply integers and store low halves</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mulhi_epi16/</code> <code>(2)_mm256_mulhi_epu16</code></td>\n<td>Multiply integers and store high halves</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mulhrs_epi16</code></td>\n<td>Multiply 16-bit elements to form 32-bit elements</td>\n</tr>\n<tr>\n<td><code>_mm256_div_ps/pd</code></td>\n<td>Divide two floating-point vectors</td>\n</tr>\n</tbody></table>\n<p>如果两个N位的数字在计算机上相乘，结果可以占用2N位【这里你需要熟悉计算机组成原理中的乘法原理，同时思考会不会在某些函数出现精度损失的情况】。因此，只有_mm256_mul_epi32和_mm256_mul_epu32的四个低元素被乘在一起，结果是一个包含四个长整数的向量。</p>\n<p><strong>___m256i _mm256_mul_epi32 (m256i a, __m256i b)</strong></p>\n<p><strong>Description</strong></p>\n<p>Multiply the low signed 32-bit integers from each packed 64-bit element in a and b, and store the signed 64-bit results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span> <br>\t<span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">64</span> <br>\t<span class=\"hljs-attribute\">dst</span>[i+<span class=\"hljs-number\">63</span>:i] := SignExtend<span class=\"hljs-number\">64</span>(a[i+<span class=\"hljs-number\">31</span>:i]) * SignExtend<span class=\"hljs-number\">64</span>(b[i+<span class=\"hljs-number\">31</span>:i]) <br><span class=\"hljs-attribute\">ENDFOR</span> <br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>图2:整数向量的低元素相乘</strong></p>\n<p>_mullo_函数类似于整数_mul_函数，但它们不是乘低元素，而是乘两个向量的每个元素，只存储每个乘积的低一半。</p>\n<p><strong>Synopsis</strong></p>\n<p><strong>m256i _mm256_mullo_epi32 (m256i a, __m256i b)</strong><br>#include &lt;immintrin.h&gt;<br>Instruction: vpmulld ymm, ymm, ymm<br>CPUID Flags: AVX2</p>\n<p><strong>Description</strong></p>\n<p>Multiply the packed signed 32-bit integers in a and b, producing intermediate 64-bit integers, and store the low 32 bits of the intermediate integers in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">7</span> <br>\t\t<span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">32</span> <br>\t\t<span class=\"hljs-attribute\">tmp</span>[<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">0</span>] := a[i+<span class=\"hljs-number\">31</span>:i] * b[i+<span class=\"hljs-number\">31</span>:i] <br>\t\t<span class=\"hljs-attribute\">dst</span>[i+<span class=\"hljs-number\">31</span>:i] := tmp[<span class=\"hljs-number\">31</span>:<span class=\"hljs-number\">0</span>] <br><span class=\"hljs-attribute\">ENDFOR</span> <br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>图3:整数相乘和存储低二分之一</strong></p>\n<p>_mm256_mulhi_epi16和_mm256_mulhi_epu16 intrinsics类似，但是它们存储整数积的高一半。</p>\n<p><strong>Synopsis</strong></p>\n<p><strong>m256i _mm256_mulhi_epi16 (m256i a, __m256i b)</strong><br>#include &lt;immintrin.h&gt;<br>Instruction: vpmulhw ymm, ymm, ymm<br>CPUID Flags: AVX2</p>\n<p><strong>Description</strong></p>\n<p>Multiply the packed signed 16-bit integers in a and b, producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">15</span> <br>\t<span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">16</span> <br>\t<span class=\"hljs-attribute\">tmp</span>[<span class=\"hljs-number\">31</span>:<span class=\"hljs-number\">0</span>] := SignExtend<span class=\"hljs-number\">32</span>(a[i+<span class=\"hljs-number\">15</span>:i]) * SignExtend<span class=\"hljs-number\">32</span>(b[i+<span class=\"hljs-number\">15</span>:i]) \t\t   \t   dst[i+<span class=\"hljs-number\">15</span>:i] := tmp[<span class=\"hljs-number\">31</span>:<span class=\"hljs-number\">16</span>] <br><span class=\"hljs-attribute\">ENDFOR</span> <br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n\n\n<h3 id=\"6-3Fused-Multiply-and-Add-FMA\"><a href=\"#6-3Fused-Multiply-and-Add-FMA\" class=\"headerlink\" title=\"6.3Fused Multiply and Add (FMA)\"></a>6.3Fused Multiply and Add (FMA)</h3><p>如前所述，两个N位数字相乘的结果可以占用2N位。因此，当您将两个浮点值a和b相乘时，结果实际上是四舍五入(a * b)，其中四舍五入(x)返回最接近x的浮点值。随着进一步操作的执行，这种精度损失会增加。【这里需要注意分部乘加，先乘法后加法和使用FMA两者的计算精度】</p>\n<p>AVX2提供了将乘法和加法融合在一起的指令。也就是说，它们不是返回整数(整数(a * b) + c)，而是返回整数(a * b + c)。因此，这些指令比分别执行乘法和加法提供了更高的速度和准确性【这里正是FMA的特点】。</p>\n<p>表6列出了AVX2提供的FMA intrinsic，并包括对每个函数的描述。表中的每条指令都接受三个输入向量，我把它们分别称为a、b和c。</p>\n<p><strong>Table 6: FMA Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>(2)_mm_fmadd_ps/pd/</code> <code>(2)_mm256_fmadd_ps/pd</code></td>\n<td>Multiply two vectors and add the product to a third (res &#x3D; a * b + c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsub_ps/pd/</code> <code>(2)_mm256_fmsub_ps/pd</code></td>\n<td>Multiply two vectors and subtract a vector from the product (res &#x3D; a * b - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmadd_ss/sd </code></td>\n<td>Multiply and add the lowest element in the vectors (res[0] &#x3D; a[0] * b[0] + c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsub_ss/sd</code></td>\n<td>Multiply and subtract the lowest element in the vectors (res[0] &#x3D; a[0] * b[0] - c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmadd_ps/pd</code> <code>(2)_mm256_fnmadd_ps/pd </code></td>\n<td>Multiply two vectors and add the negated product to a third (res &#x3D; -(a * b) + c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmsub_ps/pd/</code> <code>(2)_mm256_fnmsub_ps/pd</code></td>\n<td>Multiply two vectors and add the negated product to a third (res &#x3D; -(a * b) - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmadd_ss/sd</code></td>\n<td>Multiply the two lowest elements and add the negated product to the lowest element of the third vector (res[0] &#x3D; -(a[0] * b[0]) + c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmsub_ss/sd</code></td>\n<td>Multiply the lowest elements and subtract the lowest element of the third vector from the negated product (res[0] &#x3D; -(a[0] * b[0]) - c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmaddsub_ps/pd/</code> <code>(2)_mm256_fmaddsub_ps/pd</code></td>\n<td>Multiply two vectors and alternately add and subtract from the product (res &#x3D; a * b - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsubadd_ps/pd/</code> <code>(2)_mmf256_fmsubadd_ps/pd </code></td>\n<td>Multiply two vectors and alternately subtract and add from the product (res &#x3D; a * b - c)</td>\n</tr>\n</tbody></table>\n<p>如果一个内征的名称以_ps或_pd结尾，则输入向量的每个元素都包含在运算中。如果intrinsic的名称以_ss或_sd结尾，则只包括最低的元素。输出向量中的其余元素被设置为与第一个输入向量中的元素相等。例如,假设vec_a &#x3D; (1.0, 2.0)， vec_b &#x3D; (5.0, 10.0)， vec_c &#x3D;(7.0, 14.0)。在本例中，_mm_fmadd_sd(vec_a, vec_b, vec_c)返回(12.0,2.0)，因为(1.0 * 5.0)+ 7.0 &#x3D; 12.0,2.0是vec_a的第二个元素。</p>\n<p>了解_fmadd_&#x2F;_fmsub_和_fnmadd_&#x2F;_fnmsub_ intrinsic之间的区别很重要。后一种函数在加上或减去第三个输入向量之前，对前两个输入向量的乘积求反。</p>\n<p><strong>Synopsis</strong></p>\n<p><strong>__m256d _mm256_fnmadd_pd (m256d a, m256d b, m256d c)</strong><br>#include &lt;immintrin.h&gt;<br>Instruction: vfnmadd132pd ymm, ymm, ymm<br>       vfnmadd213pd ymm, ymm, ymm<br>       vfnmadd231pd ymm, ymm, ymm<br>CPUID Flags: FMA</p>\n<p><strong>Description</strong></p>\n<p>Multiply packed double-precision (64-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span> <br>\t\t<span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">64</span> <br>\t\t<span class=\"hljs-attribute\">dst</span>[i+<span class=\"hljs-number\">63</span>:i] := -(a[i+<span class=\"hljs-number\">63</span>:i] * b[i+<span class=\"hljs-number\">63</span>:i]) + c[i+<span class=\"hljs-number\">63</span>:i] <br><span class=\"hljs-attribute\">ENDFOR</span>\t <br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p>_fmaddsub_和_fmsubadd_内在函数在第三个向量的加法和减法元素之间交替使用。_fmaddsub_ intrinsic奇数元素做加法而偶数元素做减法。_fmsubadd_ intrinsic奇数元素做减法而偶数元素做加法。fmatest.c中的代码展示了如何在实践中使用_mm256_fmaddsub_pd intrinsic。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <br>  __m256d veca = _mm256_setr_pd(<span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>);<br><br>  __m256d vecb = _mm256_setr_pd(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>);<br>  <br>  __m256d vecc = _mm256_setr_pd(<span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>);<br>  <br>  <span class=\"hljs-comment\">/* Alternately subtract and add the third vector</span><br><span class=\"hljs-comment\">     from the product of the first and second vectors */</span><br>  __m256d result = _mm256_fmaddsub_pd(veca, vecb, vecc);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">double</span>* res = (<span class=\"hljs-keyword\">double</span>*)&amp;result;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf %lf %lf %lf\\n&quot;</span>, res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>当这段代码在支持AVX2的处理器上编译和执行时，打印的结果如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">5.000000</span> <span class=\"hljs-number\">19.000000</span> <span class=\"hljs-number\">5.000000</span> <span class=\"hljs-number\">19.000000</span><br></code></pre></div></td></tr></table></figure>\n\n<p>FMA指令是由AVX2提供的，因此您可能认为使用gcc构建应用程序需要使用-mavx2标志。但是我发现-mfma标志是<strong>必需</strong>的。否则，我会得到奇怪的编译错误。</p>\n<h2 id=\"7-Permuting-and-Shuffling\"><a href=\"#7-Permuting-and-Shuffling\" class=\"headerlink\" title=\"7.Permuting and Shuffling\"></a>7.Permuting and Shuffling</h2><p>许多应用程序必须重新排列向量元素，以确保正确执行操作。</p>\n<p>AVX&#x2F;AVX2为此目的提供了许多intrinsic funtion，其中两大类是_permute_函数和_shuffle_函数。本节介绍这两种类型的intrinsic。</p>\n<h3 id=\"7-1Permuting\"><a href=\"#7-1Permuting\" class=\"headerlink\" title=\"7.1Permuting\"></a>7.1Permuting</h3><p>AVX提供了返回一个向量的函数，该向量包含一个向量的重新排列的元素。表7列出了这些排列函数，并提供了对每个函数的描述。</p>\n<p><strong>Table 7: Permute Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm_permute_ps/pd/</code> <code>_mm256_permute_ps/pd</code></td>\n<td>Select elements from the input vector based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_permute4x64_pd/</code> <code>(2)_mm256_permute4x64_epi64</code></td>\n<td>Select 64-bit elements from the input vector based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm256_permute2f128_ps/pd</code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm256_permute2f128_si256 </code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm_permutevar_ps/pd</code> <code>_mm256_permutevar_ps/pd </code></td>\n<td>Select elements from the input vector based on bits in an integer vector</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_permutevar8x32_ps</code>&#x2F; <code>(2)_mm256_permutevar8x32_epi32</code></td>\n<td>Select 32-bit elements (<code>float</code>s and <code>int</code>s) using indices in an integer vector</td>\n</tr>\n</tbody></table>\n<p>_permute_ intrinsic接受两个参数:一个输入向量和一个8位控制值。控制值的位决定输入向量的哪个元素插入到输出中。</p>\n<p>对于_mm256_permute_ps，每对控制位通过选择输入向量中的一个上或下元素来确定一个上或下输出元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <br>  __m128 v1 = _mm_setr_ps(<span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">4.1</span>, <span class=\"hljs-number\">6.2</span>, <span class=\"hljs-number\">8.4</span>);<br>  <span class=\"hljs-keyword\">float</span> * a =(<span class=\"hljs-keyword\">float</span>*)&amp;v1;<br>   <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt; <span class=\"hljs-number\">4</span> ;i++)<br>   &#123;<br>   \t cout&lt;&lt;a[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>   &#125;<br>   cout&lt;&lt;endl;<br>   __m128 v2 = _mm_permute_ps (v1, <span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-keyword\">float</span> * b =(<span class=\"hljs-keyword\">float</span>*)&amp;v2;<br>   <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt; <span class=\"hljs-number\">4</span> ;i++)<br>   &#123;<br>   \t cout&lt;&lt;b[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>   &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">4</span><br><span class=\"hljs-attribute\">8</span>.<span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Figure 4: Operation of the Permute Intrinsic Function</strong></p>\n<p>如图所示，输入向量的值可以在输出中重复多次。其他输入值可能根本不被选择。</p>\n<p>在_mm256_permute_pd中，控制值的低四位在相邻的双精度数对之间进行选择。_mm256_permute4x4_pd类似，但使用所有控制位来选择将哪个64位元素放在输出中。在_permute2f128_ intrinsic中，控制值从两个输入向量中选择128位块，而不是从一个输入向量中选择元素。</p>\n<p>_permutevar_ intrinsic执行与_permute_ intrinsic相同的操作。但是它们不是使用8位控制值来选择元素，而是依赖于与输入向量大小相同的整数向量。例如，_mm256_permute_ps的输入向量是_mm256，因此整数向量是_mm256i。整数向量的高位执行选择的方式与_permute_ intrinsic的8位控制值的位相同。</p>\n<h3 id=\"7-2Shuffling\"><a href=\"#7-2Shuffling\" class=\"headerlink\" title=\"7.2Shuffling\"></a>7.2Shuffling</h3><p>像_permute_ intrinsic一样，_shuffle_ intrinsic从一个或两个输入向量中选择元素，并将它们放在输出向量中。表8列出了这些功能，并提供了每个功能的描述。</p>\n<p><strong>Table 8: Shuffle Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_shuffle_ps/pd</code></td>\n<td>Select floating-point elements according to an 8-bit value</td>\n</tr>\n<tr>\n<td><code>_mm256_shuffle_epi8/</code> <code>_mm256_shuffle_epi32</code></td>\n<td>Select integer elements according to an 8-bit value</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_shufflelo_epi16/ </code> <code>(2)_mm256_shufflehi_epi16</code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n</tbody></table>\n<p>所有的shuffle_ intrinsic运算于256位向量。在每种情况下，最后一个参数是一个8位的值，它决定哪些输入元素应该放在输出向量中。</p>\n<p>对于_mm256_shuffle_ps，只使用控件值的高四位。如果输入向量包含整型或浮点数，则使用所有控制位。对于_mm256_shuffle_ps，前两对位选择第一个向量中的元素，后两对位选择第二个向量中的元素。</p>\n<p><strong>Synopsis</strong></p>\n<p><strong>m256 _mm256_shuffle_ps (m256 a, __m256 b, const int imm8)</strong><br>#include &lt;immintrin.h&gt;<br>Instruction: vshufps ymm, ymm, ymm, imm8<br>CPUID Flags: AVX</p>\n<p><strong>Description</strong></p>\n<p>Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs stylus\">DEFINE SELECT4(<span class=\"hljs-attribute\">src</span>, control) &#123; <br>\t\tCASE(control<span class=\"hljs-selector-attr\">[1:0]</span>) OF <br>\t\t<span class=\"hljs-number\">0</span>:\ttmp<span class=\"hljs-selector-attr\">[31:0]</span> := <span class=\"hljs-attribute\">src</span>[<span class=\"hljs-number\">31</span>:<span class=\"hljs-number\">0</span>] <br>\t\t<span class=\"hljs-number\">1</span>:\ttmp<span class=\"hljs-selector-attr\">[31:0]</span> := <span class=\"hljs-attribute\">src</span>[<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">32</span>] <br>\t\t<span class=\"hljs-number\">2</span>:\ttmp<span class=\"hljs-selector-attr\">[31:0]</span> := <span class=\"hljs-attribute\">src</span>[<span class=\"hljs-number\">95</span>:<span class=\"hljs-number\">64</span>] <br>\t\t<span class=\"hljs-number\">3</span>:\ttmp<span class=\"hljs-selector-attr\">[31:0]</span> := <span class=\"hljs-attribute\">src</span>[<span class=\"hljs-number\">127</span>:<span class=\"hljs-number\">96</span>] <br>\t\tESAC <br>\t\tRETURN tmp<span class=\"hljs-selector-attr\">[31:0]</span> <br>\t\t&#125; <br>dst<span class=\"hljs-selector-attr\">[31:0]</span> := SELECT4(<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[127:0]</span>, imm8<span class=\"hljs-selector-attr\">[1:0]</span>) <br>dst<span class=\"hljs-selector-attr\">[63:32]</span> := SELECT4(<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[127:0]</span>, imm8<span class=\"hljs-selector-attr\">[3:2]</span>) <br>dst<span class=\"hljs-selector-attr\">[95:64]</span> := SELECT4(<span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-attr\">[127:0]</span>, imm8<span class=\"hljs-selector-attr\">[5:4]</span>) <br>dst<span class=\"hljs-selector-attr\">[127:96]</span> := SELECT4(<span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-attr\">[127:0]</span>, imm8<span class=\"hljs-selector-attr\">[7:6]</span>) <br>dst<span class=\"hljs-selector-attr\">[159:128]</span> := SELECT4(<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[255:128]</span>, imm8<span class=\"hljs-selector-attr\">[1:0]</span>) <br>dst<span class=\"hljs-selector-attr\">[191:160]</span> := SELECT4(<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[255:128]</span>, imm8<span class=\"hljs-selector-attr\">[3:2]</span>) <br>dst<span class=\"hljs-selector-attr\">[223:192]</span> := SELECT4(<span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-attr\">[255:128]</span>, imm8<span class=\"hljs-selector-attr\">[5:4]</span>) <br>dst<span class=\"hljs-selector-attr\">[255:224]</span> := SELECT4(<span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-attr\">[255:128]</span>, imm8<span class=\"hljs-selector-attr\">[7:6]</span>) <br>dst<span class=\"hljs-selector-attr\">[MAX:256]</span> := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p>为了shuffle16位值，AVX2提供了_mm256_shufflelo_epi16和_mm256_shufflehi_epi16。与_mm256_shuffle_ps一样，控制值被分成四对从八个元素中选择的位。但是对于_mm256_shufflelo_epi16, 8个元素是从8个低的16位值中取出的。对于_mm256_shufflehi_epi16, 8个元素取自8个高的16位值。</p>\n<h2 id=\"8-Complex-Multiplication\"><a href=\"#8-Complex-Multiplication\" class=\"headerlink\" title=\"8.Complex Multiplication\"></a>8.Complex Multiplication</h2><p>在信号处理应用中，复数乘法是一项必须反复执行的耗时操作。我不会深入讨论这个理论，但每个复数都可以表示为a + bi，其中a和b是浮点值，i是-1的平方根。A是实部，b是虚部。如果(a + bi)和(c + di)相乘，乘积等于(ac - bd) + (ad + bc)i。</p>\n<p>复数可以以交错的方式存储，这意味着每个实数部分后面跟着虚数部分。假设vec1是一个__m256d，存储两个复数(a + bi)和(x + yi)， vec2是一个__m256d，存储(c + di)和(z + wi)。图6说明了如何存储这些值。如图所示，prod向量存储了两个产物:(ac - bd) + (ad + bc)i和(xz - yw) + (xw + yz)i。</p>\n<p>【图片丢失】</p>\n<p><strong>Figure 6: Complex Multiplication Using Vectors</strong></p>\n<p>我不知道用AVX&#x2F;AVX2计算复杂乘积的最快方法。但我想出了一个方法，效果很好。它包括五个步骤:</p>\n<ol>\n<li>将vec1和vec2相乘，并将结果存储在vec3中。</li>\n<li>切换vec2的实&#x2F;虚值。</li>\n<li>求vec2的虚数的负数。</li>\n<li>将vec1和vec2相乘，并将结果存储在vec4中。</li>\n<li>对vec3和vec4进行水平相减，得到vec1中的答案。</li>\n</ol>\n<p>complex_multi .c中的代码展示了如何使用AVX intrinsic执行此操作:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  __m256d vec1 = _mm256_setr_pd(<span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">13.0</span>, <span class=\"hljs-number\">6.0</span>);<br>  __m256d vec2 = _mm256_setr_pd(<span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">7.0</span>);<br>  __m256d neg = _mm256_setr_pd(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>);<br>  <br>  <span class=\"hljs-comment\">/* Step 1: Multiply vec1 and vec2 */</span><br>  __m256d vec3 = _mm256_mul_pd(vec1, vec2);<br><br>  <span class=\"hljs-comment\">/* Step 2: Switch the real and imaginary elements of vec2 */</span><br>  vec2 = _mm256_permute_pd(vec2, <span class=\"hljs-number\">0x5</span>);<br>  <br>  <span class=\"hljs-comment\">/* Step 3: Negate the imaginary elements of vec2 */</span><br>  vec2 = _mm256_mul_pd(vec2, neg);  <br>  <br>  <span class=\"hljs-comment\">/* Step 4: Multiply vec1 and the modified vec2 */</span><br>  __m256d vec4 = _mm256_mul_pd(vec1, vec2);<br><br>  <span class=\"hljs-comment\">/* Horizontally subtract the elements in vec3 and vec4 */</span><br>  vec1 = _mm256_hsub_pd(vec3, vec4);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">double</span>* res = (<span class=\"hljs-keyword\">double</span>*)&amp;vec1;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf %lf %lf %lf\\n&quot;</span>, res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">21</span>.<span class=\"hljs-number\">000000</span> <span class=\"hljs-number\">57</span>.<span class=\"hljs-number\">000000</span> <span class=\"hljs-number\">36</span>.<span class=\"hljs-number\">000000</span> <span class=\"hljs-number\">127</span>.<span class=\"hljs-number\">000000</span><br></code></pre></div></td></tr></table></figure>\n\n<p>这段代码作用于双向量，但是可以很容易地扩展该方法以支持浮点向量。</p>\n<h2 id=\"9-Points-of-Interest\"><a href=\"#9-Points-of-Interest\" class=\"headerlink\" title=\"9.Points of Interest\"></a>9.Points of Interest</h2><p>许多开发人员可能会避免学习AVX&#x2F;AVX2，希望编译器能够执行自动向量化。自动向量化是一个很好的特性，但是如果您了解本质，就可以重新安排算法以更好地利用SIMD处理。通过插入AVX&#x2F;AVX2 intrinsic，我极大地提高了信号处理应用程序的处理速度。</p>\n<h2 id=\"10-History\"><a href=\"#10-History\" class=\"headerlink\" title=\"10.History\"></a>10.History</h2><p>2&#x2F;20 - Fixed formatting and image links</p>\n<p>4&#x2F;2 - Fixed a couple typographical errors</p>\n<h2 id=\"11-License\"><a href=\"#11-License\" class=\"headerlink\" title=\"11.License\"></a>11.License</h2><p>This article, along with any associated source code and files, is licensed under <a href=\"http://www.codeproject.com/info/cpol10.aspx\">The Code Project Open License (CPOL)</a></p>\n<p>Written By</p>\n<p><strong><a href=\"https://www.codeproject.com/Members/mattscar\">Matt Scarpino</a></strong></p>\n<p><img src=\"/2023/03/10/avx006/US.gif\" alt=\"United States\"> United States</p>\n<p>I’ve been a programmer and engineer for over 20 years. I’m a certified Azure Developer Associate and an Azure IoT Developer Specialist.</p>\n",
            "tags": [
                "AVX",
                "AVX2"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/09/cuda015/",
            "url": "https://xingyuanjie.top/2023/03/09/cuda015/",
            "title": "CUDA使用二维网格和二位块对矩阵求和",
            "date_published": "2023-03-09T04:34:51.000Z",
            "content_html": "<h2 id=\"CUDA使用二维网格和二位块对矩阵求和\"><a href=\"#CUDA使用二维网格和二位块对矩阵求和\" class=\"headerlink\" title=\"CUDA使用二维网格和二位块对矩阵求和\"></a>CUDA使用二维网格和二位块对矩阵求和</h2><p>在本节中，我们将使用一个二维网格和二位块来编写一个矩阵加法核函数。首先，应该编写一个校验主函数以验证矩阵加法核函数是否能得出正确的结果：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumMatrixOnhost</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> nx, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> ny)</span></span>&#123;<br>    <span class=\"hljs-keyword\">float</span> *ia = A;<br>    <span class=\"hljs-keyword\">float</span> *ib = B;<br>    <span class=\"hljs-keyword\">float</span> *ic = C;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> iy=<span class=\"hljs-number\">0</span>;iy&lt;ny;iy++)&#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> ix=<span class=\"hljs-number\">0</span>;ix&lt;nx;ix++)&#123;<br>            ic[ix]=ia[ix]+ib[ix];<br>        &#125;<br>        ia += nx;<br>        ib += nx;<br>        ic += nx;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>然后，创建一个新的核函数，目的是采用一个二维线程块来进行矩阵求和：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__global__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumMatrixOnGPU2D</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *MatA, <span class=\"hljs-keyword\">float</span> *MatB, <span class=\"hljs-keyword\">float</span> *MatC, <span class=\"hljs-keyword\">int</span> nx, <span class=\"hljs-keyword\">int</span> ny)</span></span>&#123;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> ix = threadIdx.x + blockIdx.x * blockDim.x;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> iy = threadIdx.y + blockIdx.y * blockDim.y;<br>    ubsigned <span class=\"hljs-keyword\">int</span> idx = iy*nx + ix;<br>    <br>    <span class=\"hljs-keyword\">if</span>(ix &lt; nx &amp;&amp; iy &lt;ny)<br>        MatC[idx] = MatA[idx] + MatB[idx];<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>这个核函数的关键步骤是将每个线程从它的线程索引映射到全局线性内存索引中，如图2-12所示。</p>\n<p>接下来，每个维度下的矩阵大小可以按如下方法设置为16384个元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> nx = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">14</span>;<br><span class=\"hljs-keyword\">int</span> ny = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">14</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>然后，使用一个二维网格和二维块按如下方法设置核函数的执行配置：</p>\n<p><img src=\"/2023/03/09/cuda015/image-20230309125059653.png\" alt=\"image-20230309125059653\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> dimx = <span class=\"hljs-number\">32</span>;<br><span class=\"hljs-keyword\">int</span> dimy = <span class=\"hljs-number\">32</span>;<br><span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(dimx, dimy)</span></span>;<br><span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">((nx + block.x - <span class=\"hljs-number\">1</span>)/block.x, (ny + block.y - <span class=\"hljs-number\">1</span>)/block.y)</span></span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>把所有的代码整合到名为sumMatrixOnGPU-2D-grid-2D-block.cu的文件中。主函数代码如代码清单2-7所示。</p>\n<p>代码清单2-7 使用一个二维网格和二维块的矩阵加法(sumMatrixOnGPU-2D-grid-2D-block.cu)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> **argv)</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s Starting...\\n&quot;</span>,zrgv[<span class=\"hljs-number\">0</span>]);<br>    <br>    <span class=\"hljs-comment\">//set up device</span><br>    <span class=\"hljs-keyword\">int</span> dev = <span class=\"hljs-number\">0</span>;<br>    cudaDeviceProp deviceProp;<br>    <span class=\"hljs-built_in\">CHECK</span>(<span class=\"hljs-built_in\">cudaGetDeviceProperties</span>(&amp;deviceProp, dev));<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Using Device %d: %s\\n&quot;</span>,dev, deviceProp.name);<br>    <span class=\"hljs-built_in\">CHECK</span>(<span class=\"hljs-built_in\">cudaSetDevice</span>(dev));<br>    <br>    <span class=\"hljs-comment\">//set up data size of matrix</span><br>    <span class=\"hljs-keyword\">int</span> nx = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">14</span>;<br>    <span class=\"hljs-keyword\">int</span> ny = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">14</span>;<br>    <br>    <span class=\"hljs-keyword\">int</span> nxy = nx*ny;<br>    <span class=\"hljs-keyword\">int</span> nBytes = nxy *<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Matrix size: nx %d ny %d\\n&quot;</span>,nx,ny);<br>    <br>    <span class=\"hljs-comment\">//malloc host memory</span><br>    <span class=\"hljs-keyword\">float</span> *h_A, *h_B, *hostRef, *gpuRef;<br>    h_A = (<span class=\"hljs-keyword\">float</span> *)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    h_B = (<span class=\"hljs-keyword\">float</span> *)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    hostRef = (<span class=\"hljs-keyword\">float</span> *)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    gpuRef = (<span class=\"hljs-keyword\">float</span> *)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    <br>    <span class=\"hljs-comment\">//initialize data at host side</span><br>    <span class=\"hljs-keyword\">double</span> iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    <span class=\"hljs-built_in\">initialData</span> (h_A, nxy);<br>    <span class=\"hljs-built_in\">initialData</span> (h_B, nxy);<br>    <span class=\"hljs-keyword\">double</span> iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <br>    <span class=\"hljs-built_in\">memset</span>(hostRef, <span class=\"hljs-number\">0</span>, nBytes);<br>    <span class=\"hljs-built_in\">memset</span>(gpuRef, <span class=\"hljs-number\">0</span>, nBytes);<br>    <br>    <span class=\"hljs-comment\">//add matrix at host side for result checks</span><br>    iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    <span class=\"hljs-built_in\">sumMatrixOnHost</span> (h_A, h_B, hostRef, nx,ny);<br>    iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <br>    <span class=\"hljs-comment\">//malloc device global memory</span><br>    <span class=\"hljs-keyword\">float</span> *d_MatA, *d_MatB, *d_MatC;<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">void</span> **)&amp;d_MatA,nBytes);<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">void</span> **)&amp;d_MatB,nBytes);<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">void</span> **)&amp;d_MatC,nBytes);<br>    <br>    <span class=\"hljs-comment\">//transfer data from host to device</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_MatA, h_A, nBytes, cudaMemcpyHostToDevice);<br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_MatB, h_B, nBytes, cudaMemcpyHostToDevice);<br>    <br>    <span class=\"hljs-comment\">//invoke kernel at host side</span><br>    <span class=\"hljs-keyword\">int</span> dimx = <span class=\"hljs-number\">32</span>;<br>    <span class=\"hljs-keyword\">int</span> dimy = <span class=\"hljs-number\">32</span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(dimx,dimy)</span></span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">((nx+block.x<span class=\"hljs-number\">-1</span>)/block.x,(ny+block.y<span class=\"hljs-number\">-1</span>)/block.y)</span></span>;<br>    <br>    iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    sumMatrixOnGPU2D&lt;&lt;&lt;grid,block&gt;&gt;&gt;(d_MatA, d_MatB, d_MatC, nx,ny);<br>    <span class=\"hljs-built_in\">cudaDeviceSynchronize</span>();<br>    iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;sumMatrixOnGPU2D&lt;&lt;&lt;(%d,%d),(%d,%d)&gt;&gt;&gt; elapsed %f sec\\n&quot;</span>,grid.x, grid.y, block.x,block.y,iElaps);<br>    <br>    <span class=\"hljs-comment\">//copy kernel result back to host side</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(gpuRef, d_MatC, nBytes, cudaMemcpyDeviceToHost);<br>    <br>    <span class=\"hljs-comment\">//check device results</span><br>    <span class=\"hljs-built_in\">checkResult</span>(hostRef, gpuRef,nxy);<br>    <br>    <span class=\"hljs-comment\">//free device global memory</span><br>    <span class=\"hljs-built_in\">cudaFree</span>(d_MatA);<br>    <span class=\"hljs-built_in\">cudaFree</span>(d_MatB);<br>    <span class=\"hljs-built_in\">cudaFree</span>(d_MatC);<br>    <br>    <span class=\"hljs-comment\">//free host memory</span><br>    <span class=\"hljs-built_in\">free</span>(h_A);<br>    <span class=\"hljs-built_in\">free</span>(h_B);<br>    <span class=\"hljs-built_in\">free</span>(hostRef);<br>    <span class=\"hljs-built_in\">free</span>(gpuRef);<br>    <br>    <span class=\"hljs-comment\">//reset device</span><br>    <span class=\"hljs-built_in\">cudaDeviceReset</span>();<br>    <br>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>);<br>&#125; <br></code></pre></div></td></tr></table></figure>\n\n<p>用以下命令编译并运行该代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc -arch=sm_20 sumMatrixOnGPU-2D-grid-2D-block.cu -o matrix2D<br>./matrix2D<br></code></pre></div></td></tr></table></figure>\n\n<p>在Tesla M2070上运行的结果：</p>\n<p><img src=\"/2023/03/09/cuda015/image-20230309224513603.png\" alt=\"image-20230309224513603\"></p>\n<p>接下来，调整块的尺寸为32×16并重新编译和运行该代码。核函数的执行速度几乎快了两倍：</p>\n<p><img src=\"/2023/03/09/cuda015/image-20230309224626772.png\" alt=\"image-20230309224626772\"></p>\n<p>你可能好奇为什么只是改变了执行配置，内核性能就几乎翻了一倍。直观地说，你可能会觉得这是因为第二次配置的线程块数是第一次配置块数的两倍，所以并行性也是两倍。你的直觉是正确的，但是，如果进一步减小块的大小变为16×16，相比第一次配置你已经将块的数量翻了四倍。如下所示，这种配置比第一个结果好但是不如第二个。</p>\n<p><img src=\"/2023/03/09/cuda015/image-20230309224912499.png\" alt=\"image-20230309224912499\"></p>\n<p>表2-3总结了不同执行配置的性能。结果显示，增加块的数量不一定能提升内核性能。</p>\n<p><img src=\"/2023/03/09/cuda015/image-20230309225004531.png\" alt=\"image-20230309225004531\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/09/cuda014/",
            "url": "https://xingyuanjie.top/2023/03/09/cuda014/",
            "title": "CUDA使用块和线程建立矩阵索引",
            "date_published": "2023-03-09T03:32:36.000Z",
            "content_html": "<h2 id=\"CUDA使用块和线程建立矩阵索引\"><a href=\"#CUDA使用块和线程建立矩阵索引\" class=\"headerlink\" title=\"CUDA使用块和线程建立矩阵索引\"></a>CUDA使用块和线程建立矩阵索引</h2><p>通常情况下，一个矩阵用行优先的方法在全局内存中进行线性存储。图2-9所示的是一个8×6矩阵的小例子。</p>\n<p>在一个矩阵加法核函数中，一个线程通常被分配一个数据元素来处理。首先要完成的任务是使用块和线程索引从全局内存中访问指定的数据。通常情况下，对一个二维示例来说，需要管理3种索引。</p>\n<p><img src=\"/2023/03/09/cuda014/image-20230309113733674.png\" alt=\"image-20230309113733674\"></p>\n<ul>\n<li>线程和块索引</li>\n<li>矩阵中给定点的坐标</li>\n<li>全局线性内存中的偏移量</li>\n</ul>\n<p>对于一个给定的线程，首先可以通过把线程和块索引映射到矩阵坐标上来获取线程块和线程索引的全局内存偏移量，然后将这些矩阵坐标映射到全局内存的存储单元中。</p>\n<p>第一步，可以用以下公式把线程和块索引映射到矩阵坐标上：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">ix = threadIdx.x + blockIdx.x * blockDim.x;<br>iy = threadIdx.y + blockIdx.y * blockDim.y;<br></code></pre></div></td></tr></table></figure>\n\n<p>第二步，可以用以下公式把矩阵坐标映射到全局内存中的索引&#x2F;存储单元上:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">idx = iy * nx + ix<br></code></pre></div></td></tr></table></figure>\n\n<p>图2-10说明了块和线程索引，矩阵坐标以及线性全局内存索引之间的对应关系。</p>\n<p><img src=\"/2023/03/09/cuda014/image-20230309114815497.png\" alt=\"image-20230309114815497\"></p>\n<p>printThreadInfo函数被用于输出关于每个线程的以下信息：</p>\n<ul>\n<li>线程索引</li>\n<li>块索引</li>\n<li>矩阵坐标</li>\n<li>线性全局内存偏移量</li>\n<li>相应元素的值</li>\n</ul>\n<p>用以下命令编译并运行该程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc -arch=sm_20 checkThreadIndex.cu -o checkIndex<br>./checkIndex<br></code></pre></div></td></tr></table></figure>\n\n<p>对于每个线程，你可以获取以下信息：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">thread_id</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>)\t<span class=\"hljs-built_in\">block_id</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>)\t<span class=\"hljs-built_in\">coordinate</span>(<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">1</span>)\tglobal index <span class=\"hljs-number\">14</span> ival <span class=\"hljs-number\">14</span><br></code></pre></div></td></tr></table></figure>\n\n<p>图2-11说明了这三项索引之间的关系。</p>\n<p><img src=\"/2023/03/09/cuda014/image-20230309115229368.png\" alt=\"image-20230309115229368\"></p>\n<p>代码清单2-6 检查块和线程索引（checkT和readIndex.cu）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cuda_runtime.h&gt;</span></span><br><span class=\"hljs-meta\">#inclde <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> CHECK(call)</span><br>&#123;<br>    <span class=\"hljs-keyword\">const</span> cudaError_t error = call;<br>    <span class=\"hljs-keyword\">if</span>(error != cudaSuccess)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Error: %s:%d, &quot;</span>,__FILE__, __LINE__);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;code:%d, reason: %s\\n&quot;</span>,error, <span class=\"hljs-built_in\">cudaGetErrorString</span>(error));<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">-10</span>*error);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initialInt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> *p, <span class=\"hljs-keyword\">int</span> size)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;size;i++)&#123;<br>        ip[i] = i;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printMateix</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> *C,<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> nx, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> ny)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> *ic = C;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nMatrix:\t(%d.%d)\\n&quot;</span>.nx,ny);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> iy=<span class=\"hljs-number\">0</span>;iy&lt;ny;iy++)&#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> ix=<span class=\"hljs-number\">0</span>; ix&lt;nx;ix++)&#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d&quot;</span>,ic[ix]);<br>        &#125;<br>        ic += nx;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>&#125;<br><br><span class=\"hljs-function\">__global__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printThreadIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> *A, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> nx, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> ny)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> ix = threadIdx.x + blockIdx.x * blockDim.x;<br>    <span class=\"hljs-keyword\">int</span> iy = threadIdx.y + blockIdx.y * blockDim.y;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> idx = iy*nx + ix;<br>    <br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;thread_id (%d,%d) block_id (%d,%d) coordinate (%d,%d) global index %2d ival %2d\\n&quot;</span>, threadIdx.x, threadIdx.y, blockIdx.x,blockIdx.y,ix,iy,idx,A[idx]);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> **argv)</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s Starting...\\n&quot;</span>,argv[<span class=\"hljs-number\">0</span>]);<br>    <br>    <span class=\"hljs-comment\">//get device information</span><br>    <span class=\"hljs-keyword\">int</span> dev = <span class=\"hljs-number\">0</span>;<br>    cudaDeviceProp deviceProp;<br>    <span class=\"hljs-built_in\">CHECK</span>(<span class=\"hljs-built_in\">cudaGetDeviceProperties</span>(&amp;deviceProp, dev));<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Using Device %d: %s\\n&quot;</span>, dev, deviceProp.name);<br>    <br>    <span class=\"hljs-comment\">//set matrix dimension</span><br>    <span class=\"hljs-keyword\">int</span> nx = <span class=\"hljs-number\">8</span>;<br>    <span class=\"hljs-keyword\">int</span> ny = <span class=\"hljs-number\">6</span>;<br>    <span class=\"hljs-keyword\">int</span> nxy = nx*ny;<br>    <span class=\"hljs-keyword\">int</span> nBytes = nxy * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>);<br>    <br>    <span class=\"hljs-comment\">//malloc host memory</span><br>    <span class=\"hljs-keyword\">int</span> *h_A;<br>    h_A = (<span class=\"hljs-keyword\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    <br>    <span class=\"hljs-comment\">//initialize host matrix with interger</span><br>    <span class=\"hljs-built_in\">initialInt</span>(h_A, nxy);<br>    <span class=\"hljs-built_in\">printMatrix</span>(h_A, nx, ny);<br>    <br>    <span class=\"hljs-comment\">//malloc device memory</span><br>    <span class=\"hljs-keyword\">int</span> *d_MatA;<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">void</span>**)&amp;d_MatA, nBytes);<br>    <br>    <span class=\"hljs-comment\">//transfer data from host to device</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_MatA, h_A, nBytes, cudaMemcpyHostToDevice);<br>    <br>    <span class=\"hljs-comment\">//set up execution configuration</span><br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>)</span></span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">((nx+block.x<span class=\"hljs-number\">-1</span>)/block.x,(ny+block.y<span class=\"hljs-number\">-1</span>)/block.y)</span></span>;<br>    <br>    <span class=\"hljs-comment\">//invoke the kernel</span><br>    printThreadIndex&lt;&lt;&lt;grid,block&gt;&gt;&gt;(d_MatA,nx,ny);<br>    <span class=\"hljs-built_in\">cudaDeviceSynchronize</span>();<br>    <br>    <span class=\"hljs-comment\">//free host and device memory</span><br>    <span class=\"hljs-built_in\">cudaFree</span>(d_MatA);<br>    <span class=\"hljs-built_in\">free</span>(h_A);<br>    <br>    <span class=\"hljs-comment\">//reset device</span><br>    <span class=\"hljs-built_in\">cudaDeviceReset</span>();<br>    <br>    <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/08/cuda013/",
            "url": "https://xingyuanjie.top/2023/03/08/cuda013/",
            "title": "CUDA组织并行编程",
            "date_published": "2023-03-08T14:13:01.000Z",
            "content_html": "<h2 id=\"组织并行编程\"><a href=\"#组织并行编程\" class=\"headerlink\" title=\"组织并行编程\"></a>组织并行编程</h2><p>从前面的例子可以看出，如果使用了合适的网格和块大小来正确地组织线程，那么可以对内核性能产生很大的影响。在向量加法的例子中，为了实现最佳性能我们调整了块的大小，并基于块大小和向量数据大小计算出了网格大小。</p>\n<p>现在通过一个矩阵加法的例子说明这一点。对于矩阵运算，传统的方法是在内核中使用一个包含二维网格与二位块的布局来组织线程。但是，这种传统的方法无法获得最佳性能。在矩阵加法中使用以下布局将有助于了解更多关于网格和块的启发性的用法：</p>\n<ol>\n<li>有二维线程块构成的二维网格</li>\n<li>由一维线程块构成的一维网格</li>\n<li>由一维线程块构成的二维网格</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/07/CUDA012/",
            "url": "https://xingyuanjie.top/2023/03/07/CUDA012/",
            "title": "CUDA给核函数计时",
            "date_published": "2023-03-07T01:53:34.000Z",
            "content_html": "<h2 id=\"CUDA给核函数计时\"><a href=\"#CUDA给核函数计时\" class=\"headerlink\" title=\"CUDA给核函数计时\"></a>CUDA给核函数计时</h2><p>在内核的性能转换过程中，了解核函数的执行需要多长时间是很有帮助并且十分关键的。衡量核函数性能的方法有很多。最简单的方法是在主机端使用一个CPU或GPU计时器来计算内核的执行时间。在本节，你需要设置一个CPU计时器，并使用NVIDIA分析工具来计算执行时间。</p>\n<h3 id=\"用CPU计时器计时\"><a href=\"#用CPU计时器计时\" class=\"headerlink\" title=\"用CPU计时器计时\"></a>用CPU计时器计时</h3><p>可以使用gettimeofday系统调用来创建一个CPU计时器，以获取系统的时钟时间，它将返回自1970年1月1日零点以来，到现在的秒数。程序中需要添加sys&#x2F;time.h头文件，如代码清单2-5所示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">cpuSecond</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">timeval</span> <span class=\"hljs-title\">tp</span>;</span><br>    <span class=\"hljs-built_in\">gettimeofday</span>(&amp;tp,<span class=\"hljs-literal\">NULL</span>);<br>    <br>    <span class=\"hljs-keyword\">return</span> ((<span class=\"hljs-keyword\">double</span>)tp.tv_sec + (<span class=\"hljs-keyword\">double</span>)tp.tv_usec*<span class=\"hljs-number\">1.e-6</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>你可以用cpuSecond函数来测试你的核函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span> iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>kernel_name&lt;&lt;&lt;grid,block&gt;&gt;&gt;(argument list);<br><span class=\"hljs-built_in\">cudaDeviceSynchronize</span>();<br><span class=\"hljs-keyword\">double</span> iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br></code></pre></div></td></tr></table></figure>\n\n<p>由于核函数调用与主机端程序是异步的，你需要用cudaDeviceSynchronize函数来等待所有的GPU线程运行结束。变量iElaps表示程序运行的时间，就像你用手表记录的核函数的执行时间（用秒计算）。</p>\n<p>现在，通过设置数据集大小来对一个有16M个元素的大向量进行测试：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">24</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>由于GPU的可扩展性，你需要借助块和线程的索引来计算一个按行优先的数组索引 i ，并对核函数进行修改，添加限定条件（i &lt; N）来检验索引值是否越界，如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__global__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumArraysOnGPU</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> N)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;<br>    <span class=\"hljs-keyword\">if</span>( n &lt; N) C[i] = A[i] + B[i];<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>有了这些更改，可以使用不同的执行配置来衡量核函数。为了解决创建的线程总数大于向量元素总数的情况，你需要限制内核不能非法访问全局内存，如图2-7所示。</p>\n<p><img src=\"/2023/03/07/CUDA012/image-20230307120643741.png\" alt=\"image-20230307120643741\"></p>\n<p>代码清单2-5展示了如何在主函数中用CPU计时器测试向量加法的核函数。</p>\n<p>代码清单2-5\t测试向量加法的核函数（sumArraysOnGPU-timer.cu）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cuda_runtime.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/time.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> **argv)</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s Starting...\\n&quot;</span>,argv[<span class=\"hljs-number\">0</span>]);<br>    <br>    <span class=\"hljs-comment\">//set up device</span><br>    <span class=\"hljs-keyword\">int</span> dev = <span class=\"hljs-number\">0</span>;<br>    cudaDeviceProp deviceProp;<br>    <span class=\"hljs-built_in\">CHECK</span>(<span class=\"hljs-built_in\">cudaGetDeviceProperties</span>(&amp;deviceProp, dev));<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Using Device %d: %s\\n&quot;</span>, dev, deviceProp.name);<br>    <span class=\"hljs-built_in\">CHECK</span>(<span class=\"hljs-built_in\">cudaSetDevice</span>(dev));<br>    <br>    <span class=\"hljs-comment\">//set up data size of vectors</span><br>    <span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">24</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Vector size %d\\n&quot;</span>,nElem);<br>    <br>    <span class=\"hljs-comment\">//malloc host memory</span><br>    <span class=\"hljs-keyword\">size_t</span> nBytes = nElem * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>);<br>    <br>    <span class=\"hljs-keyword\">float</span> *h_A, *h_B, *hostRef, *gpuRef;<br>    h_A = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    h_B = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    hostRef = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    gpuRef = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    <br>    <span class=\"hljs-keyword\">double</span> iStart,iElaps;<br>    <br>    <span class=\"hljs-comment\">//initialize data at host side</span><br>    iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    <span class=\"hljs-built_in\">initialData</span>(h_A, nElem);<br>    <span class=\"hljs-built_in\">initialData</span>(h_B, nElem);<br>    iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <br>    <span class=\"hljs-built_in\">memset</span>(hostRef, <span class=\"hljs-number\">0</span> ,nBytes);<br>    <span class=\"hljs-built_in\">memset</span>(gpuRef, <span class=\"hljs-number\">0</span> ,nBytes);<br>    <br>    <span class=\"hljs-comment\">//add vector at host side for result checks</span><br>    iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    <span class=\"hljs-built_in\">sumArraysOnHost</span>(h_A, h_B, hostRef, nElem);<br>    iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <br>    <span class=\"hljs-comment\">//malloc device global memory</span><br>    <span class=\"hljs-keyword\">float</span> *d_A, *d_B, *d_C;<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_A, nBytes);<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_B, nBytes);<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_C, nBytes);<br>    <br>    <span class=\"hljs-comment\">//transfer data from host to device</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_A, h_A, nBytes, cudaMemcpyHostTodevice);<br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_B, h_B, nBytes, cudaMemcpyHostTodevice);<br>    <br>    <span class=\"hljs-comment\">//invoke kernel at host side</span><br>    <span class=\"hljs-keyword\">int</span> iLen = <span class=\"hljs-number\">1024</span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(iLen)</span></span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">((nElem+block.x<span class=\"hljs-number\">-1</span>))</span>/block.x)</span>;<br>    <br>    iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    sumArraysOnGPU&lt;&lt;&lt;grid,block&gt;&gt;&gt;(d_A, d_B, d_C,nElem);<br>    <span class=\"hljs-built_in\">cudaDeviceSynchronize</span>();<br>    iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;sumArraysOnGPU&lt;&lt;&lt;%d,%d&gt;&gt;&gt; Time elapsed %f sec\\n&quot;</span>,grid.x, block.x, iElaps);<br>    <br>    <span class=\"hljs-comment\">//copy kernel result back to host side</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost);<br>    <br>    <span class=\"hljs-comment\">//check device results</span><br>    <span class=\"hljs-built_in\">checkResult</span>(hostRef, gpuRef, nElem);<br>    <br>    <span class=\"hljs-comment\">//free device global memory</span><br>    <span class=\"hljs-built_in\">cudaFree</span>(d_A);<br>    <span class=\"hljs-built_in\">cudaFree</span>(d_B);<br>    <span class=\"hljs-built_in\">cudaFree</span>(d_C);<br>    <br>    <span class=\"hljs-comment\">//free host memory</span><br>    <span class=\"hljs-built_in\">free</span>(h_A);<br>    <span class=\"hljs-built_in\">free</span>(h_B);<br>    <span class=\"hljs-built_in\">free</span>(hostRef);<br>    <span class=\"hljs-built_in\">free</span>(gpuRef);<br>    <br>    <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>默认的执行配置被设置为一个包含16384个块的一维网格，每个块包含1024个线程。用以下命令编译并运行程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc sumArraysOnGPU-timer.cu -o sumArraysOnGPU-timer<br>./sumArraysOnGPU-timer<br></code></pre></div></td></tr></table></figure>\n\n<p>在基于英特尔Sandy Bridge架构的系统上进行测试，从代码清单2-5的示例中可以看出，在GPU上进行的向量加法的运算速度是在CPU上运行向量加法的3.86倍。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">./sumArraysOnGPU-timer Starting...<br>Using Device 0:Tesia M2070<br>Vector size 16777216<br>sumArraysOnGPU&lt;&lt;&lt;16384, 1024&gt;&gt;&gt;\t\tTime elapsed 0.002456 sec<br>Arrays match.<br></code></pre></div></td></tr></table></figure>\n\n<p>把块的维度减少到512可以创建32768个块。在这个新的配置下，内核的性能提升了1.19倍。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sumArraysOnGPU&lt;&lt;&lt;32768, 512&gt;&gt;&gt;\tTime elapsed 0.002058 sec<br></code></pre></div></td></tr></table></figure>\n\n<p>如果进一步将块的维度降低到256，系统将提示以下错误信息，信息表示块的总数超过一维网格的限制。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">./sumArraysOnGPU-timer Starting...<br>Using Device 0:\tTesla M2070<br>Vector size 16777216<br>sumArraysOnGPU&lt;&lt;&lt;65536, 256&gt;&gt;&gt;  Time elapsed 0.000183 sec<br>Error: sumArraysOnGPU-timer.cu:153, code:9, reason: invalid configuration argument<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"了解自身局限性\"><a href=\"#了解自身局限性\" class=\"headerlink\" title=\"了解自身局限性\"></a>了解自身局限性</h3><p>在调整执行配置时需要了解的一个关键点是对网格和块维度的限制。线程层次结构中每个层次的最大尺寸取决于设备。</p>\n<p>CUDA提供了通过查询GPU来了解这些限制的能力。</p>\n<p>对于Fermi设备，每个块的最大线程数是1024，且网格的x,y,z三个方向上的维度最大值是65535</p>\n<h3 id=\"用nvprof工具计时\"><a href=\"#用nvprof工具计时\" class=\"headerlink\" title=\"用nvprof工具计时\"></a>用nvprof工具计时</h3><p>自CUDA 5.0以来，NVIDIA提供了一个名为nvprof的命令行分析工具，可以帮助从应用程序的CPU和GPU活动情况中获取时间线信息，其包括内核执行，内存传输以及CUDA API的调用。其用法如下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvprof [nvprof_args] &lt;application&gt;  [application_args]<br></code></pre></div></td></tr></table></figure>\n\n<p>可以使用以下命令获取更多关于nvprof的帮助信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvprof --help<br></code></pre></div></td></tr></table></figure>\n\n<p>你可以用如下命令去测试内核：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvprof  ./sumArraysOnGPU-timer<br></code></pre></div></td></tr></table></figure>\n\n<p>nvprof的输出结果会因为你使用的GPU类型不同而有所差异。以下结果是从Tesla GPU中得到的：</p>\n<p><img src=\"/2023/03/07/CUDA012/image-20230307142027522.png\" alt=\"image-20230307142027522\"></p>\n<p>以上结果的前半部分来自于程序的输出，后半部分来自于nvprof的输出。可以注意到，CPU计时器显示消耗的内核时间为3.26ms，而nvprof显示消耗的内核时间为2.90ms。在这个例子中，nvprof的结果更为精确，因为CPU计时器测量的时间中包含了来自nvprof附加的时间。</p>\n<p>nvprof是一个能帮助你理解在执行应用程序时所花费的时间主要用在何处的强大工具。可以注意到，在这个例子中，主机和设备之间的数据传输需要的时间比内核执行的时间要多。图2-8所描绘的时间线（未按比例绘制），显示了在CPU上消耗的时间，数据传输所用的时间以及在GPU上计算所用的时间。</p>\n<p><img src=\"/2023/03/07/CUDA012/image-20230307145539161.png\" alt=\"image-20230307145539161\"></p>\n<p>对于HPC工作负载，理解程序中通信比的计算是非常重要的。如果你的应用程序用于计算的时间大于数据传输所用的时间，那么或许可以压缩这些操作，并完全隐藏与传输数据有关的延迟。如果你的应用程序用于计算的时间少于数据传输所用的时间，那么需要尽量减少主机和设备之间的传输。</p>\n<h3 id=\"比较应用程序的性能将理论界限最大化\"><a href=\"#比较应用程序的性能将理论界限最大化\" class=\"headerlink\" title=\"比较应用程序的性能将理论界限最大化\"></a>比较应用程序的性能将理论界限最大化</h3><p>在进行程序优化时，如何将应用程序和理论界限进行比较是很重要的。由nvprof得到的计数器可以帮助你获取应用程序的指令和内存吞吐量。如果将应用程序的测量值与理论峰值进行比较，可以判定你的应用程序的性能是受限于算法还是受限于内存带宽的。以Tesla K10为例，可以得到理论上的比率：</p>\n<p>Tesla K10单精度峰值浮点运算次数</p>\n<p>745 MHz核心频率*2 GPU&#x2F;芯片*  （8个多处理器<em>192个浮点单元</em>32核心&#x2F;多处理器）*2OPS&#x2F;周期 &#x3D; 4.58 TFLOPS （FLOPS表示每秒浮点运算次数）</p>\n<p>Tesla K10内存带宽峰值</p>\n<p>2 GPU&#x2F;芯片<em>256位</em>2500 MHz内存时钟*2 DDR&#x2F;8位&#x2F;字节 &#x3D; 320 GB&#x2F;s</p>\n<p>指令比：字节</p>\n<p>4.58 TFLOPS&#x2F;320 GB&#x2F;s,\t也就是13.6个指令：1个字节</p>\n<p>对于Tesla K10而言，如果你的应用程序每访问一个字节所产生的指令数多于13.6，那么你的应用程序受算法性能限制。大多数HPC工作负载受内存带宽的限制。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        }
    ]
}