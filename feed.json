{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/07/30/greyson001/",
            "url": "https://xingyuanjie.top/2023/07/30/greyson001/",
            "title": "Greyson Chance 2023 Beijing",
            "date_published": "2023-07-30T07:03:23.000Z",
            "content_html": "<h2 id=\"Greyson-Chance-2023-Beijing\"><a href=\"#Greyson-Chance-2023-Beijing\" class=\"headerlink\" title=\"Greyson Chance 2023 Beijing\"></a><strong>Greyson Chance 2023 Beijing</strong></h2><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>记得最早开始听，应该是在初中，从最初的No Fear到后来的最爱的Seasons。他19年来中国我是完全不知道，都是大学开班会，同学看到我头像加了我，我才知道，这次也是在她朋友圈看到了消息，哈哈哈哈，respect！这次终于赶上了！</p>\n<p>哈哈哈哈哈哈，这次认识了好多新朋友，大家都好nice，白玫瑰小队下次又见！我甚至连之前一直在B站看的Seasons杭州场的MV的up都认识了，属于说非常巧了。</p>\n<p>现场真的好震撼，导致我回去久久不能平复，GC真的行走的CD哈哈哈。我给他说能不能唱Seasons，他说抱歉，希望你能享受今晚。上大学后我其实很少关注GC了，但是Seasons总会在一年的那么些日子里单曲循环，新专辑更是听都没听过，4月后我就开始慢慢听着新专辑的歌，期待现场见了哈哈！</p>\n<p>结束后我又想了想，初中，高中，大学，疫情，好像时间真的过得很快，转眼间我都毕业了。这次我真的感到好像当年自己青春的遗憾慢慢画上一个感叹号了！</p>\n<p>愿我一直No Fear，</p>\n<p>Move forword like the seasons！</p>\n<h3 id=\"全场视频\"><a href=\"#全场视频\" class=\"headerlink\" title=\"全场视频\"></a>全场视频</h3><p><a href=\"https://www.aliyundrive.com/s/ZCaugLSs8TJ\">https://www.aliyundrive.com/s/ZCaugLSs8TJ</a></p>\n",
            "tags": [
                "Music"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/07/28/life001/",
            "url": "https://xingyuanjie.top/2023/07/28/life001/",
            "title": "重启Life分类-Seasons",
            "date_published": "2023-07-27T16:06:04.000Z",
            "content_html": "<h2 id=\"重启Life分类-Seasons\"><a href=\"#重启Life分类-Seasons\" class=\"headerlink\" title=\"重启Life分类-Seasons\"></a>重启Life分类-Seasons</h2><p>在听完GC北京场后，感触颇深，再次启动Life分类还是有必要哈哈哈！</p>\n<p>今天写这篇博客好像也脱了很久。</p>\n<p>【上次因为糟糕的排版删除了23年的厦门篇，Sorry，后期会补上】</p>\n<p>同时恭喜队伍成功进入CPC2023决赛，这波是青岛见了，哈哈哈！手动撒花！</p>\n<p>我发现有些瞬间还是必须照片或者文字记下来，不然后面真的会忘记。</p>\n<p>立个FLAG今年在Life分类更新完23年的旅行以及这次的GC北京场。</p>\n<p>后续的计划大概是，博客里面写文字内容，同时贴上云盘的视频和照片。因为这样就可以避免糟糕的排版了，主要还是对前端不太熟。</p>\n",
            "tags": [
                "Seasons"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/07/15/gemm0011/",
            "url": "https://xingyuanjie.top/2023/07/15/gemm0011/",
            "title": "SUMMA：Scalable Universal Matrix Multiplication Algorithm[未更新]",
            "date_published": "2023-07-15T02:02:32.000Z",
            "content_html": "<h2 id=\"论文阅读：SUMMA：Scalable-Universal-Matrix-Multiplication-Algorithm\"><a href=\"#论文阅读：SUMMA：Scalable-Universal-Matrix-Multiplication-Algorithm\" class=\"headerlink\" title=\"论文阅读：SUMMA：Scalable Universal Matrix Multiplication Algorithm\"></a>论文阅读：SUMMA：Scalable Universal Matrix Multiplication Algorithm</h2><h2 id=\"论文链接\"><a href=\"#论文链接\" class=\"headerlink\" title=\"论文链接\"></a>论文链接</h2><p><a href=\"https://dl.acm.org/doi/book/10.5555/899248\">SUMMA: Scalable Universal Matrix Multiplication Algorithm | Guide books (acm.org)</a></p>\n<h2 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h2>",
            "tags": [
                "blas",
                "gemm",
                "SUMMA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/07/11/gemm0010/",
            "url": "https://xingyuanjie.top/2023/07/11/gemm0010/",
            "title": "论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures",
            "date_published": "2023-07-11T13:47:35.000Z",
            "content_html": "<h2 id=\"论文阅读：Towards-Efficient-SpMV-on-Sunway-Manycore-Architectures\"><a href=\"#论文阅读：Towards-Efficient-SpMV-on-Sunway-Manycore-Architectures\" class=\"headerlink\" title=\"论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures\"></a>论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures</h2><h2 id=\"文章链接：\"><a href=\"#文章链接：\" class=\"headerlink\" title=\"文章链接：\"></a>文章链接：</h2><p><a href=\"https://dl.acm.org/doi/pdf/10.1145/3205289.3205313?accessTab=true\">Towards Efficient SpMV on Sunway Manycore Architectures | Proceedings of the 2018 International Conference on Supercomputing (acm.org)</a></p>\n<h2 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h2><h3 id=\"dual-side-multi-level-partitioning-technique\"><a href=\"#dual-side-multi-level-partitioning-technique\" class=\"headerlink\" title=\"dual-side multi-level partitioning technique\"></a>dual-side multi-level partitioning technique</h3><p>三层分块：Block-&gt;Tile-&gt;Slice</p>\n<p>其中在Tile这一层会有空Tile块，不需要计算</p>\n<p>其中Slice这一层也会有空Slice切片，不需要计算</p>\n<p>最底层Slice切片是我们的计算核心</p>\n<p>多级队列：负载均衡—&gt;The work sharing mechanism in the block and slice queuesguarantee the workload balance across fleets and cores.</p>\n<p><img src=\"/2023/07/11/gemm0010/image-20230711215435026.png\" alt=\"image-20230711215435026\"></p>\n<p><strong>映射细节：</strong></p>\n<p><img src=\"/2023/07/11/gemm0010/image-20230711220304175.png\" alt=\"image-20230711220304175\"></p>\n<h3 id=\"计算核心处理逻辑\"><a href=\"#计算核心处理逻辑\" class=\"headerlink\" title=\"计算核心处理逻辑\"></a>计算核心处理逻辑</h3><p>一行8个核心：7个计算核心，1个I&#x2F;O核心</p>\n<p>计算核心负责SPMV计算</p>\n<p>I&#x2F;O核心负责将结果写回内存</p>\n<p>多个slice组合—&gt;batch，方便DMA，并进行数据预取(单位batch)，注意计算核心slice依然没有改变</p>\n<p>利用向量寄存器，巧妙搭载msg</p>\n<p><img src=\"/2023/07/11/gemm0010/image-20230711221015472.png\" alt=\"image-20230711221015472\"></p>\n<h3 id=\"I-x2F-O核心的处理逻辑\"><a href=\"#I-x2F-O核心的处理逻辑\" class=\"headerlink\" title=\"I&#x2F;O核心的处理逻辑\"></a>I&#x2F;O核心的处理逻辑</h3><p>整个block计算完才写回，避免反复访存</p>\n<p>向量计算器meg-&gt;reduce</p>\n<p><strong>利用神威RMA</strong></p>\n",
            "tags": [
                "blas",
                "spmv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/07/03/gemm0009/",
            "url": "https://xingyuanjie.top/2023/07/03/gemm0009/",
            "title": "论文阅读：稀疏矩阵向量乘法在申威众核架构上的性能优化",
            "date_published": "2023-07-03T13:56:03.000Z",
            "content_html": "<h2 id=\"稀疏矩阵向量乘法在申威众核架构上的性能优化\"><a href=\"#稀疏矩阵向量乘法在申威众核架构上的性能优化\" class=\"headerlink\" title=\"稀疏矩阵向量乘法在申威众核架构上的性能优化\"></a>稀疏矩阵向量乘法在申威众核架构上的性能优化</h2><h2 id=\"文章链接：\"><a href=\"#文章链接：\" class=\"headerlink\" title=\"文章链接：\"></a>文章链接：</h2><p><a href=\"https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C44YLTlOAiTRKibYlV5Vjs7i8oRR1PAr7RxjuAJk4dHXos_BuYfGFXVp2oi-VeHUWWPMdimPFvuCr6UTXzh1QasE&uniplatform=NZKPT\">稀疏矩阵向量乘法在申威众核架构上的性能优化 - 中国知网 (cnki.net)</a></p>\n<h2 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h2><h3 id=\"固定划分方法\"><a href=\"#固定划分方法\" class=\"headerlink\" title=\"固定划分方法\"></a>固定划分方法</h3><ol>\n<li>所有计算完再写回</li>\n<li>子矩阵(任务)-&gt;子矩阵小块(核心计算)</li>\n<li>将子矩阵小块中的非零元存储在一起，以适应申威处理器上的DMA操作。(Packing)</li>\n<li>核心：寄存器通信-&gt;RMA</li>\n<li>根据LDM大小提前计算，充分利用LDM空间，换句话说就是保证计算所需都在LDM中</li>\n<li>加载冗余X，避免DMA隔断</li>\n</ol>\n<h3 id=\"一维负载均衡划分方法\"><a href=\"#一维负载均衡划分方法\" class=\"headerlink\" title=\"一维负载均衡划分方法\"></a>一维负载均衡划分方法</h3><ol>\n<li>尽量使从核处理非零元数量相当</li>\n<li>4个层次：原矩阵-&gt;矩阵带-&gt;子矩阵-&gt;小块</li>\n<li>交替分配矩阵带给从核行</li>\n<li>核心计算依然是子矩阵小块，同固定划分方法</li>\n</ol>\n<h3 id=\"二维负载均衡划分方法\"><a href=\"#二维负载均衡划分方法\" class=\"headerlink\" title=\"二维负载均衡划分方法\"></a>二维负载均衡划分方法</h3><ol>\n<li>矩阵带分配采取贪心的方法，尽可能保证不同行之间的负载均衡</li>\n<li>解决一维负载均衡方法带来的细粒度同步问题</li>\n<li>非零元过少的矩阵带，交给一个从核完成，而不再均分给同行上的几个从核</li>\n<li>一维和二维主要解决预处理，计算还是固定划分中的子矩阵小块</li>\n<li>排序-&gt;根据矩阵带非零元数量从大到小排序(逻辑排序)</li>\n<li>Select函数会在所有ROWS行的从核中，选择出目前非零元数量最少的一行，并将当前的矩阵带i分配给它</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">输入：tiles,nnz_tile，ROWS<br>输出：set<br>nnz_set&lt;<span class=\"hljs-number\">-0</span><br><span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">0</span> to tiles - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span><br>    Select id <span class=\"hljs-keyword\">if</span> nnz_set[id] is minimal   <span class=\"hljs-comment\">//注意：这里是选从核行，不是矩阵带</span><br>    nnz_set[id] += nnz_tiles[i]<br>    set[id] =  set[id]U&#123;i&#125;   <span class=\"hljs-comment\">//任务分配</span><br>end <span class=\"hljs-keyword\">for</span> <br></code></pre></div></td></tr></table></figure>\n\n<p>这里注意，我们在固定划分那里解决了数据局部性差等问题，之后的一二维划分，都是在做任务分配，核心计算子矩阵小块一直未改变</p>\n",
            "tags": [
                "blas",
                "spmv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/09/gemm0008/",
            "url": "https://xingyuanjie.top/2023/06/09/gemm0008/",
            "title": "论文阅读：面向国产申威 26010 众核处理器的 SpMV 实现与优化",
            "date_published": "2023-06-08T16:20:37.000Z",
            "content_html": "<h2 id=\"面向国产申威-26010-众核处理器的-SpMV-实现与优化\"><a href=\"#面向国产申威-26010-众核处理器的-SpMV-实现与优化\" class=\"headerlink\" title=\"面向国产申威 26010 众核处理器的 SpMV 实现与优化\"></a>面向国产申威 26010 众核处理器的 SpMV 实现与优化</h2><h2 id=\"文章链接：\"><a href=\"#文章链接：\" class=\"headerlink\" title=\"文章链接：\"></a>文章链接：</h2><p><a href=\"https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C44YLTlOAiTRKibYlV5Vjs7iLik5jEcCI09uHa3oBxtWoDjpNvZMhBwTwYhU5_aacU5_o2Scyx5dsHMxE0wqndQa&uniplatform=NZKPT\">面向国产申威26010众核处理器的SpMV实现与优化 - 中国知网 (cnki.net)</a></p>\n<h2 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h2><p>存储格式：CSR</p>\n<p>数据名称定义：</p>\n<ul>\n<li>col:非零元的列号</li>\n<li>data:非零元数值，连续存放</li>\n<li>row_off:x数组，每行第一个元素前面的非零元素，最后一个rowoff代表总的非零元素</li>\n<li>vec:计算向量</li>\n<li>y:结果向量</li>\n<li>rows:行号</li>\n<li>srow:为当前申威处理器一个从核的 LDM 可以容纳的最多稀疏行大小</li>\n</ul>\n<h3 id=\"X动静态buffer\"><a href=\"#X动静态buffer\" class=\"headerlink\" title=\"X动静态buffer\"></a>X动静态buffer</h3><p>x静态buffer，初始化后一直不改变。(论文中有两种初始化方法)</p>\n<p>x动态buffer，未命中，则用dma更新x动态buffer</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//slave.c</span><br>LDM-&gt;malloc   x_sbuffer   <span class=\"hljs-comment\">//x静态buffer</span><br>LDM-&gt;malloc   x_dbuffer   <span class=\"hljs-comment\">//x动态buffer</span><br>sstart,send,dstart,<span class=\"hljs-function\">dend</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">dma</span><span class=\"hljs-params\">(vec-&gt;x_sbuffer,sstart,send)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">dma</span><span class=\"hljs-params\">(vec-&gt;x_dbuffer,dstart,dend)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> srow</span><br><span class=\"hljs-function\">    <span class=\"hljs-keyword\">for</span> row</span><br><span class=\"hljs-function\">        <span class=\"hljs-title\">if</span><span class=\"hljs-params\">(in x_sbuffer)</span></span><br><span class=\"hljs-function\">            cal</span><br><span class=\"hljs-function\">        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title\">if</span><span class=\"hljs-params\">(in x_dbuffer)</span></span><br><span class=\"hljs-function\">            cal</span><br><span class=\"hljs-function\">        <span class=\"hljs-keyword\">else</span></span><br><span class=\"hljs-function\">            <span class=\"hljs-title\">update_dma</span><span class=\"hljs-params\">(vec-&gt;x_dbuffer,dstart,dend)</span></span><br><span class=\"hljs-function\">            cal</span><br><span class=\"hljs-function\">     store</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>动静态划分</p>\n<p>第一轮静态：每个从核分配相同的任务量即srow</p>\n<p>后续采用动态：哪个从核先计算完，就先从任务池里面拿新的任务</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//slave.c</span><br>eg:<span class=\"hljs-number\">64</span>个从核<br>task_num <span class=\"hljs-comment\">//任务数</span><br>now_addr <span class=\"hljs-comment\">//当前任务计算到哪里了</span><br><span class=\"hljs-comment\">//第一轮  每个从核执行相同的任务量即srow</span><br>    <br>cal srow<br><br><span class=\"hljs-comment\">//其余任务保存到任务池，用锁保护，实现互斥操作</span><br><br><span class=\"hljs-comment\">//任务池，当task_num为0时计算完毕</span><br>mutex = <span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">P</span>(mutex)<br><span class=\"hljs-comment\">//互斥区</span><br>task_num<br>now_addr<br><span class=\"hljs-built_in\">V</span>(mutex)<br><span class=\"hljs-comment\">//取now_addr</span><br>cal  srow<br><span class=\"hljs-comment\">//随后 继续loop，直到task_num为0</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "spmv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0007/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0007/",
            "title": "Packing into contiguous memory",
            "date_published": "2023-06-07T05:47:39.000Z",
            "content_html": "<h2 id=\"Packing-into-contiguous-memory\"><a href=\"#Packing-into-contiguous-memory\" class=\"headerlink\" title=\"Packing into contiguous memory\"></a>Packing into contiguous memory</h2><ul>\n<li>首先，我们打包A块，这样我们就可以连续地穿过它(march through it)。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_12\">Optimization_4x4_12 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_13\">Optimization_4x4_13 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>这将带来惊人的性能提升:</p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult0_MMult-4x4-13.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult-4x4-11_MMult-4x4-13.png\" alt=\"img\"></p>\n<ul>\n<li>最后，我们打包B块，以便连续地遍历它。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14\">https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14\">Optimization_4x4_14 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>我们现在达到了处理器90%的涡轮增压峰值!</p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult0_MMult-4x4-15.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0007/compare_MMult-4x4-13_MMult-4x4-15.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-4x4-12\"><a href=\"#Optimization-4x4-12\" class=\"headerlink\" title=\"Optimization_4x4_12\"></a>Optimization_4x4_12</h2><p>在调用AddDot4x4之前，我们现在打包到4xk的A块。我们看到性能下降。如果检查内部内核，就会注意到每个4xk的A块都被重复打包，每次执行外部循环一次。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-keyword\">double</span> <br>    packedA[ m * k ];<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>      <span class=\"hljs-built_in\">PackMatrixA</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i, <span class=\"hljs-number\">0</span> ), lda, &amp;packedA[ i*k ] );<br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;packedA[ i*k ], <span class=\"hljs-number\">4</span>, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *a_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> j;<br><br>  <span class=\"hljs-keyword\">for</span>( j=<span class=\"hljs-number\">0</span>; j&lt;k; j++)&#123;  <span class=\"hljs-comment\">/* loop over columns of A */</span><br>    <span class=\"hljs-keyword\">double</span> <br>      *a_ij_pntr = &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, j );<br><br>    *a_to++ = *a_ij_pntr;<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">1</span>);<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">2</span>);<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">3</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) );<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-13\"><a href=\"#Optimization-4x4-13\" class=\"headerlink\" title=\"Optimization_4x4_13\"></a>Optimization_4x4_13</h2><p>这个版本保存了A的打包块，以便在InnerKernel的外部循环的第一次迭代之后，使用保存的版本。性能的提升是显而易见的!与上一个版本相比，唯一的变化是增加了if (j&#x3D;&#x3D; 0)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs C++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-keyword\">double</span> <br>    packedA[ m * k ];<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>      <span class=\"hljs-keyword\">if</span> ( j == <span class=\"hljs-number\">0</span> ) <span class=\"hljs-built_in\">PackMatrixA</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i, <span class=\"hljs-number\">0</span> ), lda, &amp;packedA[ i*k ] );<br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;packedA[ i*k ], <span class=\"hljs-number\">4</span>, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *a_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> j;<br><br>  <span class=\"hljs-keyword\">for</span>( j=<span class=\"hljs-number\">0</span>; j&lt;k; j++)&#123;  <span class=\"hljs-comment\">/* loop over columns of A */</span><br>    <span class=\"hljs-keyword\">double</span> <br>      *a_ij_pntr = &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, j );<br><br>    *a_to++ = *a_ij_pntr;<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">1</span>);<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">2</span>);<br>    *a_to++ = *(a_ij_pntr+<span class=\"hljs-number\">3</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) a );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) ( a+<span class=\"hljs-number\">2</span> ) );<br>    a += <span class=\"hljs-number\">4</span>;<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-14\"><a href=\"#Optimization-4x4-14\" class=\"headerlink\" title=\"Optimization_4x4_14\"></a>Optimization_4x4_14</h2><p>我们现在打包b的kx4块，注意，在这个版本中，面板是重复打包的，这会对性能产生不利影响。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixB</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc, i==<span class=\"hljs-number\">0</span> );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc, <span class=\"hljs-keyword\">int</span> first_time )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-keyword\">double</span> <br>    packedA[ m * k ], packedB[ k*n ];<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-built_in\">PackMatrixB</span>( k, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, j ), ldb, &amp;packedB[ j*k ] );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>      <span class=\"hljs-keyword\">if</span> ( j == <span class=\"hljs-number\">0</span> ) <br>\t<span class=\"hljs-built_in\">PackMatrixA</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i, <span class=\"hljs-number\">0</span> ), lda, &amp;packedA[ i*k ] );<br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;packedA[ i*k ], <span class=\"hljs-number\">4</span>, &amp;packedB[ j*k ], k, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *a_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> j;<br><br>  <span class=\"hljs-keyword\">for</span>( j=<span class=\"hljs-number\">0</span>; j&lt;k; j++)&#123;  <span class=\"hljs-comment\">/* loop over columns of A */</span><br>    <span class=\"hljs-keyword\">double</span> <br>      *a_ij_pntr = &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, j );<br><br>    *a_to     = *a_ij_pntr;<br>    *(a_to+<span class=\"hljs-number\">1</span>) = *(a_ij_pntr+<span class=\"hljs-number\">1</span>);<br>    *(a_to+<span class=\"hljs-number\">2</span>) = *(a_ij_pntr+<span class=\"hljs-number\">2</span>);<br>    *(a_to+<span class=\"hljs-number\">3</span>) = *(a_ij_pntr+<span class=\"hljs-number\">3</span>);<br><br>    a_to += <span class=\"hljs-number\">4</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixB</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *b_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i;<br>  <span class=\"hljs-keyword\">double</span> <br>    *b_i0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), *b_i1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ),<br>    *b_i2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), *b_i3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  <span class=\"hljs-keyword\">for</span>( i=<span class=\"hljs-number\">0</span>; i&lt;k; i++)&#123;  <span class=\"hljs-comment\">/* loop over rows of B */</span><br>    *b_to++ = *b_i0_pntr++;<br>    *b_to++ = *b_i1_pntr++;<br>    *b_to++ = *b_i2_pntr++;<br>    *b_to++ = *b_i3_pntr++;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) a );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) ( a+<span class=\"hljs-number\">2</span> ) );<br>    a += <span class=\"hljs-number\">4</span>;<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b );       <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">1</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">2</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">3</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    b += <span class=\"hljs-number\">4</span>;<br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-15\"><a href=\"#Optimization-4x4-15\" class=\"headerlink\" title=\"Optimization_4x4_15\"></a>Optimization_4x4_15</h2><p>并且，我们再次添加了一些代码，这样我们就可以避免重新打包b的kx4块。现在性能令人印象深刻!</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> nb 1000</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixB</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc, i==<span class=\"hljs-number\">0</span> );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc, <span class=\"hljs-keyword\">int</span> first_time )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-keyword\">double</span> <br>    packedA[ m * k ];<br>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">double</span> <br>    packedB[ kc*nb ];    <span class=\"hljs-comment\">/* Note: using a static buffer is not thread safe... */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">if</span> ( first_time )<br>      <span class=\"hljs-built_in\">PackMatrixB</span>( k, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, j ), ldb, &amp;packedB[ j*k ] );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>      <span class=\"hljs-keyword\">if</span> ( j == <span class=\"hljs-number\">0</span> ) <br>\t<span class=\"hljs-built_in\">PackMatrixA</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i, <span class=\"hljs-number\">0</span> ), lda, &amp;packedA[ i*k ] );<br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;packedA[ i*k ], <span class=\"hljs-number\">4</span>, &amp;packedB[ j*k ], k, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixA</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *a_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> j;<br><br>  <span class=\"hljs-keyword\">for</span>( j=<span class=\"hljs-number\">0</span>; j&lt;k; j++)&#123;  <span class=\"hljs-comment\">/* loop over columns of A */</span><br>    <span class=\"hljs-keyword\">double</span> <br>      *a_ij_pntr = &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, j );<br><br>    *a_to     = *a_ij_pntr;<br>    *(a_to+<span class=\"hljs-number\">1</span>) = *(a_ij_pntr+<span class=\"hljs-number\">1</span>);<br>    *(a_to+<span class=\"hljs-number\">2</span>) = *(a_ij_pntr+<span class=\"hljs-number\">2</span>);<br>    *(a_to+<span class=\"hljs-number\">3</span>) = *(a_ij_pntr+<span class=\"hljs-number\">3</span>);<br><br>    a_to += <span class=\"hljs-number\">4</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PackMatrixB</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *b_to )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i;<br>  <span class=\"hljs-keyword\">double</span> <br>    *b_i0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), *b_i1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ),<br>    *b_i2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), *b_i3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  <span class=\"hljs-keyword\">for</span>( i=<span class=\"hljs-number\">0</span>; i&lt;k; i++)&#123;  <span class=\"hljs-comment\">/* loop over rows of B */</span><br>    *b_to++ = *b_i0_pntr++;<br>    *b_to++ = *b_i1_pntr++;<br>    *b_to++ = *b_i2_pntr++;<br>    *b_to++ = *b_i3_pntr++;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) a );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) ( a+<span class=\"hljs-number\">2</span> ) );<br>    a += <span class=\"hljs-number\">4</span>;<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b );       <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">1</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">2</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) (b+<span class=\"hljs-number\">3</span>) );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    b += <span class=\"hljs-number\">4</span>;<br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0006/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0006/",
            "title": "Blocking to maintain performance",
            "date_published": "2023-06-07T05:41:06.000Z",
            "content_html": "<h2 id=\"Blocking-to-maintain-performance\"><a href=\"#Blocking-to-maintain-performance\" class=\"headerlink\" title=\"Blocking to maintain performance\"></a>Blocking to maintain performance</h2><ul>\n<li>为了保持较小问题规模的性能，我们分块矩阵C(以及相应的A和B):</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_11\">Optimization_4x4_11 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>现在，性能得到了保持:</p>\n<p><img src=\"/2023/06/07/gemm0006/compare_MMult0_MMult-4x4-11.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0006/compare_MMult-4x4-10_MMult-4x4-11.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-4x4-11\"><a href=\"#Optimization-4x4-11\" class=\"headerlink\" title=\"Optimization_4x4_11\"></a>Optimization_4x4_11</h2><p>我们注意到，对于迄今为止的所有优化，当涉及的矩阵比L2缓存所能容纳的矩阵大得多时，性能会大幅下降。在这个优化中，我们创建了一个额外的分块级别来克服这个问题。我们现在有一个主例程，它调用GotoBLAS和BLIS使用的内部内核，然后AddDot4x4例程是BLIS使用的微内核。</p>\n<p>这一步主要是为了分块，把原来的MY_MMult变成了InnerKernel，而现在的MY_MMult作用就是为了分块。分块大小通过宏定义给出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Block sizes */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> mc 256</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> kc 128</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> min( i, j ) ( (i)&lt;(j) ? (i): (j) )</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j, p, pb, ib;<br><br>  <span class=\"hljs-comment\">/* This time, we compute a mc x n block of C by a call to the InnerKernel */</span><br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=kc )&#123;<br>    pb = <span class=\"hljs-built_in\">min</span>( k-p, kc );<br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=mc )&#123;<br>      ib = <span class=\"hljs-built_in\">min</span>( m-i, mc );<br>      <span class=\"hljs-built_in\">InnerKernel</span>( ib, n, pb, &amp;<span class=\"hljs-built_in\">A</span>( i,p ), lda, &amp;<span class=\"hljs-built_in\">B</span>(p, <span class=\"hljs-number\">0</span> ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,<span class=\"hljs-number\">0</span> ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InnerKernel</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                       <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) );<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;<br>    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;<br>    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;<br>    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/06/07/gemm0005/",
            "url": "https://xingyuanjie.top/2023/06/07/gemm0005/",
            "title": "Further optimizing",
            "date_published": "2023-06-07T05:18:10.000Z",
            "content_html": "<h2 id=\"Further-optimizing\"><a href=\"#Further-optimizing\" class=\"headerlink\" title=\"Further optimizing\"></a>Further optimizing</h2><p>现在我们开始以不同的方式优化1x4的情况。</p>\n<ul>\n<li>我们在寄存器中存储一行k × 4矩阵B</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_8\">https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_8</a></li>\n</ul>\n<p>请注意，我们现在使用的常规寄存器比物理上可用的寄存器多得多……</p>\n<ul>\n<li>我们重新安排计算，以便一次计算两行4x4的C块。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_9\">Optimization_4x4_9 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用向量寄存器和向量运算。</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_10\">Optimization_4x4_10 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>We notice a considerable performance boost:</p>\n<p><img src=\"/2023/06/07/gemm0005/compare_MMult0_MMult-4x4-10.png\" alt=\"img\"></p>\n<p><img src=\"/2023/06/07/gemm0005/compare_MMult-1x4-9_MMult-4x4-10.png\" alt=\"img\"></p>\n<p>不过，还有很大的改进空间。</p>\n<h2 id=\"Optimization-4x4-8\"><a href=\"#Optimization-4x4-8\" class=\"headerlink\" title=\"Optimization_4x4_8\"></a>Optimization_4x4_8</h2><p>现在我们使用寄存器来存储B当前行的元素。(注意，对于一次计算C四个元素的情况，我们没有这样做。)性能实际上略有下降。但是这个步骤支持进一步的优化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use registers for elements in the current row</span><br><span class=\"hljs-comment\">     of B as well */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg,<br>       b_p0_reg,<br>       b_p1_reg,<br>       b_p2_reg,<br>       b_p3_reg;<br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    b_p0_reg = *b_p0_pntr++;<br>    b_p1_reg = *b_p1_pntr++;<br>    b_p2_reg = *b_p2_pntr++;<br>    b_p3_reg = *b_p3_pntr++;<br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * b_p0_reg;<br>    c_01_reg += a_0p_reg * b_p1_reg;<br>    c_02_reg += a_0p_reg * b_p2_reg;<br>    c_03_reg += a_0p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * b_p0_reg;<br>    c_11_reg += a_1p_reg * b_p1_reg;<br>    c_12_reg += a_1p_reg * b_p2_reg;<br>    c_13_reg += a_1p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * b_p0_reg;<br>    c_21_reg += a_2p_reg * b_p1_reg;<br>    c_22_reg += a_2p_reg * b_p2_reg;<br>    c_23_reg += a_2p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * b_p0_reg;<br>    c_31_reg += a_3p_reg * b_p1_reg;<br>    c_32_reg += a_3p_reg * b_p2_reg;<br>    c_33_reg += a_3p_reg * b_p3_reg;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-9\"><a href=\"#Optimization-4x4-9\" class=\"headerlink\" title=\"Optimization_4x4_9\"></a>Optimization_4x4_9</h2><p>从4x4_8到4x4_9是一个微妙的变化:我们不是一次一行地更新4x4块C的行，而是一次计算两行。这为我们使用向量操作做好了准备，我们用向量操作更新对C(0,j)和C(1,j) (j &#x3D;0，…，3)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     A simple rearrangement to prepare for the use of vector registers */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg,<br>       b_p0_reg,<br>       b_p1_reg,<br>       b_p2_reg,<br>       b_p3_reg;<br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    b_p0_reg = *b_p0_pntr++;<br>    b_p1_reg = *b_p1_pntr++;<br>    b_p2_reg = *b_p2_pntr++;<br>    b_p3_reg = *b_p3_pntr++;<br><br>    <span class=\"hljs-comment\">/* First row and second rows */</span><br>    c_00_reg += a_0p_reg * b_p0_reg;<br>    c_10_reg += a_1p_reg * b_p0_reg;<br><br>    c_01_reg += a_0p_reg * b_p1_reg;<br>    c_11_reg += a_1p_reg * b_p1_reg;<br><br>    c_02_reg += a_0p_reg * b_p2_reg;<br>    c_12_reg += a_1p_reg * b_p2_reg;<br><br>    c_03_reg += a_0p_reg * b_p3_reg;<br>    c_13_reg += a_1p_reg * b_p3_reg;<br><br>    <span class=\"hljs-comment\">/* Third and fourth rows */</span><br>    c_20_reg += a_2p_reg * b_p0_reg;<br>    c_30_reg += a_3p_reg * b_p0_reg;<br><br>    c_21_reg += a_2p_reg * b_p1_reg;<br>    c_31_reg += a_3p_reg * b_p1_reg;<br><br>    c_22_reg += a_2p_reg * b_p2_reg;<br>    c_32_reg += a_3p_reg * b_p2_reg;<br><br>    c_23_reg += a_2p_reg * b_p3_reg;<br>    c_33_reg += a_3p_reg * b_p3_reg;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-4x4-10\"><a href=\"#Optimization-4x4-10\" class=\"headerlink\" title=\"Optimization_4x4_10\"></a>Optimization_4x4_10</h2><p>在这里，我们开始使用向量寄存器和向量操作。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mmintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;xmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pmmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE2</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;emmintrin.h&gt;</span>  <span class=\"hljs-comment\">// SSE3</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span></span><br><span class=\"hljs-class\">&#123;</span><br>  __m128d v;<br>  <span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">2</span>];<br>&#125; <span class=\"hljs-keyword\">v2df_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     And now we use vector registers and instructions */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">v2df_t</span><br>    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,<br>    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,<br>    a_0p_a_1p_vreg,<br>    a_2p_a_3p_vreg,<br>    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; <br><br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br>    <br>  b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_c_10_vreg.v = _mm_setzero_pd();   <br>  c_01_c_11_vreg.v = _mm_setzero_pd();<br>  c_02_c_12_vreg.v = _mm_setzero_pd(); <br>  c_03_c_13_vreg.v = _mm_setzero_pd(); <br>  c_20_c_30_vreg.v = _mm_setzero_pd();   <br>  c_21_c_31_vreg.v = _mm_setzero_pd();  <br>  c_22_c_32_vreg.v = _mm_setzero_pd();   <br>  c_23_c_33_vreg.v = _mm_setzero_pd(); <br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_a_1p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) );<br>    a_2p_a_3p_vreg.v = _mm_load_pd( (<span class=\"hljs-keyword\">double</span> *) &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) );<br><br>    b_p0_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p0_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p1_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p1_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p2_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p2_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br>    b_p3_vreg.v = _mm_loaddup_pd( (<span class=\"hljs-keyword\">double</span> *) b_p3_pntr++ );   <span class=\"hljs-comment\">/* load and duplicate */</span><br><br>    <span class=\"hljs-comment\">/* First row and second rows *  向量化，一次计算两个double/</span><br><span class=\"hljs-comment\">    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;</span><br><span class=\"hljs-comment\">    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;</span><br><span class=\"hljs-comment\">    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;</span><br><span class=\"hljs-comment\">    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    /* Third and fourth rows */</span><br>    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;<br>    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;<br>    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;<br>    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_00_c_10_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_01_c_11_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_02_c_12_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_03_c_13_vreg.d[<span class=\"hljs-number\">1</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">0</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">0</span>]; <br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_20_c_30_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_21_c_31_vreg.d[<span class=\"hljs-number\">1</span>];  <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_22_c_32_vreg.d[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_23_c_33_vreg.d[<span class=\"hljs-number\">1</span>]; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/31/gemm0004/",
            "url": "https://xingyuanjie.top/2023/05/31/gemm0004/",
            "title": "Repeating the same optimizations",
            "date_published": "2023-05-31T07:16:29.000Z",
            "content_html": "<h2 id=\"Repeating-the-same-optimizations\"><a href=\"#Repeating-the-same-optimizations\" class=\"headerlink\" title=\"Repeating the same optimizations\"></a>Repeating the same optimizations</h2><ul>\n<li>我们在AddDot4x4子程序中一次计算4个C元素，该子程序一次执行16个乘积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_3\">Optimization_4x4_3 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>现在我们内联16个独立的内积，并将循环融合为一个，从而在一个循环中同时计算16个乘积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_4\">Optimization_4x4_4 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_5\">Optimization_4x4_5 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>在这一点上，我们再次开始看到一些性能改进:</p>\n<p><img src=\"/2023/05/31/gemm0004/compare_MMult0_MMult-4x4-5.png\" alt=\"img\"></p>\n<p><img src=\"/2023/05/31/gemm0004/compare_MMult-1x4-5_MMult-4x4-5.png\" alt=\"img\"></p>\n<ul>\n<li>我们将C的元素累加到寄存器中，并使用寄存器存储a的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_6\">Optimization_4x4_6 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用指针来定位B中的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_7\">Optimization_4x4_7 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<h1 id=\"Optimization-4x4-3\"><a href=\"#Optimization-4x4-3\" class=\"headerlink\" title=\"Optimization_4x4_3\"></a>Optimization_4x4_3</h1><p>对循环变量i进行展开。由原来AddDot1x4变为AddDot4x4，一次计算16个乘积。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C */</span> <br><br>  <span class=\"hljs-comment\">/* First row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Second row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Third row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) );<br><br>  <span class=\"hljs-comment\">/* Four row */</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) );<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-4\"><a href=\"#Optimization-4x4-4\" class=\"headerlink\" title=\"Optimization_4x4_4\"></a>Optimization_4x4_4</h1><p>把AddDot计算kernel合并到AddDot4x4里面。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we &quot;inline&quot; AddDot */</span> <br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-comment\">/* First row 第一行*/</span>   <br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Second row 第二行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 1, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 1, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 1, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 1, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 1, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Third row 第三行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 2, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 2, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 2, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 2, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 2, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">/* Four row 第四行*/</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 3, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 3, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 3, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 3, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 3, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-5\"><a href=\"#Optimization-4x4-5\" class=\"headerlink\" title=\"Optimization_4x4_5\"></a>Optimization_4x4_5</h1><p>合并16个for循环。</p>\n<p>现在，当矩阵变大时，我们看到了性能上的好处，因为数据在被放入寄存器后会得到更多的重用。</p>\n<p>以前是：1x4_5(一次计算C的4个元素)现在是：4x4_5(一次计算C的16个元素)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we merge each set of four loops, computing four</span><br><span class=\"hljs-comment\">     inner products simultaneously. */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-comment\">/* First row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Fourth row */</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-6\"><a href=\"#Optimization-4x4-6\" class=\"headerlink\" title=\"Optimization_4x4_6\"></a>Optimization_4x4_6</h1><p>矩阵C和A采用寄存器来存。</p>\n<p>我们为C的4x4块和A的当前4x1列的元素使用(常规)寄存器，这一事实使性能受益。请注意，我们使用的是比实际存在的更多的常规寄存器，所以任何人都可以猜测编译器会用它做什么。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we accumulate in registers and put A( 0, p ) in a register */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg;<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_01_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_02_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_03_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_11_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_12_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_13_reg += a_1p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_21_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_22_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_23_reg += a_2p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_31_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_32_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_33_reg += a_3p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"Optimization-4x4-7\"><a href=\"#Optimization-4x4-7\" class=\"headerlink\" title=\"Optimization_4x4_7\"></a>Optimization_4x4_7</h1><p>这里我们改为使用指针来跟踪B的当前4x1块。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot4x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot4x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes a 4x4 block of matrix A</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\">           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  </span><br><span class=\"hljs-comment\">           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  </span><br><span class=\"hljs-comment\">           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) </span><br><span class=\"hljs-comment\">           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) </span><br><span class=\"hljs-comment\">           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use pointer to track where in four columns of B we are */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) </span><br><span class=\"hljs-comment\">       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) </span><br><span class=\"hljs-comment\">       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) </span><br><span class=\"hljs-comment\">       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  <br>       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  <br>       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,<br>    <span class=\"hljs-comment\">/* hold </span><br><span class=\"hljs-comment\">       A( 0, p ) </span><br><span class=\"hljs-comment\">       A( 1, p ) </span><br><span class=\"hljs-comment\">       A( 2, p ) </span><br><span class=\"hljs-comment\">       A( 3, p ) */</span><br>       a_0p_reg,<br>       a_1p_reg,<br>       a_2p_reg,<br>       a_3p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; <br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>;   c_01_reg = <span class=\"hljs-number\">0.0</span>;   c_02_reg = <span class=\"hljs-number\">0.0</span>;   c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_10_reg = <span class=\"hljs-number\">0.0</span>;   c_11_reg = <span class=\"hljs-number\">0.0</span>;   c_12_reg = <span class=\"hljs-number\">0.0</span>;   c_13_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_20_reg = <span class=\"hljs-number\">0.0</span>;   c_21_reg = <span class=\"hljs-number\">0.0</span>;   c_22_reg = <span class=\"hljs-number\">0.0</span>;   c_23_reg = <span class=\"hljs-number\">0.0</span>;<br>  c_30_reg = <span class=\"hljs-number\">0.0</span>;   c_31_reg = <span class=\"hljs-number\">0.0</span>;   c_32_reg = <span class=\"hljs-number\">0.0</span>;   c_33_reg = <span class=\"hljs-number\">0.0</span>;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br>    a_1p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p );<br>    a_2p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">2</span>, p );<br>    a_3p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">3</span>, p );<br>\t  <br>    b_p0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );<br>    b_p1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );<br>    b_p2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );<br>    b_p3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );\t  <br><br>    <span class=\"hljs-comment\">/* First row */</span><br>    c_00_reg += a_0p_reg * *b_p0_pntr;     <br>    c_01_reg += a_0p_reg * *b_p1_pntr;     <br>    c_02_reg += a_0p_reg * *b_p2_pntr;     <br>    c_03_reg += a_0p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Second row */</span><br>    c_10_reg += a_1p_reg * *b_p0_pntr;     <br>    c_11_reg += a_1p_reg * *b_p1_pntr;     <br>    c_12_reg += a_1p_reg * *b_p2_pntr;     <br>    c_13_reg += a_1p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Third row */</span><br>    c_20_reg += a_2p_reg * *b_p0_pntr;     <br>    c_21_reg += a_2p_reg * *b_p1_pntr;     <br>    c_22_reg += a_2p_reg * *b_p2_pntr;     <br>    c_23_reg += a_2p_reg * *b_p3_pntr;     <br><br>    <span class=\"hljs-comment\">/* Four row */</span><br>    c_30_reg += a_3p_reg * *b_p0_pntr++;     <br>    c_31_reg += a_3p_reg * *b_p1_pntr++;     <br>    c_32_reg += a_3p_reg * *b_p2_pntr++;     <br>    c_33_reg += a_3p_reg * *b_p3_pntr++;     <br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> ) += c_10_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ) += c_11_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ) += c_12_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> ) += c_13_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span> ) += c_20_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span> ) += c_21_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> ) += c_22_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ) += c_23_reg;<br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span> ) += c_30_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> ) += c_31_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span> ) += c_32_reg;   <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span> ) += c_33_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0003/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0003/",
            "title": "Further optimizing",
            "date_published": "2023-05-26T09:20:18.000Z",
            "content_html": "<h2 id=\"Further-optimizing\"><a href=\"#Further-optimizing\" class=\"headerlink\" title=\"Further optimizing\"></a>Further optimizing</h2><ul>\n<li>我们将C的元素累加到寄存器中，并使用寄存器存储a的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_6\">Optimization_1x4_6 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用指针来定位B中的元素</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_7\">Optimization_1x4_7 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们将循环展开4次(展开因子的选择相对任意)</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_8\">Optimization_1x4_8 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>我们使用间接寻址来减少需要更新指针的次数</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_9\">Optimization_1x4_9 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>对于问题大小适合L2缓存(至少部分地)有相当大的改进。不过，还有很大的改进空间。</p>\n<p><img src=\"/2023/05/26/gemm0003/compare_MMult0_MMult-1x4-9.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-1x4-6\"><a href=\"#Optimization-1x4-6\" class=\"headerlink\" title=\"Optimization_1x4_6\"></a>Optimization_1x4_6</h2><p>我们在寄存器中对当前1x4行C的更新累积，并将元素A(p, 0)放在寄存器中，以减少缓存(cache)和寄存器(reg)之间的流量(traffic)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we accumulate in registers and put A( 0, p ) in a register */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>    <br>    <br>  <span class=\"hljs-comment\">//C的累加在寄存器中，同时A也放在寄存器中</span><br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>    <br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>    c_01_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    c_02_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    c_03_reg += a_0p_reg * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>  <span class=\"hljs-comment\">//计算完成后，再通过寄存器写回C</span><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-7\"><a href=\"#Optimization-1x4-7\" class=\"headerlink\" title=\"Optimization_1x4_7\"></a>Optimization_1x4_7</h2><p>现在使用bp0_pntr、bp1_pntr、bp2_pntr和bp3_pntr四个指针来访问元素B(p, 0)、B(p, 1)、B(p, 2)、B(p, 3)。这减少了索引开销。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we use pointer to track where in four columns of B we are */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>  <span class=\"hljs-comment\">//由于使用了宏定义，每次B(i,j)都会计算B中元素的位置</span><br>  <span class=\"hljs-comment\">//使用指针后，后续访问不需要再额外计算B中元素位置，只需在当前指针向后移动一位即可</span><br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-8\"><a href=\"#Optimization-1x4-8\" class=\"headerlink\" title=\"Optimization_1x4_8\"></a>Optimization_1x4_8</h2><p>我们现在展开了4个循环。有趣的是，这会略微降低性能。这可能意味着，通过添加优化，我们混淆了编译器，因此它不能做以前做的优化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     We now unroll the loop */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>    <br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br>  <span class=\"hljs-comment\">//这里对循环变量p进行了展开，注意这里计算是顺序的</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=<span class=\"hljs-number\">4</span> )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">2</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">3</span> );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr++;<br>    c_01_reg += a_0p_reg * *bp1_pntr++;<br>    c_02_reg += a_0p_reg * *bp2_pntr++;<br>    c_03_reg += a_0p_reg * *bp3_pntr++;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-9\"><a href=\"#Optimization-1x4-9\" class=\"headerlink\" title=\"Optimization_1x4_9\"></a>Optimization_1x4_9</h2><p>在这里，*a0p_reg保存元素A(0, p+1)。</p>\n<ul>\n<li><p>我们希望bp0_pntr指向元素B（p，0）。因此，bp0_pntr+1寻址元素B（p+1，0）。有一条特殊的机器指令可以访问bp0_pntr+1处的元素，该指令不需要更新指针。</p>\n</li>\n<li><p>因此，指向B列中元素的指针只需要在循环的第四次迭代中更新一次。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     We next use indirect addressing */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* hold contributions to</span><br><span class=\"hljs-comment\">       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */</span><br>       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  <br>    <span class=\"hljs-comment\">/* holds A( 0, p ) */</span><br>       a_0p_reg;<br>  <span class=\"hljs-keyword\">double</span> <br>    <span class=\"hljs-comment\">/* Point to the current elements in the four columns of B */</span><br>    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; <br>    <br>  bp0_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> );<br>  bp1_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<br>  bp2_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> );<br>  bp3_pntr = &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> );<br><br>  c_00_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_01_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_02_reg = <span class=\"hljs-number\">0.0</span>; <br>  c_03_reg = <span class=\"hljs-number\">0.0</span>;<br> <br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p+=<span class=\"hljs-number\">4</span> )&#123;<br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p );<br><br>    c_00_reg += a_0p_reg * *bp0_pntr;<br>    c_01_reg += a_0p_reg * *bp1_pntr;<br>    c_02_reg += a_0p_reg * *bp2_pntr;<br>    c_03_reg += a_0p_reg * *bp3_pntr;<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span> );<br>\t<br>    <span class=\"hljs-comment\">//现在我们使用间接寻址，&#x27;indirect addressing&#x27;</span><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">1</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">1</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">1</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">1</span>);<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">2</span> );<br><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">2</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">2</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">2</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">2</span>);<br><br>    a_0p_reg = <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">3</span> );<br><br>    c_00_reg += a_0p_reg * *(bp0_pntr+<span class=\"hljs-number\">3</span>);<br>    c_01_reg += a_0p_reg * *(bp1_pntr+<span class=\"hljs-number\">3</span>);<br>    c_02_reg += a_0p_reg * *(bp2_pntr+<span class=\"hljs-number\">3</span>);<br>    c_03_reg += a_0p_reg * *(bp3_pntr+<span class=\"hljs-number\">3</span>);<br>\t<br>      <br>    <span class=\"hljs-comment\">//更新指针，4次迭代中仅更新一次</span><br>    bp0_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp1_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp2_pntr+=<span class=\"hljs-number\">4</span>;<br>    bp3_pntr+=<span class=\"hljs-number\">4</span>;<br>  &#125;<br><br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += c_00_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += c_01_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += c_02_reg; <br>  <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += c_03_reg;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0002/",
            "title": "Computing four elements at a time",
            "date_published": "2023-05-26T08:37:45.000Z",
            "content_html": "<h2 id=\"Computing-four-elements-at-a-time\"><a href=\"#Computing-four-elements-at-a-time\" class=\"headerlink\" title=\"Computing four elements at a time\"></a>Computing four elements at a time</h2><ul>\n<li>我们在子程序AddDot1x4中一次计算4个元素，该子程序一次执行4个内部乘积</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_3\">Optimization_1x4_3 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li>现在我们内联(inline)四个独立的内积，并将循环融合为一个，从而在一个循环中同时计算四个内积:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_4\">Optimization_1x4_4 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_5\">Optimization_1x4_5 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>在这一点上，我们开始看到一些性能改进:</p>\n<p><img src=\"/2023/05/26/gemm0002/compare_MMult0_MMult-1x4-5.png\" alt=\"img\"></p>\n<h2 id=\"Optimization-1x4-3\"><a href=\"#Optimization-1x4-3\" class=\"headerlink\" title=\"Optimization_1x4_3\"></a>Optimization_1x4_3</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br>\t  <span class=\"hljs-comment\">//相交于上个版本，把4个AddDot合并成了一个AddDot1x4</span><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C */</span> <br>  <span class=\"hljs-comment\">//一次AddDot1x4完成四次AddDot运算</span><br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) );<br>  <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) );<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-4\"><a href=\"#Optimization-1x4-4\" class=\"headerlink\" title=\"Optimization_1x4_4\"></a>Optimization_1x4_4</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we &quot;inline&quot; AddDot */</span> <br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//在这里我们把AddDot中的运算，全部集成到了AddDot1x4中，即4段for执行4个内部乘积</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>  &#125;<br><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization-1x4-5\"><a href=\"#Optimization-1x4-5\" class=\"headerlink\" title=\"Optimization_1x4_5\"></a>Optimization_1x4_5</h2><p>在这个版本，我们开始看到性能上的好处。原因是四个循环已经融合，因此四个内部乘积运算现在正在同时进行。这有以下好处:</p>\n<ul>\n<li>索引p只需要每8次浮点操作更新一次(4次乘法4次加法)。</li>\n<li>元素A(0, p)只需要从内存中取出一次，而不是四次。(只有当矩阵不再适合二级缓存时，这才有好处)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>,  <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span> )</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in</span><br><span class=\"hljs-comment\">\t one routine (four inner products) */</span><br><br>      <span class=\"hljs-built_in\">AddDot1x4</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), ldb, &amp;<span class=\"hljs-built_in\">C</span>( i,j ), ldc );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot1x4</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda,  <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* So, this routine computes four elements of C: </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Notice that this routine is called with c = C( i, j ) in the</span><br><span class=\"hljs-comment\">     previous routine, so these are actually the elements </span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) </span><br><span class=\"hljs-comment\">\t  </span><br><span class=\"hljs-comment\">     in the original matrix C.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     In this version, we merge the four loops, computing four inner</span><br><span class=\"hljs-comment\">     products simultaneously. */</span><br><br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//在这个版本中，我们合并了4个for循环，使得可以同时计算4个乘积运算</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 0 ), &amp;C( 0, 0 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 1 ), &amp;C( 0, 1 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 2 ), &amp;C( 0, 2 ) );</span><br>  <span class=\"hljs-comment\">//  AddDot( k, &amp;A( 0, 0 ), lda, &amp;B( 0, 3 ), &amp;C( 0, 3 ) );</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span> );     <span class=\"hljs-comment\">//第一次取A( 0, p )</span><br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">2</span> );     <br>    <span class=\"hljs-built_in\">C</span>( <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> ) += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p ) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">3</span> );     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "url": "https://xingyuanjie.top/2023/05/26/gemm0001/",
            "title": "Hiding computation in a subroutine",
            "date_published": "2023-05-26T07:06:49.000Z",
            "content_html": "<h2 id=\"Hiding-computation-in-a-subroutine\"><a href=\"#Hiding-computation-in-a-subroutine\" class=\"headerlink\" title=\"Hiding computation in a subroutine\"></a>Hiding computation in a subroutine</h2><ul>\n<li>我们首先重写基本实现，将内部循环隐藏在子程序AddDot中:</li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization1\">Optimization1 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n<li><a href=\"https://github.com/flame/how-to-optimize-gemm/wiki/Optimization2\">Optimization2 · flame&#x2F;how-to-optimize-gemm Wiki (github.com)</a></li>\n</ul>\n<p>这一步不会产生任何性能提升：</p>\n<p><img src=\"https://github.com/flame/how-to-optimize-gemm/raw/master/figures/compare_MMult0_MMult2.png\" alt=\"img\"></p>\n<p>它其实是为我们下一步做好准备。</p>\n<h2 id=\"Optimization1\"><a href=\"#Optimization1\" class=\"headerlink\" title=\"Optimization1\"></a>Optimization1</h2><p>这里最原始的矩阵乘代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-comment\">//创建宏，使矩阵是列主序</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j, p;<br>  <span class=\"hljs-comment\">//loop i j p</span><br>  <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i++ )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C 遍历C的行 */</span>   <br>    <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j++ )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C 遍历C的列 */</span><br>      <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;        <span class=\"hljs-comment\">/* Update C( i,j ) with the inner</span><br><span class=\"hljs-comment\">\t\t\t\t       product of the ith row of A and</span><br><span class=\"hljs-comment\">\t\t\t\t       the jth column of B */</span><br>    <span class=\"hljs-comment\">//A的一行B的一列更新C(i,j)</span><br>\t<span class=\"hljs-built_in\">C</span>( i,j ) = <span class=\"hljs-built_in\">C</span>( i,j ) +  <span class=\"hljs-built_in\">A</span>( i,p ) * <span class=\"hljs-built_in\">B</span>( p,j );<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>拆分内部循环，把乘加运算放在子程序AddDot中:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>\t<br>   <span class=\"hljs-comment\">//loop j i p   在这里更改了循环变量的顺序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br>\t  <span class=\"hljs-comment\">//拆分内部循环(循环变量p)，把乘加运算放在子程序AddDot中:</span><br>      <span class=\"hljs-comment\">//A的第i行，B的第j列</span><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br>  <span class=\"hljs-comment\">//列主序，同行访问带跨步，同列访问无需跨步。跨步大小lda</span><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Optimization2\"><a href=\"#Optimization2\" class=\"headerlink\" title=\"Optimization2\"></a>Optimization2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/* Create macros so that the matrices are stored in column-major order */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> A(i,j) a[ (j)*lda + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> B(i,j) b[ (j)*ldb + (i) ]</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C(i,j) c[ (j)*ldc + (i) ]</span><br><br><span class=\"hljs-comment\">/* Routine for computing C = A * B + C */</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">double</span> *, <span class=\"hljs-keyword\">double</span> * )</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MY_MMult</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *a, <span class=\"hljs-keyword\">int</span> lda, </span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *b, <span class=\"hljs-keyword\">int</span> ldb,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                    <span class=\"hljs-keyword\">double</span> *c, <span class=\"hljs-keyword\">int</span> ldc )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i, j;<br>  <span class=\"hljs-comment\">//在这里对C的列进行了循环展开，展开数为4。列主序</span><br>  <span class=\"hljs-keyword\">for</span> ( j=<span class=\"hljs-number\">0</span>; j&lt;n; j+=<span class=\"hljs-number\">4</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the columns of C, unrolled by 4 */</span><br>    <span class=\"hljs-keyword\">for</span> ( i=<span class=\"hljs-number\">0</span>; i&lt;m; i+=<span class=\"hljs-number\">1</span> )&#123;        <span class=\"hljs-comment\">/* Loop over the rows of C */</span><br>      <span class=\"hljs-comment\">/* Update the C( i,j ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the jth column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j ), &amp;<span class=\"hljs-built_in\">C</span>( i,j ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+1 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">1</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">1</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+2 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+2)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">2</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">2</span> ) );<br><br>      <span class=\"hljs-comment\">/* Update the C( i,j+3 ) with the inner product of the ith row of A</span><br><span class=\"hljs-comment\">\t and the (j+1)th column of B */</span><br><br>      <span class=\"hljs-built_in\">AddDot</span>( k, &amp;<span class=\"hljs-built_in\">A</span>( i,<span class=\"hljs-number\">0</span> ), lda, &amp;<span class=\"hljs-built_in\">B</span>( <span class=\"hljs-number\">0</span>,j+<span class=\"hljs-number\">3</span> ), &amp;<span class=\"hljs-built_in\">C</span>( i,j+<span class=\"hljs-number\">3</span> ) );<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/* Create macro to let X( i ) equal the ith element of x */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> X(i) x[ (i)*incx ]</span><br><br><span class=\"hljs-comment\">//内层核心相较于上次来说，并没有修改</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddDot</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *x, <span class=\"hljs-keyword\">int</span> incx,  <span class=\"hljs-keyword\">double</span> *y, <span class=\"hljs-keyword\">double</span> *gamma )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">/* compute gamma := x&#x27; * y + gamma with vectors x and y of length n.</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.</span><br><span class=\"hljs-comment\">  */</span><br> <br>  <span class=\"hljs-keyword\">int</span> p;<br><br>  <span class=\"hljs-keyword\">for</span> ( p=<span class=\"hljs-number\">0</span>; p&lt;k; p++ )&#123;<br>    *gamma += <span class=\"hljs-built_in\">X</span>( p ) * y[ p ];     <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/05/22/blas/",
            "url": "https://xingyuanjie.top/2023/05/22/blas/",
            "title": "BLAS（Basic Linear Algebra Subprograms）-基础线性代数子程序库",
            "date_published": "2023-05-22T12:35:17.000Z",
            "content_html": "<h2 id=\"how-to-optimize-gemm\"><a href=\"#how-to-optimize-gemm\" class=\"headerlink\" title=\"how-to-optimize-gemm\"></a>how-to-optimize-gemm</h2><p><strong>项目地址：</strong><a href=\"https://github.com/flame/how-to-optimize-gemm\">flame&#x2F;how-to-optimize-gemm (github.com)</a></p>\n<h3 id=\"Computing-four-elements-of-C-at-a-time\"><a href=\"#Computing-four-elements-of-C-at-a-time\" class=\"headerlink\" title=\"Computing four elements of C at a time\"></a>Computing four elements of C at a time</h3><p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0001/\">Hiding computation in a subroutine - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0002/\">Computing four elements at a time - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/05/26/gemm0003/\">Further optimizing - Amicoyuan (xingyuanjie.top)</a></p>\n<h3 id=\"Computing-a-4-x-4-block-of-C-at-a-time\"><a href=\"#Computing-a-4-x-4-block-of-C-at-a-time\" class=\"headerlink\" title=\"Computing a 4 x 4 block of C at a time\"></a>Computing a 4 x 4 block of C at a time</h3><p>为了有效地使用向量指令和向量寄存器，我们现在一次计算一个4 x 4的C代码块。其思想如下:作为SSE3指令集的一部分，有一些特殊的指令允许每个时钟周期执行两次“乘法累加”操作(两次乘法和两次加法)，每个时钟周期总共执行四个浮点操作。要使用这些，必须将数据放入“向量寄存器”中。有16个这样的向量寄存器，每个向量寄存器可以容纳两个双精度数。因此，我们可以在寄存器中保存32个双精度数。我们将使用其中的16个来保存C的元素，一个4 x 4的块。</p>\n<p><a href=\"https://xingyuanjie.top/2023/05/31/gemm0004/\">Repeating the same optimizations - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/06/07/gemm0005/\">Further optimizing - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/06/07/gemm0006/\">Blocking to maintain performance - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/06/07/gemm0007/\">Packing into contiguous memory - Amicoyuan (xingyuanjie.top)</a></p>\n<h3 id=\"Acknowledgement\"><a href=\"#Acknowledgement\" class=\"headerlink\" title=\"Acknowledgement\"></a>Acknowledgement</h3><p>This material was partially sponsored by grants from the National Science Foundation (Awards ACI-1148125&#x2F;1340293).</p>\n<p><em>Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation (NSF).</em></p>\n<h2 id=\"论文阅读\"><a href=\"#论文阅读\" class=\"headerlink\" title=\"论文阅读\"></a>论文阅读</h2><p><a href=\"https://xingyuanjie.top/2023/06/09/gemm0008/\">论文阅读：面向国产申威 26010 众核处理器的 SpMV 实现与优化 - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2023/07/03/gemm0009/\">论文阅读：稀疏矩阵向量乘法在申威众核架构上的性能优化 - Amicoyuan (xingyuanjie.top)</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客:\"></a>博客:</h3><p><a href=\"https://www.jianshu.com/p/e01024892afb\">矩阵相乘在GPU上的终极优化：深度解析Maxas汇编器工作原理 - 简书 (jianshu.com)</a></p>\n<p><a href=\"https://www.leiphone.com/category/yanxishe/Puevv3ZWxn0heoEv.html\">OpenBLAS项目与矩阵乘法优化 | AI 研习社 | 雷峰网 (leiphone.com)</a></p>\n<p><a href=\"https://jcf94.com/2021/08/28/2021-08-28-simd/\">矩阵乘法与 SIMD | Chenfan Blog (jcf94.com)</a></p>\n<p><a href=\"https://zhenhuaw.me/blog/2019/gemm-optimization.html\">通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/383115932\">大佬是怎么优雅实现矩阵乘法的？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/65436463\">OpenBLAS gemm从零入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://harleyszhang.github.io/cv_note/\">Introduction · cv算法工程师成长之路 (harleyszhang.github.io)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/435908830\">深入浅出GPU优化系列：GEMM优化（一） - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/410278370\">CUDA 矩阵乘法终极优化指南 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/368870275\">矩阵乘法的并行优化（1）：OPENMP、CUDA实现 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/617296073\">并行计算入门 UIUC ECE408 Lecture 7&amp;8 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/143328317\">移动端arm cpu优化学习笔记第4弹–内联汇编入门 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/348372132\">C语言的内嵌汇编 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/105616727\">内嵌汇编学习 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://blog.csdn.net/unbutun/article/details/6123472\">(88条消息) #define barrier() <strong>asm</strong> <strong>volatile</strong>(“”: : :”memory”) 中的memory是gcc的东西_unbutun的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_38669561/article/details/105192200?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control\">(88条消息) MIPS指令集：内嵌汇编asm语法介绍_daddu指令_无色云的博客-CSDN博客</a></p>\n<h3 id=\"论文：\"><a href=\"#论文：\" class=\"headerlink\" title=\"论文：\"></a>论文：</h3><p><a href=\"https://www.cs.utexas.edu/users/flame/FLAMEPublications.html\">Publications Related to the FLAME Project (utexas.edu)</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/1356052.1356053\">Anatomy of high-performance matrix multiplication | ACM Transactions on Mathematical Software</a></p>\n<p><a href=\"https://dl.acm.org/doi/10.1145/3018743.3018755\">Understanding the GPU Microarchitecture to Achieve Bare-Metal Performance Tuning | Proceedings of the 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</a></p>\n<p>[<a href=\"https://arxiv.org/abs/1804.06826\">1804.06826] Dissecting the NVIDIA Volta GPU Architecture via Microbenchmarking (arxiv.org)</a></p>\n<p><a href=\"https://ieeexplore.ieee.org/document/6114452\">Fast implementation of DGEMM on Fermi GPU | IEEE Conference Publication | IEEE Xplore</a></p>\n<p><a href=\"https://dl.acm.org/doi/abs/10.1145/3369583.3393611\">High Performance is All about Minimizing Data Movement | Proceedings of the 29th International Symposium on High-Performance Parallel and Distributed Computing (acm.org)</a></p>\n<h3 id=\"社区-x2F-论坛\"><a href=\"#社区-x2F-论坛\" class=\"headerlink\" title=\"社区&#x2F;论坛:\"></a>社区&#x2F;论坛:</h3><p><a href=\"http://tvm.d2l.ai/chapter_gpu_schedules/vector_add.html#cuda-programming\">2. Vector Add — Dive into Deep Learning Compiler 0.1 documentation (d2l.ai)</a></p>\n<p><a href=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html\">Intel® Intrinsics Guide</a></p>\n<p><a href=\"https://github.com/pytorch/QNNPACK\">https://github.com/pytorch/QNNPACK</a></p>\n<p><a href=\"https://github.com/flame/blis\">https://github.com/flame/blis</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/ulmBLAS/\">ulmBLAS (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://www.mathematik.uni-ulm.de/~lehn/apfel/sghpc/gemm/index.html\">work&#x2F;sghpc (index) (uni-ulm.de)</a></p>\n<p><a href=\"https://shpc.oden.utexas.edu/\">The Science of High-Performance Computing Group (utexas.edu)</a></p>\n<p><a href=\"https://github.com/BBuf/how-to-optimize-gemm\">GitHub - BBuf&#x2F;how-to-optimize-gemm</a></p>\n<p><a href=\"https://github.com/Liu-xiandong/How_to_optimize_in_GPU\">GitHub - Liu-xiandong&#x2F;How_to_optimize_in_GPU: This is a series of GPU optimization topics. Here we will introduce how to optimize the CUDA kernel in detail. I will introduce several basic kernel optimizations, including: elementwise, reduce, sgemv, sgemm, etc. The performance of these kernels is basically at or near the theoretical limit.</a></p>\n<p><a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/#\">CUDA C++ Programming Guide (nvidia.com)</a></p>\n<p><a href=\"https://github.com/NervanaSystems/maxas/wiki/SGEMM\">SGEMM · NervanaSystems&#x2F;maxas Wiki · GitHub</a></p>\n<p><a href=\"https://github.com/Cjkkkk/CUDA_gemm\">GitHub - Cjkkkk&#x2F;CUDA_gemm: A simple high performance CUDA GEMM implementation.</a></p>\n<p><a href=\"https://github.com/yzhaiustc/Optimizing-SGEMM-on-NVIDIA-Turing-GPUs\">GitHub - yzhaiustc&#x2F;Optimizing-SGEMM-on-NVIDIA-Turing-GPUs: Optimizing SGEMM kernel functions on NVIDIA GPUs to a close-to-cuBLAS performance.</a></p>\n<p><a href=\"https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/\">https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/</a></p>\n<p><a href=\"https://wiki.illinois.edu/wiki/display/ECE408/Class+Schedule\">Class Schedule - ECE408 - Illinois Wiki</a></p>\n<p><a href=\"https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#toc2\">GCC-Inline-Assembly-HOWTO (ibiblio.org)</a></p>\n<p><a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课 · the missing semester of your cs education (missing-semester-cn.github.io)</a></p>\n",
            "tags": [
                "blas",
                "gemm",
                "gemv"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/04/30/enum/",
            "url": "https://xingyuanjie.top/2023/04/30/enum/",
            "title": "C/C++枚举类型 enum",
            "date_published": "2023-04-30T07:44:23.000Z",
            "content_html": "<h2 id=\"C-x2F-C-枚举类型-enum\"><a href=\"#C-x2F-C-枚举类型-enum\" class=\"headerlink\" title=\"C&#x2F;C++枚举类型 enum\"></a>C&#x2F;C++枚举类型 enum</h2><p><strong>枚举类型的定义：</strong>枚举类型(enumeration)是 C++ 中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p>\n<p>定义格式：枚举类型的定义格式为：</p>\n<figure class=\"highlight bnf\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bnf\">enum <span class=\"hljs-attribute\">&lt;类型名&gt;</span> &#123;<span class=\"hljs-attribute\">&lt;枚举常量表&gt;</span>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>格式说明：</strong></p>\n<ul>\n<li>关键字enum——指明其后的标识符是一个枚举类型的名字。</li>\n<li>枚举常量表——由枚举常量构成。”枚举常量”或称”枚举成员”，是以标识符形式表示的整型量，表示枚举类型的取值。枚举常量表列出枚举类型的所有取值，各枚举常量之间以”，”间隔，且必须各不相同。取值类型与条件表达式相同。</li>\n</ul>\n<p><strong>应用举例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">color_set1</span> &#123;</span>RED, BLUE, WHITE, BLACK&#125;; <span class=\"hljs-comment\">// 定义枚举类型color_set1</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">week</span> &#123;</span>Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;; <span class=\"hljs-comment\">// 定义枚举类型week</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>重要提示：</strong></p>\n<p>枚举常量代表该枚举类型的变量可能取的值，编译系统为每个枚举常量指定一个整数值，默认状态下，这个整数就是所列举元素的序号，序号从0开始。 可以在定义枚举类型时为部分或全部枚举常量指定整数值，在指定值之前的枚举常量仍按默认方式取值，而指定值之后的枚举常量按依次加1的原则取值。 各枚举常量的值可以重复。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">fruit_set</span> &#123;</span>apple, orange, banana=<span class=\"hljs-number\">1</span>, peach, grape&#125;<br><span class=\"hljs-comment\">//枚举常量apple=0,orange=1, banana=1,peach=2,grape=3。</span><br><span class=\"hljs-keyword\">enum</span> week &#123;Sun=<span class=\"hljs-number\">7</span>, Mon=<span class=\"hljs-number\">1</span>, Tue, Wed, Thu, Fri, Sat&#125;;<br><span class=\"hljs-comment\">//枚举常量Sun,Mon,Tue,Wed,Thu,Fri,Sat的值分别为7、1、2、3、4、5、6。</span><br></code></pre></div></td></tr></table></figure>\n\n<p>枚举常量只能以标识符形式表示，而不能是整型、字符型等文字常量。例如，以下定义非法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">letter_set</span> &#123;</span><span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;d&#x27;</span>,<span class=\"hljs-string\">&#x27;F&#x27;</span>,<span class=\"hljs-string\">&#x27;s&#x27;</span>,<span class=\"hljs-string\">&#x27;T&#x27;</span>&#125;; <span class=\"hljs-comment\">//枚举常量不能是字符常量</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">year_set</span>&#123;</span><span class=\"hljs-number\">2000</span>,<span class=\"hljs-number\">2001</span>,<span class=\"hljs-number\">2002</span>,<span class=\"hljs-number\">2003</span>,<span class=\"hljs-number\">2004</span>,<span class=\"hljs-number\">2005</span>&#125;; <span class=\"hljs-comment\">//枚举常量不能是整型常量</span><br></code></pre></div></td></tr></table></figure>\n\n<p>可改为以下形式则定义合法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">letter_set</span> &#123;</span>a, d, F, s, T&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">year_set</span>&#123;</span>y2000, y2001, y2002, y2003, y2004, y2005&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<hr>\n<h2 id=\"枚举变量的使用\"><a href=\"#枚举变量的使用\" class=\"headerlink\" title=\"枚举变量的使用\"></a>枚举变量的使用</h2><p>定义枚举类型的主要目的是：增加程序的可读性。枚举类型最常见也最有意义的用处之一就是用来描述状态量，这点将在第9章 输入输出流类看到。</p>\n<p>定义格式：定义枚举类型之后，就可以定义该枚举类型的变量，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">color_set1 color1, color2;<br></code></pre></div></td></tr></table></figure>\n\n<p>亦可类型与变量同时定义（甚至类型名可省），格式如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> &#123;</span>Sun,Mon,Tue,Wed,Thu,Fri,Sat&#125; weekday1, weekday2;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"相关操作\"><a href=\"#相关操作\" class=\"headerlink\" title=\"相关操作\"></a>相关操作</h3><p>枚举变量的值只能取枚举常量表中所列的值，就是整型数的一个子集。</p>\n<p>枚举变量占用内存的大小与整型数相同。</p>\n<p>枚举变量只能参与赋值和关系运算以及输出操作，参与运算时用其本身的整数值。例如，设有定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">color_set1</span> &#123;</span>RED, BLUE, WHITE, BLACK&#125; color1, color2;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">color_set2</span> &#123;</span> GREEN, RED, YELLOW, WHITE&#125; color3, color4;<br></code></pre></div></td></tr></table></figure>\n\n<p>则允许的赋值操作如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">color3=RED;           <span class=\"hljs-comment\">//将枚举常量值赋给枚举变量</span><br>color4=color3;        <span class=\"hljs-comment\">//相同类型的枚举变量赋值，color4的值为RED</span><br><span class=\"hljs-keyword\">int</span>  i=color3;        <span class=\"hljs-comment\">//将枚举变量赋给整型变量，i的值为1</span><br><span class=\"hljs-keyword\">int</span>  j=GREEN;         <span class=\"hljs-comment\">//将枚举常量赋给整型变量，j的值为0</span><br></code></pre></div></td></tr></table></figure>\n\n<p>允许的关系运算有：&#x3D;&#x3D;、&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、!&#x3D;等，例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//比较同类型枚举变量color3，color4是否相等</span><br><span class=\"hljs-keyword\">if</span> (color3==color4) cout&lt;&lt;<span class=\"hljs-string\">&quot;相等&quot;</span>；<br><span class=\"hljs-comment\">//输出的是变量color3与WHITE的比较结果，结果为1</span><br>cout&lt;&lt; color3&lt;WHITE;<br></code></pre></div></td></tr></table></figure>\n\n<p>枚举变量可以直接输出，输出的是变量的整数值。例如：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">cout</span>&lt;&lt; color<span class=\"hljs-number\">3</span>;         //输出的是color<span class=\"hljs-number\">3</span>的整数值，即RED的整数值<span class=\"hljs-number\">1</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"重要提示\"><a href=\"#重要提示\" class=\"headerlink\" title=\"重要提示\"></a>重要提示</h3><ul>\n<li>枚举变量可以直接输出，但不能直接输入。如：cout &gt;&gt; color3;  &#x2F;&#x2F;非法</li>\n<li>不能直接将常量赋给枚举变量。如： color1&#x3D;1; &#x2F;&#x2F;非法</li>\n<li>不同类型的枚举变量之间不能相互赋值。如： color1&#x3D;color3; &#x2F;&#x2F;非法</li>\n<li>枚举变量的输入输出一般都采用switch语句将其转换为字符或字符串；枚举类型数据的其他处理也往往应用switch语句，以保证程序的合法性和可读性。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.runoob.com/w3cnote/cpp-enum-intro.html\">C++ 枚举类型详解 | 菜鸟教程 (runoob.com)</a></p>\n",
            "tags": [
                "C/C++"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/04/30/violate/",
            "url": "https://xingyuanjie.top/2023/04/30/violate/",
            "title": "C/C++ volatile关键字",
            "date_published": "2023-04-30T07:30:24.000Z",
            "content_html": "<h2 id=\"C-x2F-C-volatile关键字\"><a href=\"#C-x2F-C-volatile关键字\" class=\"headerlink\" title=\"C&#x2F;C++ volatile关键字\"></a>C&#x2F;C++ volatile关键字</h2><p><strong>volatile后面的变量，是常变量，会直接访问地址，如果没有这个关键字，就可能会暂时使用寄存器的值，而不是读取地址。</strong></p>\n<p>C&#x2F;C++ 中的 volatile 关键字和 const 对应，用来修饰变量。volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">10</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。</p>\n<p>volatile 指出 i 是随时可能发生变化的，每次使用它的时候必须从 i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在 b 中。而优化做法是，由于编译器发现两次从 i读数据的代码之间的代码没有对 i 进行过操作，它会自动把上次读的数据放在 b 中。而不是重新从 i 里面读。这样以来，如果 i是一个寄存器变量或者表示一个端口数据就容易出错，所以说 volatile 可以保证对特殊地址的稳定访问。</p>\n<p><strong>volatile关键字的实现：如在并行环境下，进行同步操作，用volatile修饰回答字地址，即可实现并行环境下的同步。这种方法一般使用在非阻塞通信中。</strong></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/ijn842/article/details/81273232\">浅谈C语言的volatile关键字_琼琼的博客的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/GreatTang/article/details/90454011\">C++ volatile_c++ violate_来日梦多长的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/jerry_wuhao/article/details/113247800\">C&#x2F;C++ 中 volatile 关键字_c++ violate关键字_王俊洁、�的博客-CSDN博客</a></p>\n",
            "tags": [
                "C/C++"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/13/CMU15-213001/",
            "url": "https://xingyuanjie.top/2023/03/13/CMU15-213001/",
            "title": "CMU 15-213 Lecture 01:Course Overview",
            "date_published": "2023-03-13T12:29:35.000Z",
            "content_html": "<h2 id=\"2015-CMU-15-213-CSAPP-深入理解计算机系统-Lecture-01-Course-Overview\"><a href=\"#2015-CMU-15-213-CSAPP-深入理解计算机系统-Lecture-01-Course-Overview\" class=\"headerlink\" title=\"2015 CMU 15-213 CSAPP 深入理解计算机系统 Lecture 01: Course Overview\"></a>2015 CMU 15-213 CSAPP 深入理解计算机系统 Lecture 01: Course Overview</h2><h3 id=\"例子一：\"><a href=\"#例子一：\" class=\"headerlink\" title=\"例子一：\"></a>例子一：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">2</span>];<br>    <span class=\"hljs-keyword\">double</span> d;<br>&#125;<span class=\"hljs-keyword\">struct_t</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;<br>    <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-keyword\">struct_t</span> s;   <span class=\"hljs-comment\">//volatile关键字</span><br>    s.d = <span class=\"hljs-number\">3.14</span>;<br>    s.a[i] = <span class=\"hljs-number\">1073741824</span>;   <span class=\"hljs-comment\">/*Possibly out of bounds*/</span><br>    <span class=\"hljs-keyword\">return</span> s.d;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">fun(0)   -&gt;   3.14<br>fun(1)   -&gt;   3.14<br>fun(2)   -&gt;   3.1399998664856<br>fun(3)   -&gt;   2.00000061035156<br>fun(4)   -&gt;   3.14<br>fun(6)   -&gt;   Segmentation falut<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/CMU15-213001/image-20230313201550219.png\" alt=\"image-20230313201550219\"></p>\n<p>【图中假设memory line大小为4B】根据结构体可知我们拥有一个int型的数组大小为2，一个double型的变量。因为int数组的大小为2，当fun(0),fun(1)时，s.a[i]访问是正确的，所以fun(0),fun(1)返回正确值s.d及3.14。而当fun(i):i&gt;1时，就会返回奇怪的结果，这是因为数组大小为2，我们越界了，实际上s.a[i]写的是double的内存空间，如图中的2，3。而6代表程序状态，我们去修改它就会造成程序状态的改变，导致Segmentation fault。这里提醒我们在写C代码的时候一定要注意边界处理。【这里需要清楚C语言中堆区和栈区存的是什么】</p>\n<h3 id=\"例子二：\"><a href=\"#例子二：\" class=\"headerlink\" title=\"例子二：\"></a>例子二：</h3><p><img src=\"/2023/03/13/CMU15-213001/image-20230313202535864.png\" alt=\"image-20230313202535864\"></p>\n<p>【src和dst是大小2048*2048的二维数组】上面的图片，我们可以十分清楚代码的逻辑。他想把src数组的值拷贝到dst。而左右代码的功能完全一样，仅仅是for循环顺序不一样，但是却会有这么大的性能差距，这是什么原因呢？总的来说就是左边代码cache命中率高，右边cache命中率的。cache命中和cache miss的速度差距很大甚至是数量级别的差距，这是导致两者差距巨大的原因。【注意这里还可以更细致的分析，但是会有很多其他因素会影响】</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/index.html\">15-213: Introduction to Computer Systems (cmu.edu)</a></p>\n",
            "tags": [
                "CMU",
                "CSAPP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/13/CMU15-213/",
            "url": "https://xingyuanjie.top/2023/03/13/CMU15-213/",
            "title": "2015 CMU 15-213 CSAPP 深入理解计算机系统",
            "date_published": "2023-03-13T10:29:35.000Z",
            "content_html": "<h1 id=\"2015-CMU-15-213-CSAPP-深入理解计算机系统\"><a href=\"#2015-CMU-15-213-CSAPP-深入理解计算机系统\" class=\"headerlink\" title=\"2015 CMU 15-213 CSAPP 深入理解计算机系统\"></a>2015 CMU 15-213 CSAPP 深入理解计算机系统</h1><p><strong>项目地址：</strong><a href=\"https://github.com/EugeneLiu/translationCSAPP\">EugeneLiu&#x2F;translationCSAPP: 为 CSAPP 视频课程提供字幕，翻译 PPT，Lab。 (github.com)</a></p>\n<p><strong>bilibili翻译：</strong><a href=\"https://www.bilibili.com/video/av31289365/\">【精校中英字幕】2015 CMU 15-213 CSAPP 深入理解计算机系统 课程视频_哔哩哔哩_bilibili</a></p>\n<h2 id=\"CSAPP-3e-官方链接\"><a href=\"#CSAPP-3e-官方链接\" class=\"headerlink\" title=\"CSAPP:3e 官方链接\"></a>CSAPP:3e 官方链接</h2><ul>\n<li><a href=\"http://csapp.cs.cmu.edu/\">课程主页</a></li>\n<li><a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/schedule.html\">课件下载链接</a></li>\n<li><a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">课程 Lab 页面</a></li>\n<li><a href=\"https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22b96d90ae-9871-4fae-91e2-b1627b43e25e%22&sortColumn=0&sortAscending=true\">课程视频地址</a></li>\n</ul>\n",
            "tags": [
                "CMU",
                "CSAPP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/13/ML003/",
            "url": "https://xingyuanjie.top/2023/03/13/ML003/",
            "title": "线性回归的梯度下降",
            "date_published": "2023-03-13T06:37:12.000Z",
            "content_html": "<h2 id=\"线性回归的梯度下降\"><a href=\"#线性回归的梯度下降\" class=\"headerlink\" title=\"线性回归的梯度下降\"></a>线性回归的梯度下降</h2><p><img src=\"/2023/03/13/ML003/image-20230313145346118.png\" alt=\"image-20230313145346118\"></p>\n<h2 id=\"Goals\"><a href=\"#Goals\" class=\"headerlink\" title=\"Goals\"></a>Goals</h2><p>在本实验中，您将:</p>\n<ul>\n<li>使用梯度下降自动优化w和b的过程</li>\n</ul>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>在本实验中，我们将使用:</p>\n<ul>\n<li>NumPy，一个用于科学计算的流行库</li>\n<li>Matplotlib，用于绘制数据的流行库</li>\n<li>在本地目录的lab_utils.py文件中绘制例程</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> math, copy<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br>plt.style.use(<span class=\"hljs-string\">&#x27;./deeplearning.mplstyle&#x27;</span>)<br><span class=\"hljs-keyword\">from</span> lab_utils_uni <span class=\"hljs-keyword\">import</span> plt_house_x, plt_contour_wgrad, plt_divergence, plt_gradients<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Problem-Statement\"><a href=\"#Problem-Statement\" class=\"headerlink\" title=\"Problem Statement\"></a>Problem Statement</h2><p>让我们使用与之前相同的两个数据点——1000平方英尺的房子以30万美元的价格出售，2000平方英尺的房子以50万美元的价格出售。</p>\n<table>\n<thead>\n<tr>\n<th>Size(1000 sqft)</th>\n<th>Price(1000s of dollars)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#Load our data set</span><br>x_train = np.array([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>])\t<span class=\"hljs-comment\">#features</span><br>y_train = np.array([<span class=\"hljs-number\">300.0</span>,<span class=\"hljs-number\">500.0</span>])\t<span class=\"hljs-comment\">#target value</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Compute-Cost\"><a href=\"#Compute-Cost\" class=\"headerlink\" title=\"Compute_Cost\"></a>Compute_Cost</h2><p>这是上一个实验室开发的。我们在这里还会用到它。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs pyhton\">#Function to calculate the cost<br>def compute_cost(x, y, w, b,):<br>\t<br>\tm = x.shape[0]<br>\tcost = 0<br>\t<br>\tfor i in range(m):<br>\t\tf_wb = w * x[i] + b<br>\t\tcost = cost + (f_wb - y[i])**2<br>\ttotal_cost = 1 / (2 * m)*cost<br>\t<br>\treturn total_cost<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Gradient-descent-summary\"><a href=\"#Gradient-descent-summary\" class=\"headerlink\" title=\"Gradient descent summary\"></a>Gradient descent summary</h2><p>到目前为止，在这门课程中，你已经建立了一个线性模型来预测f_w,b(x^i):</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313150848463.png\" alt=\"image-20230313150848463\"></p>\n<p>在线性回归中，您使用输入训练数据来拟合参数𝑤,𝑏;来最小化我们的预测之间的误差测量f_𝑤，𝑏(𝑥^(𝑖))和实际数据𝑦(𝑖)。这种测量成为代价，J（w,b）。在训练中，你可以衡量我们所有训练样本的成本𝑥(𝑖)，𝑦(𝑖)。</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313151251919.png\" alt=\"image-20230313151251919\"></p>\n<p>在课堂上，梯度下降被描述为:</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313151329621.png\" alt=\"image-20230313151329621\"></p>\n<p>其中参数𝑤,𝑏同时更新。</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313151450500.png\" alt=\"image-20230313151450500\"></p>\n<p>这里同时意味着在更新任何参数之前计算所有参数的偏导数。</p>\n<h2 id=\"Implement-Gradient-Descent\"><a href=\"#Implement-Gradient-Descent\" class=\"headerlink\" title=\"Implement Gradient Descent\"></a>Implement Gradient Descent</h2><p>你将为一个特征实现梯度下降算法。你需要三个函数。</p>\n<ul>\n<li>compute_gradient实现上述式(4)和(5)</li>\n<li>上面的compute_cost实现方程(2)(代码来自以前的实验室)</li>\n<li>gradient_descent，使用compute_gradient和compute_cost</li>\n</ul>\n<p>Conventions:</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313151857315.png\" alt=\"image-20230313151857315\"></p>\n<h2 id=\"compute-gradient\"><a href=\"#compute-gradient\" class=\"headerlink\" title=\"compute_gradient\"></a>compute_gradient</h2><p><img src=\"/2023/03/13/ML003/image-20230313151947363.png\" alt=\"image-20230313151947363\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">compute_gradient</span>(<span class=\"hljs-params\">x, y, w, b</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Computes the gradient for linear regression</span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">    \tx (ndarray (m,)): Data, m examples</span><br><span class=\"hljs-string\">    \ty (ndarray (m,)): target values</span><br><span class=\"hljs-string\">    \tw,b (scalar)\t: model parameters</span><br><span class=\"hljs-string\">    Returns</span><br><span class=\"hljs-string\">    \tdj_dw (scalar): The gradient of the cost w.r.t. the parameters w</span><br><span class=\"hljs-string\">    \tdj_db (scalar): The gradient of the cost w.r.t. the parameter b </span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <br>    <span class=\"hljs-comment\">#Number of training examples</span><br>    m = x.shape[<span class=\"hljs-number\">0</span>]<br>    dj_de = <span class=\"hljs-number\">0</span><br>    dj_db = <span class=\"hljs-number\">0</span><br>    <br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):<br>        f_wb = w * x[i] + b;<br>        dj_dw_i = (f_wb - y[i]) * x[i]<br>        dj_db_i = f_wb - y[i]<br>        dj_db += dj_db_i<br>        dj_dw += dj_dw_i<br>    dj_dw = dj_dw / m<br>    dj_db = dj_db / m<br>    <br>    <span class=\"hljs-keyword\">return</span> dj_dw, dj_db<br></code></pre></div></td></tr></table></figure>\n\n<p>课程描述了梯度下降如何利用在某一点上对参数代价的偏导数来更新该参数。</p>\n<p>让我们使用compute_gradient函数来查找并绘制代价函数相对于其中一个参数𝑤0的偏导数。</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313154012173.png\" alt=\"image-20230313154012173\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt_gradients(x_train,y_train, compute_cost, compute_gradient)<br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313154210478.png\" alt=\"image-20230313154210478\"></p>\n<p><img src=\"/2023/03/13/ML003/image-20230313154333429.png\" alt=\"image-20230313154333429\"></p>\n<h2 id=\"Gradient-Descent\"><a href=\"#Gradient-Descent\" class=\"headerlink\" title=\"Gradient Descent\"></a>Gradient Descent</h2><p>现在可以计算梯度，上面公式(3)中描述的梯度下降可以在下面的gradient_descent中实现。注释中描述了实现的细节。下面，您将利用这个函数在训练数据上找到w和b的最佳值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">gradient_descent</span>(<span class=\"hljs-params\">x, y, w_in, b_in, alpha, num_iters, cost_function, gradient_function</span>):</span> <br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Performs gradient descent to fit w,b. Updates w,b by taking </span><br><span class=\"hljs-string\">    num_iters gradient steps with learning rate alpha</span><br><span class=\"hljs-string\">    </span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">      x (ndarray (m,))  : Data, m examples </span><br><span class=\"hljs-string\">      y (ndarray (m,))  : target values</span><br><span class=\"hljs-string\">      w_in,b_in (scalar): initial values of model parameters  </span><br><span class=\"hljs-string\">      alpha (float):     Learning rate</span><br><span class=\"hljs-string\">      num_iters (int):   number of iterations to run gradient descent</span><br><span class=\"hljs-string\">      cost_function:     function to call to produce cost</span><br><span class=\"hljs-string\">      gradient_function: function to call to produce gradient</span><br><span class=\"hljs-string\">      </span><br><span class=\"hljs-string\">    Returns:</span><br><span class=\"hljs-string\">      w (scalar): Updated value of parameter after running gradient descent</span><br><span class=\"hljs-string\">      b (scalar): Updated value of parameter after running gradient descent</span><br><span class=\"hljs-string\">      J_history (List): History of cost values</span><br><span class=\"hljs-string\">      p_history (list): History of parameters [w,b] </span><br><span class=\"hljs-string\">      &quot;&quot;&quot;</span><br>    <br>    w = copy.deepcopy(w_in) <span class=\"hljs-comment\"># avoid modifying global w_in</span><br>    <span class=\"hljs-comment\"># An array to store cost J and w&#x27;s at each iteration primarily for graphing later</span><br>    J_history = []<br>    p_history = []<br>    b = b_in<br>    w = w_in<br>    <br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num_iters):<br>        <span class=\"hljs-comment\"># Calculate the gradient and update the parameters using gradient_function</span><br>        dj_dw, dj_db = gradient_function(x, y, w , b)     <br><br>        <span class=\"hljs-comment\"># Update Parameters using equation (3) above</span><br>        b = b - alpha * dj_db                            <br>        w = w - alpha * dj_dw                            <br><br>        <span class=\"hljs-comment\"># Save cost J at each iteration</span><br>        <span class=\"hljs-keyword\">if</span> i&lt;<span class=\"hljs-number\">100000</span>:      <span class=\"hljs-comment\"># prevent resource exhaustion </span><br>            J_history.append( cost_function(x, y, w , b))<br>            p_history.append([w,b])<br>        <span class=\"hljs-comment\"># Print cost every at intervals 10 times or as many iterations if &lt; 10</span><br>        <span class=\"hljs-keyword\">if</span> i% math.ceil(num_iters/<span class=\"hljs-number\">10</span>) == <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Iteration <span class=\"hljs-subst\">&#123;i:<span class=\"hljs-number\">4</span>&#125;</span>: Cost <span class=\"hljs-subst\">&#123;J_history[-<span class=\"hljs-number\">1</span>]:<span class=\"hljs-number\">0.2</span>e&#125;</span> &quot;</span>,<br>                  <span class=\"hljs-string\">f&quot;dj_dw: <span class=\"hljs-subst\">&#123;dj_dw: <span class=\"hljs-number\">0.3</span>e&#125;</span>, dj_db: <span class=\"hljs-subst\">&#123;dj_db: <span class=\"hljs-number\">0.3</span>e&#125;</span>  &quot;</span>,<br>                  <span class=\"hljs-string\">f&quot;w: <span class=\"hljs-subst\">&#123;w: <span class=\"hljs-number\">0.3</span>e&#125;</span>, b:<span class=\"hljs-subst\">&#123;b: <span class=\"hljs-number\">0.5</span>e&#125;</span>&quot;</span>)<br> <br>    <span class=\"hljs-keyword\">return</span> w, b, J_history, p_history <span class=\"hljs-comment\">#return w and J,w history for graphing</span><br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">Iteration    <span class=\"hljs-number\">0</span>: Cost <span class=\"hljs-number\">7.93e+04</span>  dj_dw: -<span class=\"hljs-number\">6.500e+02</span>, dj_db: -<span class=\"hljs-number\">4.000e+02</span>   w:  <span class=\"hljs-number\">6.500e+00</span>, b: <span class=\"hljs-number\">4.00000e+00</span><br>Iteration <span class=\"hljs-number\">1000</span>: Cost <span class=\"hljs-number\">3.41e+00</span>  dj_dw: -<span class=\"hljs-number\">3.712e-01</span>, dj_db:  <span class=\"hljs-number\">6.007e-01</span>   w:  <span class=\"hljs-number\">1.949e+02</span>, b: <span class=\"hljs-number\">1.08228e+02</span><br>Iteration <span class=\"hljs-number\">2000</span>: Cost <span class=\"hljs-number\">7.93e-01</span>  dj_dw: -<span class=\"hljs-number\">1.789e-01</span>, dj_db:  <span class=\"hljs-number\">2.895e-01</span>   w:  <span class=\"hljs-number\">1.975e+02</span>, b: <span class=\"hljs-number\">1.03966e+02</span><br>Iteration <span class=\"hljs-number\">3000</span>: Cost <span class=\"hljs-number\">1.84e-01</span>  dj_dw: -<span class=\"hljs-number\">8.625e-02</span>, dj_db:  <span class=\"hljs-number\">1.396e-01</span>   w:  <span class=\"hljs-number\">1.988e+02</span>, b: <span class=\"hljs-number\">1.01912e+02</span><br>Iteration <span class=\"hljs-number\">4000</span>: Cost <span class=\"hljs-number\">4.28e-02</span>  dj_dw: -<span class=\"hljs-number\">4.158e-02</span>, dj_db:  <span class=\"hljs-number\">6.727e-02</span>   w:  <span class=\"hljs-number\">1.994e+02</span>, b: <span class=\"hljs-number\">1.00922e+02</span><br>Iteration <span class=\"hljs-number\">5000</span>: Cost <span class=\"hljs-number\">9.95e-03</span>  dj_dw: -<span class=\"hljs-number\">2.004e-02</span>, dj_db:  <span class=\"hljs-number\">3.243e-02</span>   w:  <span class=\"hljs-number\">1.997e+02</span>, b: <span class=\"hljs-number\">1.00444e+02</span><br>Iteration <span class=\"hljs-number\">6000</span>: Cost <span class=\"hljs-number\">2.31e-03</span>  dj_dw: -<span class=\"hljs-number\">9.660e-03</span>, dj_db:  <span class=\"hljs-number\">1.563e-02</span>   w:  <span class=\"hljs-number\">1.999e+02</span>, b: <span class=\"hljs-number\">1.00214e+02</span><br>Iteration <span class=\"hljs-number\">7000</span>: Cost <span class=\"hljs-number\">5.37e-04</span>  dj_dw: -<span class=\"hljs-number\">4.657e-03</span>, dj_db:  <span class=\"hljs-number\">7.535e-03</span>   w:  <span class=\"hljs-number\">1.999e+02</span>, b: <span class=\"hljs-number\">1.00103e+02</span><br>Iteration <span class=\"hljs-number\">8000</span>: Cost <span class=\"hljs-number\">1.25e-04</span>  dj_dw: -<span class=\"hljs-number\">2.245e-03</span>, dj_db:  <span class=\"hljs-number\">3.632e-03</span>   w:  <span class=\"hljs-number\">2.000e+02</span>, b: <span class=\"hljs-number\">1.00050e+02</span><br>Iteration <span class=\"hljs-number\">9000</span>: Cost <span class=\"hljs-number\">2.90e-05</span>  dj_dw: -<span class=\"hljs-number\">1.082e-03</span>, dj_db:  <span class=\"hljs-number\">1.751e-03</span>   w:  <span class=\"hljs-number\">2.000e+02</span>, b: <span class=\"hljs-number\">1.00024e+02</span><br>(w,b) found by gradient descent: (<span class=\"hljs-number\">199.9929</span>,<span class=\"hljs-number\">100.0116</span>)<br></code></pre></div></td></tr></table></figure>\n\n<p>花点时间，注意上面打印的梯度下降过程的一些特征。</p>\n<ul>\n<li>正如课堂上的幻灯片所描述的，成本开始很大，然后迅速下降。</li>\n<li>偏导数dj_dw和dj_db也变小了，起初很快，然后变慢。正如课堂上的图表所示，随着过程接近“碗底”，由于在这一点上的导数值较小，进程会变慢。</li>\n<li>尽管学习率alpha保持不变，但进程会减慢</li>\n</ul>\n<p><img src=\"/2023/03/13/ML003/image-20230313155614815.png\" alt=\"image-20230313155614815\"></p>\n<h2 id=\"Cost-versus-iterations-of-gradient-descent\"><a href=\"#Cost-versus-iterations-of-gradient-descent\" class=\"headerlink\" title=\"Cost versus iterations of gradient descent\"></a>Cost versus iterations of gradient descent</h2><p>成本与迭代的关系图是衡量梯度下降技术进展的有用方法。在成功的运行中，成本总是会降低。最初成本的变化如此之快，用不同于最终下降的尺度来描绘最初的上升是有用的。</p>\n<p>在下面的图表中，请注意轴上的成本规模和迭代步骤。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># plot cost versus iteration  </span><br>fig, (ax1, ax2) = plt.subplots(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, constrained_layout=<span class=\"hljs-literal\">True</span>, figsize=(<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">4</span>))<br>ax1.plot(J_hist[:<span class=\"hljs-number\">100</span>])<br>ax2.plot(<span class=\"hljs-number\">1000</span> + np.arange(<span class=\"hljs-built_in\">len</span>(J_hist[<span class=\"hljs-number\">1000</span>:])), J_hist[<span class=\"hljs-number\">1000</span>:])<br>ax1.set_title(<span class=\"hljs-string\">&quot;Cost vs. iteration(start)&quot;</span>);  ax2.set_title(<span class=\"hljs-string\">&quot;Cost vs. iteration (end)&quot;</span>)<br>ax1.set_ylabel(<span class=\"hljs-string\">&#x27;Cost&#x27;</span>)            ;  ax2.set_ylabel(<span class=\"hljs-string\">&#x27;Cost&#x27;</span>) <br>ax1.set_xlabel(<span class=\"hljs-string\">&#x27;iteration step&#x27;</span>)  ;  ax2.set_xlabel(<span class=\"hljs-string\">&#x27;iteration step&#x27;</span>) <br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313160112122.png\" alt=\"image-20230313160112122\"></p>\n<h2 id=\"Predictions\"><a href=\"#Predictions\" class=\"headerlink\" title=\"Predictions\"></a>Predictions</h2><p>现在您已经发现了参数𝑤的最佳值和𝑏，您现在可以使用该模型根据我们学习的参数来预测房屋价值。正如预期的那样，在相同的住房条件下，预测值与训练值几乎相同。进一步，不在预测中的值与期望值一致。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;1000 sqft house prediction <span class=\"hljs-subst\">&#123;w_final*<span class=\"hljs-number\">1.0</span> + b_final:<span class=\"hljs-number\">0.1</span>f&#125;</span> Thousand dollars&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;1200 sqft house prediction <span class=\"hljs-subst\">&#123;w_final*<span class=\"hljs-number\">1.2</span> + b_final:<span class=\"hljs-number\">0.1</span>f&#125;</span> Thousand dollars&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;2000 sqft house prediction <span class=\"hljs-subst\">&#123;w_final*<span class=\"hljs-number\">2.0</span> + b_final:<span class=\"hljs-number\">0.1</span>f&#125;</span> Thousand dollars&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-number\">1000</span> sqft house prediction <span class=\"hljs-number\">300.0</span> Thousand dollars<br><span class=\"hljs-number\">1200</span> sqft house prediction <span class=\"hljs-number\">340.0</span> Thousand dollars<br><span class=\"hljs-number\">2000</span> sqft house prediction <span class=\"hljs-number\">500.0</span> Thousand dollars<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Plotting\"><a href=\"#Plotting\" class=\"headerlink\" title=\"Plotting\"></a>Plotting</h2><p>您可以通过在代价(w,b)的等高线图上绘制迭代的代价来显示梯度下降在执行过程中的进度。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">fig, ax = plt.subplots(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>, figsize=(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">6</span>))<br>plt_contour_wgrad(x_train, y_train, p_hist, ax)<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313160446994.png\" alt=\"image-20230313160446994\"></p>\n<p>上面的等高线图显示了𝑤和𝑏范围内的𝑐𝑜𝑠𝑡(𝑤，𝑏)。成本水平由圆环表示。用红色箭头覆盖的是梯度下降的路径。这里有一些需要注意的事情:</p>\n<ul>\n<li>这条路径朝着它的目标稳步(单调)前进。</li>\n<li>最初的步骤比接近目标的步骤要大得多。</li>\n</ul>\n<p>放大，我们可以看到梯度下降的最后步骤。注意，阶梯之间的距离随着梯度趋近于零而缩小。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">fig, ax = plt.subplots(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>, figsize=(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>))<br>plt_contour_wgrad(x_train, y_train, p_hist, ax, w_range=[<span class=\"hljs-number\">180</span>, <span class=\"hljs-number\">220</span>, <span class=\"hljs-number\">0.5</span>], b_range=[<span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">0.5</span>],<br>            contours=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>],resolution=<span class=\"hljs-number\">0.5</span>)<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313160944244.png\" alt=\"image-20230313160944244\"></p>\n<h2 id=\"Increased-Learning-Rate\"><a href=\"#Increased-Learning-Rate\" class=\"headerlink\" title=\"Increased Learning Rate\"></a>Increased Learning Rate</h2><p>在这节课中，在式(3)中有一个关于学习率的合适值𝛼的讨论。𝛼越大，梯度下降收敛到解的速度就越快。但是，如果它太大，梯度下降就会发散。上面有一个很好收敛的解的例子。让我们试着增加𝛼的值看看会发生什么:</p>\n<p><img src=\"/2023/03/13/ML003/image-20230313161516209.png\" alt=\"image-20230313161516209\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># initialize parameters</span><br>w_init = <span class=\"hljs-number\">0</span><br>b_init = <span class=\"hljs-number\">0</span><br><span class=\"hljs-comment\"># set alpha to a large value</span><br>iterations = <span class=\"hljs-number\">10</span><br>tmp_alpha = <span class=\"hljs-number\">8.0e-1</span><br><span class=\"hljs-comment\"># run gradient descent</span><br>w_final, b_final, J_hist, p_hist = gradient_descent(x_train ,y_train, w_init, b_init, tmp_alpha, <br>                                                    iterations, compute_cost, compute_gradient)<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs pyhton\">Iteration    0: Cost 2.58e+05  dj_dw: -6.500e+02, dj_db: -4.000e+02   w:  5.200e+02, b: 3.20000e+02<br>Iteration    1: Cost 7.82e+05  dj_dw:  1.130e+03, dj_db:  7.000e+02   w: -3.840e+02, b:-2.40000e+02<br>Iteration    2: Cost 2.37e+06  dj_dw: -1.970e+03, dj_db: -1.216e+03   w:  1.192e+03, b: 7.32800e+02<br>Iteration    3: Cost 7.19e+06  dj_dw:  3.429e+03, dj_db:  2.121e+03   w: -1.551e+03, b:-9.63840e+02<br>Iteration    4: Cost 2.18e+07  dj_dw: -5.974e+03, dj_db: -3.691e+03   w:  3.228e+03, b: 1.98886e+03<br>Iteration    5: Cost 6.62e+07  dj_dw:  1.040e+04, dj_db:  6.431e+03   w: -5.095e+03, b:-3.15579e+03<br>Iteration    6: Cost 2.01e+08  dj_dw: -1.812e+04, dj_db: -1.120e+04   w:  9.402e+03, b: 5.80237e+03<br>Iteration    7: Cost 6.09e+08  dj_dw:  3.156e+04, dj_db:  1.950e+04   w: -1.584e+04, b:-9.80139e+03<br>Iteration    8: Cost 1.85e+09  dj_dw: -5.496e+04, dj_db: -3.397e+04   w:  2.813e+04, b: 1.73730e+04<br>Iteration    9: Cost 5.60e+09  dj_dw:  9.572e+04, dj_db:  5.916e+04   w: -4.845e+04, b:-2.99567e+04<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313161636772.png\" alt=\"image-20230313161636772\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt_divergence(p_hist, J_hist,x_train, y_train)<br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/13/ML003/image-20230313161959222.png\" alt=\"image-20230313161959222\"></p>\n<p>上图中，左图显示了𝑤在梯度下降的前几个步骤中的进展。𝑤从正振荡到负，成本迅速增长。梯度下降同时在𝑤和𝑏上运行，所以需要右边的3d图才能看到完整的图片。</p>\n<h2 id=\"Congratulations\"><a href=\"#Congratulations\" class=\"headerlink\" title=\"Congratulations!\"></a>Congratulations!</h2><p>在这个实验室里，你:</p>\n<ul>\n<li>深入研究单个变量的梯度下降的细节。</li>\n<li>开发了一个计算梯度的程序</li>\n<li>看看梯度是什么</li>\n<li>完成一个梯度下降程序</li>\n<li>利用梯度下降法寻找参数</li>\n<li>检查了学习率大小的影响</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797\">https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797</a></p>\n<p><a href=\"https://github.com/kaieye/2022-Machine-Learning-Specialization\">kaieye&#x2F;2022-Machine-Learning-Specialization (github.com)</a></p>\n",
            "tags": [
                "Tensorflow",
                "Machine Learning"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/12/ML002/",
            "url": "https://xingyuanjie.top/2023/03/12/ML002/",
            "title": "代价函数",
            "date_published": "2023-03-12T08:33:17.000Z",
            "content_html": "<h2 id=\"代价函数\"><a href=\"#代价函数\" class=\"headerlink\" title=\"代价函数\"></a>代价函数</h2><p><img src=\"/2023/03/12/ML002/image-20230312164306128.png\" alt=\"image-20230312164306128\"></p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>在本实验中，你将:</p>\n<ul>\n<li>你将实现和探索成本函数的线性回归伴随一个变量。</li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>在本实验室中，我们将使用:</p>\n<ul>\n<li>NumPy，一个用于科学计算的流行库</li>\n<li>Matplotlib，用于绘制数据的流行库</li>\n<li>本地目录的lab_utils_uni.py文件中的本地绘图例程</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> nunpy <span class=\"hljs-keyword\">as</span> np<br>%matplotlib widget<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">from</span> lab_utils_uni <span class=\"hljs-keyword\">import</span> plt_intuition, plt_stationary, plt_updata_onclick, soup_bowl<br>plt.style.use(<span class=\"hljs-string\">&#x27;./deeplearning.mplstyle&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"问题意境\"><a href=\"#问题意境\" class=\"headerlink\" title=\"问题意境\"></a>问题意境</h2><p>你想要一个模型，它可以根据房子的大小预测房价。让我们使用与上一个实验室之前相同的两个数据点——一个1000平方英尺的房子卖了30万美元，一个2000平方英尺的房子卖了50万美元。</p>\n<table>\n<thead>\n<tr>\n<th>Size(1000 sqft)</th>\n<th>Price(1000s of dollars)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">x_train = np.array([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>])   <span class=\"hljs-comment\">#(size in 1000 square feet)</span><br>y_train = np.zrray([<span class=\"hljs-number\">300.0</span>, <span class=\"hljs-number\">500.0</span>])\t<span class=\"hljs-comment\">#(price in 1000s of dollars)</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"计算代价\"><a href=\"#计算代价\" class=\"headerlink\" title=\"计算代价\"></a>计算代价</h2><p>这个作业中的术语“成本”可能会让人有点困惑，因为数据是住房成本。在这里，成本是衡量我们的模型预测房子目标价格的好坏。“价格”一词指的是住房数据。</p>\n<p>含一个变量的成本方程为:</p>\n<p><img src=\"/2023/03/12/ML002/image-20230312165434160.png\" alt=\"image-20230312165434160\"></p>\n<p>在这里</p>\n<p><img src=\"/2023/03/12/ML002/image-20230312165503613.png\" alt=\"image-20230312165503613\"></p>\n<ul>\n<li>f_w,b(x^i)是我们使用参数w,b来预测例子i。</li>\n<li>（f_w,b(x^i) - y^i）^2  是目标值与预测值之间的差的平方</li>\n<li>这些差异被加在所有m例子上，再除以2m，得到代价函数 <strong>J（w,b）</strong></li>\n</ul>\n<p>注意，在讲座中，总和的范围通常是从1到m，而代码将从0到m-1。</p>\n<p>下面的代码通过遍历每个示例来计算成本。在每个循环中:</p>\n<ul>\n<li>f_wb，计算一个预测</li>\n<li>目标和预测之间的差值被计算和平方。</li>\n<li>这被加到总成本中。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">compute_cost</span>(<span class=\"hljs-params\">x, y, w, b</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Computes the cost function for linear regression</span><br><span class=\"hljs-string\">    </span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">    \tx (ndarray (m,)):Data, m examples</span><br><span class=\"hljs-string\">    \ty (ndarray (m,)):target values</span><br><span class=\"hljs-string\">    \tw,b (scalar)\t:model parameters</span><br><span class=\"hljs-string\">    </span><br><span class=\"hljs-string\">    Returns</span><br><span class=\"hljs-string\">    \ttotal_cost (float):The cost of using w,b as the parameters for linear regression to fit the data points in x and y</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-comment\">#number of training examples</span><br>    m = x.shape[<span class=\"hljs-number\">0</span>]<br>    <br>    cost_sum = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):<br>        f_wb = w * x[i] + b<br>        cost = (f_wb - y[i])**<span class=\"hljs-number\">2</span><br>        cost_sum = cost_sum + cost<br>    total_cost = (<span class=\"hljs-number\">1</span>/(<span class=\"hljs-number\">2</span>*m)) * cost_sum<br>    <br>    <span class=\"hljs-keyword\">return</span> total_cost<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Cost-Function-Intuition\"><a href=\"#Cost-Function-Intuition\" class=\"headerlink\" title=\"Cost Function Intuition\"></a>Cost Function Intuition</h2><p><img src=\"/2023/03/12/ML002/image-20230312172325465.png\" alt=\"image-20230312172325465\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt_intuition(x_train, y_train)<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/12/ML002/image-20230313144221393.png\" alt=\"image-20230313144221393\"></p>\n<p>情节中有几点值得一提。</p>\n<ul>\n<li>当𝑤&#x3D;200时，成本最小化，这与之前实验室的结果相吻合。</li>\n<li>因为在成本方程中，目标和预测之间的差异是平方，当𝑤时，成本迅速增加不是太大就是太小。</li>\n<li>使用通过最小化成本选择的w和b，可以得到与数据完美匹配的直线。</li>\n</ul>\n<h2 id=\"Cost-Function-Visualiztion-3D\"><a href=\"#Cost-Function-Visualiztion-3D\" class=\"headerlink\" title=\"Cost Function Visualiztion-3D\"></a>Cost Function Visualiztion-3D</h2><p>你可以通过三维绘图或等高线图看到成本是如何随w和b变化的。</p>\n<p>值得注意的是，这门课的一些情节会变得相当复杂。本文提供了绘图例程，虽然通读代码以熟悉这些方法是有指导意义的，但要成功完成课程并不需要这样做。例程在本地目录lab_utils_uni.py中。</p>\n<h2 id=\"Larger-Data-Set\"><a href=\"#Larger-Data-Set\" class=\"headerlink\" title=\"Larger Data Set\"></a>Larger Data Set</h2><p>较大的数据集用更多的数据点来观察一个场景是很有指导意义的。该数据集包括不在同一线上的数据点。这对成本方程意味着什么?我们能找到𝑤、𝑏那样使得代价是0?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">x_train = np.array([<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">1.7</span>,<span class=\"hljs-number\">2.0</span>,<span class=\"hljs-number\">2.5</span>,<span class=\"hljs-number\">3.0</span>,<span class=\"hljs-number\">3.2</span>])<br>y_train = np.array([<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">300</span>,<span class=\"hljs-number\">480</span>,<span class=\"hljs-number\">430</span>,<span class=\"hljs-number\">630</span>,<span class=\"hljs-number\">730</span>])<br></code></pre></div></td></tr></table></figure>\n\n<p>在等高线图中，点击一个点，选择w和b，以达到最低的成本。使用轮廓来指导你的选择。注意，更新图形可能需要几秒钟的时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">plt.close(<span class=\"hljs-string\">&#x27;all&#x27;</span>)<br>fig, ax ,dyn_items = plt_stationary(x_train, y_train)<br>updater = plt_update_onclick(fig, ax, x_train,y_train,dyn_items)<br></code></pre></div></td></tr></table></figure>\n\n<p>上面，注意左边图中的虚线。这些代表了你的训练集中每个例子所贡献的代价的部分。在本例中，值约为𝑤&#x3D;209和𝑏&#x3D; 2.4提供低代价。请注意，因为我们的训练示例不在一条线上，所以最小代价不为零。</p>\n<h2 id=\"Convex-Cost-surface\"><a href=\"#Convex-Cost-surface\" class=\"headerlink\" title=\"Convex Cost surface\"></a>Convex Cost surface</h2><p>成本函数平方损失的事实确保了“误差曲面”像汤碗一样凸出。它总是有一个最小值，可以通过在所有维度上跟随梯度来达到。在前面的图中，因为𝑤和𝑏尺寸比例不同，这是不容易识别的。下图，其中𝑤和𝑏都是对称的，在讲座中展示过:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">soup_bowl()<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Congratulations\"><a href=\"#Congratulations\" class=\"headerlink\" title=\"Congratulations!\"></a>Congratulations!</h2><p>您已经学习了以下内容:</p>\n<ul>\n<li>成本方程提供了一种衡量预测与训练数据匹配程度的方法。</li>\n<li>最小化成本可以提供𝑤和b的最优值。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797\">https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797</a></p>\n<p><a href=\"https://github.com/kaieye/2022-Machine-Learning-Specialization\">kaieye&#x2F;2022-Machine-Learning-Specialization (github.com)</a></p>\n",
            "tags": [
                "Tensorflow",
                "Machine Learning"
            ]
        }
    ]
}