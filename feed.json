{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/03/08/cuda013/",
            "url": "https://xingyuanjie.top/2023/03/08/cuda013/",
            "title": "组织并行编程",
            "date_published": "2023-03-08T14:13:01.000Z",
            "content_html": "<h2 id=\"组织并行编程\"><a href=\"#组织并行编程\" class=\"headerlink\" title=\"组织并行编程\"></a>组织并行编程</h2><p>从前面的例子可以看出，如果使用了合适的网格和块大小来正确地组织线程，那么可以对内核性能产生很大的影响。在向量加法的例子中，为了实现最佳性能我们调整了块的大小，并基于块大小和向量数据大小计算出了网格大小。</p>\n<p>现在通过一个矩阵加法的例子说明这一点。对于矩阵运算，传统的方法是在内核中使用一个包含二维网格与二位块的布局来组织线程。但是，这种传统的方法无法获得最佳性能。在矩阵加法中使用以下布局将有助于了解更多关于网格和块的启发性的用法：</p>\n<ol>\n<li>有二维线程块构成的二维网格</li>\n<li>由一维线程块构成的一维网格</li>\n<li>由一维线程块构成的二维网格</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/07/CUDA012/",
            "url": "https://xingyuanjie.top/2023/03/07/CUDA012/",
            "title": "CUDA给核函数计时",
            "date_published": "2023-03-07T01:53:34.000Z",
            "content_html": "<h2 id=\"CUDA给核函数计时\"><a href=\"#CUDA给核函数计时\" class=\"headerlink\" title=\"CUDA给核函数计时\"></a>CUDA给核函数计时</h2><p>在内核的性能转换过程中，了解核函数的执行需要多长时间是很有帮助并且十分关键的。衡量核函数性能的方法有很多。最简单的方法是在主机端使用一个CPU或GPU计时器来计算内核的执行时间。在本节，你需要设置一个CPU计时器，并使用NVIDIA分析工具来计算执行时间。</p>\n<h3 id=\"用CPU计时器计时\"><a href=\"#用CPU计时器计时\" class=\"headerlink\" title=\"用CPU计时器计时\"></a>用CPU计时器计时</h3><p>可以使用gettimeofday系统调用来创建一个CPU计时器，以获取系统的时钟时间，它将返回自1970年1月1日零点以来，到现在的秒数。程序中需要添加sys&#x2F;time.h头文件，如代码清单2-5所示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">cpuSecond</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">timeval</span> <span class=\"hljs-title\">tp</span>;</span><br>    <span class=\"hljs-built_in\">gettimeofday</span>(&amp;tp,<span class=\"hljs-literal\">NULL</span>);<br>    <br>    <span class=\"hljs-keyword\">return</span> ((<span class=\"hljs-keyword\">double</span>)tp.tv_sec + (<span class=\"hljs-keyword\">double</span>)tp.tv_usec*<span class=\"hljs-number\">1.e-6</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>你可以用cpuSecond函数来测试你的核函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span> iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>kernel_name&lt;&lt;&lt;grid,block&gt;&gt;&gt;(argument list);<br><span class=\"hljs-built_in\">cudaDeviceSynchronize</span>();<br><span class=\"hljs-keyword\">double</span> iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br></code></pre></div></td></tr></table></figure>\n\n<p>由于核函数调用与主机端程序是异步的，你需要用cudaDeviceSynchronize函数来等待所有的GPU线程运行结束。变量iElaps表示程序运行的时间，就像你用手表记录的核函数的执行时间（用秒计算）。</p>\n<p>现在，通过设置数据集大小来对一个有16M个元素的大向量进行测试：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">24</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>由于GPU的可扩展性，你需要借助块和线程的索引来计算一个按行优先的数组索引 i ，并对核函数进行修改，添加限定条件（i &lt; N）来检验索引值是否越界，如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__global__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumArraysOnGPU</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> N)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;<br>    <span class=\"hljs-keyword\">if</span>( n &lt; N) C[i] = A[i] + B[i];<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>有了这些更改，可以使用不同的执行配置来衡量核函数。为了解决创建的线程总数大于向量元素总数的情况，你需要限制内核不能非法访问全局内存，如图2-7所示。</p>\n<p><img src=\"/2023/03/07/CUDA012/image-20230307120643741.png\" alt=\"image-20230307120643741\"></p>\n<p>代码清单2-5展示了如何在主函数中用CPU计时器测试向量加法的核函数。</p>\n<p>代码清单2-5\t测试向量加法的核函数（sumArraysOnGPU-timer.cu）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cuda_runtime.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/time.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> **argv)</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s Starting...\\n&quot;</span>,argv[<span class=\"hljs-number\">0</span>]);<br>    <br>    <span class=\"hljs-comment\">//set up device</span><br>    <span class=\"hljs-keyword\">int</span> dev = <span class=\"hljs-number\">0</span>;<br>    cudaDeviceProp deviceProp;<br>    <span class=\"hljs-built_in\">CHECK</span>(<span class=\"hljs-built_in\">cudaGetDeviceProperties</span>(&amp;deviceProp, dev));<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Using Device %d: %s\\n&quot;</span>, dev, deviceProp.name);<br>    <span class=\"hljs-built_in\">CHECK</span>(<span class=\"hljs-built_in\">cudaSetDevice</span>(dev));<br>    <br>    <span class=\"hljs-comment\">//set up data size of vectors</span><br>    <span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">24</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Vector size %d\\n&quot;</span>,nElem);<br>    <br>    <span class=\"hljs-comment\">//malloc host memory</span><br>    <span class=\"hljs-keyword\">size_t</span> nBytes = nElem * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>);<br>    <br>    <span class=\"hljs-keyword\">float</span> *h_A, *h_B, *hostRef, *gpuRef;<br>    h_A = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    h_B = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    hostRef = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    gpuRef = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    <br>    <span class=\"hljs-keyword\">double</span> iStart,iElaps;<br>    <br>    <span class=\"hljs-comment\">//initialize data at host side</span><br>    iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    <span class=\"hljs-built_in\">initialData</span>(h_A, nElem);<br>    <span class=\"hljs-built_in\">initialData</span>(h_B, nElem);<br>    iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <br>    <span class=\"hljs-built_in\">memset</span>(hostRef, <span class=\"hljs-number\">0</span> ,nBytes);<br>    <span class=\"hljs-built_in\">memset</span>(gpuRef, <span class=\"hljs-number\">0</span> ,nBytes);<br>    <br>    <span class=\"hljs-comment\">//add vector at host side for result checks</span><br>    iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    <span class=\"hljs-built_in\">sumArraysOnHost</span>(h_A, h_B, hostRef, nElem);<br>    iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <br>    <span class=\"hljs-comment\">//malloc device global memory</span><br>    <span class=\"hljs-keyword\">float</span> *d_A, *d_B, *d_C;<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_A, nBytes);<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_B, nBytes);<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_C, nBytes);<br>    <br>    <span class=\"hljs-comment\">//transfer data from host to device</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_A, h_A, nBytes, cudaMemcpyHostTodevice);<br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_B, h_B, nBytes, cudaMemcpyHostTodevice);<br>    <br>    <span class=\"hljs-comment\">//invoke kernel at host side</span><br>    <span class=\"hljs-keyword\">int</span> iLen = <span class=\"hljs-number\">1024</span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(iLen)</span></span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">((nElem+block.x<span class=\"hljs-number\">-1</span>))</span>/block.x)</span>;<br>    <br>    iStart = <span class=\"hljs-built_in\">cpuSecond</span>();<br>    sumArraysOnGPU&lt;&lt;&lt;grid,block&gt;&gt;&gt;(d_A, d_B, d_C,nElem);<br>    <span class=\"hljs-built_in\">cudaDeviceSynchronize</span>();<br>    iElaps = <span class=\"hljs-built_in\">cpuSecond</span>() - iStart;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;sumArraysOnGPU&lt;&lt;&lt;%d,%d&gt;&gt;&gt; Time elapsed %f sec\\n&quot;</span>,grid.x, block.x, iElaps);<br>    <br>    <span class=\"hljs-comment\">//copy kernel result back to host side</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost);<br>    <br>    <span class=\"hljs-comment\">//check device results</span><br>    <span class=\"hljs-built_in\">checkResult</span>(hostRef, gpuRef, nElem);<br>    <br>    <span class=\"hljs-comment\">//free device global memory</span><br>    <span class=\"hljs-built_in\">cudaFree</span>(d_A);<br>    <span class=\"hljs-built_in\">cudaFree</span>(d_B);<br>    <span class=\"hljs-built_in\">cudaFree</span>(d_C);<br>    <br>    <span class=\"hljs-comment\">//free host memory</span><br>    <span class=\"hljs-built_in\">free</span>(h_A);<br>    <span class=\"hljs-built_in\">free</span>(h_B);<br>    <span class=\"hljs-built_in\">free</span>(hostRef);<br>    <span class=\"hljs-built_in\">free</span>(gpuRef);<br>    <br>    <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>默认的执行配置被设置为一个包含16384个块的一维网格，每个块包含1024个线程。用以下命令编译并运行程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc sumArraysOnGPU-timer.cu -o sumArraysOnGPU-timer<br>./sumArraysOnGPU-timer<br></code></pre></div></td></tr></table></figure>\n\n<p>在基于英特尔Sandy Bridge架构的系统上进行测试，从代码清单2-5的示例中可以看出，在GPU上进行的向量加法的运算速度是在CPU上运行向量加法的3.86倍。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">./sumArraysOnGPU-timer Starting...<br>Using Device 0:Tesia M2070<br>Vector size 16777216<br>sumArraysOnGPU&lt;&lt;&lt;16384, 1024&gt;&gt;&gt;\t\tTime elapsed 0.002456 sec<br>Arrays match.<br></code></pre></div></td></tr></table></figure>\n\n<p>把块的维度减少到512可以创建32768个块。在这个新的配置下，内核的性能提升了1.19倍。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sumArraysOnGPU&lt;&lt;&lt;32768, 512&gt;&gt;&gt;\tTime elapsed 0.002058 sec<br></code></pre></div></td></tr></table></figure>\n\n<p>如果进一步将块的维度降低到256，系统将提示以下错误信息，信息表示块的总数超过一维网格的限制。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">./sumArraysOnGPU-timer Starting...<br>Using Device 0:\tTesla M2070<br>Vector size 16777216<br>sumArraysOnGPU&lt;&lt;&lt;65536, 256&gt;&gt;&gt;  Time elapsed 0.000183 sec<br>Error: sumArraysOnGPU-timer.cu:153, code:9, reason: invalid configuration argument<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"了解自身局限性\"><a href=\"#了解自身局限性\" class=\"headerlink\" title=\"了解自身局限性\"></a>了解自身局限性</h3><p>在调整执行配置时需要了解的一个关键点是对网格和块维度的限制。线程层次结构中每个层次的最大尺寸取决于设备。</p>\n<p>CUDA提供了通过查询GPU来了解这些限制的能力。</p>\n<p>对于Fermi设备，每个块的最大线程数是1024，且网格的x,y,z三个方向上的维度最大值是65535</p>\n<h3 id=\"用nvprof工具计时\"><a href=\"#用nvprof工具计时\" class=\"headerlink\" title=\"用nvprof工具计时\"></a>用nvprof工具计时</h3><p>自CUDA 5.0以来，NVIDIA提供了一个名为nvprof的命令行分析工具，可以帮助从应用程序的CPU和GPU活动情况中获取时间线信息，其包括内核执行，内存传输以及CUDA API的调用。其用法如下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvprof [nvprof_args] &lt;application&gt;  [application_args]<br></code></pre></div></td></tr></table></figure>\n\n<p>可以使用以下命令获取更多关于nvprof的帮助信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvprof --help<br></code></pre></div></td></tr></table></figure>\n\n<p>你可以用如下命令去测试内核：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvprof  ./sumArraysOnGPU-timer<br></code></pre></div></td></tr></table></figure>\n\n<p>nvprof的输出结果会因为你使用的GPU类型不同而有所差异。以下结果是从Tesla GPU中得到的：</p>\n<p><img src=\"/2023/03/07/CUDA012/image-20230307142027522.png\" alt=\"image-20230307142027522\"></p>\n<p>以上结果的前半部分来自于程序的输出，后半部分来自于nvprof的输出。可以注意到，CPU计时器显示消耗的内核时间为3.26ms，而nvprof显示消耗的内核时间为2.90ms。在这个例子中，nvprof的结果更为精确，因为CPU计时器测量的时间中包含了来自nvprof附加的时间。</p>\n<p>nvprof是一个能帮助你理解在执行应用程序时所花费的时间主要用在何处的强大工具。可以注意到，在这个例子中，主机和设备之间的数据传输需要的时间比内核执行的时间要多。图2-8所描绘的时间线（未按比例绘制），显示了在CPU上消耗的时间，数据传输所用的时间以及在GPU上计算所用的时间。</p>\n<p><img src=\"/2023/03/07/CUDA012/image-20230307145539161.png\" alt=\"image-20230307145539161\"></p>\n<p>对于HPC工作负载，理解程序中通信比的计算是非常重要的。如果你的应用程序用于计算的时间大于数据传输所用的时间，那么或许可以压缩这些操作，并完全隐藏与传输数据有关的延迟。如果你的应用程序用于计算的时间少于数据传输所用的时间，那么需要尽量减少主机和设备之间的传输。</p>\n<h3 id=\"比较应用程序的性能将理论界限最大化\"><a href=\"#比较应用程序的性能将理论界限最大化\" class=\"headerlink\" title=\"比较应用程序的性能将理论界限最大化\"></a>比较应用程序的性能将理论界限最大化</h3><p>在进行程序优化时，如何将应用程序和理论界限进行比较是很重要的。由nvprof得到的计数器可以帮助你获取应用程序的指令和内存吞吐量。如果将应用程序的测量值与理论峰值进行比较，可以判定你的应用程序的性能是受限于算法还是受限于内存带宽的。以Tesla K10为例，可以得到理论上的比率：</p>\n<p>Tesla K10单精度峰值浮点运算次数</p>\n<p>745 MHz核心频率*2 GPU&#x2F;芯片*  （8个多处理器<em>192个浮点单元</em>32核心&#x2F;多处理器）*2OPS&#x2F;周期 &#x3D; 4.58 TFLOPS （FLOPS表示每秒浮点运算次数）</p>\n<p>Tesla K10内存带宽峰值</p>\n<p>2 GPU&#x2F;芯片<em>256位</em>2500 MHz内存时钟*2 DDR&#x2F;8位&#x2F;字节 &#x3D; 320 GB&#x2F;s</p>\n<p>指令比：字节</p>\n<p>4.58 TFLOPS&#x2F;320 GB&#x2F;s,\t也就是13.6个指令：1个字节</p>\n<p>对于Tesla K10而言，如果你的应用程序每访问一个字节所产生的指令数多于13.6，那么你的应用程序受算法性能限制。大多数HPC工作负载受内存带宽的限制。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/06/ML001/",
            "url": "https://xingyuanjie.top/2023/03/06/ML001/",
            "title": "线性回归模型",
            "date_published": "2023-03-06T11:00:34.000Z",
            "content_html": "<h2 id=\"线性回归模型\"><a href=\"#线性回归模型\" class=\"headerlink\" title=\"线性回归模型\"></a>线性回归模型</h2><h3 id=\"MOdel-Representation\"><a href=\"#MOdel-Representation\" class=\"headerlink\" title=\"MOdel Representation\"></a>MOdel Representation</h3><p><img src=\"/2023/03/06/ML001/image-20230306195956356.png\" alt=\"image-20230306195956356\"></p>\n<h3 id=\"Goals\"><a href=\"#Goals\" class=\"headerlink\" title=\"Goals\"></a>Goals</h3><p>In this lab you will:</p>\n<ul>\n<li>learn to implement the model f_{w,b} for linear regression with one variable</li>\n</ul>\n<h3 id=\"Notation\"><a href=\"#Notation\" class=\"headerlink\" title=\"Notation\"></a>Notation</h3><p>Here is a summary of some of the notation you will encounter.</p>\n<p><img src=\"/2023/03/06/ML001/image-20230306200250050.png\" alt=\"image-20230306200250050\"></p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p>In this lab you will make use of:</p>\n<ul>\n<li><p>NumPy,a popular library for scientific computing</p>\n</li>\n<li><p>Matplotlib,a popular library for plotting data</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br>plt.style.use(<span class=\"hljs-string\">&#x27;./deeplearning.mpstyle&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Problem-Statement\"><a href=\"#Problem-Statement\" class=\"headerlink\" title=\"Problem Statement\"></a>Problem Statement</h3><p><img src=\"/2023/03/06/ML001/image-20230306200642937.png\" alt=\"image-20230306200642937\"></p>\n<p>As in the lecture,you will use the motivating example of housing price prediction. This lab will use a simple data set with only two data points - a house with 1000 square feet(sqft) sold for $300,000 and a house with 2000 square feet sold for $500,000.These two points will constitute our data or training set. In this lab, the units of size are 1000 sqft and the units of price are 1000s of dollars.</p>\n<table>\n<thead>\n<tr>\n<th>Size (1000 sqft)</th>\n<th>Price (1000s of dollars)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.0</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2.0</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<p>You would like to fit a linear regression model(shown above as the blue straight line)through these two points, so you can then predict price for other houses - say, a house with 1200 sqft.</p>\n<p>Please run the following code cell to create your x_train and y_train variables. The data is stored in one-dimensional NumPy arrays.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#x_train is the input variable (size in 1000 square feet)</span><br><span class=\"hljs-comment\">#y_train is the target (price in 1000s of dollars)</span><br>x_train = np.array([<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">2.0</span>])<br>y_train = np.array([<span class=\"hljs-number\">300.0</span>,<span class=\"hljs-number\">500.0</span>])<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;x_train = <span class=\"hljs-subst\">&#123;x_train&#125;</span>&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;y_train = <span class=\"hljs-subst\">&#123;y_train&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Number-of-training-examples-m\"><a href=\"#Number-of-training-examples-m\" class=\"headerlink\" title=\"Number of training examples m\"></a>Number of training examples m</h3><p>you will use m to denote the number of training examples. Numpy arrays have a .shape parameter. x_train.shape return a python tuple with an entry for each dimension. x_train.shape[0] is the length of the array and number of examples as shown below.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># m is the number of training examples</span><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;x_train.shape: <span class=\"hljs-subst\">&#123;x_train.shape&#125;</span>&quot;</span>)<br>m = x_train.shape[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Number of training example is: <span class=\"hljs-subst\">&#123;m&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<p>x.train.shape: (2,)</p>\n<p>Number of training examples is: 2</p>\n<p><strong>One can also use the Python len() function as shown below.</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># m is the number of training examples</span><br>m = <span class=\"hljs-built_in\">len</span>(x_train)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Number of training example is: <span class=\"hljs-subst\">&#123;m&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<p>Number of training examples  is:\t2</p>\n<h3 id=\"Training-example-x-i-y-i\"><a href=\"#Training-example-x-i-y-i\" class=\"headerlink\" title=\"Training example x_i, y_i\"></a>Training example x_i, y_i</h3><p>You will use (x(𝑖), y(𝑖)) to denote the 𝑖(th) training example. Since Python is zero indexed, (x(0), y(0) is (1.0, 300.0) and (x(1), y(1) is (2.0, 500.0).</p>\n<p>To access a value in a Numpy array, one indexes the array with the desired offset. For example the syntax to access location zero of x_train is x_train[0]. Run the next code block below to get the i(th) training example.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">i = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">#Change this to 1 to see (x^1,y^1)</span><br><br>x_i = x_train[i]<br>y_i = y_train[i]<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;(x^(<span class=\"hljs-subst\">&#123;i&#125;</span>), y^(<span class=\"hljs-subst\">&#123;i&#125;</span>)) = (<span class=\"hljs-subst\">&#123;x_i&#125;</span>, <span class=\"hljs-subst\">&#123;y_i&#125;</span>)&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">(x^(<span class=\"hljs-number\">0</span>), y^(<span class=\"hljs-number\">0</span>)) = (<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">300.0</span>)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Plotting-the-data\"><a href=\"#Plotting-the-data\" class=\"headerlink\" title=\"Plotting the data\"></a>Plotting the data</h3><p>You can plot these two points using the scatter() function is the matplotlib library,as shown in the cell below.</p>\n<ul>\n<li>The function arguments marker and c show the points as red crosses(the default is blue dots.)</li>\n</ul>\n<p>You can use other functions in the matplotlib library to set title and labels to display.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#Plot the data points</span><br>plt.scatter(x_train, y_train, marker=<span class=\"hljs-string\">&#x27;x&#x27;</span> c=<span class=\"hljs-string\">&#x27;r&#x27;</span>)<br><span class=\"hljs-comment\">#Set the title</span><br>plt.title(<span class=\"hljs-string\">&quot;Housing Prices&quot;</span>)<br><span class=\"hljs-comment\">#Set the y-axis label</span><br>plt.ylabel(<span class=\"hljs-string\">&#x27;Price (in 1000s of dollars)&#x27;</span>)<br><span class=\"hljs-comment\">#Set the x-axis lbel</span><br>plt.xlabel(<span class=\"hljs-string\">&#x27;Size (1000 sqft)&#x27;</span>)<br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/06/ML001/image-20230306204822102.png\" alt=\"image-20230306204822102\"></p>\n<h3 id=\"Model-function\"><a href=\"#Model-function\" class=\"headerlink\" title=\"Model function\"></a>Model function</h3><p><img src=\"/2023/03/06/ML001/image-20230306204918585.png\" alt=\"image-20230306204918585\"></p>\n<p>As described in lecture, the model function for linear regression (which is a function that maps from x to y)is represented as</p>\n<p><img src=\"/2023/03/06/ML001/image-20230306205107527.png\" alt=\"image-20230306205107527\"></p>\n<p>The formula above is how you can represent straight lines - different values of w and b give you different straight lines on the plot.</p>\n<p>Let’s try to get a better intuition for this through the code blocks below. Let’s start with w &#x3D; 100 and b &#x3D;100.</p>\n<p>Note: You can come back to this cell to adjust the model’s w and b parameters.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">w = <span class=\"hljs-number\">100</span><br>b = <span class=\"hljs-number\">100</span><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;w: <span class=\"hljs-subst\">&#123;w&#125;</span>&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;b: <span class=\"hljs-subst\">&#123;b&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">w:\t<span class=\"hljs-number\">100</span><br>b:\t<span class=\"hljs-number\">100</span><br></code></pre></div></td></tr></table></figure>\n\n<p>Now,let’s compute the value of f_{w,b}(x^i) for your two data points. You can explicitly write this out for each data poins as -</p>\n<p>for x(0),f_wb &#x3D; w * x[0] + b</p>\n<p>for x(1),f_wb &#x3D; w * x[1] + b</p>\n<p>For a large number of data points, this can get unwieldy and repetitive. So instead, you can calculate the function output in a for loop as shown in the compute_model_output function below.</p>\n<p>Note:The argument description (ndarray (m,)) describes a Numpy n-dimensional array of shape (m,). (scalar) describes an argument without dimensions, just a magnitude.</p>\n<p>Note: np.zero(n) will return a one-dimensional numpy array with n entries</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">compute_model_output</span>(<span class=\"hljs-params\">x, w, b</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    Computes the prediction of a linear model</span><br><span class=\"hljs-string\">    Args:</span><br><span class=\"hljs-string\">    \tx (ndarray (m,)):Data, m examples</span><br><span class=\"hljs-string\">    \tw,b (scalar)\t:model parameters</span><br><span class=\"hljs-string\">    Returns</span><br><span class=\"hljs-string\">    \ty (ndarray (m,)):target values</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <br>    m = x.shape[<span class=\"hljs-number\">0</span>]<br>    f_wb = np.zeros(m)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m)<br>    \tf_wb[i] = w * x[i] + b<br>    <br>    <span class=\"hljs-keyword\">return</span> f_wb<br></code></pre></div></td></tr></table></figure>\n\n<p>Now let’s call the compute_model_output function and plot the output.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">tmp_f_wb = compute_model_output(x_train, w, b,)<br><br><span class=\"hljs-comment\">#Plot our model prediction</span><br>plt.plot(x_train, tmp_f_wb, c=<span class=\"hljs-string\">&#x27;b&#x27;</span>,label=<span class=\"hljs-string\">&#x27;Our Prediction&#x27;</span>)<br><br><span class=\"hljs-comment\">#Plot the data points</span><br>plt.scatter(x_train, y_train, marker=<span class=\"hljs-string\">&#x27;x&#x27;</span>, c=<span class=\"hljs-string\">&#x27;r&#x27;</span>,label=<span class=\"hljs-string\">&#x27;Actual Values&#x27;</span>)<br><br><span class=\"hljs-comment\">#Set the title</span><br>plt.title(<span class=\"hljs-string\">&quot;Housing Prices&quot;</span>)<br><span class=\"hljs-comment\">#Set the y-axis label</span><br>plt.ylabel(<span class=\"hljs-string\">&#x27;Price (in 1000s of dollars)&#x27;</span>)<br><span class=\"hljs-comment\">#Set the x-axis label</span><br>plt.xlabel(<span class=\"hljs-string\">&#x27;Size (1000 sqft)&#x27;</span>)<br>plt.legend()<br>plt.show()<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/06/ML001/image-20230306211337338.png\" alt=\"image-20230306211337338\"></p>\n<p>As you can see, setting w &#x3D; 100 and b &#x3D; 100 does not result in a line that fits our data.</p>\n<h3 id=\"Challenge\"><a href=\"#Challenge\" class=\"headerlink\" title=\"Challenge\"></a>Challenge</h3><p>Try experimenting with different values of w and b. What should the values be for a line that fits our data?</p>\n<p><strong>Tips:</strong></p>\n<p>You can use  your mouse to click on the triangle to the left of the green “Hints” below to reveal some hints for choosing b and w.</p>\n<p><strong>Hints</strong></p>\n<h3 id=\"Prediction\"><a href=\"#Prediction\" class=\"headerlink\" title=\"Prediction\"></a>Prediction</h3><p>Now that we have a model, we can use it to make our original prediction. Let’s predict the price of a house with 1200 sqft. Since the units of x are in 1000’s of sqft, x is 1.2.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">w = <span class=\"hljs-number\">200</span><br>b = <span class=\"hljs-number\">100</span><br>x_i = <span class=\"hljs-number\">1.2</span><br>cost_1200sqft = w * x_i + b<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;$<span class=\"hljs-subst\">&#123;cost_1200sqft:<span class=\"hljs-number\">.0</span>f&#125;</span> thousand dollars&quot;</span> )<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">$<span class=\"hljs-number\">340</span> thousand dollars<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Congratulations\"><a href=\"#Congratulations\" class=\"headerlink\" title=\"Congratulations!\"></a>Congratulations!</h3><p>In this lab you have learned:</p>\n<ul>\n<li>Linear regression bulids a model which establishes a relationship between features and targets</li>\n<li>In the example above, the feature was house size and the target was house price</li>\n<li>for simple linear regression, the model has two parameters w and b whose calue are ‘fit’ using training data.</li>\n<li>once a model’s parameters have been determined, the model can be used to make predictions on novel data.</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797\">https://www.bilibili.com/video/BV1Pa411X76s?p=5&amp;vd_source=3ae32e36058f58c5b85935fca9b77797</a></p>\n<p><a href=\"https://github.com/kaieye/2022-Machine-Learning-Specialization\">kaieye&#x2F;2022-Machine-Learning-Specialization (github.com)</a></p>\n",
            "tags": [
                "Tensorflow",
                "Machine Learning"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/06/cuda011/",
            "url": "https://xingyuanjie.top/2023/03/06/cuda011/",
            "title": "CUDA编译与执行",
            "date_published": "2023-03-06T08:18:09.000Z",
            "content_html": "<h2 id=\"CUDA编译与执行\"><a href=\"#CUDA编译与执行\" class=\"headerlink\" title=\"CUDA编译与执行\"></a>CUDA编译与执行</h2><p>现在把所有的代码放在一个文件名为sumArraysOnGPU-small-case.cu的文件中，如代码清单2-4所示。</p>\n<p><strong>代码清单2-4\t\t基于GPU的向量加法（sumArraysOnGPU-small-case.cu）</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cuda_runtime.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">#define CHECK(call)</span><br><span class=\"hljs-comment\">&#123;</span><br><span class=\"hljs-comment\">    const cudaError_t error = call;</span><br><span class=\"hljs-comment\">    if(error != cudaSuccess)</span><br><span class=\"hljs-comment\">    &#123;</span><br><span class=\"hljs-comment\">        printf(&quot;Error:%s:%d, &quot;, __FILE__, __LINE__);</span><br><span class=\"hljs-comment\">        printf(&quot;code:%d, reason: %s\\n&quot;, error, cudaGetErrorString(error));</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkResult</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *hostRef, <span class=\"hljs-keyword\">float</span> *gpuRef, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> N)</span></span>&#123;<br>    <span class=\"hljs-keyword\">double</span> epsilon = <span class=\"hljs-number\">1.0E-8</span>;<br>    <span class=\"hljs-keyword\">int</span> match = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ;i &lt; N; i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(hostRef[i] - gpuRef[i]) &gt; epsilon)&#123;<br>            match = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Arrays do not match!\\n&quot;</span>);<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;host %5.2f gpu %5.2f at current %d\\n&quot;</span>,hostRef[i],gpuRef[i],i);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(match) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Arrays match.\\n\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initialData</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *ip,<span class=\"hljs-keyword\">int</span> size)</span></span>&#123;<br>    <span class=\"hljs-comment\">//generate different seed for random number</span><br>    <span class=\"hljs-keyword\">time_t</span> t;<br>    <span class=\"hljs-built_in\">srand</span>((<span class=\"hljs-keyword\">unsigned</span>) <span class=\"hljs-built_in\">time</span>(&amp;t));<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;size;i++)&#123;<br>        ip[i] = (<span class=\"hljs-keyword\">float</span>)(<span class=\"hljs-built_in\">rand</span>() &amp; <span class=\"hljs-number\">0xFF</span>) /<span class=\"hljs-number\">10.0f</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumArraysOnHost</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A,<span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = threadIdx.x;<br>    C[i] = A[i] + B[i];<br>&#125;<br><br><span class=\"hljs-function\">__gloal__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumArraysOnGPU</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = threadIdx.x;<br>    C[i] = A[i] + B[i];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> **argv)</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s Starting...\\n&quot;</span>,argv[<span class=\"hljs-number\">0</span>]);<br>    <br>    <span class=\"hljs-comment\">//set up device</span><br>    <span class=\"hljs-keyword\">int</span> dev = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">cudaSetDevice</span>(dev);<br>    <br>    <span class=\"hljs-comment\">//set up data size of vectors</span><br>    <span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">32</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Vector size %d\\n&quot;</span>,nElem);<br>    <br>    <span class=\"hljs-comment\">//malloc host memory</span><br>    <span class=\"hljs-keyword\">size_t</span> nBytes = nElem * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>);<br>    <br>    <span class=\"hljs-keyword\">float</span> *h_A, *h_B, *hostRef, *gpuRef;<br>    h_A = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    h_B = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    hostRef = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    gpuRef = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    <br>    <span class=\"hljs-comment\">//initialize data at host side</span><br>    <span class=\"hljs-built_in\">initialData</span>(h_A, nElem);<br>    <span class=\"hljs-built_in\">initialData</span>(h_B, nElem);<br>    <br>    <span class=\"hljs-built_in\">memset</span>(hostRef, <span class=\"hljs-number\">0</span> ,nBytes);<br>    <span class=\"hljs-built_in\">memset</span>(gpuRef, <span class=\"hljs-number\">0</span> ,nBytes);<br>    <br>    <span class=\"hljs-comment\">//malloc device global memory</span><br>    <span class=\"hljs-keyword\">float</span> *d_A, *d_B, *d_C;<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_A, nBytes);<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_B, nBytes);<br>    <span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_C, nBytes);<br>    <br>    <span class=\"hljs-comment\">//transfer data from host to device</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_A, h_A, nBytes, cudaMemcpyHostTodevice);<br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(d_B, h_B, nBytes, cudaMemcpyHostTodevice);<br>    <br>    <span class=\"hljs-comment\">//invoke kernel at host side</span><br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(nElem)</span></span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">(nElem/block.x)</span></span>;<br>    <br>    sumArraysOnGPU&lt;&lt;&lt;grid,block&gt;&gt;&gt;(d_A, d_B, d_C);<br>    <span class=\"hljs-built_in\">pritnf</span>(<span class=\"hljs-string\">&quot;Execution configuration &lt;&lt;&lt;%d, %d&gt;&gt;&gt;\\n&quot;</span>,grid.x,block.x);<br>    <br>    <span class=\"hljs-comment\">//copy kernel result back to host side</span><br>    <span class=\"hljs-built_in\">cudaMemcpy</span>(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost);<br>    <br>    <span class=\"hljs-comment\">//add vector at host side for result checks</span><br>    <span class=\"hljs-built_in\">sumArraysOnHost</span>(h_A, h_B, hostRef, nElem);<br>    <br>    <span class=\"hljs-comment\">//check device results</span><br>    <span class=\"hljs-built_in\">checkResult</span>(hostRef, gpuRef, nElem);<br>    <br>    <span class=\"hljs-comment\">//free device global memory</span><br>    <span class=\"hljs-built_in\">cudaFree</span>(d_A);<br>    <span class=\"hljs-built_in\">cudaFree</span>(d_B);<br>    <span class=\"hljs-built_in\">cudaFree</span>(d_C);<br>    <br>    <span class=\"hljs-comment\">//free host memory</span><br>    <span class=\"hljs-built_in\">free</span>(h_A);<br>    <span class=\"hljs-built_in\">free</span>(h_B);<br>    <span class=\"hljs-built_in\">free</span>(hostRef);<br>    <span class=\"hljs-built_in\">free</span>(gpuRef);<br>    <br>    <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在这段代码中，向量大小被设置为32，如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">32</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>执行配置被放入一个块内，其中包含32个元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(nElem)</span></span>;<br><span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">(nElem/block.x)</span></span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>使用以下命令编译和执行该带啊吗：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc sumArraysOnGPU-small-case.cu -o addvector<br>./addvector<br></code></pre></div></td></tr></table></figure>\n\n<p>系统报告如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">./addvector Starting...<br>Vector size 32<br>Execution configuration &lt;&lt;&lt;1,32&gt;&gt;&gt;<br>Arrays match.<br></code></pre></div></td></tr></table></figure>\n\n<p>如果你将执行配置重新定义为32个块，每个块只有一个元素，如下所示；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<br><span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">(nElem)</span></span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>那么就需要在代码清单2-4中对核函数sumArraysOnGPU进行修改：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">用<span class=\"hljs-keyword\">int</span> i = threadIdx.x;    替换<span class=\"hljs-keyword\">int</span> i = blockIdx.x;<br></code></pre></div></td></tr></table></figure>\n\n<p>一般情况下，可以基于给定的一维网格和块的信息来计算全局数据访问的唯一索引：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__gloal__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumArraysOnGPU</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = blockIdx.x * blockDim.x * threadIdx.x;<br>    C[i] = A[i] + B[i];<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>你需要确保一般情况下进行更改所产生结果的正确性。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/06/cuda010/",
            "url": "https://xingyuanjie.top/2023/03/06/cuda010/",
            "title": "CUDA处理错误",
            "date_published": "2023-03-06T08:17:59.000Z",
            "content_html": "<h2 id=\"CUDA处理错误\"><a href=\"#CUDA处理错误\" class=\"headerlink\" title=\"CUDA处理错误\"></a>CUDA处理错误</h2><p>由于许多CUDA调用是异步的，所以有时可能很难确定某个错误是由哪一步程序引起的。定义一个错误处理宏封装所有的CUDA API调用，这简化了错误检查过程：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> CHECK(call)</span><br>&#123;<br>    <span class=\"hljs-keyword\">const</span> cudaError_t error = call;<br>    <span class=\"hljs-keyword\">if</span>(error != cudaSuccess)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Error:%s:%d, &quot;</span>, __FILE__, __LINE__);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;code:%d, reason: %s\\n&quot;</span>, error, <span class=\"hljs-built_in\">cudaGetErrorString</span>(error));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>例如，你可以在以下代码中使用宏：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">CHECK(<span class=\"hljs-params\">cudaMemcpy</span>(<span class=\"hljs-params\">d_C</span>, <span class=\"hljs-params\">gpuRef</span>, <span class=\"hljs-params\">nBytes</span>, <span class=\"hljs-params\">cudaMemcpyHostToDevice</span>)</span>);<br></code></pre></div></td></tr></table></figure>\n\n<p>如果内存拷贝或之前的异步操作产生了错误，这个宏会报告错误代码，并输出一个可读信息，然后停止程序。也可以用下述方法，在核函数调用后检查核函数错误：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kernel_function&lt;&lt;&lt;grid,block&gt;&gt;&gt;(argument list);<br><span class=\"hljs-built_in\">CHECK</span>(<span class=\"hljs-built_in\">cudaDeviceSynchronize</span>());<br></code></pre></div></td></tr></table></figure>\n\n<p>CHECK(cudaDeviceSynchronize())会阻塞主机端线程的运行直到设备端所有的请求任务都结束，并确保最后的核函数启动部分不会出错。以上仅是以调试为目的的，因为在核函数启动后添加这个检查点会阻塞主机端线程，使该检查点成为全局屏障。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/06/cuda009/",
            "url": "https://xingyuanjie.top/2023/03/06/cuda009/",
            "title": "CUDA验证核函数",
            "date_published": "2023-03-06T08:06:35.000Z",
            "content_html": "<h2 id=\"CUDA验证核函数\"><a href=\"#CUDA验证核函数\" class=\"headerlink\" title=\"CUDA验证核函数\"></a>CUDA验证核函数</h2><p>既然你已经编写了核函数，你如何能知道它是否正确运行？你需要一个主机函数来验证核函数的结果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkResult</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *hostRef, <span class=\"hljs-keyword\">float</span> *gpuRef, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> N)</span></span>&#123;<br>    <span class=\"hljs-keyword\">double</span> epsilon = <span class=\"hljs-number\">1.0E-8</span>;<br>    <span class=\"hljs-keyword\">int</span> match = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ;i &lt; N; i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(hostRef[i] - gpuRef[i]) &gt; epsilon)&#123;<br>            match = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Arrays do not match!\\n&quot;</span>);<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;host %5.2f gpu %5.2f at current %d\\n&quot;</span>,hostRef[i],gpuRef[i],i);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(match) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Arrays match.\\n\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"验证核函数代码\"><a href=\"#验证核函数代码\" class=\"headerlink\" title=\"验证核函数代码\"></a>验证核函数代码</h3><p>除了许多可用的调试工具外，还有两个非常简单实用的方法可以验证核函数。</p>\n<p>首先，你可以在Fermi及更高版本的设备端的核函数中使用printf函数。</p>\n<p>其次，可以将执行参数设置为&lt;&lt;&lt;1,1&gt;&gt;&gt;，因此强制用一个块和一个线程执行核函数，这模拟了串行执行程序。这对于调试和验证结果是否正确是非常有用的，而且，如果你遇到了运算次序的问题，这有助于你对比验证数值结果是否是按位精确的。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/06/cuda008/",
            "url": "https://xingyuanjie.top/2023/03/06/cuda008/",
            "title": "CUDA编写核函数",
            "date_published": "2023-03-06T07:46:00.000Z",
            "content_html": "<h2 id=\"编写核函数\"><a href=\"#编写核函数\" class=\"headerlink\" title=\"编写核函数\"></a>编写核函数</h2><p>核函数是在设备端执行的代码。在核函数中，需要为一个线程规定要进行的计算以及要进行的数据访问。当核函数被调用时，许多不同的CUDA线程并行执行同一个计算任务。以下是用_<em>global</em>_</p>\n<p>声明定义核函数：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs reasonml\">__global__  void kernel<span class=\"hljs-constructor\">_name(<span class=\"hljs-params\">argument</span> <span class=\"hljs-params\">list</span>)</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>核函数必须有一个void返回类型。</p>\n<p>表2-2总结了CUDA C程序中的函数类型限定符。函数类型限定符指定一个函数在主机上执行还是在设备上执行，以及可被主机调用还是被设备调用。</p>\n<p><img src=\"/2023/03/06/cuda008/image-20230306155126122.png\" alt=\"image-20230306155126122\"></p>\n<p>_<em>device</em>_   和 __host__限定符可以一齐使用，这样函数可以同时在主机和设备端进行编译。</p>\n<h3 id=\"CUDA核函数的限制\"><a href=\"#CUDA核函数的限制\" class=\"headerlink\" title=\"CUDA核函数的限制\"></a>CUDA核函数的限制</h3><p>以下限制适用于所有核函数：</p>\n<ul>\n<li>只能访问设备内存</li>\n<li>必须具有void返回类型</li>\n<li>不支持可变数量的参数</li>\n<li>不支持静态变量</li>\n<li>显示异步行为</li>\n</ul>\n<p>考虑一个简单的例子：将两个大小为N的向量A和B相加，主机端的向量加法C代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumArrayOnHost</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> N)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; N; i++)<br>        C[i] = A[i] + B[i];<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>这是一个迭代N次的串行程序，循环结束后将产生以下核函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__global__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumArrayOnHost</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C)</span></span>&#123;<br>    \t<span class=\"hljs-keyword\">int</span> i = threadIdx.x;<br>        C[i] = A[i] + B[i];<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>C函数和核函数之间有什么不同？你可能已经注意到循环体消失了，内置的线程坐标变量替换了数组索引，由于N是被隐式定义用来启动N个线程的，所以N没有什么参考价值。</p>\n<p>假设有一个长度为32个元素的向量，你可以按以下方法用32个线程来调用核函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">sumArraysOnGPU&lt;&lt;&lt;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">32</span>&gt;&gt;&gt;(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C);<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/06/cuda007/",
            "url": "https://xingyuanjie.top/2023/03/06/cuda007/",
            "title": "启动一个CUDA核函数",
            "date_published": "2023-03-06T05:59:18.000Z",
            "content_html": "<h2 id=\"启动一个CUDA核函数\"><a href=\"#启动一个CUDA核函数\" class=\"headerlink\" title=\"启动一个CUDA核函数\"></a>启动一个CUDA核函数</h2><p>你应该对下列C语言函数调用语句很熟悉：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">function_name</span> (argument list);<br></code></pre></div></td></tr></table></figure>\n\n<p>CUDA内核调用是对C语言函数调用语句的延申，&lt;&lt;&lt;&gt;&gt;&gt;运算符内是核函数的执行配置。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kerbel_name&lt;&lt;&lt;grid,block&gt;&gt;&gt;(srgument list);<br></code></pre></div></td></tr></table></figure>\n\n<p>正如上一节所述，CUDA编程模型揭示了线程层次结构。利用执行配置可以指定线程在GPU上调度运行的方式。执行配置的第一个值是网格维度，也就是启动块的数目。第二个值是块维度，也就是每个块中线程的数目。通过指定网格和块的维度，你可以进行一下配置：</p>\n<ul>\n<li>内核中线程的数目</li>\n<li>内核中使用的线程布局</li>\n</ul>\n<p>同一个块中的线程之间可以相互协作，不同块内的线程不能协作。对于一个给定的问题，可以使用不同的网格和块布局来组织你的线程。例如，假设你有32个数据元素用于计算，每8个元素一个块，需要启动4个块：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kernel_name&lt;&lt;&lt;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>&gt;&gt;&gt;(argument list);<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/06/cuda007/image-20230306140924311.png\" alt=\"image-20230306140924311\"></p>\n<p>由于数据在全局内存中是线性存储的，因此可以用变量blockIdx.x和threadIdx.x来进行以下操作。</p>\n<ul>\n<li>在网格中标识一个唯一的线程</li>\n<li>建立线程和数据元素之间的映射关系</li>\n</ul>\n<p>如果把32个元素放到一个块里，那么只会得到一个块：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kernel_name&lt;&lt;&lt;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">32</span>&gt;&gt;&gt;(argument list);<br></code></pre></div></td></tr></table></figure>\n\n<p>如果每个块只含一个元素，那么会有32个块：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kernel_name&lt;&lt;&lt;<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">1</span>&gt;&gt;&gt;(argument list);<br></code></pre></div></td></tr></table></figure>\n\n<p>核函数的调用与主机线程是异步的。核函数调用结束后，控制权立刻返回给主机端。你可以调用以下函数来强制主机端程序等待所有的核函数执行结束：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">cudaError_t <span class=\"hljs-title\">cudaDeviceSynchronize</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>一些CUDA运行时API在主机和设备之间是隐式同步的。当使用cudaMemcpy函数在主机和设备之间拷贝数据时，主机端隐式同步，即主机端程序必须等待数据拷贝完成后才能继续执行程序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">cudaError_t <span class=\"hljs-title\">cudaMemcpy</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>* dst, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">void</span>* src, <span class=\"hljs-keyword\">size_t</span> count, cudaMemcpyKind kind)</span></span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>之前所有的核函数调用完成后开始拷贝数据。当拷贝完成后，控制权立刻返回给主机端。</p>\n<h3 id=\"异步行为\"><a href=\"#异步行为\" class=\"headerlink\" title=\"异步行为\"></a>异步行为</h3><p>不同于C语言的函数调用，所有的CUDA核函数的启动都是异步的。CUDA内核调用完成后，控制权立刻返回给CPU。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/02/leetcode205/",
            "url": "https://xingyuanjie.top/2023/03/02/leetcode205/",
            "title": "205.同构字符串",
            "date_published": "2023-03-02T12:44:27.000Z",
            "content_html": "<h2 id=\"205-同构字符串\"><a href=\"#205-同构字符串\" class=\"headerlink\" title=\"205.同构字符串\"></a>205.同构字符串</h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://leetcode.cn/problems/isomorphic-strings/\">205. 同构字符串 - 力扣（LeetCode）</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isIsomorphic</span><span class=\"hljs-params\">(string s, string t)</span> </span>&#123;<br>        string ss;<br>        string st;<br>        <span class=\"hljs-keyword\">int</span> hash[<span class=\"hljs-number\">255</span>];<br>        <span class=\"hljs-keyword\">int</span> index=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">memset</span>(hash, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(hash));<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.<span class=\"hljs-built_in\">size</span>();i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(hash[<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">int</span></span>(s[i])]==<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                index++;<br>                hash[<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">int</span></span>(s[i])]=index;<br>                ss.<span class=\"hljs-built_in\">push_back</span>(index+<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                ss.<span class=\"hljs-built_in\">push_back</span>(hash[<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">int</span></span>(s[i])]+<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>            &#125;<br>        &#125;<br>        index=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">memset</span>(hash, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(hash));<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;t.<span class=\"hljs-built_in\">size</span>();i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(hash[<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">int</span></span>(t[i])]==<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                index++;<br>                hash[<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">int</span></span>(t[i])]=index;<br>                st.<span class=\"hljs-built_in\">push_back</span>(index+<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                st.<span class=\"hljs-built_in\">push_back</span>(hash[<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">int</span></span>(t[i])]+<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> ans = ss.<span class=\"hljs-built_in\">compare</span>(st);<br>        <span class=\"hljs-keyword\">if</span>(ans==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><img src=\"/2023/03/02/leetcode205/image-20230302204605581.png\" alt=\"image-20230302204605581\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isIsomorphic</span><span class=\"hljs-params\">(string s, string t)</span> </span>&#123;<br>        unordered_map&lt;<span class=\"hljs-keyword\">char</span>, <span class=\"hljs-keyword\">char</span>&gt; s2t;<br>        unordered_map&lt;<span class=\"hljs-keyword\">char</span>, <span class=\"hljs-keyword\">char</span>&gt; t2s;<br>        <span class=\"hljs-keyword\">int</span> len = s.<span class=\"hljs-built_in\">length</span>();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; ++i) &#123;<br>            <span class=\"hljs-keyword\">char</span> x = s[i], y = t[i];<br>            <span class=\"hljs-keyword\">if</span> ((s2t.<span class=\"hljs-built_in\">count</span>(x) &amp;&amp; s2t[x] != y) || (t2s.<span class=\"hljs-built_in\">count</span>(y) &amp;&amp; t2s[y] != x)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>            s2t[x] = y;<br>            t2s[y] = x;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://leetcode.cn/problems/isomorphic-strings/solution/tong-gou-zi-fu-chuan-by-leetcode-solutio-s6fd/\">同构字符串 - 同构字符串 - 力扣（LeetCode）</a></p>\n",
            "tags": [
                "C++",
                "LeetCode",
                "哈希表"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/02/leetcode189/",
            "url": "https://xingyuanjie.top/2023/03/02/leetcode189/",
            "title": "189.轮转数组",
            "date_published": "2023-03-02T12:03:32.000Z",
            "content_html": "<h2 id=\"189-轮转数组\"><a href=\"#189-轮转数组\" class=\"headerlink\" title=\"189.轮转数组\"></a>189.轮转数组</h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://leetcode.cn/problems/rotate-array/\">189. 轮转数组 - 力扣（LeetCode）</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p><img src=\"/2023/03/02/leetcode189/image-20230302200538871.png\" alt=\"image-20230302200538871\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">reverse</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; nums,<span class=\"hljs-keyword\">int</span> begin,<span class=\"hljs-keyword\">int</span> end)</span></span><br><span class=\"hljs-function\">    </span>&#123;<br>        <span class=\"hljs-keyword\">while</span>(begin&lt;end)&#123;<br>            <span class=\"hljs-built_in\">swap</span>(nums[begin], nums[end]);<br>            begin++;<br>            end--;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rotate</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; nums, <span class=\"hljs-keyword\">int</span> k)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//数组翻转</span><br>        <span class=\"hljs-keyword\">int</span> p = k%nums.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-built_in\">reverse</span>(nums,<span class=\"hljs-number\">0</span>,nums.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>);<br>        <span class=\"hljs-built_in\">reverse</span>(nums,<span class=\"hljs-number\">0</span>,p<span class=\"hljs-number\">-1</span>);<br>        <span class=\"hljs-built_in\">reverse</span>(nums,p,nums.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://leetcode.cn/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/\">旋转数组 - 轮转数组 - 力扣（LeetCode）</a></p>\n",
            "tags": [
                "C++",
                "LeetCode",
                "数组翻转"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/03/01/leetcode724/",
            "url": "https://xingyuanjie.top/2023/03/01/leetcode724/",
            "title": "724.寻找数组的中心下标",
            "date_published": "2023-03-01T09:35:03.000Z",
            "content_html": "<h1 id=\"724-寻找数组的中心下标\"><a href=\"#724-寻找数组的中心下标\" class=\"headerlink\" title=\"724.寻找数组的中心下标\"></a>724.寻找数组的中心下标</h1><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://leetcode.cn/problems/find-pivot-index/\">724. 寻找数组的中心下标 - 力扣（LeetCode）</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p><img src=\"/2023/03/01/leetcode724/image-20230301173931031.png\" alt=\"image-20230301173931031\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">pivotIndex</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> total=<span class=\"hljs-built_in\">accumulate</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>(),<span class=\"hljs-number\">0</span>);\t<span class=\"hljs-comment\">//第三个形参是累加的初始值</span><br>        <span class=\"hljs-keyword\">int</span> sum=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.<span class=\"hljs-built_in\">size</span>();i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span>*sum+nums[i] == total)&#123;<br>                <span class=\"hljs-keyword\">return</span> i;<br>            &#125;<br>            sum+=nums[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://leetcode.cn/problems/find-pivot-index/solution/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/\">寻找数组的中心索引 - 寻找数组的中心下标 - 力扣（LeetCode）</a></p>\n",
            "tags": [
                "C++",
                "LeetCode",
                "前缀和"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/28/vectorbool/",
            "url": "https://xingyuanjie.top/2023/02/28/vectorbool/",
            "title": "vector<bool>与vector<T>",
            "date_published": "2023-02-28T12:59:01.000Z",
            "content_html": "<h1 id=\"vector-lt-bool-gt-与vector-lt-T-gt\"><a href=\"#vector-lt-bool-gt-与vector-lt-T-gt\" class=\"headerlink\" title=\"vector&lt;bool&gt;与vector&lt;T&gt;\"></a>vector&lt;bool&gt;与vector&lt;T&gt;</h1><p>vector&lt;bool&gt; 不像其他容器一样按Byte存储的，它是按bit存储的，也就是说一个正常的bool类型的空间可以存放vector&lt;bool&gt;中的8个，空间上确实优化了很多，然而，c++是不能直接取对bit操作的（因为C++的最小可寻址值通常以byte为单位），对其使用operator[]其实返回的不是bool的引用而是一个”proxy reference”是”std::vector&lt; bool&gt;:reference”类型的对象。</p>\n<p>正因为如此，vector&lt;bool&gt;通过代理对象进行存取访问时需要执行逐位处理，访问通常比int之类的普通类型操作要慢很多。</p>\n<p>因此，对vecotr&lt;bool&gt;的使用需慎重考虑以下几点：<br>(1)是否需要牺牲速度来获取空间上的优化<br>(2)算法中会否有对vecotr地址进行解引用操作的可能。</p>\n<p>如果不满足以上条件，建议使用deque&lt;bool&gt;来取代vector&lt;bool&gt;，功能基本相同，但deque&lt;bool&gt;未对其进行特殊处理。</p>\n<p>下面是vector&lt;bool&gt;与vector&lt;T&gt;简单的对比例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>\tvector&lt;<span class=\"hljs-keyword\">char</span>&gt; ch;<br>\tvector&lt;<span class=\"hljs-keyword\">int</span>&gt; in;<br>\tvector&lt;<span class=\"hljs-keyword\">bool</span>&gt; bo;<br> <br>\t<span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">1e6</span>;<br>\t<span class=\"hljs-keyword\">clock_t</span> t1, t2, t3;<br> <br>\tt1 = <span class=\"hljs-built_in\">clock</span>();<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>\t\tch.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t&#125;<br>\tt1 = <span class=\"hljs-built_in\">clock</span>() - t1;<br> <br>\tt2 = <span class=\"hljs-built_in\">clock</span>();<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>\t\tin.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-number\">0</span>);<br>\t&#125;<br>\tt2 = <span class=\"hljs-built_in\">clock</span>() - t2;<br> <br>\tt3 = <span class=\"hljs-built_in\">clock</span>();<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>\t\tbo.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-literal\">true</span>);<br>\t&#125;<br>\tt3 = <span class=\"hljs-built_in\">clock</span>() - t3;<br> <br>\tcout &lt;&lt;<span class=\"hljs-string\">&quot;vector&lt;char&gt; &quot;</span>&lt;&lt; t1 &lt;&lt; <span class=\"hljs-string\">&quot;\\n vector&lt;int&gt; &quot;</span> &lt;&lt; t2 &lt;&lt; <span class=\"hljs-string\">&quot;\\nvector&lt;bool&gt; &quot;</span> &lt;&lt; t3 &lt;&lt; endl;<br>\tcout &lt;&lt; endl;<br> <br>\t<span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs cpp\">vector&lt;<span class=\"hljs-keyword\">char</span>&gt; <span class=\"hljs-number\">216</span><br>vextor&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-number\">229</span><br>vector&lt;<span class=\"hljs-keyword\">bool</span>&gt; <span class=\"hljs-number\">16535</span><br></code></pre></div></td></tr></table></figure>\n\n<p>这里发现vector&lt;bool&gt;相较于其他vector&lt;T&gt;速度要慢的多！</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/qq_52134928/article/details/121066304?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121066304-blog-86603050.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121066304-blog-86603050.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=1\">(65条消息) 【C++】vector＜bool＞的特别之处_小陶同学_的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/u013249689/article/details/25297657\">(65条消息) 不使用vector的原因和替代方法_jackycmu的博客-CSDN博客</a></p>\n",
            "tags": [
                "STL",
                "Vector",
                "C/C++",
                "bool"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/28/Linux004/",
            "url": "https://xingyuanjie.top/2023/02/28/Linux004/",
            "title": "C/C++关键字之restrict",
            "date_published": "2023-02-28T11:45:09.000Z",
            "content_html": "<h1 id=\"C-x2F-C-关键字之restrict\"><a href=\"#C-x2F-C-关键字之restrict\" class=\"headerlink\" title=\"C&#x2F;C++关键字之restrict\"></a>C&#x2F;C++关键字之restrict</h1><p>在C语言中，restrict关键字用于修饰指针（C99标准）。通过加上restrict关键字，程序员可提示编译器：在该指针的生命周期内，其指向的对象不会被别的指针所引用。</p>\n<p>需要注意的是，在C++中，并无明确统一的标准支持restrict关键字。但是很多编译器实现了功能相同的关键字，例如gcc和clang中的__restrict关键字。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">add1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>*a, <span class=\"hljs-keyword\">int</span>* b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    *a = <span class=\"hljs-number\">10</span>;<br>    *b = <span class=\"hljs-number\">12</span>;<br>    <span class=\"hljs-keyword\">return</span> *a + *b;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>add1函数的返回值会永远是10 + 12 &#x3D; 22吗？</p>\n<p>答案是不一定。在指针a和b的地址不同时，返回22没有问题。但是当指针a与b指向的是同一个int对象时，该对象先被赋值为10，后被赋值为12，因此a和b都返回12，因此add1函数最终返回24。</p>\n<p>下面是一个简单的例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">add1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>* a, <span class=\"hljs-keyword\">int</span>* b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    *a = <span class=\"hljs-number\">10</span>;<br>    *b = <span class=\"hljs-number\">12</span>;<br>    <span class=\"hljs-keyword\">return</span> *a + *b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span>* c;<br>    <span class=\"hljs-keyword\">int</span>* d;<br>    d=(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">int</span>)*<span class=\"hljs-number\">1</span>);<br>    c=(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">int</span>)*<span class=\"hljs-number\">1</span>);<br>    *c=<span class=\"hljs-number\">10</span>;<br>    *d=<span class=\"hljs-number\">12</span>;<br>    *d=<span class=\"hljs-number\">12</span>;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;c:&quot;</span>&lt;&lt;*c&lt;&lt;endl;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;d:&quot;</span>&lt;&lt;*d&lt;&lt;endl;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;When Pointers a and b have different addresses&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class=\"hljs-built_in\">add1</span>(c,d)&lt;&lt;endl;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;When Pointers a and b have the same address&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class=\"hljs-built_in\">add1</span>(c,c)&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>程序输出：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">c:<span class=\"hljs-number\">10</span><br>d:<span class=\"hljs-number\">12</span><br>When Pointers a <span class=\"hljs-keyword\">and</span> b have different addresses<br><span class=\"hljs-number\">22</span><br>When Pointers a <span class=\"hljs-keyword\">and</span> b have the same address<br><span class=\"hljs-number\">24</span><br></code></pre></div></td></tr></table></figure>\n\n<p>开启-O3优化，add1对应的汇编代码如下:</p>\n<p>为了得到<code>*a</code>的值访问了1次内存，而不管在何种条件下(<code>a == b</code> or <code>a != b</code>)，<code>*b</code>的值都是12。因此编译器将<code>*a</code>的值载入<code>eax</code>寄存器后，直接加上立即数12，而无需再访问内存获取<code>*b</code>的值。在无法确定指针a和b是否相同的情况下，编译器只能帮你优化到这里了。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\"><span class=\"hljs-number\">0000000000400</span>a10 &lt;_Z4add1PiS_&gt;:<br>  <span class=\"hljs-number\">400</span>a10:   c7 <span class=\"hljs-number\">07</span> <span class=\"hljs-number\">0</span>a <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>       movl   $<span class=\"hljs-number\">0</span>xa,(%rdi) ; *a = <span class=\"hljs-number\">10</span><br>  <span class=\"hljs-number\">400</span>a16:   c7 <span class=\"hljs-number\">06</span> <span class=\"hljs-number\">0</span>c <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>       movl   $<span class=\"hljs-number\">0</span>xc,(%rsi) ; *b = <span class=\"hljs-number\">10</span><br>  <span class=\"hljs-number\">400</span>a1c:   <span class=\"hljs-number\">8</span>b <span class=\"hljs-number\">07</span>                   mov    (%rdi),%eax ; 结果 = *a<br>  <span class=\"hljs-number\">400</span>a1e:   <span class=\"hljs-number\">83</span> c0 <span class=\"hljs-number\">0</span>c                add    $<span class=\"hljs-number\">0</span>xc,%eax   ; 结果 += <span class=\"hljs-number\">12</span> <br>  <span class=\"hljs-number\">400</span>a21:   c3                      retq<br></code></pre></div></td></tr></table></figure>\n\n<p>加上了restrict关键字过后，同样开启-O3优化，add1对应的汇编代码如下：</p>\n<p>加上关键字restrict后，编译器能够确认指针a和b不可能指向同一个内存地址，因此在求*a + *b时，无虚访问内存，因为*a必然等于立即数10，*b必然等于立即数12。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">add2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>* __restrict  a, <span class=\"hljs-keyword\">int</span>* __restrict b)</span> </span><br><span class=\"hljs-function\"></span>&#123;<br>    *a = <span class=\"hljs-number\">10</span>;<br>    *b = <span class=\"hljs-number\">12</span>;<br>    <span class=\"hljs-keyword\">return</span> *a + *b ;<br>&#125;<br><span class=\"hljs-number\">0000000000400</span>a30 &lt;_Z4add2PiS_&gt;:<br>  <span class=\"hljs-number\">400</span>a30:   c7 <span class=\"hljs-number\">07</span> <span class=\"hljs-number\">0</span>a <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>       movl   $<span class=\"hljs-number\">0xa</span>,(%rdi) ; *a = <span class=\"hljs-number\">10</span><br>  <span class=\"hljs-number\">400</span>a36:   b8 <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>          mov    $<span class=\"hljs-number\">0x16</span>,%eax  ; 结果 = <span class=\"hljs-number\">22</span><br>  <span class=\"hljs-number\">400</span>a3b:   c7 <span class=\"hljs-number\">06</span> <span class=\"hljs-number\">0</span>c <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>       movl   $<span class=\"hljs-number\">0xc</span>,(%rsi) ; *b = <span class=\"hljs-number\">12</span><br>  <span class=\"hljs-number\">400</span>a41:   c3  <br></code></pre></div></td></tr></table></figure>\n\n<p>有无restrict关键字的两种情况下的汇编指令可看到，后者比前者少访问一次内存，且少执行一条指令。就是因为没加restruct关键字时，编译器不能确定别的地方是不是会修改此值，所以会去相应的地址查看。</p>\n<p><strong>这样当我们明确知道两个指针不可能指向同一个地址时，我们就可以通过使用restrict关键字来进行性能优化。</strong></p>\n<p>注意使用restrict的时候，程序员必须确保不会出现<strong>pointer aliasing</strong>，即同一块内存无法通过两个或以上的指针变量名访问。不满足这个条件强行指定restrict，将会出现<strong>underfined behavior</strong>。</p>\n<p>通常编写代码时会忽略pointer aliasing的问题。更常见是在性能分析时，通过反汇编看到很多冗余的读取指令，才会想到加入restrict关键字来提升性能。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/349726808\">C&#x2F;C++关键字之restrict - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://github.com/ClickHouse/ClickHouse/pull/19946\">Improve performance of aggregate functions by alexey-milovidov · Pull Request #19946 · ClickHouse&#x2F;ClickHouse (github.com)</a></p>\n<p><a href=\"https://en.cppreference.com/w/c/language/restrict\">restrict type qualifier - cppreference.com</a></p>\n<p><a href=\"https://www.zhihu.com/question/41653775/answer/2535730128\">如何理解C语言关键字restrict？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41822235/article/details/83479562\">(65条消息) 关键字_restrict___restrict_楚楚可薇的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41950508/article/details/126619881?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126619881-blog-102577325.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126619881-blog-102577325.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=1\">(65条消息) 【C++】关键字restrict的作用_restrict关键字的作用_不知所措的渣渣辉的博客-CSDN博客</a></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/26/intel001/",
            "url": "https://xingyuanjie.top/2023/02/26/intel001/",
            "title": "unroll_and_jam/nounroll_and_jam",
            "date_published": "2023-02-26T11:12:51.000Z",
            "content_html": "<h1 id=\"unroll-and-jam-x2F-nounroll-and-jam\"><a href=\"#unroll-and-jam-x2F-nounroll-and-jam\" class=\"headerlink\" title=\"unroll_and_jam&#x2F;nounroll_and_jam\"></a>unroll_and_jam&#x2F;nounroll_and_jam</h1><p>启用或禁用循环展开和阻塞。这些指令只能应用于迭代for循环。</p>\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><p>#pragma unroll_and_jam\t#pragma unroll_and_jam (n)\t#pragma nounroll_and_jam</p>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>展开因子，表示展开循环的次数;必须是0到255之间的整数常数</p>\n<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>unroll_and_jam指令部分展开套中比最内层循环更高的一个或多个循环，并将结果循环融合&#x2F;阻塞回一起。这种转换允许在循环中进行更多的重用。</p>\n<p>此pragma对最内层循环无效。确保紧随其后的循环不是编译器发起的交换完成后的最内层循环。</p>\n<p>指定此pragma是向编译器提示展开和阻塞序列是合法且有利可图的。编译器会在任何可能的情况下启用这种转换。</p>\n<p>对于它影响的每个for循环，unroll_and_jam指令必须在for语句之前。如果指定了n，优化器将展开循环n次。如果n被省略或超出允许的范围，优化器将分配展开循环的次数。编译器通过比较n和循环计数生成正确的代码。</p>\n<p>只有在设置了编译器选项O3时，才支持此pragma。unroll_and_jam指令将覆盖从命令行展开循环的任何设置。</p>\n<p>当展开循环会增加寄存器压力和代码大小时，可能需要防止展开嵌套循环或不完美的嵌套循环。在这种情况下，使用nounroll_and_jam编译指令。nounroll_and_jam pragma提示编译器不要展开指定的循环。</p>\n<p><strong>Examples</strong></p>\n<p><strong>Use the unroll_and_jam pragma:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> b[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> d[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unroll</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i,j,k;<br>    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> unroll_and_jam (6)</span><br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) &#123;<br>       <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> unroll_and_jam (6)</span><br>       <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">1</span>; j &lt; n; j++) &#123;<br>          <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt; n; k++)&#123;<br>            a[i][j] += b[i][k]*c[k][j];<br>            &#125;<br>       &#125;<br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/pragmas/intel-specific-pragma-reference/unroll-and-jam-nounroll-and-jam.html\">unroll_and_jam nounroll_and_jam (intel.com)</a></p>\n",
            "tags": [
                "C++",
                "Intel"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/26/cache001/",
            "url": "https://xingyuanjie.top/2023/02/26/cache001/",
            "title": "Cache Blocking Techniques【个人翻译】",
            "date_published": "2023-02-26T10:02:29.000Z",
            "content_html": "<h2 id=\"Cache-Blocking-Techniques\"><a href=\"#Cache-Blocking-Techniques\" class=\"headerlink\" title=\"Cache Blocking Techniques\"></a>Cache Blocking Techniques</h2><p><strong>文章来源：</strong><a href=\"https://www.intel.cn/content/www/cn/zh/developer/articles/technical/cache-blocking-techniques.html\">Cache Blocking Techniques (intel.cn)</a></p>\n<p><strong>文章作者：</strong><a href=\"https://community.intel.com/cipcp26785/plugins/custom/intel/intel/custom.userprofile?id=3UpJu61CDTyShonSVJNwDw==&iv=8843887237217530\">Amanda K Sharp</a></p>\n<h3 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h3><p>一类重要的算法更改涉及分块数据结构以适应缓存。通过组织数据内存访问，可以用一个大得多的数据集的一个小子集加载缓存。接下来的想法是在缓存中处理这个数据块。通过在缓存中使用&#x2F;重用这些数据，我们减少了访问内存的需要(减少内存带宽压力)。</p>\n<h3 id=\"Topic\"><a href=\"#Topic\" class=\"headerlink\" title=\"Topic\"></a>Topic</h3><p>分块是一种著名的优化技术，可以帮助避免许多应用程序中的内存带宽瓶颈。分块背后的关键思想是利用应用程序中固有的数据重用，确保数据在多个用途之间保持在缓存中。分块可以在1-D、2-D或3-D空间数据结构上执行。一些迭代应用程序可以进一步受益于多次迭代的分块(通常称为时间分块)，以进一步缓解带宽瓶颈。就代码更改而言，分块通常涉及循环分割和交换的组合。在大多数应用程序代码中，通过对分块因子进行一些参数化，对源进行正确的更改，用户可以最好地执行分块。</p>\n<h3 id=\"Original-Source\"><a href=\"#Original-Source\" class=\"headerlink\" title=\"Original Source\"></a>Original Source</h3><figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">for (body1 = <span class=\"hljs-number\">0</span>; body1 &lt; NBODIES; body1 ++) &#123;<br>   for (body2=<span class=\"hljs-number\">0</span>; body2 &lt; NBODIES; body2++) &#123;<br>     <span class=\"hljs-keyword\">OUT</span>[body1] += compute(body1, body2);<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在本例中，数据(body2)来自内存。假设NBODIES很大，我们将无法在缓存中重用。此应用程序受内存带宽限制。应用程序将以内存到CPU的速度运行，而不是最佳速度。</p>\n<p><strong>Modified Source (with 1-D blocking):</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">for (body2 = <span class=\"hljs-number\">0</span>; body2 &lt; NBODIES; body2 += <span class=\"hljs-keyword\">BLOCK</span>) &#123;<br>   for (body1=<span class=\"hljs-number\">0</span>; body1 &lt; NBODIES; body1 ++) &#123;<br>      for (body22=<span class=\"hljs-number\">0</span>; body22 &lt; <span class=\"hljs-keyword\">BLOCK</span>; body22 ++) &#123;<br>         <span class=\"hljs-keyword\">OUT</span>[body1] += compute(body1, body2 + body22);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在修改后的代码中，数据(body22)在缓存中被保留和重用，从而获得更好的性能。</p>\n<p>例如，上面的代码片段显示了一个分块NBody代码的示例。有两个循环(body1和body2)遍历所有主体。顶部的原始代码流经内部循环中的整个主体集，并且必须在每次迭代中从内存中加载body2值。底部的分块代码是通过将body2循环分解为一个迭代多个BLOCK中的body的外部循环和一个迭代BLOCK中的元素的内部body22循环，并交织body1和body2循环来获得的。这段代码在body1循环的多次迭代中重用了一组BLOCK body2值。如果BLOCK被选中，使得这组值适合缓存，内存流量就会降低一个BLOCK的因子。</p>\n<p>以下是来自OpenMP*版本的NBody基准测试的相关代码片段(使用CHUNK_SIZE因子进行分块应用)。</p>\n<p>在这种情况下，循环展开-阻塞转换被表示为一个pragma，并由编译器完成。在这种情况下，研究-opt-report的输出可以确认编译器确实为你的循环执行了展开阻塞优化。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">#define CHUNK_SIZE <span class=\"hljs-number\">8192</span><br><br>#pragma omp parallel <span class=\"hljs-keyword\">private</span>(body_start_index)<br>  for(body_start_index = <span class=\"hljs-number\">0</span>; body_start_index &lt; global_number_of_bodies; body_start_index += CHUNK_SIZE) &#123;<br>    <span class=\"hljs-built_in\">int</span> i;<br>    <span class=\"hljs-built_in\">int</span> body_end_index = body_start_index + CHUNK_SIZE;<br><br>    #pragma omp for <span class=\"hljs-keyword\">private</span>(i) schedule(guided)<br>    #pragma unroll_and_jam (<span class=\"hljs-number\">4</span>)<br>    for(i=starting_index; i&lt;ending_index; i++) &#123;<br>      <span class=\"hljs-built_in\">int</span> j;<br>      <span class=\"hljs-keyword\">TYPE</span> acc_x_0 = <span class=\"hljs-number\">0</span>, acc_y_0 = <span class=\"hljs-number\">0</span>, acc_z_0 = <span class=\"hljs-number\">0</span>;<br>      for(j=body_start_index; j&lt;body_end_index; j+=<span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">TYPE</span> delta_x_0 = Input_Position_X[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_X[i];<br>        <span class=\"hljs-keyword\">TYPE</span> delta_y_0 = Input_Position_Y[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_Y[i];<br>        <span class=\"hljs-keyword\">TYPE</span> delta_z_0 = Input_Position_Z[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_Z[i];<br><br>        <span class=\"hljs-keyword\">TYPE</span> gamma_0 = delta_x_0*delta_x_0 + delta_y_0*delta_y_0 + delta_z_0*delta_z_0 + epsilon_sqr;<br>        <span class=\"hljs-keyword\">TYPE</span> s_0 = Mass[j+<span class=\"hljs-number\">0</span>]/(gamma_0 * <span class=\"hljs-built_in\">SQRT</span>(gamma_0));<br>        acc_x_0 += s_0*delta_x_0;<br>        acc_y_0 += s_0*delta_y_0;<br>        acc_z_0 += s_0*delta_z_0;<br>      &#125;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">0</span>] += acc_x_0;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">1</span>] += acc_y_0;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">2</span>] += acc_z_0;<br>    &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>下面是Fortran中的一个矩阵乘法代码示例，其中用户执行高级块展开-分块转换(在修改版本中)，涉及本地复制数组以获得最佳性能。</p>\n<p><strong>Fortran Source Example:</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\"><span class=\"hljs-keyword\">do</span> j=<span class=\"hljs-number\">1</span>,N<br>  <span class=\"hljs-keyword\">do</span> k = <span class=\"hljs-number\">1</span>,N<br>    <span class=\"hljs-keyword\">do</span> i = <span class=\"hljs-number\">1</span>,N<br>      c(i,j) = c(i,j) + a(i,k) * b(k,j)<br>    <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>  <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br><span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Modified Fortran Source:</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\"><span class=\"hljs-keyword\">do</span> JJ = <span class=\"hljs-number\">1</span>, N, TJ<br><br>       <span class=\"hljs-keyword\">do</span> KK = <span class=\"hljs-number\">1</span>, N, TK<br>         <span class=\"hljs-keyword\">do</span> jjj = <span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">min</span>(tj,N-jj+<span class=\"hljs-number\">1</span>)                     <span class=\"hljs-comment\">! BCOPY - no transpose</span><br>           <span class=\"hljs-keyword\">do</span> kkk = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tk,N-kk+<span class=\"hljs-number\">1</span>)<br>             p(kkk,jjj-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>) = B(kk+kkk-<span class=\"hljs-number\">1</span>, jj+jjj-<span class=\"hljs-number\">1</span>)<br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">do</span> II = <span class=\"hljs-number\">1</span>, N, TI<br>           <span class=\"hljs-keyword\">do</span> iii = <span class=\"hljs-number\">1</span>,<br>             <span class=\"hljs-built_in\">min</span>(ti,N-ii+<span class=\"hljs-number\">1</span>)                   <span class=\"hljs-comment\">!ACOPY - transpose</span><br>             <span class=\"hljs-keyword\">do</span> kkk = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tk,N-kk+<span class=\"hljs-number\">1</span>)<br>                Q(kkk,iii) = A(ii+iii-<span class=\"hljs-number\">1</span>, kk+kkk-<span class=\"hljs-number\">1</span>)<br>             <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">do</span> J = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tj,N-jj+<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">4</span><br>             <span class=\"hljs-keyword\">do</span> I = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(ti,N-ii+<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">2</span><br>                t1 = <span class=\"hljs-number\">0</span> ; t2 = <span class=\"hljs-number\">0</span> ; t5 = <span class=\"hljs-number\">0</span> ; t6 = <span class=\"hljs-number\">0</span> ; t9 = <span class=\"hljs-number\">0</span> ; t10 = <span class=\"hljs-number\">0</span> ; t13 =<span class=\"hljs-number\">0</span> ; t14 = <span class=\"hljs-number\">0</span><br>                <span class=\"hljs-comment\">!DIR$ vector aligned                      !DIR$ unroll(2)</span><br>                <span class=\"hljs-keyword\">do</span> K = <span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">min</span>(TK,N-kk+<span class=\"hljs-number\">1</span>)      <span class=\"hljs-comment\">! Innermost loop, vectorized and unrolled by 2 after that</span><br>                   qi = Q(K,I)           ;    qi1 = Q(K,I+<span class=\"hljs-number\">1</span>)  <br>                   t1 = t1+qi*P(K,J)     ;    t2 = t2+ qi1*P(K,J)<br>                   t5 = t5+ qi*P(K,J+<span class=\"hljs-number\">1</span>)  ;    t6 = t6+ qi1*P(K,J+<span class=\"hljs-number\">1</span>)<br>                   t9 = t9+ qi*P(K,J+<span class=\"hljs-number\">2</span>)  ;    t10 = t10+ qi1*P(K,J+<span class=\"hljs-number\">2</span>)<br>                   t13 = t13+ qi*P(K,J+<span class=\"hljs-number\">3</span>);    t14 = t14+qi1*P(K,J+<span class=\"hljs-number\">3</span>)<br>                <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) +t1          ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) + t2<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) + t5     ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) + t6<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) + t9     ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) + t10<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) + t13    ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) + t14<br>             <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>       <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>     <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Take-Aways\"><a href=\"#Take-Aways\" class=\"headerlink\" title=\"Take Aways\"></a>Take Aways</h3><p>缓存分块是一种重新安排数据访问的技术，将数据子集(块)拉入缓存，并对这个块进行操作，以避免不得不重复从主存中获取数据。正如上面的示例所示，可以以这种方式手动分块循环数据以重用缓存。</p>\n<p>对于性能关键的循环，其中性能分析表明内存带宽限制，而-opt-report显示编译器没有以最佳方式分块循环，您可以考虑手动展开循环，以便更好地分块数据以实现缓存重用。</p>\n<h3 id=\"NEXT-STEPS\"><a href=\"#NEXT-STEPS\" class=\"headerlink\" title=\"NEXT STEPS\"></a>NEXT STEPS</h3><p>您必须从头到尾阅读本指南，使用内置的超链接来指导您在Intel®Xeon处理器上成功地移植和调优应用程序。本指南中提供的路径反映了获得最佳应用程序性能所需的步骤。</p>\n",
            "tags": [
                "Cache",
                "Blocking"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/26/openmp008/",
            "url": "https://xingyuanjie.top/2023/02/26/openmp008/",
            "title": "OpenMP:Internal Control Variables",
            "date_published": "2023-02-26T09:36:54.000Z",
            "content_html": "<h2 id=\"2-5-Internal-Control-Variables\"><a href=\"#2-5-Internal-Control-Variables\" class=\"headerlink\" title=\"2.5 Internal Control Variables\"></a>2.5 Internal Control Variables</h2><p>OpenMP实现必须像内部控制变量(icv)一样控制OpenMP程序的行为。这些icv存储的信息包括用于未来并行区域的线程数、用于工作共享循环的调度以及是否启用嵌套并行。在程序执行期间，icv在不同的时间被赋予值(如下所述)。它们是由实现本身初始化的，并且可以通过OpenMP环境变量和调用OpenMP API例程来赋值。程序只能通过OpenMP API例程检索这些icv的值。</p>\n<p>出于说明的目的，本文档使用特定的名称来引用icv，但是实现不需要使用这些名称，也不需要提供访问变量的任何方法，除非通过第<a href=\"https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2\">189</a>页第<a href=\"https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2\">2.5.2节</a>所示的方法。</p>\n<p>2.5.1 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu30.html#x49-670002.5.1\">ICV Descriptions</a></p>\n<p>2.5.2 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2\">ICV Initialization</a></p>\n<p>2.5.3 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu32.html#x51-710002.5.3\">Modifying and Retrieving ICV Values</a></p>\n<p>2.5.4 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu33.html#x52-740002.5.4\">How ICVs are Scoped</a></p>\n<p>​\t\t 2.5.4.1 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu33.html#x52-760002.5.4.1\">How the Per-Data Environment ICVs Work</a></p>\n<p>2.5.5 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu34.html#x53-770002.5.5\">ICV Override Relationships</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.openmp.org/spec-html/5.0/openmpse13.html#x48-660002.5\">Internal Control Variables (openmp.org)</a></p>\n",
            "tags": [
                "OpenMP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/26/openmp007/",
            "url": "https://xingyuanjie.top/2023/02/26/openmp007/",
            "title": "OpenMP线程绑定【未完结】",
            "date_published": "2023-02-26T09:06:59.000Z",
            "content_html": "<h2 id=\"OpenMP线程绑定\"><a href=\"#OpenMP线程绑定\" class=\"headerlink\" title=\"OpenMP线程绑定\"></a>OpenMP线程绑定</h2><h3 id=\"OpenMP相关环境变量与指令\"><a href=\"#OpenMP相关环境变量与指令\" class=\"headerlink\" title=\"OpenMP相关环境变量与指令\"></a>OpenMP相关环境变量与指令</h3><h4 id=\"OMP-PROC-BIND\"><a href=\"#OMP-PROC-BIND\" class=\"headerlink\" title=\"OMP_PROC_BIND\"></a>OMP_PROC_BIND</h4><p>OMP_PROC_BIND环境变量设置bind-var ICV的初始值。这个环境变量的值可以是true、false，或者用逗号分隔的master、close或spread列表。列表的值设置了对应嵌套级别的并行区域要使用的线程亲和策略。</p>\n<p>如果环境变量设置为false，则执行环境可能会在OpenMP位置之间移动OpenMP线程，线程相关性将被禁用，并行构造上的proc_bind子句将被忽略。</p>\n<p>否则，执行环境不应该在OpenMP位置之间移动OpenMP线程，线程亲和性被启用，并且初始线程被绑定到OpenMP位置列表中的第一个位置，先于第一个活动并行区域。</p>\n<p>如果OMP_PROC_BIND环境变量中的值不是true、false或master、close或spread的逗号分隔列表，则程序的行为是实现定义的。如果初始线程不能绑定到OpenMP位置列表中的第一个位置，则该行为也是实现定义的。</p>\n<p>例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">setenv OMP_PROC_BIND false<br>setenv OMP_PROC_BIND &quot;spread,\tspread, close&quot;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://harrychen.xyz/2022/05/08/numa-processor-and-cpu-binding/\">NUMA 处理器与进程绑定 - Harry Chen’s Blog</a></p>\n<p><a href=\"https://www.openmp.org/spec-html/5.0/openmpse52.html\">OMP_PROC_BIND (openmp.org)</a></p>\n<p><a href=\"https://www.openmp.org/spec-html/5.0/openmpsu36.html#x56-900002.6.2\">Controlling OpenMP Thread Affinity</a></p>\n<p><a href=\"https://www.openmp.org/spec-html/5.0/openmpse53.html\">OMP_PLACES (openmp.org)</a></p>\n<p><a href=\"https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/optimization-and-programming/openmp-support/openmp-library-support/thread-affinity-interface.html\">Thread Affinity Interface (intel.com)</a></p>\n",
            "tags": [
                "OpenMP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/24/Linux003/",
            "url": "https://xingyuanjie.top/2023/02/24/Linux003/",
            "title": "基于GDB的程序调试",
            "date_published": "2023-02-24T08:50:20.000Z",
            "content_html": "<h2 id=\"基于GDB的程序调试\"><a href=\"#基于GDB的程序调试\" class=\"headerlink\" title=\"基于GDB的程序调试\"></a>基于GDB的程序调试</h2><h3 id=\"程序调试工具GDB\"><a href=\"#程序调试工具GDB\" class=\"headerlink\" title=\"程序调试工具GDB\"></a>程序调试工具GDB</h3><p>编译器GCC，项目构建工具Make（又称gmake），以及GDB。</p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224165344672.png\" alt=\"image-20230224165344672\"></p>\n<p><strong>GDB是什么？</strong></p>\n<p>GDB：GNU symbolic debugger是Linux下常用的程序调试器</p>\n<p><strong>GDB可以做什么？</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224165606636.png\" alt=\"image-20230224165606636\"></p>\n<p><strong>GDB官网：</strong><a href=\"https://www.sourceware.org/gdb/\">GDB: The GNU Project Debugger (sourceware.org)</a></p>\n<h3 id=\"调试案例一\"><a href=\"#调试案例一\" class=\"headerlink\" title=\"调试案例一\"></a>调试案例一</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> n,sum;<br>    n = <span class=\"hljs-number\">1</span>;<br>    sum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>( n &lt;= <span class=\"hljs-number\">100</span>)<br>    &#123;<br>        sum = sum + n;<br>        n = n + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在编译程序的时候，需要加调试选项： -g</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">gcc gdb001.c -g -o ex1<br></code></pre></div></td></tr></table></figure>\n\n<p>使用gdb启动程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">gdb ./ex1<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>进入gdb调试环境</strong>：</p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224170419171.png\" alt=\"image-20230224170419171\"></p>\n<p><strong>在调试环境中：使用l选项会显示带行号的源代码</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224170620617.png\" alt=\"image-20230224170620617\"></p>\n<p><strong>但是默认情况下，l选项只显示10行源代码，如果查看后续代码，在调试界面Enter回车即可</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224170804048.png\" alt=\"image-20230224170804048\"></p>\n<p><strong>在第7行源代码处打断点：</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224171858691.png\" alt=\"image-20230224171858691\"></p>\n<p><strong>运行程序，遇到断点停止：</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172105514.png\" alt=\"image-20230224172105514\"></p>\n<p><strong>查看代码中变量n的值</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172200662.png\" alt=\"image-20230224172200662\"></p>\n<p>当前n的值为1，$1表示该变量所在存储区的名称</p>\n<p><strong>在程序第12行处打断点</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172321002.png\" alt=\"image-20230224172321002\"></p>\n<p><strong>继续执行程序</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172356622.png\" alt=\"image-20230224172356622\"></p>\n<p><strong>查看当前n变量的值</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172422998.png\" alt=\"image-20230224172422998\"></p>\n<p>当前n的值为101</p>\n<p><strong>退出调试</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172456626.png\" alt=\"image-20230224172456626\"></p>\n<p><strong>查看调试环境所有断点：</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172650422.png\" alt=\"image-20230224172650422\"></p>\n<p><strong>删除第7行的断点：</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172745323.png\" alt=\"image-20230224172745323\"></p>\n<p><strong>禁用编号为2的断点：</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224172832507.png\" alt=\"image-20230224172832507\"></p>\n<p>注意断点状态Enb(enable)由y变成n，代表禁用</p>\n<p><strong>恢复编号为2的断点：</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224173006975.png\" alt=\"image-20230224173006975\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>GDB有三种调试模式：</p>\n<p><strong>调试执行程序：</strong>（前面的案例），注意编译加调试信息(-g)</p>\n<p><strong>调试core文件   ：</strong>需要对系统设置的core文件大小作调整（ulimit - c unlimlited），否则可能无法\t\t\t\t\t\t\t  产生core文件</p>\n<p><strong>调试正在执行的程序（gdb attach） ：</strong>Top找到进程编号pid，Gdb attach pid</p>\n<p><strong>GDB结构组成：</strong></p>\n<p><img src=\"/2023/02/24/Linux003/image-20230224173613247.png\" alt=\"image-20230224173613247\"></p>\n<h3 id=\"常用调试指令：\"><a href=\"#常用调试指令：\" class=\"headerlink\" title=\"常用调试指令：\"></a>常用调试指令：</h3><h4 id=\"启动指令\"><a href=\"#启动指令\" class=\"headerlink\" title=\"启动指令\"></a>启动指令</h4><p>调试程序：gdb program</p>\n<p>根据core文件调试程序：gdb program corefile</p>\n<p>跟踪调试进程：gdb attach pid</p>\n<h4 id=\"程序运行\"><a href=\"#程序运行\" class=\"headerlink\" title=\"程序运行\"></a>程序运行</h4><p>run，该命令会运行至程序结束，除非遇到断点或报错</p>\n<h4 id=\"单步执行\"><a href=\"#单步执行\" class=\"headerlink\" title=\"单步执行\"></a>单步执行</h4><p>步进执行不进栈？next</p>\n<p>步进执行，进栈step</p>\n<h4 id=\"代码查看\"><a href=\"#代码查看\" class=\"headerlink\" title=\"代码查看\"></a>代码查看</h4><p>列出断点附近或程序所有代码list</p>\n<p>设置现实代码的行数 set listsize &lt;n&gt;</p>\n<h4 id=\"退出调试\"><a href=\"#退出调试\" class=\"headerlink\" title=\"退出调试\"></a>退出调试</h4><p>quit</p>\n<h4 id=\"查看栈信息\"><a href=\"#查看栈信息\" class=\"headerlink\" title=\"查看栈信息\"></a>查看栈信息</h4><p>bt\t打印当前的函数调用栈的所有信息</p>\n<p>bt &lt;n&gt;\tn是一个正整数，表示只打印栈顶上n层的栈信息</p>\n<p>bt &lt;-n&gt;\t表示只打印栈底下n层的栈信息</p>\n<h4 id=\"设置断点\"><a href=\"#设置断点\" class=\"headerlink\" title=\"设置断点\"></a>设置断点</h4><p><strong>代码断点：</strong></p>\n<ul>\n<li>break lineNumber | functionName</li>\n<li>break lineNumber | functionName if condition</li>\n<li>tbreak lineNumber | functionName  临时断点，仅能使用一次</li>\n</ul>\n<p><strong>内存断点（观察点）：</strong></p>\n<ul>\n<li>监控内存值改变 watch expr [if condition]</li>\n<li>监控内存值被读取 rwatch expr [if condition]</li>\n<li>监控内存值被读取和写入 awatch wxpr [if condition]</li>\n</ul>\n<p><strong>事件断点：</strong></p>\n<ul>\n<li>C++ exception，使用catch exception [name]</li>\n<li>Ada exception，使用catch handlers [name]</li>\n<li>exec事件，使用catch exec</li>\n<li>fork事件，使用catch fork 或者 catch vfork</li>\n<li>加载和卸载动态so事件，使用catch load|unload [regexp]</li>\n<li>监听系统信号，使用catch signal [signal]</li>\n<li>监听系统调用，使用catch syscall[name|number|group:groupname|g:groupname]…</li>\n</ul>\n<p><strong>打印变量：</strong></p>\n<ul>\n<li>Print [file | func]::variable 查看局部变量或全局变量</li>\n<li>Print *array@len  数组首地址@查看长度</li>\n<li>x&#x2F;[n | u] &lt;addr&gt;\tx命令查看内存地址钟的值，n：表示显示内存的长度，u：表示从当前地址往后请求的字节数</li>\n</ul>\n<p><strong>打印寄存器：</strong></p>\n<p>info register\t查看寄存器（除了浮点寄存器）</p>\n<p>all-registers\t查看所有寄存器</p>\n<p>info registers &lt;reg_name …&gt;查看所指定寄存器</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><strong>来源培训PPT 作者：Relax  邮箱：<a href=\"mailto:&#x77;&#x61;&#110;&#x67;&#x77;&#49;&#49;&#x31;&#x40;&#x69;&#x63;&#108;&#x6f;&#117;&#x64;&#46;&#99;&#x6f;&#x6d;\">&#x77;&#x61;&#110;&#x67;&#x77;&#49;&#49;&#x31;&#x40;&#x69;&#x63;&#108;&#x6f;&#117;&#x64;&#46;&#99;&#x6f;&#x6d;</a></strong></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/19/Matrix002/",
            "url": "https://xingyuanjie.top/2023/02/19/Matrix002/",
            "title": "矩阵乘法计算拆分展示",
            "date_published": "2023-02-19T09:04:23.000Z",
            "content_html": "<h2 id=\"矩阵乘法计算拆分展示\"><a href=\"#矩阵乘法计算拆分展示\" class=\"headerlink\" title=\"矩阵乘法计算拆分展示\"></a>矩阵乘法计算拆分展示</h2><h3 id=\"通用矩阵乘概念\"><a href=\"#通用矩阵乘概念\" class=\"headerlink\" title=\"通用矩阵乘概念\"></a>通用矩阵乘概念</h3><p><img src=\"/2023/02/19/Matrix002/image-20230219171156738.png\" alt=\"image-20230219171156738\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵各行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵i行j列</span><br>        c[i][j] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p++)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>           C[i][j] += A[i][p] * B[p][j];\t\t<span class=\"hljs-comment\">//遍历A矩阵各行与B矩阵各列</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<h3 id=\"计算拆分展示\"><a href=\"#计算拆分展示\" class=\"headerlink\" title=\"计算拆分展示\"></a>计算拆分展示</h3><p>图四将输出计算拆分为 <strong>1 × 4</strong> 的小块，即将 <strong>N</strong> 维度拆分为两部分。计算该块输出时，需要使用 <strong>A</strong> 矩阵的1行，和 <strong>B</strong> 矩阵的4列 。</p>\n<p><img src=\"/2023/02/19/Matrix002/image-20230219171904249.png\" alt=\"image-20230219171904249\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵各行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j +=<span class=\"hljs-number\">4</span>)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵j-j+3列</span><br>        c[i][j + <span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i][j + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i][j + <span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i][j + <span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p++)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>            <span class=\"hljs-comment\">//遍历A矩阵各行与B矩阵各列</span><br>           C[i][j + <span class=\"hljs-number\">0</span>] += A[i][p] * B[p][j + <span class=\"hljs-number\">0</span>];    <br>           C[i][j + <span class=\"hljs-number\">1</span>] += A[i][p] * B[p][j + <span class=\"hljs-number\">1</span>];<br>           C[i][j + <span class=\"hljs-number\">2</span>] += A[i][p] * B[p][j + <span class=\"hljs-number\">2</span>];<br>           C[i][j + <span class=\"hljs-number\">3</span>] += A[i][p] * B[p][j + <span class=\"hljs-number\">3</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>最内侧计算使用的矩阵<strong>A</strong>的元素是一致的。因此可以将**A[i][p]**读取到寄存器中，从而实现4次数据复用。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> temp = A[i][p];<br></code></pre></div></td></tr></table></figure>\n\n<p>一般将最内侧循环称作计算核(micro kernel)</p>\n<p>类似地，我们可以继续拆分输出<strong>M</strong>维度，从而在内测循环中计算 <strong>4 × 4</strong> 输出，如图五。</p>\n<p><img src=\"/2023/02/19/Matrix002/image-20230219174355047.png\" alt=\"image-20230219174355047\"></p>\n<p>同样的，将计算核心展开，可以得到下面的伪代码。这里我们将 <strong>1 × 4</strong> 中展示过的N维度的计算简化表示。这种拆分可看成是<strong>4 × 1 × 4</strong>，这样A和B的访存均可复用四次。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i+=<span class=\"hljs-number\">4</span>)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵i-i+3行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j +=<span class=\"hljs-number\">4</span>)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵第j-j+3列</span><br>        c[i + <span class=\"hljs-number\">0</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">2</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p++)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>            <span class=\"hljs-comment\">//遍历A矩阵各行与B矩阵各列</span><br>           C[i + <span class=\"hljs-number\">0</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0</span>][p] * B[p][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];    <br>           C[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">1</span>][p] * B[p][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>           C[i + <span class=\"hljs-number\">2</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">2</span>][p] * B[p][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>           C[i + <span class=\"hljs-number\">3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">3</span>][p] * B[p][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>到目前为止。我们都是在输出的两个维度上展开，而整个计算还包含一个规约(Reduction)维度K。图六展示了在计算<strong>4 × 4</strong>输出时，将维度K拆分，从而每次最内侧循环计算出输出矩阵C的<strong>4&#x2F;K</strong>的部分和。</p>\n<p><img src=\"/2023/02/19/Matrix002/image-20230219180147184.png\" alt=\"image-20230219180147184\"></p>\n<p>下面展示的是这部分计算的展开伪代码，其中维度M和N已经被简写。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i+=<span class=\"hljs-number\">4</span>)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵i-i+3行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j +=<span class=\"hljs-number\">4</span>)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵第j-j+3列</span><br>        c[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p+=<span class=\"hljs-number\">4</span>)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>           C[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][p + <span class=\"hljs-number\">0</span>] * B[p + <span class=\"hljs-number\">0</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];    <br>           C[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][p + <span class=\"hljs-number\">1</span>] * B[p + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>           C[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][p + <span class=\"hljs-number\">2</span>] * B[p + <span class=\"hljs-number\">2</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>           C[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][p + <span class=\"hljs-number\">3</span>] * B[p + <span class=\"hljs-number\">3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在对M和N展开式，我们可以分别复用B和A的数据；在对K展开时，其局部使用的C的内存是一致的，那么K迭代时可以将部分和累加在寄存器中——最内层循环整个迭代一次写到C的内存中。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://zhenhuaw.me/blog/2019/gemm-optimization.html\">通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)</a></p>\n",
            "tags": [
                "Matrix",
                "GEMM"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/18/leetcode11/",
            "url": "https://xingyuanjie.top/2023/02/18/leetcode11/",
            "title": "11. 盛最多水的容器",
            "date_published": "2023-02-18T08:27:01.000Z",
            "content_html": "<h2 id=\"11-盛最多水的容器\"><a href=\"#11-盛最多水的容器\" class=\"headerlink\" title=\"11.盛最多水的容器\"></a>11.盛最多水的容器</h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><h4 id=\"11-盛最多水的容器-1\"><a href=\"#11-盛最多水的容器-1\" class=\"headerlink\" title=\"11. 盛最多水的容器\"></a><a href=\"https://leetcode.cn/problems/container-with-most-water/\">11. 盛最多水的容器</a></h4><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">maxArea</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//双指针；</span><br>        <span class=\"hljs-keyword\">int</span> ans =<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">int</span> left=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">int</span> right=height.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">while</span>(left&lt;right)&#123;<br>            <span class=\"hljs-keyword\">int</span> temp=<span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">if</span>(height[left]&lt;=height[right])&#123;<br>                temp = height[left]*(right-left);<br>                ans = std::<span class=\"hljs-built_in\">max</span>(ans,temp);<br>                left++;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                temp = height[right]*(right-left);<br>                ans = std::<span class=\"hljs-built_in\">max</span>(ans,temp);<br>                right--;<br>            &#125;<br>            <br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>        <br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://leetcode.cn/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/\">盛最多水的容器 - 盛最多水的容器 - 力扣（LeetCode）</a></p>\n",
            "tags": [
                "C++",
                "LeetCode",
                "双指针"
            ]
        }
    ]
}