{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/07/31/DS005/",
            "url": "http://example.com/2022/07/31/DS005/",
            "title": "数组的应用题",
            "date_published": "2022-07-31T07:55:24.000Z",
            "content_html": "<h1 id=\"数组的应用题\"><a href=\"#数组的应用题\" class=\"headerlink\" title=\"数组的应用题\"></a>数组的应用题</h1><p><strong>特别提醒：理解对称矩阵，三角矩阵，三对角矩阵的图形和区域的划分，需会手推这三种矩阵的一位数组的公式！</strong></p>\n<p><strong>特别提醒：注意题目中数组的开始起始下标是0还是1！</strong></p>\n<h2 id=\"1-对称矩阵\"><a href=\"#1-对称矩阵\" class=\"headerlink\" title=\"1.对称矩阵\"></a>1.对称矩阵</h2><p><img src=\"/2022/07/31/DS005/image-20220731155906163.png\" alt=\"image-20220731155906163\"></p>\n<p><img src=\"/2022/07/31/DS005/image-20220731155922230.png\" alt=\"image-20220731155922230\"></p>\n<h2 id=\"2-三角矩阵\"><a href=\"#2-三角矩阵\" class=\"headerlink\" title=\"2.三角矩阵\"></a>2.三角矩阵</h2><p><img src=\"/2022/07/31/DS005/image-20220731155953294.png\" alt=\"image-20220731155953294\"></p>\n<p><img src=\"/2022/07/31/DS005/image-20220731160009059.png\" alt=\"image-20220731160009059\"></p>\n<h2 id=\"3-三角矩阵\"><a href=\"#3-三角矩阵\" class=\"headerlink\" title=\"3.三角矩阵\"></a>3.三角矩阵</h2><p><img src=\"/2022/07/31/DS005/image-20220731160030225.png\" alt=\"image-20220731160030225\"></p>\n<h2 id=\"4-稀疏矩阵\"><a href=\"#4-稀疏矩阵\" class=\"headerlink\" title=\"4.稀疏矩阵\"></a>4.稀疏矩阵</h2><p><strong>特别提醒：稀疏矩阵压缩储存后便失去了随机出去特性！</strong></p>\n<p><img src=\"/2022/07/31/DS005/image-20220731160115967.png\" alt=\"image-20220731160115967\"></p>\n",
            "tags": [
                "Data Structure",
                "Array"
            ]
        },
        {
            "id": "http://example.com/2022/07/30/DS004/",
            "url": "http://example.com/2022/07/30/DS004/",
            "title": "队列应用题",
            "date_published": "2022-07-30T06:23:10.000Z",
            "content_html": "<h1 id=\"队列应用题\"><a href=\"#队列应用题\" class=\"headerlink\" title=\"队列应用题\"></a>队列应用题</h1><h2 id=\"1-队列的顺序存储结构\"><a href=\"#1-队列的顺序存储结构\" class=\"headerlink\" title=\"1.队列的顺序存储结构\"></a>1.队列的顺序存储结构</h2><h3 id=\"图像描述\"><a href=\"#图像描述\" class=\"headerlink\" title=\"图像描述\"></a>图像描述</h3><p><strong>特别提醒：注意头尾指针初始位置，以及队列满时的位置！</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730143027917.png\" alt=\"image-20220730143027917\"></p>\n<h3 id=\"队列的顺序储存类型描述\"><a href=\"#队列的顺序储存类型描述\" class=\"headerlink\" title=\"队列的顺序储存类型描述\"></a>队列的顺序储存类型描述</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 100\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//定义队列中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> data[MaxSize];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//存放队列指针</span><br>    <span class=\"hljs-keyword\">int</span> rear,front;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//对头元素和队尾指针</span><br>&#125;SqQueue; <br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"2-循环队列\"><a href=\"#2-循环队列\" class=\"headerlink\" title=\"2.循环队列\"></a>2.循环队列</h2><h3 id=\"1-图像描述\"><a href=\"#1-图像描述\" class=\"headerlink\" title=\"1.图像描述\"></a>1.图像描述</h3><p><strong>特别提醒：方案一的本质就是牺牲掉一个储存单位来区分是队空还是队满！</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730143502062.png\" alt=\"image-20220730143502062\"></p>\n<h3 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    Q.front=Q.rear=<span class=\"hljs-number\">0</span>;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始化队首、队尾指针</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-判断空\"><a href=\"#3-判断空\" class=\"headerlink\" title=\"3.判断空\"></a>3.判断空</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">(SqQueue &amp;Q)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\t\t\t\t<span class=\"hljs-comment\">//队空条件</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-入队\"><a href=\"#4-入队\" class=\"headerlink\" title=\"4.入队\"></a>4.入队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">EnQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q,Elemtype x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>((Q.rear+<span class=\"hljs-number\">1</span>)%MaxSize == Q.front ) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t\t<span class=\"hljs-comment\">//队满则报错</span><br>    Q.data=[Q.rear]=x;<br>    Q.rear=(Q.rear+<span class=\"hljs-number\">1</span>)%Maxsize;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队尾指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-出队\"><a href=\"#5-出队\" class=\"headerlink\" title=\"5.出队\"></a>5.出队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(Squeue &amp;Q,Elemtype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear == Q.front )  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//队空则报错</span><br>    x=Q.data[Q.front];<br>    Q.front=(Q.front+<span class=\"hljs-number\">1</span>)%MaxSize;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//对头指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"3-队列的链式储存结构\"><a href=\"#3-队列的链式储存结构\" class=\"headerlink\" title=\"3.队列的链式储存结构\"></a>3.队列的链式储存结构</h2><h3 id=\"1-图像描述-1\"><a href=\"#1-图像描述-1\" class=\"headerlink\" title=\"1.图像描述\"></a>1.图像描述</h3><p><strong>不带头节点：</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730144635084.png\" alt=\"image-20220730144635084\"></p>\n<p><strong>带头节点：</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730144714656.png\" alt=\"image-20220730144714656\"></p>\n<h3 id=\"2-队列的链式储存类型描述为\"><a href=\"#2-队列的链式储存类型描述为\" class=\"headerlink\" title=\"2.队列的链式储存类型描述为\"></a>2.队列的链式储存类型描述为</h3><p><strong>特别提醒：这里需要强加掌握！</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span>&#123;</span>\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列结点</span><br>    <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span> *<span class=\"hljs-title\">next</span>;</span><br>&#125;LinkNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列</span><br>    linkNode *front,*rear;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队列的队头和队尾指针</span><br>&#125;LinkQueue;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3.初始化\"></a>3.初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q)</span></span>&#123;<br>    Q.front=Q.rear=(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));\t\t\t\t<span class=\"hljs-comment\">//建立头结点</span><br>    Q.front-&gt;next =<span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始为空</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-判队空\"><a href=\"#4-判队空\" class=\"headerlink\" title=\"4.判队空\"></a>4.判队空</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsEmpty</span><span class=\"hljs-params\">(LinkQueue &amp;Q)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-入队\"><a href=\"#5-入队\" class=\"headerlink\" title=\"5.入队\"></a>5.入队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Enqueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,Elentype x)</span></span>&#123;<br>    LinkNode *s =(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));<br>    s&gt;data = x;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//创建新结点，插入到表尾</span><br>    s-&gt;next =<span class=\"hljs-literal\">NULL</span>;<br>    Q.rear-&gt;next = s;<br>    Q.rear = s;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"6-出队\"><a href=\"#6-出队\" class=\"headerlink\" title=\"6.出队\"></a>6.出队</h3><p><strong>特别提醒：这里需要注意如果删除后变为空队列需要怎么处理！</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,Elentype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear)  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>   \tLinkNode *p=Q.front-&gt;next;<br>    x=p-&gt;data;<br>    Q.front-&gt;next = p-&gt;next;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear = p)<br>        Q.rear = Q.front;\t\t\t\t\t\t<span class=\"hljs-comment\">//若原队列中只有一个结点，删除后变空</span><br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Queue"
            ]
        },
        {
            "id": "http://example.com/2022/07/29/DS003/",
            "url": "http://example.com/2022/07/29/DS003/",
            "title": "栈应用题",
            "date_published": "2022-07-29T08:31:44.000Z",
            "content_html": "<h2 id=\"栈应用题\"><a href=\"#栈应用题\" class=\"headerlink\" title=\"栈应用题\"></a>栈应用题</h2><h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><h4 id=\"1-顺序栈\"><a href=\"#1-顺序栈\" class=\"headerlink\" title=\"1.顺序栈\"></a>1.顺序栈</h4><h5 id=\"顺序栈的图像\"><a href=\"#顺序栈的图像\" class=\"headerlink\" title=\"顺序栈的图像\"></a>顺序栈的图像</h5><p><strong>特别注意：top指针的初值！</strong></p>\n<p><img src=\"/2022/07/29/DS003/image-20220729163738618.png\" alt=\"image-20220729163738618\"></p>\n<h5 id=\"栈的顺序存储类型描述\"><a href=\"#栈的顺序存储类型描述\" class=\"headerlink\" title=\"栈的顺序存储类型描述\"></a>栈的顺序存储类型描述</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//定义栈中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    Elemtype data[MaxSize];\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//存放栈中元素</span><br>    <span class=\"hljs-keyword\">int</span> top;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈顶指针</span><br>&#125;SqStack;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitStack</span><span class=\"hljs-params\">(SqStack &amp;S)</span></span>&#123;<br>\tS.top=<span class=\"hljs-number\">-1</span>                  \t\t\t\t\t\t<span class=\"hljs-comment\">//初始化栈顶指针</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"判栈空\"><a href=\"#判栈空\" class=\"headerlink\" title=\"判栈空\"></a>判栈空</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">StackEmpty</span><span class=\"hljs-params\">(SqStack &amp;S)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈空</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\t\t\t\t<br>    <span class=\"hljs-keyword\">else</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//不空</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"进栈\"><a href=\"#进栈\" class=\"headerlink\" title=\"进栈\"></a>进栈</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Push</span><span class=\"hljs-params\">(SqStack &amp;S,Elemtype x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top == MaxSize<span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈满，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        S.data[++S.top]=x;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//指针先加1，再入栈</span><br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"出栈\"><a href=\"#出栈\" class=\"headerlink\" title=\"出栈\"></a>出栈</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Pop</span><span class=\"hljs-params\">(SqStack &amp;S,Elemtype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top ==<span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈空，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        x=S.data[S.top--];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//先入栈，指针再减1</span><br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"读栈顶元素\"><a href=\"#读栈顶元素\" class=\"headerlink\" title=\"读栈顶元素\"></a>读栈顶元素</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">GetTop</span><span class=\"hljs-params\">(SqStack &amp;S,Elemtype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈空，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        x = S.data[S.top];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//x记录栈顶元素</span><br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-共享栈\"><a href=\"#2-共享栈\" class=\"headerlink\" title=\"2.共享栈\"></a>2.共享栈</h4><p><strong>特别注意：top0指针和top1指针的初始化的问题！</strong></p>\n<p><img src=\"/2022/07/29/DS003/image-20220729165150586.png\" alt=\"image-20220729165150586\"></p>\n<h4 id=\"3-链栈\"><a href=\"#3-链栈\" class=\"headerlink\" title=\"3.链栈\"></a>3.链栈</h4><h5 id=\"链栈的图像\"><a href=\"#链栈的图像\" class=\"headerlink\" title=\"链栈的图像\"></a>链栈的图像</h5><p><strong>特别注意：此链栈不带头结点，且所有操作都是在表头进行！</strong></p>\n<p><img src=\"/2022/07/29/DS003/image-20220729165541592.png\" alt=\"image-20220729165541592\"></p>\n<h5 id=\"栈的链式存储类型描述\"><a href=\"#栈的链式存储类型描述\" class=\"headerlink\" title=\"栈的链式存储类型描述\"></a>栈的链式存储类型描述</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span> *<span class=\"hljs-title\">next</span>;</span>\t\t\t\t\t\t\t<span class=\"hljs-comment\">//指针域</span><br>&#125;*LiStack;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈类型定义</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Stack"
            ]
        },
        {
            "id": "http://example.com/2022/07/25/DS002/",
            "url": "http://example.com/2022/07/25/DS002/",
            "title": "快速排序",
            "date_published": "2022-07-25T08:54:55.000Z",
            "content_html": "<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">QuickSort</span><span class=\"hljs-params\">(ElemType A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(low&lt;high)&#123;\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//递归跳出的条件</span><br>        <span class=\"hljs-comment\">//Partition()就是划分操作，将表A[low...high]划分为满足上述条件的两个子表</span><br>        \t\t\t<span class=\"hljs-keyword\">int</span> pivotpos = <span class=\"hljs-built_in\">Partition</span>(A,low,high);\t\t\t<span class=\"hljs-comment\">//划分</span><br>        \t\t\t<span class=\"hljs-built_in\">QuickSort</span>(A,low,pivotpos<span class=\"hljs-number\">-1</span>);\t\t\t\t\t<span class=\"hljs-comment\">//依次对两个子表进行递归排序</span><br>        \t\t\t<span class=\"hljs-built_in\">QuickSort</span>(A,pivotpos+<span class=\"hljs-number\">1</span>,high);\t\t\t\t\t<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Partition</span><span class=\"hljs-params\">(ElemType A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>&#123;\t\t\t<span class=\"hljs-comment\">//一趟划分</span><br>\t\tElemType pivot = A[low];\t\t\t<span class=\"hljs-comment\">//将当前表中第一个元素设为枢轴，对表进行划分</span><br>    \t<span class=\"hljs-keyword\">while</span>(low&lt;high)&#123;\t\t\t\t\t<span class=\"hljs-comment\">//循环跳出条件</span><br>            <span class=\"hljs-keyword\">while</span>(low&lt;high&amp;&amp;A[high]&gt;=pivot)     --high;<br>           \tA[low]=A[high];\t\t\t\t\t<span class=\"hljs-comment\">//将比枢轴小的元素移动到左侧</span><br>            <span class=\"hljs-keyword\">while</span>(low&lt;high&amp;&amp;A[low]&lt;=pivot)  ++low;<br>            A[high]=A[low];\t\t\t\t\t<span class=\"hljs-comment\">//将比枢轴大的元素移动到右侧</span><br>        &#125;<br>    \tA[low]=pivot;\t\t\t\t\t\t<span class=\"hljs-comment\">//枢轴元素存放到最终位置</span><br>    \t<span class=\"hljs-keyword\">return</span> low;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//返回存放枢轴的最终位置</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "QuickSort"
            ]
        },
        {
            "id": "http://example.com/2022/06/24/DS001/",
            "url": "http://example.com/2022/06/24/DS001/",
            "title": "数据结构第一章绪论",
            "date_published": "2022-06-24T08:25:52.000Z",
            "content_html": "<h1 id=\"数据结构第一章绪论\"><a href=\"#数据结构第一章绪论\" class=\"headerlink\" title=\"数据结构第一章绪论\"></a>数据结构第一章绪论</h1><h2 id=\"知识总览\"><a href=\"#知识总览\" class=\"headerlink\" title=\"知识总览\"></a>知识总览</h2><p><img src=\"/2022/06/24/DS001/image-20220628155551705.png\" alt=\"image-20220628155551705\"></p>\n<h3 id=\"1-1-1基本概念和术语\"><a href=\"#1-1-1基本概念和术语\" class=\"headerlink\" title=\"1.1.1基本概念和术语\"></a>1.1.1基本概念和术语</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1.数据\"></a>1.数据</h4><p>​\t\t数据是信息的载体，是描述客观事物属性的数，字符及所有能输入到计算机中并被计算机程序识别和处理的集合。</p>\n<p>数据是计算机程序加工的原料</p>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2.数据元素\"></a>2.数据元素</h4><p>​\t\t数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。\t</p>\n<h4 id=\"3-数据对象\"><a href=\"#3-数据对象\" class=\"headerlink\" title=\"3.数据对象\"></a>3.数据对象</h4><p>​\t\t数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</p>\n<h4 id=\"4-数据类型是一个值的集合和定义在此集合上的一组操作的总称\"><a href=\"#4-数据类型是一个值的集合和定义在此集合上的一组操作的总称\" class=\"headerlink\" title=\"4.数据类型是一个值的集合和定义在此集合上的一组操作的总称\"></a>4.数据类型是一个值的集合和定义在此集合上的一组操作的总称</h4><ol>\n<li>原子类型：其值不可再分的数据类型</li>\n<li>结构类型：其值可以再分解的数据类型</li>\n<li>抽象数据类型：抽象数据组织及与之相关的操作</li>\n</ol>\n<h3 id=\"1-1-2数据结构三要素\"><a href=\"#1-1-2数据结构三要素\" class=\"headerlink\" title=\"1.1.2数据结构三要素\"></a>1.1.2数据结构三要素</h3><h4 id=\"1-数据的逻辑结构\"><a href=\"#1-数据的逻辑结构\" class=\"headerlink\" title=\"1.数据的逻辑结构\"></a>1.数据的逻辑结构</h4><p><img src=\"/2022/06/24/DS001/image-20220628155609948.png\" alt=\"image-20220628155609948\"></p>\n<h4 id=\"2-数据的存储结构\"><a href=\"#2-数据的存储结构\" class=\"headerlink\" title=\"2.数据的存储结构\"></a>2.数据的存储结构</h4><p><img src=\"/2022/06/24/DS001/image-20220628155615386.png\" alt=\"image-20220628155615386\"></p>\n<h4 id=\"3-数据的运算\"><a href=\"#3-数据的运算\" class=\"headerlink\" title=\"3.数据的运算\"></a>3.数据的运算</h4><p>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能;运算的实现是针对存储结构的，指出运算的具体步骤</p>\n<h3 id=\"知识回顾与重要考点\"><a href=\"#知识回顾与重要考点\" class=\"headerlink\" title=\"知识回顾与重要考点\"></a>知识回顾与重要考点</h3><p><img src=\"/2022/06/24/DS001/image-20220628155619678.png\" alt=\"image-20220628155619678\"></p>\n<p><img src=\"/2022/06/24/DS001/image-20220628155623998.png\" alt=\"image-20220628155623998\"></p>\n<h3 id=\"1-2-1算法的基本概念\"><a href=\"#1-2-1算法的基本概念\" class=\"headerlink\" title=\"1.2.1算法的基本概念\"></a>1.2.1算法的基本概念</h3><p>算法是对特定问题求解步骤的一种描述。他是指令的有限序列，其中的每条指令表示一个或多个操作。</p>\n<h3 id=\"知识回顾与重要考点-1\"><a href=\"#知识回顾与重要考点-1\" class=\"headerlink\" title=\"知识回顾与重要考点\"></a>知识回顾与重要考点</h3><p><img src=\"/2022/06/24/DS001/image-20220628155630085.png\" alt=\"image-20220628155630085\"></p>\n<h3 id=\"1-2-2算法效率的度量\"><a href=\"#1-2-2算法效率的度量\" class=\"headerlink\" title=\"1.2.2算法效率的度量\"></a>1.2.2算法效率的度量</h3><h4 id=\"1-时间复杂度\"><a href=\"#1-时间复杂度\" class=\"headerlink\" title=\"1.时间复杂度\"></a>1.时间复杂度</h4><p>一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频数之和记为T(n)，它是该算法问题规模n的函数，时间复杂度主要分析T(n)的数量级。</p>\n<p><img src=\"/2022/06/24/DS001/image-20220628155634291.png\" alt=\"image-20220628155634291\"></p>\n<h4 id=\"2-空间复杂度\"><a href=\"#2-空间复杂度\" class=\"headerlink\" title=\"2.空间复杂度\"></a>2.空间复杂度</h4><p>算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它是问题规模n的函数。</p>\n<p><img src=\"/2022/06/24/DS001/image-20220628155639858.png\" alt=\"image-20220628155639858\"></p>\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/2022/06/22/mirror001/",
            "url": "http://example.com/2022/06/22/mirror001/",
            "title": "国内常用镜像源",
            "date_published": "2022-06-22T12:13:38.000Z",
            "content_html": "<h2 id=\"国内常用镜像源\"><a href=\"#国内常用镜像源\" class=\"headerlink\" title=\"国内常用镜像源\"></a>国内常用镜像源</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">清华大学： https:<span class=\"hljs-comment\">//pypi.tuna.tsinghua.edu.cn/simple/</span><br>阿里云： https:<span class=\"hljs-comment\">//mirrors.aliyun.com/pypi/simple/</span><br>豆瓣： http:<span class=\"hljs-comment\">//pypi.douban.com/simple/</span><br>中国科学技术大学： http:<span class=\"hljs-comment\">//pypi.mirrors.ustc.edu.cn/simple/</span><br>华中科技大学：http:<span class=\"hljs-comment\">//pypi.hustunique.com/simple/</span><br>山东理工大学：http:<span class=\"hljs-comment\">//pypi.sdutlinux.org/simple/</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Mirror"
            ]
        },
        {
            "id": "http://example.com/2022/06/12/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/",
            "url": "http://example.com/2022/06/12/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/",
            "title": "内存对齐",
            "date_published": "2022-06-12T07:11:29.730Z",
            "content_html": "<h1 id=\"内存对齐\"><a href=\"#内存对齐\" class=\"headerlink\" title=\"内存对齐\"></a>内存对齐</h1><h2 id=\"CPU读取内存的方式\"><a href=\"#CPU读取内存的方式\" class=\"headerlink\" title=\"CPU读取内存的方式\"></a>CPU读取内存的方式</h2><p>CPU读取内存的方式其实非常复杂，为了更进一步的了解相关的原理，需要对计算机组成原理进行深度学习。</p>\n<h3 id=\"Memory-access-granularity-内存读取粒度\"><a href=\"#Memory-access-granularity-内存读取粒度\" class=\"headerlink\" title=\"Memory access granularity(内存读取粒度)\"></a>Memory access granularity(内存读取粒度)</h3><p>However, your computer’s processor does not read from and write to memory in byte-sized chunks. Instead, it accesses memory in two-, four-, eight- 16- or even 32-byte chunks. We’ll call the size in which a processor accesses memory its memory access granularity.</p>\n<p>CPU把内存当成是一块一块的，块的大小可以是2，4，8，16字节大小，因此CPU在读取内存时是一块一块进行读取的。块大小成为<em>memory access granularity（粒度）</em> 本人把它翻译为“内存读取粒度” 。</p>\n<p><a href=\"https://www.cnblogs.com/feng9exe/p/10059543.html\">https://www.cnblogs.com/feng9exe/p/10059543.html</a> ”内存对齐“</p>\n<h2 id=\"内存对齐举例\"><a href=\"#内存对齐举例\" class=\"headerlink\" title=\"内存对齐举例\"></a>内存对齐举例</h2><p>假设此计算机的内存读取粒度是4。</p>\n<h3 id=\"如果内存对齐时\"><a href=\"#如果内存对齐时\" class=\"headerlink\" title=\"如果内存对齐时\"></a>如果内存对齐时</h3><p>前提知识：</p>\n<p>1 Byte &#x3D; 8bit </p>\n<p>1 int8 占用 1 Byte</p>\n<p>1 int16 占用 2 Byte</p>\n<p>1 int32 占用 4 Byte</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//一个结构体的定义如下</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span><br><span class=\"hljs-class\">&#123;</span><br>    int8 a;<br>    int32 b;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th align=\"center\">4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n<th>14</th>\n<th>15</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int8 a</td>\n<td></td>\n<td></td>\n<td></td>\n<td align=\"center\">int32 b</td>\n<td>int32 b</td>\n<td>int32 b</td>\n<td>int32 b</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>我们可以发现int8 a储存在0号内存上，占用1个Byte，1-3号内存空下了3个Byte。int32 b储存在了4-7号内存，一共4个Byte。</p>\n<p>由于此计算机的内存读取粒度时是4</p>\n<p>当需要读取a(0号内存)时，计算机会读取0-3号一组内存，然后去掉1-3号内存。访问次数1次。</p>\n<p>当需要读取b(4-7号内存时)，计算机会读取4-7号内存，访问次数1次。</p>\n<h3 id=\"如果内存没有对齐时\"><a href=\"#如果内存没有对齐时\" class=\"headerlink\" title=\"如果内存没有对齐时\"></a>如果内存没有对齐时</h3><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n<th>14</th>\n<th>15</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int8 a</td>\n<td>int32 b</td>\n<td>int32 b</td>\n<td>int32 b</td>\n<td>int32 b</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>我们可以发现int8 a储存在0号内存上，占用了1个Byte。int32 b储存在1-4号内存上，一共4个Byte。</p>\n<p>由于此计算机的内存读取粒度时是4</p>\n<p>当需要读取a(0号内存)时，计算机会读取0-3号一组内存，然后去掉1-3号内存。访问次数1次。</p>\n<p>当需要读取b(1-4号内存)时，计算机会先读取0-3号一组内存，去掉0号内存，再读取4-7号一组内存，去掉5-7号内存，随后再拼接1-3号内存和4号内存组成完整的b。访问次数2次。</p>\n<h2 id=\"内存对齐的目的\"><a href=\"#内存对齐的目的\" class=\"headerlink\" title=\"内存对齐的目的\"></a>内存对齐的目的</h2><p>合理的内存对齐可以高效的利用硬件性能，减少处理器内存访问次数。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p><a href=\"https://www.bilibili.com/video/BV1Vt4y1m7DP?from=search&amp;amp;seid=13964421962700904405&amp;amp;spm_id_from=333.337.0.0\">https://www.bilibili.com/video/BV1Vt4y1m7DP?from=search&amp;amp;seid=13964421962700904405&amp;amp;spm_id_from=333.337.0.0</a> “内存对齐”</p>\n<p><a href=\"https://www.bilibili.com/video/BV1v64y1X7YP?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1v64y1X7YP?spm_id_from=333.999.0.0</a> “内存对齐对程序性能的影响”</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/06/12/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/",
            "url": "http://example.com/2022/06/12/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/",
            "title": "MPI学习(一)-简单的发送接收",
            "date_published": "2022-06-12T07:11:29.651Z",
            "content_html": "<h1 id=\"MPI-简单的发送接收\"><a href=\"#MPI-简单的发送接收\" class=\"headerlink\" title=\"MPI-简单的发送接收\"></a>MPI-简单的发送接收</h1><p>打印来自进程问候语句的MPI程序</p>\n<h2 id=\"所使用的MPI原语\"><a href=\"#所使用的MPI原语\" class=\"headerlink\" title=\"所使用的MPI原语\"></a>所使用的MPI原语</h2><p><img src=\"/2022/06/12/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/mpi001.png\"></p>\n<p><img src=\"/2022/06/12/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/mpi002.png\"></p>\n<h2 id=\"程序运行平台\"><a href=\"#程序运行平台\" class=\"headerlink\" title=\"程序运行平台\"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>mpi&#x2F;intel&#x2F;2017.5</p>\n<h2 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h2><p>mpicc  3.1.cpp -o 3.1</p>\n<h2 id=\"运行指令\"><a href=\"#运行指令\" class=\"headerlink\" title=\"运行指令\"></a>运行指令</h2><p>mpirun -np 4 .&#x2F;3.1(本地提交,采取4个进程)</p>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mpi.h&gt;</span>   <span class=\"hljs-comment\">//头文件</span></span><br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAX_STRING = <span class=\"hljs-number\">100</span> ;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> **argv)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">char</span> greeting[MAX_STRING];<br>\t<span class=\"hljs-keyword\">int</span> comm_sz;<br>\t<span class=\"hljs-keyword\">int</span> my_rank;<br>\tMPI_Status status;<br><br>\t<span class=\"hljs-built_in\">MPI_Init</span>(&amp;argc,&amp;argv);<br><br>\t<span class=\"hljs-built_in\">MPI_Comm_size</span>(MPI_COMM_WORLD,&amp;comm_sz);<br>\t<span class=\"hljs-built_in\">MPI_Comm_rank</span>(MPI_COMM_WORLD,&amp;my_rank);<br>\t<br>\t<span class=\"hljs-keyword\">if</span>(my_rank != <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//其他进程向0号进程发消息</span><br>\t\t<span class=\"hljs-built_in\">sprintf</span>(greeting,<span class=\"hljs-string\">&quot;Greetings from process %d of %d!&quot;</span>,my_rank,comm_sz);<br>\t\t<span class=\"hljs-built_in\">MPI_Send</span>(greeting,<span class=\"hljs-built_in\">strlen</span>(greeting)+<span class=\"hljs-number\">1</span>,MPI_CHAR,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,MPI_COMM_WORLD); <br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Greetings from process %d of %d!\\n&quot;</span>,my_rank,comm_sz);<br>\t\t<span class=\"hljs-comment\">//0号进程接受来自其他进程的消息并输出</span><br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> q=<span class=\"hljs-number\">1</span>;q&lt;comm_sz;q++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">MPI_Recv</span>(greeting,MAX_STRING,MPI_CHAR,q,<span class=\"hljs-number\">0</span>,MPI_COMM_WORLD,&amp;status);<br>\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>,greeting);<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">MPI_Finalize</span>();<br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">Greetings from process <span class=\"hljs-number\">0</span> of <span class=\"hljs-number\">4</span>!<br>Greetings from process <span class=\"hljs-number\">1</span> of <span class=\"hljs-number\">4</span>!<br>Greetings from process <span class=\"hljs-number\">2</span> of <span class=\"hljs-number\">4</span>!<br>Greetings from process <span class=\"hljs-number\">3</span> of <span class=\"hljs-number\">4</span>!<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "MPI"
            ]
        },
        {
            "id": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/",
            "url": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/",
            "title": "AVX向量化学习(二)-内存对齐的应用",
            "date_published": "2022-06-12T07:11:29.549Z",
            "content_html": "<h1 id=\"AVX指令集的简单操作-内存对齐版\"><a href=\"#AVX指令集的简单操作-内存对齐版\" class=\"headerlink\" title=\"AVX指令集的简单操作(内存对齐版)\"></a>AVX指令集的简单操作(内存对齐版)</h1><p>使用AVX指令集进行2个double型的数组相加操作</p>\n<h2 id=\"常用的内存对齐函数\"><a href=\"#常用的内存对齐函数\" class=\"headerlink\" title=\"常用的内存对齐函数\"></a>常用的内存对齐函数</h2><p>因为AVX中要求mem__addr必须在32字节边界上对齐，否则可能会产生通用保护异常。  </p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)_mm_malloc(<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>),<span class=\"hljs-number\">32</span>);<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">aligned_alloc</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__attribute__ ((<span class=\"hljs-built_in\">aligned</span>(<span class=\"hljs-number\">32</span>)))<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>]  =&#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256d _mm256_load_pd (<span class=\"hljs-keyword\">double</span> <span class=\"hljs-keyword\">const</span> * mem_addr)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into dst. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>] := MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr]<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-1\"><a href=\"#2-1\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256 _mm256_add_ps (__m256 a, __m256 b)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">7</span><br>\t<span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">32</span><br>\t<span class=\"hljs-attribute\">dst</span>[i+<span class=\"hljs-number\">31</span>:i] := a[i+<span class=\"hljs-number\">31</span>:i] + b[i+<span class=\"hljs-number\">31</span>:i]<br><span class=\"hljs-attribute\">ENDFOR</span><br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-stream的作用：绕过缓存直接写入内存\"><a href=\"#3-stream的作用：绕过缓存直接写入内存\" class=\"headerlink\" title=\"3.stream的作用：绕过缓存直接写入内存\"></a>3.stream的作用：绕过缓存直接写入内存</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> _mm256_stream_pd (<span class=\"hljs-keyword\">double</span> * mem_addr, __m256d a)<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory using a non-temporal memory hint. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr] := a[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>]<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"样例程序举例：\"><a href=\"#样例程序举例：\" class=\"headerlink\" title=\"样例程序举例：\"></a>样例程序举例：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;malloc.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">double</span>*\tb =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">4</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">double</span> af[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125; ;<br>\t<span class=\"hljs-keyword\">double</span> bf[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span>*\tc =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">4</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i =<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\ta[i]=af[i];<br>\t\tb[i]=bf[i];<br>\t&#125;<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t__m256d v0;<br>\t__m256d v1;<br>\t__m256d v2;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span><span class=\"hljs-number\">-4</span>;i+=<span class=\"hljs-number\">4</span>)<br>\t&#123;\t<br>\t\t\tv0 = _mm256_load_pd(a+i);<br>\t\t\tv1 = _mm256_load_pd(b+i);<br>\t\t\tv2=_mm256_add_pd(v0,v1);<br>\t\t \t_mm256_stream_pd(c+i,v2);<br>\t\t\t<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"样例程序输出：\"><a href=\"#样例程序输出：\" class=\"headerlink\" title=\"样例程序输出：\"></a>样例程序输出：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "url": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "title": "AVX向量化学习(一)",
            "date_published": "2022-06-12T07:11:29.538Z",
            "content_html": "<h1 id=\"AVX指令集的简单操作\"><a href=\"#AVX指令集的简单操作\" class=\"headerlink\" title=\"AVX指令集的简单操作\"></a>AVX指令集的简单操作</h1><p>使用AVX指令集进行2个double型的数组相加操作</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256 _mm256_loadu_ps (<span class=\"hljs-keyword\">float</span> <span class=\"hljs-keyword\">const</span> * mem_addr)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into dst. mem_addr does not need to be aligned on any particular boundary.</p>\n<h3 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>] := MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr]<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256d _mm256_add_pd (__m256d a, __m256d b)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Description-1\"><a href=\"#Description-1\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.</p>\n<h3 id=\"Operation-1\"><a href=\"#Operation-1\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span><br>\ti := j*<span class=\"hljs-number\">64</span><br>\tdst[i+<span class=\"hljs-number\">63</span>:i] := a[i+<span class=\"hljs-number\">63</span>:i] + b[i+<span class=\"hljs-number\">63</span>:i]<br>ENDFOR<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> _mm256_storeu_pd (<span class=\"hljs-keyword\">double</span> * mem_addr, __m256d a)<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Description-2\"><a href=\"#Description-2\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory. mem_addr does not need to be aligned on any particular boundary.</p>\n<h3 id=\"Operation-2\"><a href=\"#Operation-2\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr] := a[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>]<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"未进行AVX向量化的情况\"><a href=\"#未进行AVX向量化的情况\" class=\"headerlink\" title=\"未进行AVX向量化的情况\"></a>未进行AVX向量化的情况</h2><h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> c[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span> ;i&lt;<span class=\"hljs-number\">9</span>;i++)\t<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t\t<br>\t&#125;<br>\t<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c.\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"进行AVX向量化的情况\"><a href=\"#进行AVX向量化的情况\" class=\"headerlink\" title=\"进行AVX向量化的情况\"></a>进行AVX向量化的情况</h2><h3 id=\"程序源代码-1\"><a href=\"#程序源代码-1\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> c[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>\t__m256d v0;<br>\t__m256d v1;<br>\t__m256d v2;<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span><span class=\"hljs-number\">-4</span>;i+=<span class=\"hljs-number\">4</span>)<br>\t&#123;\t<br>\t\t\tv0 = _mm256_loadu_pd(a+i);<br>\t\t\tv1 = _mm256_loadu_pd(b+i);<br>\t\t\tv2=_mm256_add_pd(v0,v1);<br>\t\t \t_mm256_storeu_pd(c+i,v2);<br>\t\t\t<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c with AVX.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出-1\"><a href=\"#程序输出-1\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c with AVX.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/05/20/slurm001/",
            "url": "http://example.com/2022/05/20/slurm001/",
            "title": "Slurm",
            "date_published": "2022-05-20T09:43:02.000Z",
            "content_html": "<h2 id=\"Slurm\"><a href=\"#Slurm\" class=\"headerlink\" title=\"Slurm\"></a>Slurm</h2><h4 id=\"1-sstat-查看RUNNING作业\"><a href=\"#1-sstat-查看RUNNING作业\" class=\"headerlink\" title=\"1.sstat 查看RUNNING作业\"></a>1.sstat 查看RUNNING作业</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sstat -e<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/slurm001/image-20220520174453969.png\" alt=\"image-20220520174453969\"></p>\n<p><strong>使用举例：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sstat -a --format=&quot;JobId,Pids,AveCPU,AveRSS,MaxRSS&quot;  1755818<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/slurm001/image-20220520175001331.png\" alt=\"image-20220520175001331\"></p>\n<h4 id=\"2-sacct-查看FINISHED作业\"><a href=\"#2-sacct-查看FINISHED作业\" class=\"headerlink\" title=\"2.sacct 查看FINISHED作业\"></a>2.sacct 查看FINISHED作业</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sacct -e<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/slurm001/image-20220520174622868.png\" alt=\"image-20220520174622868\"></p>\n<p><strong>使用举例：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sacct --format=&quot;JobId,Elapsed,CPUTime,CPUTimeRAW,AveCPU,TotalCPU,UserCPU,SystemCPU,AveRSS,MaxRSS&quot; -j 1754217<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/slurm001/image-20220520174807162.png\" alt=\"image-20220520174807162\"></p>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><p><a href=\"https://blog.csdn.net/kongxx/article/details/52556943\">(28条消息) Slurm查看作业CPU和MEM_kongxx的博客-CSDN博客_slurm 查看节点</a></p>\n",
            "tags": [
                "Linux",
                "Slurm"
            ]
        },
        {
            "id": "http://example.com/2022/05/20/numactl001/",
            "url": "http://example.com/2022/05/20/numactl001/",
            "title": "numactl",
            "date_published": "2022-05-20T09:35:59.000Z",
            "content_html": "<ol>\n<li></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">numactl --hardware<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/numactl001/image-20220520173911653.png\" alt=\"image-20220520173911653\"></p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shelll\">numastat<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/numactl001/image-20220520174030171.png\" alt=\"image-20220520174030171\"></p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">numactl --show<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/numactl001/image-20220520174148487.png\" alt=\"image-20220520174148487\"></p>\n<h5 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h5><p><a href=\"https://blog.csdn.net/qccz123456/article/details/81979819\">(28条消息) Linux工具之numactl_qccz123456的博客-CSDN博客_numactl</a></p>\n<p><a href=\"https://baijiahao.baidu.com/s?id=1699088343604813491&wfr=spider&for=pc&searchword=numactl\">宋宝华：为什么numactl内存绑定对代码段不起作用 (baidu.com)</a></p>\n",
            "tags": [
                "Linux",
                "Numactl"
            ]
        },
        {
            "id": "http://example.com/2022/05/20/Linux002/",
            "url": "http://example.com/2022/05/20/Linux002/",
            "title": "linux的jobs,fg,bg命令",
            "date_published": "2022-05-20T09:13:08.000Z",
            "content_html": "<h3 id=\"linux让前台程序脱离终端运行\"><a href=\"#linux让前台程序脱离终端运行\" class=\"headerlink\" title=\"linux让前台程序脱离终端运行\"></a>linux让前台程序脱离终端运行</h3><p>1.首先运行你的程序</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520171436032.png\" alt=\"image-20220520171436032\"></p>\n<p>2.随后使用Ctrl + z，挂起你的进程</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520171510946.png\" alt=\"image-20220520171510946\"></p>\n<p>3.然后使用jobs查看所有的进程</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520171913979.png\" alt=\"image-20220520171913979\"></p>\n<p>4.随后使用bg+id，表示该任务为后台1号任务</p>\n<p>bg命令用于将作业放到后台运行，使前台可以执行其他任务</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520172110992.png\" alt=\"image-20220520172110992\"></p>\n<h3 id=\"linux让后台程序移动到前台终端\"><a href=\"#linux让后台程序移动到前台终端\" class=\"headerlink\" title=\"linux让后台程序移动到前台终端\"></a>linux让后台程序移动到前台终端</h3><p>Linux常用命令fg主要用于将后台作业移动到前台终端运行</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520172358345.png\" alt=\"image-20220520172358345\"></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2022/05/20/Linux001/",
            "url": "http://example.com/2022/05/20/Linux001/",
            "title": "Linux常用指令",
            "date_published": "2022-05-20T09:08:45.000Z",
            "content_html": "<h2 id=\"Linux常用指令\"><a href=\"#Linux常用指令\" class=\"headerlink\" title=\"Linux常用指令\"></a>Linux常用指令</h2><h4 id=\"杀死进程\"><a href=\"#杀死进程\" class=\"headerlink\" title=\"杀死进程\"></a>杀死进程</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kill <span class=\"hljs-number\">-9</span> id<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/Linux001/image-20220520171246860.png\" alt=\"image-20220520171246860\"></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2022/05/08/tool004/",
            "url": "http://example.com/2022/05/08/tool004/",
            "title": "gcov代码覆盖率测试-完整样例-SLIC",
            "date_published": "2022-05-08T02:34:59.000Z",
            "content_html": "<h2 id=\"gcov代码覆盖率测试-完整样例-SLIC\"><a href=\"#gcov代码覆盖率测试-完整样例-SLIC\" class=\"headerlink\" title=\"gcov代码覆盖率测试-完整样例-SLIC\"></a>gcov代码覆盖率测试-完整样例-SLIC</h2><h3 id=\"gcov代码覆盖率测试介绍：\"><a href=\"#gcov代码覆盖率测试介绍：\" class=\"headerlink\" title=\"gcov代码覆盖率测试介绍：\"></a>gcov代码覆盖率测试介绍：</h3><p><a href=\"https://xingyuanjie.top/2022/01/18/tool002/\">gcov代码覆盖率测试 - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<h3 id=\"完整样例-SLIC：\"><a href=\"#完整样例-SLIC：\" class=\"headerlink\" title=\"完整样例-SLIC：\"></a>完整样例-SLIC：</h3><p><a href=\"https://xingyuanjie.top/2022/05/08/tool004/result.zip\">https://xingyuanjie.top/2022/05/08/tool004/result.zip</a></p>\n",
            "tags": [
                "性能分析工具",
                "gcov"
            ]
        },
        {
            "id": "http://example.com/2022/05/06/Algorithm037/",
            "url": "http://example.com/2022/05/06/Algorithm037/",
            "title": "图的存储",
            "date_published": "2022-05-06T08:38:38.000Z",
            "content_html": "<h2 id=\"图的存储\"><a href=\"#图的存储\" class=\"headerlink\" title=\"图的存储\"></a>图的存储</h2><h3 id=\"邻接矩阵法\"><a href=\"#邻接矩阵法\" class=\"headerlink\" title=\"邻接矩阵法\"></a>邻接矩阵法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点数目的最大值</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">char</span> VertexType;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点的数据类型</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> EdgeType;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//带权图中边上权值的数据类型</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    VertexType Vex[MaxVertexNum];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点表</span><br>    EdgeType Edge[MaxVertexNum][MaxVertexNum];\t\t\t\t<span class=\"hljs-comment\">//邻接矩阵，边表</span><br>    <span class=\"hljs-keyword\">int</span> vexnum,arcnum;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//图中当前顶点数和弧数</span><br>&#125;MGraph;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"邻接表法\"><a href=\"#邻接表法\" class=\"headerlink\" title=\"邻接表法\"></a>邻接表法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//图中顶点数目的最大值</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcNode</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//边表结点</span><br>    <span class=\"hljs-keyword\">int</span> adjvex;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//该弧所指向的顶点的位置</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcNode</span> *<span class=\"hljs-title\">next</span>;</span>\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//指向下一条弧的指针</span><br>    <span class=\"hljs-comment\">//InfoType infp;\t\t\t\t\t\t\t\t\t\t//网的边权值</span><br>&#125;ArcNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">VNode</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点表结点</span><br>    VertexType data;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点信息</span><br>    ArcNode *first;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//指向第一条依附该顶点的弧的指针</span><br>&#125;VNode,AdjList[MaxVertexNum];<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    AdjList vertices;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//邻接表</span><br>    <span class=\"hljs-keyword\">int</span> vexnum,arcnum;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//图的顶点数和弧数</span><br>&#125;ALGraph;\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//ALGraph是以邻接表存储的图的类型</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Graph"
            ]
        },
        {
            "id": "http://example.com/2022/05/05/Algorithm036/",
            "url": "http://example.com/2022/05/05/Algorithm036/",
            "title": "树、森林",
            "date_published": "2022-05-05T08:58:34.000Z",
            "content_html": "<h2 id=\"树、森林\"><a href=\"#树、森林\" class=\"headerlink\" title=\"树、森林\"></a>树、森林</h2><h3 id=\"树的存储结构\"><a href=\"#树的存储结构\" class=\"headerlink\" title=\"树的存储结构\"></a>树的存储结构</h3><h4 id=\"双亲表示法\"><a href=\"#双亲表示法\" class=\"headerlink\" title=\"双亲表示法\"></a>双亲表示法</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX_TREE_SIZE 100\t\t\t\t\t<span class=\"hljs-comment\">//树中最多节点数\t</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//树的结点定义</span><br>    ElemType data;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据元素\t</span><br>    <span class=\"hljs-keyword\">int</span> parent;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//双亲位置域</span><br>&#125;PTNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//树的类型定义</span><br>    PTNode nodes[MAX_TREE_SIZE];\t\t\t<span class=\"hljs-comment\">//双亲表示</span><br>    <span class=\"hljs-keyword\">int</span> n;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//节点数</span><br>&#125;PTree;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"孩子兄弟法\"><a href=\"#孩子兄弟法\" class=\"headerlink\" title=\"孩子兄弟法\"></a>孩子兄弟法</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">CSNode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">CSNode</span> *<span class=\"hljs-title\">firstchild</span>,*<span class=\"hljs-title\">nextsibling</span>;</span>\t\t\t\t\t<span class=\"hljs-comment\">//第一个孩子和右兄弟指针</span><br>&#125;CSNode,*CSTree;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Tree",
                "森林"
            ]
        },
        {
            "id": "http://example.com/2022/05/04/Algorithm035/",
            "url": "http://example.com/2022/05/04/Algorithm035/",
            "title": "线索二叉树",
            "date_published": "2022-05-04T12:05:19.000Z",
            "content_html": "<h2 id=\"线索二叉树\"><a href=\"#线索二叉树\" class=\"headerlink\" title=\"线索二叉树\"></a>线索二叉树</h2><h3 id=\"线索二叉树的存储结构\"><a href=\"#线索二叉树的存储结构\" class=\"headerlink\" title=\"线索二叉树的存储结构\"></a>线索二叉树的存储结构</h3><p>线索二叉树的存储结构描述如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">ltag = <span class=\"hljs-number\">0</span> lchild域指示结点的左孩子<br>ltag = <span class=\"hljs-number\">1</span> lchild域指示结点的前驱<br><span class=\"hljs-comment\">//</span><br>rtag = <span class=\"hljs-number\">0</span> rchild域指示结点的右孩子<br>rtag = <span class=\"hljs-number\">1</span> rchild域指示结点的后继<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t<span class=\"hljs-comment\">//数据元素</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>\t\t\t\t<span class=\"hljs-comment\">//左右孩子指针</span><br>    <span class=\"hljs-keyword\">int</span> ltag,rtag;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//左右线索标志</span><br>&#125;ThreadNode，*ThreadTree;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"中序线索二叉树的构造\"><a href=\"#中序线索二叉树的构造\" class=\"headerlink\" title=\"中序线索二叉树的构造\"></a>中序线索二叉树的构造</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InThread</span><span class=\"hljs-params\">(ThreadTree &amp;p,ThreadNode &amp;pre)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-built_in\">InThread</span>(p-&gt;lchild,pre);\t\t\t<span class=\"hljs-comment\">//递归，线索化左子树</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(p-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t<span class=\"hljs-comment\">//左子树为空，建立前驱线索</span><br>                p-&gt;lchild=pre;<br>                p-&gt;ltag=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(pre!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;pre-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)&#123;<br>                pre-&gt;rchild=p;\t\t\t\t<span class=\"hljs-comment\">//建立前驱结点的后继线索</span><br>                pre-&gt;rtag=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            pre=p;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//标记当前结点成为刚刚访问过的结点</span><br>            <span class=\"hljs-built_in\">InThread</span>(p-&gt;rchild,pre);\t\t<span class=\"hljs-comment\">//递归，线索化右子树</span><br>        &#125;<span class=\"hljs-comment\">//if(p!=NULL)</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CreateInThread</span><span class=\"hljs-params\">(ThreadTree T)</span></span>&#123;<br>    ThreadTree pre = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(T!=<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//非空二叉树。线索化</span><br>        <span class=\"hljs-built_in\">InThread</span>(T,pre);\t\t\t\t<span class=\"hljs-comment\">//线索化二叉树</span><br>        pre-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;\t\t\t\t<span class=\"hljs-comment\">//处理遍历的最后一个结点</span><br>        pre-&gt;rtag=<span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"中序线索二叉树的遍历\"><a href=\"#中序线索二叉树的遍历\" class=\"headerlink\" title=\"中序线索二叉树的遍历\"></a>中序线索二叉树的遍历</h3><p>1)求中序线索二叉树中中序序列下的第一个结点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">Thread *<span class=\"hljs-title\">Firstnode</span><span class=\"hljs-params\">(ThreadNode *p)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(p-&gt;ltag==<span class=\"hljs-number\">0</span>) p=p-&gt;lchild;\t\t<span class=\"hljs-comment\">//最左下结点（不一定是叶结点）</span><br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>2)求中序线索二叉树中结点p在中序序列下的后继</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">ThreadNode *<span class=\"hljs-title\">Nextnode</span><span class=\"hljs-params\">(ThreadNode *p)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(p-&gt;rtag==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Firstnode</span>(p-&gt;rchild);<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> p-&gt;rchild;\t\t\t<span class=\"hljs-comment\">//rtag==1直接返回后继线索</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>3)利用上面两个算法，可以写出不含头节点的中序线索二叉树的中序遍历算法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Inorder</span><span class=\"hljs-params\">(ThreadNode *T)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(ThreadNode *p=Firstnode;p!=<span class=\"hljs-literal\">NULL</span>;p=<span class=\"hljs-built_in\">Nextnode</span>(p))<br>        <span class=\"hljs-built_in\">visit</span>(p);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Binary tree",
                "线索二叉树"
            ]
        },
        {
            "id": "http://example.com/2022/04/27/Algorithm034/",
            "url": "http://example.com/2022/04/27/Algorithm034/",
            "title": "串的模式匹配算法-KMP算法",
            "date_published": "2022-04-27T11:39:05.000Z",
            "content_html": "<h2 id=\"串的模式匹配算法-KMP算法\"><a href=\"#串的模式匹配算法-KMP算法\" class=\"headerlink\" title=\"串的模式匹配算法-KMP算法\"></a>串的模式匹配算法-KMP算法</h2><h3 id=\"求next数组\"><a href=\"#求next数组\" class=\"headerlink\" title=\"求next数组\"></a>求next数组</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">get_next</span><span class=\"hljs-params\">(SSting t,<span class=\"hljs-keyword\">int</span> next[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">0</span>;<br>    next[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(i&lt;t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>||t.ch[i]==t.ch[j])<br>        &#123;<br>            i++;<br>            j++;<br>            next[i]=j;      <span class=\"hljs-comment\">//若pi=pj,则next[j+i]=next[j]+1</span><br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            j=next[j];      <span class=\"hljs-comment\">//否则令j=next[j]，循环继续</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"KMP匹配算法\"><a href=\"#KMP匹配算法\" class=\"headerlink\" title=\"KMP匹配算法\"></a>KMP匹配算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Index_KMP</span><span class=\"hljs-params\">(SSting s,SSting t,<span class=\"hljs-keyword\">int</span> next[])</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i&lt;=s.length&amp;&amp;j&lt;=t.length)&#123;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>||s.ch[i]==t.ch[j])<br>        &#123;<br>            j++;                    <span class=\"hljs-comment\">//继续比较后续字符</span><br>            i++;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            j=next[j];              <span class=\"hljs-comment\">//模式串向右移动</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(j&gt;t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> i-t.length;          <span class=\"hljs-comment\">//匹配成功</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAXLEN 255\t\t\t\t\t<span class=\"hljs-comment\">//预定义最大串长</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">char</span> ch[MAXLEN];\t\t\t\t<span class=\"hljs-comment\">//每个分量存储一个字符</span><br>    <span class=\"hljs-keyword\">int</span> length;\t\t\t\t\t\t<span class=\"hljs-comment\">//串的实际长度</span><br>&#125;SSting;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">get_next</span><span class=\"hljs-params\">(SSting t,<span class=\"hljs-keyword\">int</span> next[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">0</span>;<br>    next[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(i&lt;t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>||t.ch[i]==t.ch[j])<br>        &#123;<br>            i++;<br>            j++;<br>            next[i]=j;      <span class=\"hljs-comment\">//若pi=pj,则next[j+i]=next[j]+1</span><br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            j=next[j];      <span class=\"hljs-comment\">//否则令j=next[j]，循环继续</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Index_KMP</span><span class=\"hljs-params\">(SSting s,SSting t,<span class=\"hljs-keyword\">int</span> next[])</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i&lt;=s.length&amp;&amp;j&lt;=t.length)&#123;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>||s.ch[i]==t.ch[j])<br>        &#123;<br>            j++;                    <span class=\"hljs-comment\">//继续比较后续字符</span><br>            i++;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            j=next[j];              <span class=\"hljs-comment\">//模式串向右移动</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(j&gt;t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> i-t.length;          <span class=\"hljs-comment\">//匹配成功</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    SSting a,b;<br>    string s1=<span class=\"hljs-string\">&quot;ababcabcacbab&quot;</span>;<br>    string s2=<span class=\"hljs-string\">&quot;abcac&quot;</span>;<br>    a.length=s1.<span class=\"hljs-built_in\">size</span>();<br>    b.length=s2.<span class=\"hljs-built_in\">size</span>();<br>    <span class=\"hljs-keyword\">int</span> next[s2.<span class=\"hljs-built_in\">size</span>()+<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-built_in\">get_next</span>(b,next);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;s1.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;\t<span class=\"hljs-comment\">//初始化</span><br>        a.ch[i+<span class=\"hljs-number\">1</span>]=s1[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;s2.<span class=\"hljs-built_in\">size</span>() ; ++j) &#123;\t<span class=\"hljs-comment\">//初始化</span><br>        b.ch[j+<span class=\"hljs-number\">1</span>]=s2[j];<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> x=<span class=\"hljs-built_in\">Index_KMP</span>(a,b,next);<br>    <span class=\"hljs-keyword\">if</span>(x!=<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;找到了位置是：&quot;</span>&lt;&lt;x&lt;&lt;endl;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;没有找到&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">找到了位置是：<span class=\"hljs-number\">6</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "String",
                "KMP"
            ]
        },
        {
            "id": "http://example.com/2022/04/27/Algorithm033/",
            "url": "http://example.com/2022/04/27/Algorithm033/",
            "title": "串-简单的模式匹配算法",
            "date_published": "2022-04-27T09:11:18.000Z",
            "content_html": "<h2 id=\"串-简单的模式匹配算法\"><a href=\"#串-简单的模式匹配算法\" class=\"headerlink\" title=\"串-简单的模式匹配算法\"></a>串-简单的模式匹配算法</h2><h3 id=\"简单的模式匹配算法\"><a href=\"#简单的模式匹配算法\" class=\"headerlink\" title=\"简单的模式匹配算法\"></a>简单的模式匹配算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Index</span><span class=\"hljs-params\">(SSting s,SSting t)</span>        <span class=\"hljs-comment\">//简单的模式匹配算法</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(i&lt;=s.length &amp;&amp; j&lt;= t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(s.ch[i]==t.ch[j])<br>        &#123;<br>            i++;                      <span class=\"hljs-comment\">//继续比较后继字符</span><br>            j++;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;                        <span class=\"hljs-comment\">//指针后退重新开始匹配</span><br>            i=i-j+<span class=\"hljs-number\">2</span>;                  <span class=\"hljs-comment\">//每次匹配失败后，都把模式t后移一位</span><br>            j=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(j&gt;t.length) <span class=\"hljs-keyword\">return</span> i-t.length;           <span class=\"hljs-comment\">//返回与模式t中第一个字符相等的字符在主串s中的序号</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"完整程序源代码\"><a href=\"#完整程序源代码\" class=\"headerlink\" title=\"完整程序源代码\"></a>完整程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAXLEN 255\t\t\t\t\t<span class=\"hljs-comment\">//预定义最大串长</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">char</span> ch[MAXLEN];\t\t\t\t<span class=\"hljs-comment\">//每个分量存储一个字符</span><br>    <span class=\"hljs-keyword\">int</span> length;\t\t\t\t\t\t<span class=\"hljs-comment\">//串的实际长度</span><br>&#125;SSting;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Index</span><span class=\"hljs-params\">(SSting s,SSting t)</span>        <span class=\"hljs-comment\">//简单的模式匹配算法</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(i&lt;=s.length &amp;&amp; j&lt;= t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(s.ch[i]==t.ch[j])<br>        &#123;<br>            i++;                      <span class=\"hljs-comment\">//继续比较后继字符</span><br>            j++;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;                        <span class=\"hljs-comment\">//指针后退重新开始匹配</span><br>            i=i-j+<span class=\"hljs-number\">2</span>;                  <span class=\"hljs-comment\">//每次匹配失败后，都把模式t后移一位</span><br>            j=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(j&gt;t.length) <span class=\"hljs-keyword\">return</span> i-t.length;           <span class=\"hljs-comment\">//返回与模式t中第一个字符相等的字符在主串s中的序号</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    SSting a,b;<br>    string s1=<span class=\"hljs-string\">&quot;ababcabcacbab&quot;</span>;<br>    string s2=<span class=\"hljs-string\">&quot;abcac&quot;</span>;<br>    a.length=s1.<span class=\"hljs-built_in\">size</span>();<br>    b.length=s2.<span class=\"hljs-built_in\">size</span>();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;s1.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;\t<span class=\"hljs-comment\">//初始化</span><br>        a.ch[i+<span class=\"hljs-number\">1</span>]=s1[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;s2.<span class=\"hljs-built_in\">size</span>() ; ++j) &#123;\t<span class=\"hljs-comment\">//初始化</span><br>        b.ch[j+<span class=\"hljs-number\">1</span>]=s2[j];<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> x=<span class=\"hljs-built_in\">Index</span>(a,b);<br>    <span class=\"hljs-keyword\">if</span>(x!=<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;找到了位置是：&quot;</span>&lt;&lt;x&lt;&lt;endl;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;没有找到&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">找到了位置是：<span class=\"hljs-number\">6</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "String"
            ]
        }
    ]
}