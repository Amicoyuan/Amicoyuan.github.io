<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Amicoyuan</title>
        <link>https://xingyuanjie.top</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 06 Mar 2023 15:46:00 +0800</pubDate>
        <lastBuildDate>Mon, 06 Mar 2023 15:46:00 +0800</lastBuildDate>
        <category>AVX</category>
        <category>Data Structure</category>
        <category>String</category>
        <category>Find</category>
        <category>STL</category>
        <category>C++</category>
        <category>Set</category>
        <category>团体程序设计天梯赛</category>
        <category>Sort</category>
        <category>LinkList</category>
        <category>双向链表</category>
        <category>Graph</category>
        <category>邻接表</category>
        <category>Vector</category>
        <category>Binary tree</category>
        <category>BFS</category>
        <category>模拟</category>
        <category>邻接矩阵</category>
        <category>DFS</category>
        <category>结构体</category>
        <category>贪心</category>
        <category>Double类型相等比较</category>
        <category>并查集</category>
        <category>Map</category>
        <category>Pair</category>
        <category>Linux</category>
        <category>MPI</category>
        <category>Matrix</category>
        <category>GEMM</category>
        <category>AVX2</category>
        <category>dgemm</category>
        <category>Cache</category>
        <category>Blocking</category>
        <category>CUDA</category>
        <category>Intel</category>
        <category>LeetCode</category>
        <category>数组翻转</category>
        <category>双指针</category>
        <category>哈希表</category>
        <category>前缀和</category>
        <category>Mirror</category>
        <category>牛客</category>
        <category>Numactl</category>
        <category>OpenMP</category>
        <category>C/C++</category>
        <category>register</category>
        <category>Slurm</category>
        <category>Tensorflow</category>
        <category>性能分析工具</category>
        <category>gcov</category>
        <category>bool</category>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/03/06/cuda008/</guid>
            <title>编写核函数</title>
            <link>https://xingyuanjie.top/2023/03/06/cuda008/</link>
            <category>CUDA</category>
            <pubDate>Mon, 06 Mar 2023 15:46:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;编写核函数&#34;&gt;&lt;a href=&#34;#编写核函数&#34; class=&#34;headerlink&#34; title=&#34;编写核函数&#34;&gt;&lt;/a&gt;编写核函数&lt;/h2&gt;&lt;p&gt;核函数是在设备端执行的代码。在核函数中，需要为一个线程规定要进行的计算以及要进行的数据访问。当核函数被调用时，许多不同的CUDA线程并行执行同一个计算任务。以下是用_&lt;em&gt;global&lt;/em&gt;_&lt;/p&gt;
&lt;p&gt;声明定义核函数：&lt;/p&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;__global__  void kernel&lt;span class=&#34;hljs-constructor&#34;&gt;_name(&lt;span class=&#34;hljs-params&#34;&gt;argument&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;list&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;核函数必须有一个void返回类型。&lt;/p&gt;
&lt;p&gt;表2-2总结了CUDA C程序中的函数类型限定符。函数类型限定符指定一个函数在主机上执行还是在设备上执行，以及可被主机调用还是被设备调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/06/cuda008/image-20230306155126122.png&#34; alt=&#34;image-20230306155126122&#34;&gt;&lt;/p&gt;
&lt;p&gt;_&lt;em&gt;device&lt;/em&gt;_   和 __host__限定符可以一齐使用，这样函数可以同时在主机和设备端进行编译。&lt;/p&gt;
&lt;h3 id=&#34;CUDA核函数的限制&#34;&gt;&lt;a href=&#34;#CUDA核函数的限制&#34; class=&#34;headerlink&#34; title=&#34;CUDA核函数的限制&#34;&gt;&lt;/a&gt;CUDA核函数的限制&lt;/h3&gt;&lt;p&gt;以下限制适用于所有核函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能访问设备内存&lt;/li&gt;
&lt;li&gt;必须具有void返回类型&lt;/li&gt;
&lt;li&gt;不支持可变数量的参数&lt;/li&gt;
&lt;li&gt;不支持静态变量&lt;/li&gt;
&lt;li&gt;显示异步行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑一个简单的例子：将两个大小为N的向量A和B相加，主机端的向量加法C代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArrayOnHost&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; N)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i &amp;lt; N; i++)&lt;br&gt;        C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是一个迭代N次的串行程序，循环结束后将产生以下核函数：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;__global__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArrayOnHost&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = threadIdx.x;&lt;br&gt;        C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;C函数和核函数之间有什么不同？你可能已经注意到循环体消失了，内置的线程坐标变量替换了数组索引，由于N是被隐式定义用来启动N个线程的，所以N没有什么参考价值。&lt;/p&gt;
&lt;p&gt;假设有一个长度为32个元素的向量，你可以按以下方法用32个线程来调用核函数：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/03/06/cuda007/</guid>
            <title>启动一个CUDA核函数</title>
            <link>https://xingyuanjie.top/2023/03/06/cuda007/</link>
            <category>CUDA</category>
            <pubDate>Mon, 06 Mar 2023 13:59:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;启动一个CUDA核函数&#34;&gt;&lt;a href=&#34;#启动一个CUDA核函数&#34; class=&#34;headerlink&#34; title=&#34;启动一个CUDA核函数&#34;&gt;&lt;/a&gt;启动一个CUDA核函数&lt;/h2&gt;&lt;p&gt;你应该对下列C语言函数调用语句很熟悉：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;function_name&lt;/span&gt; (argument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;CUDA内核调用是对C语言函数调用语句的延申，&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;运算符内是核函数的执行配置。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kerbel_name&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(srgument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;正如上一节所述，CUDA编程模型揭示了线程层次结构。利用执行配置可以指定线程在GPU上调度运行的方式。执行配置的第一个值是网格维度，也就是启动块的数目。第二个值是块维度，也就是每个块中线程的数目。通过指定网格和块的维度，你可以进行一下配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核中线程的数目&lt;/li&gt;
&lt;li&gt;内核中使用的线程布局&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同一个块中的线程之间可以相互协作，不同块内的线程不能协作。对于一个给定的问题，可以使用不同的网格和块布局来组织你的线程。例如，假设你有32个数据元素用于计算，每8个元素一个块，需要启动4个块：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kernel_name&amp;lt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/03/06/cuda007/image-20230306140924311.png&#34; alt=&#34;image-20230306140924311&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于数据在全局内存中是线性存储的，因此可以用变量blockIdx.x和threadIdx.x来进行以下操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在网格中标识一个唯一的线程&lt;/li&gt;
&lt;li&gt;建立线程和数据元素之间的映射关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果把32个元素放到一个块里，那么只会得到一个块：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kernel_name&amp;lt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果每个块只含一个元素，那么会有32个块：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kernel_name&amp;lt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;核函数的调用与主机线程是异步的。核函数调用结束后，控制权立刻返回给主机端。你可以调用以下函数来强制主机端程序等待所有的核函数执行结束：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;cudaError_t &lt;span class=&#34;hljs-title&#34;&gt;cudaDeviceSynchronize&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一些CUDA运行时API在主机和设备之间是隐式同步的。当使用cudaMemcpy函数在主机和设备之间拷贝数据时，主机端隐式同步，即主机端程序必须等待数据拷贝完成后才能继续执行程序。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;cudaError_t &lt;span class=&#34;hljs-title&#34;&gt;cudaMemcpy&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;* dst, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;* src, &lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt; count, cudaMemcpyKind kind)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;之前所有的核函数调用完成后开始拷贝数据。当拷贝完成后，控制权立刻返回给主机端。&lt;/p&gt;
&lt;h3 id=&#34;异步行为&#34;&gt;&lt;a href=&#34;#异步行为&#34; class=&#34;headerlink&#34; title=&#34;异步行为&#34;&gt;&lt;/a&gt;异步行为&lt;/h3&gt;&lt;p&gt;不同于C语言的函数调用，所有的CUDA核函数的启动都是异步的。CUDA内核调用完成后，控制权立刻返回给CPU。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/03/02/leetcode205/</guid>
            <title>205.同构字符串</title>
            <link>https://xingyuanjie.top/2023/03/02/leetcode205/</link>
            <category>C++</category>
            <category>LeetCode</category>
            <category>哈希表</category>
            <pubDate>Thu, 02 Mar 2023 20:44:27 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;205-同构字符串&#34;&gt;&lt;a href=&#34;#205-同构字符串&#34; class=&#34;headerlink&#34; title=&#34;205.同构字符串&#34;&gt;&lt;/a&gt;205.同构字符串&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/isomorphic-strings/&#34;&gt;205. 同构字符串 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;isIsomorphic&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(string s, string t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        string ss;&lt;br&gt;        string st;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; hash[&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; index=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(hash, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(hash));&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;s.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();i++)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(s[i])]==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;            &amp;#123;&lt;br&gt;                index++;&lt;br&gt;                hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(s[i])]=index;&lt;br&gt;                ss.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(index+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;                ss.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(s[i])]+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;        index=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(hash, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(hash));&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;t.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();i++)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(t[i])]==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;            &amp;#123;&lt;br&gt;                index++;&lt;br&gt;                hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(t[i])]=index;&lt;br&gt;                st.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(index+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;                st.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(hash[&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt;(t[i])]+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ans = ss.&lt;span class=&#34;hljs-built_in&#34;&gt;compare&lt;/span&gt;(st);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(ans==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考代码&#34;&gt;&lt;a href=&#34;#参考代码&#34; class=&#34;headerlink&#34; title=&#34;参考代码&#34;&gt;&lt;/a&gt;参考代码&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/02/leetcode205/image-20230302204605581.png&#34; alt=&#34;image-20230302204605581&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;isIsomorphic&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(string s, string t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        unordered_map&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; s2t;&lt;br&gt;        unordered_map&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; t2s;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; len = s.&lt;span class=&#34;hljs-built_in&#34;&gt;length&lt;/span&gt;();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; len; ++i) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; x = s[i], y = t[i];&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ((s2t.&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;(x) &amp;amp;&amp;amp; s2t[x] != y) || (t2s.&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;(y) &amp;amp;&amp;amp; t2s[y] != x)) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;            &amp;#125;&lt;br&gt;            s2t[x] = y;&lt;br&gt;            t2s[y] = x;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a href=&#34;#参考链接&#34; class=&#34;headerlink&#34; title=&#34;参考链接&#34;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/isomorphic-strings/solution/tong-gou-zi-fu-chuan-by-leetcode-solutio-s6fd/&#34;&gt;同构字符串 - 同构字符串 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/03/02/leetcode189/</guid>
            <title>189.轮转数组</title>
            <link>https://xingyuanjie.top/2023/03/02/leetcode189/</link>
            <category>C++</category>
            <category>LeetCode</category>
            <category>数组翻转</category>
            <pubDate>Thu, 02 Mar 2023 20:03:32 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;189-轮转数组&#34;&gt;&lt;a href=&#34;#189-轮转数组&#34; class=&#34;headerlink&#34; title=&#34;189.轮转数组&#34;&gt;&lt;/a&gt;189.轮转数组&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/rotate-array/&#34;&gt;189. 轮转数组 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/02/leetcode189/image-20230302200538871.png&#34; alt=&#34;image-20230302200538871&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; begin,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; end)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(begin&amp;lt;end)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;swap&lt;/span&gt;(nums[begin], nums[end]);&lt;br&gt;            begin++;&lt;br&gt;            end--;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//数组翻转&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = k%nums.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;reverse&lt;/span&gt;(nums,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,nums.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;()&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;reverse&lt;/span&gt;(nums,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,p&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;reverse&lt;/span&gt;(nums,p,nums.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;()&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/&#34;&gt;旋转数组 - 轮转数组 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/03/01/leetcode724/</guid>
            <title>724.寻找数组的中心下标</title>
            <link>https://xingyuanjie.top/2023/03/01/leetcode724/</link>
            <category>C++</category>
            <category>LeetCode</category>
            <category>前缀和</category>
            <pubDate>Wed, 01 Mar 2023 17:35:03 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;724-寻找数组的中心下标&#34;&gt;&lt;a href=&#34;#724-寻找数组的中心下标&#34; class=&#34;headerlink&#34; title=&#34;724.寻找数组的中心下标&#34;&gt;&lt;/a&gt;724.寻找数组的中心下标&lt;/h1&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-pivot-index/&#34;&gt;724. 寻找数组的中心下标 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/01/leetcode724/image-20230301173931031.png&#34; alt=&#34;image-20230301173931031&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;pivotIndex&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; total=&lt;span class=&#34;hljs-built_in&#34;&gt;accumulate&lt;/span&gt;(nums.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;(), nums.&lt;span class=&#34;hljs-built_in&#34;&gt;end&lt;/span&gt;(),&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);	&lt;span class=&#34;hljs-comment&#34;&gt;//第三个形参是累加的初始值&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; sum=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;nums.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();i++)&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;*sum+nums[i] == total)&amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; i;&lt;br&gt;            &amp;#125;&lt;br&gt;            sum+=nums[i];&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-pivot-index/solution/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/&#34;&gt;寻找数组的中心索引 - 寻找数组的中心下标 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/28/vectorbool/</guid>
            <title>vector&lt;bool&gt;与vector&lt;T&gt;</title>
            <link>https://xingyuanjie.top/2023/02/28/vectorbool/</link>
            <category>STL</category>
            <category>Vector</category>
            <category>C/C++</category>
            <category>bool</category>
            <pubDate>Tue, 28 Feb 2023 20:59:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;vector-lt-bool-gt-与vector-lt-T-gt&#34;&gt;&lt;a href=&#34;#vector-lt-bool-gt-与vector-lt-T-gt&#34; class=&#34;headerlink&#34; title=&#34;vector&amp;lt;bool&amp;gt;与vector&amp;lt;T&amp;gt;&#34;&gt;&lt;/a&gt;vector&amp;lt;bool&amp;gt;与vector&amp;lt;T&amp;gt;&lt;/h1&gt;&lt;p&gt;vector&amp;lt;bool&amp;gt; 不像其他容器一样按Byte存储的，它是按bit存储的，也就是说一个正常的bool类型的空间可以存放vector&amp;lt;bool&amp;gt;中的8个，空间上确实优化了很多，然而，c++是不能直接取对bit操作的（因为C++的最小可寻址值通常以byte为单位），对其使用operator[]其实返回的不是bool的引用而是一个”proxy reference”是”std::vector&amp;lt; bool&amp;gt;:reference”类型的对象。&lt;/p&gt;
&lt;p&gt;正因为如此，vector&amp;lt;bool&amp;gt;通过代理对象进行存取访问时需要执行逐位处理，访问通常比int之类的普通类型操作要慢很多。&lt;/p&gt;
&lt;p&gt;因此，对vecotr&amp;lt;bool&amp;gt;的使用需慎重考虑以下几点：&lt;br&gt;(1)是否需要牺牲速度来获取空间上的优化&lt;br&gt;(2)算法中会否有对vecotr地址进行解引用操作的可能。&lt;/p&gt;
&lt;p&gt;如果不满足以上条件，建议使用deque&amp;lt;bool&amp;gt;来取代vector&amp;lt;bool&amp;gt;，功能基本相同，但deque&amp;lt;bool&amp;gt;未对其进行特殊处理。&lt;/p&gt;
&lt;p&gt;下面是vector&amp;lt;bool&amp;gt;与vector&amp;lt;T&amp;gt;简单的对比例子：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;	vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; ch;&lt;br&gt;	vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; in;&lt;br&gt;	vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt;&amp;gt; bo;&lt;br&gt; &lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m = &lt;span class=&#34;hljs-number&#34;&gt;1e6&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;clock_t&lt;/span&gt; t1, t2, t3;&lt;br&gt; &lt;br&gt;	t1 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;		ch.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	t1 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;() - t1;&lt;br&gt; &lt;br&gt;	t2 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;		in.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	t2 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;() - t2;&lt;br&gt; &lt;br&gt;	t3 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;		bo.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	t3 = &lt;span class=&#34;hljs-built_in&#34;&gt;clock&lt;/span&gt;() - t3;&lt;br&gt; &lt;br&gt;	cout &amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;vector&amp;lt;char&amp;gt; &amp;quot;&lt;/span&gt;&amp;lt;&amp;lt; t1 &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\n vector&amp;lt;int&amp;gt; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; t2 &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\nvector&amp;lt;bool&amp;gt; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; t3 &amp;lt;&amp;lt; endl;&lt;br&gt;	cout &amp;lt;&amp;lt; endl;&lt;br&gt; &lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;216&lt;/span&gt;&lt;br&gt;vextor&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;229&lt;/span&gt;&lt;br&gt;vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;16535&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里发现vector&amp;lt;bool&amp;gt;相较于其他vector&amp;lt;T&amp;gt;速度要慢的多！&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_52134928/article/details/121066304?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121066304-blog-86603050.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121066304-blog-86603050.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=1&#34;&gt;(65条消息) 【C++】vector＜bool＞的特别之处_小陶同学_的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u013249689/article/details/25297657&#34;&gt;(65条消息) 不使用vector的原因和替代方法_jackycmu的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/28/Linux004/</guid>
            <title>C/C++关键字之restrict</title>
            <link>https://xingyuanjie.top/2023/02/28/Linux004/</link>
            <category>Linux</category>
            <pubDate>Tue, 28 Feb 2023 19:45:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;C-x2F-C-关键字之restrict&#34;&gt;&lt;a href=&#34;#C-x2F-C-关键字之restrict&#34; class=&#34;headerlink&#34; title=&#34;C&amp;#x2F;C++关键字之restrict&#34;&gt;&lt;/a&gt;C&amp;#x2F;C++关键字之restrict&lt;/h1&gt;&lt;p&gt;在C语言中，restrict关键字用于修饰指针（C99标准）。通过加上restrict关键字，程序员可提示编译器：在该指针的生命周期内，其指向的对象不会被别的指针所引用。&lt;/p&gt;
&lt;p&gt;需要注意的是，在C++中，并无明确统一的标准支持restrict关键字。但是很多编译器实现了功能相同的关键字，例如gcc和clang中的__restrict关键字。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;add1函数的返回值会永远是10 + 12 &amp;#x3D; 22吗？&lt;/p&gt;
&lt;p&gt;答案是不一定。在指针a和b的地址不同时，返回22没有问题。但是当指针a与b指向的是同一个int对象时，该对象先被赋值为10，后被赋值为12，因此a和b都返回12，因此add1函数最终返回24。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* c;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* d;&lt;br&gt;    d=(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)*&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    c=(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)*&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    *c=&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *d=&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    *d=&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c:&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;*c&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d:&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;*d&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;When Pointers a and b have different addresses&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;add1&lt;/span&gt;(c,d)&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;When Pointers a and b have the same address&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;add1&lt;/span&gt;(c,c)&amp;lt;&amp;lt;endl;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;程序输出：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;c:&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;d:&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;When Pointers a &lt;span class=&#34;hljs-keyword&#34;&gt;and&lt;/span&gt; b have different addresses&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;&lt;br&gt;When Pointers a &lt;span class=&#34;hljs-keyword&#34;&gt;and&lt;/span&gt; b have the same address&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;开启-O3优化，add1对应的汇编代码如下:&lt;/p&gt;
&lt;p&gt;为了得到&lt;code&gt;*a&lt;/code&gt;的值访问了1次内存，而不管在何种条件下(&lt;code&gt;a == b&lt;/code&gt; or &lt;code&gt;a != b&lt;/code&gt;)，&lt;code&gt;*b&lt;/code&gt;的值都是12。因此编译器将&lt;code&gt;*a&lt;/code&gt;的值载入&lt;code&gt;eax&lt;/code&gt;寄存器后，直接加上立即数12，而无需再访问内存获取&lt;code&gt;*b&lt;/code&gt;的值。在无法确定指针a和b是否相同的情况下，编译器只能帮你优化到这里了。&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000000000400&lt;/span&gt;a10 &amp;lt;_Z4add1PiS_&amp;gt;:&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a10:   c7 &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;a &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xa,(%rdi) ; *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a16:   c7 &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xc,(%rsi) ; *b = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a1c:   &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;b &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt;                   mov    (%rdi),%eax ; 结果 = *a&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a1e:   &lt;span class=&#34;hljs-number&#34;&gt;83&lt;/span&gt; c0 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c                add    $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xc,%eax   ; 结果 += &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt; &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a21:   c3                      retq&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;加上了restrict关键字过后，同样开启-O3优化，add1对应的汇编代码如下：&lt;/p&gt;
&lt;p&gt;加上关键字restrict后，编译器能够确认指针a和b不可能指向同一个内存地址，因此在求*a + *b时，无虚访问内存，因为*a必然等于立即数10，*b必然等于立即数12。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* __restrict  a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* __restrict b)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b ;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000000000400&lt;/span&gt;a30 &amp;lt;_Z4add2PiS_&amp;gt;:&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a30:   c7 &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;a &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0xa&lt;/span&gt;,(%rdi) ; *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a36:   b8 &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;          mov    $&lt;span class=&#34;hljs-number&#34;&gt;0x16&lt;/span&gt;,%eax  ; 结果 = &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a3b:   c7 &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0xc&lt;/span&gt;,(%rsi) ; *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a41:   c3  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有无restrict关键字的两种情况下的汇编指令可看到，后者比前者少访问一次内存，且少执行一条指令。就是因为没加restruct关键字时，编译器不能确定别的地方是不是会修改此值，所以会去相应的地址查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样当我们明确知道两个指针不可能指向同一个地址时，我们就可以通过使用restrict关键字来进行性能优化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意使用restrict的时候，程序员必须确保不会出现&lt;strong&gt;pointer aliasing&lt;/strong&gt;，即同一块内存无法通过两个或以上的指针变量名访问。不满足这个条件强行指定restrict，将会出现&lt;strong&gt;underfined behavior&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常编写代码时会忽略pointer aliasing的问题。更常见是在性能分析时，通过反汇编看到很多冗余的读取指令，才会想到加入restrict关键字来提升性能。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/349726808&#34;&gt;C&amp;#x2F;C++关键字之restrict - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ClickHouse/ClickHouse/pull/19946&#34;&gt;Improve performance of aggregate functions by alexey-milovidov · Pull Request #19946 · ClickHouse&amp;#x2F;ClickHouse (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/c/language/restrict&#34;&gt;restrict type qualifier - cppreference.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/41653775/answer/2535730128&#34;&gt;如何理解C语言关键字restrict？ - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41822235/article/details/83479562&#34;&gt;(65条消息) 关键字_restrict___restrict_楚楚可薇的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41950508/article/details/126619881?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126619881-blog-102577325.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126619881-blog-102577325.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=1&#34;&gt;(65条消息) 【C++】关键字restrict的作用_restrict关键字的作用_不知所措的渣渣辉的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/26/intel001/</guid>
            <title>unroll_and_jam/nounroll_and_jam</title>
            <link>https://xingyuanjie.top/2023/02/26/intel001/</link>
            <category>C++</category>
            <category>Intel</category>
            <pubDate>Sun, 26 Feb 2023 19:12:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;unroll-and-jam-x2F-nounroll-and-jam&#34;&gt;&lt;a href=&#34;#unroll-and-jam-x2F-nounroll-and-jam&#34; class=&#34;headerlink&#34; title=&#34;unroll_and_jam&amp;#x2F;nounroll_and_jam&#34;&gt;&lt;/a&gt;unroll_and_jam&amp;#x2F;nounroll_and_jam&lt;/h1&gt;&lt;p&gt;启用或禁用循环展开和阻塞。这些指令只能应用于迭代for循环。&lt;/p&gt;
&lt;h2 id=&#34;Syntax&#34;&gt;&lt;a href=&#34;#Syntax&#34; class=&#34;headerlink&#34; title=&#34;Syntax&#34;&gt;&lt;/a&gt;Syntax&lt;/h2&gt;&lt;p&gt;#pragma unroll_and_jam	#pragma unroll_and_jam (n)	#pragma nounroll_and_jam&lt;/p&gt;
&lt;h2 id=&#34;Arguments&#34;&gt;&lt;a href=&#34;#Arguments&#34; class=&#34;headerlink&#34; title=&#34;Arguments&#34;&gt;&lt;/a&gt;Arguments&lt;/h2&gt;&lt;p&gt;展开因子，表示展开循环的次数;必须是0到255之间的整数常数&lt;/p&gt;
&lt;h2 id=&#34;Description&#34;&gt;&lt;a href=&#34;#Description&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;unroll_and_jam指令部分展开套中比最内层循环更高的一个或多个循环，并将结果循环融合&amp;#x2F;阻塞回一起。这种转换允许在循环中进行更多的重用。&lt;/p&gt;
&lt;p&gt;此pragma对最内层循环无效。确保紧随其后的循环不是编译器发起的交换完成后的最内层循环。&lt;/p&gt;
&lt;p&gt;指定此pragma是向编译器提示展开和阻塞序列是合法且有利可图的。编译器会在任何可能的情况下启用这种转换。&lt;/p&gt;
&lt;p&gt;对于它影响的每个for循环，unroll_and_jam指令必须在for语句之前。如果指定了n，优化器将展开循环n次。如果n被省略或超出允许的范围，优化器将分配展开循环的次数。编译器通过比较n和循环计数生成正确的代码。&lt;/p&gt;
&lt;p&gt;只有在设置了编译器选项O3时，才支持此pragma。unroll_and_jam指令将覆盖从命令行展开循环的任何设置。&lt;/p&gt;
&lt;p&gt;当展开循环会增加寄存器压力和代码大小时，可能需要防止展开嵌套循环或不完美的嵌套循环。在这种情况下，使用nounroll_and_jam编译指令。nounroll_and_jam pragma提示编译器不要展开指定的循环。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use the unroll_and_jam pragma:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;]; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; b[&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;]; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;]; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;]; &lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;unroll&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,k;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;pragma&lt;/span&gt; unroll_and_jam (6)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;br&gt;       &lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;pragma&lt;/span&gt; unroll_and_jam (6)&lt;/span&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (j = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (k = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; k &amp;lt; n; k++)&amp;#123;&lt;br&gt;            a[i][j] += b[i][k]*c[k][j];&lt;br&gt;            &amp;#125;&lt;br&gt;       &amp;#125;&lt;br&gt;    &amp;#125; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/pragmas/intel-specific-pragma-reference/unroll-and-jam-nounroll-and-jam.html&#34;&gt;unroll_and_jam nounroll_and_jam (intel.com)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/26/cache001/</guid>
            <title>Cache Blocking Techniques【个人翻译】</title>
            <link>https://xingyuanjie.top/2023/02/26/cache001/</link>
            <category>Cache</category>
            <category>Blocking</category>
            <pubDate>Sun, 26 Feb 2023 18:02:29 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;Cache-Blocking-Techniques&#34;&gt;&lt;a href=&#34;#Cache-Blocking-Techniques&#34; class=&#34;headerlink&#34; title=&#34;Cache Blocking Techniques&#34;&gt;&lt;/a&gt;Cache Blocking Techniques&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;文章来源：&lt;/strong&gt;&lt;a href=&#34;https://www.intel.cn/content/www/cn/zh/developer/articles/technical/cache-blocking-techniques.html&#34;&gt;Cache Blocking Techniques (intel.cn)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文章作者：&lt;/strong&gt;&lt;a href=&#34;https://community.intel.com/cipcp26785/plugins/custom/intel/intel/custom.userprofile?id=3UpJu61CDTyShonSVJNwDw==&amp;iv=8843887237217530&#34;&gt;Amanda K Sharp&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Overview&#34;&gt;&lt;a href=&#34;#Overview&#34; class=&#34;headerlink&#34; title=&#34;Overview&#34;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;一类重要的算法更改涉及分块数据结构以适应缓存。通过组织数据内存访问，可以用一个大得多的数据集的一个小子集加载缓存。接下来的想法是在缓存中处理这个数据块。通过在缓存中使用&amp;#x2F;重用这些数据，我们减少了访问内存的需要(减少内存带宽压力)。&lt;/p&gt;
&lt;h3 id=&#34;Topic&#34;&gt;&lt;a href=&#34;#Topic&#34; class=&#34;headerlink&#34; title=&#34;Topic&#34;&gt;&lt;/a&gt;Topic&lt;/h3&gt;&lt;p&gt;分块是一种著名的优化技术，可以帮助避免许多应用程序中的内存带宽瓶颈。分块背后的关键思想是利用应用程序中固有的数据重用，确保数据在多个用途之间保持在缓存中。分块可以在1-D、2-D或3-D空间数据结构上执行。一些迭代应用程序可以进一步受益于多次迭代的分块(通常称为时间分块)，以进一步缓解带宽瓶颈。就代码更改而言，分块通常涉及循环分割和交换的组合。在大多数应用程序代码中，通过对分块因子进行一些参数化，对源进行正确的更改，用户可以最好地执行分块。&lt;/p&gt;
&lt;h3 id=&#34;Original-Source&#34;&gt;&lt;a href=&#34;#Original-Source&#34; class=&#34;headerlink&#34; title=&#34;Original Source&#34;&gt;&lt;/a&gt;Original Source&lt;/h3&gt;&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;for (body1 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body1 &amp;lt; NBODIES; body1 ++) &amp;#123;&lt;br&gt;   for (body2=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body2 &amp;lt; NBODIES; body2++) &amp;#123;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;OUT&lt;/span&gt;[body1] += compute(body1, body2);&lt;br&gt;   &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在本例中，数据(body2)来自内存。假设NBODIES很大，我们将无法在缓存中重用。此应用程序受内存带宽限制。应用程序将以内存到CPU的速度运行，而不是最佳速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Modified Source (with 1-D blocking):&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;for (body2 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body2 &amp;lt; NBODIES; body2 += &lt;span class=&#34;hljs-keyword&#34;&gt;BLOCK&lt;/span&gt;) &amp;#123;&lt;br&gt;   for (body1=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body1 &amp;lt; NBODIES; body1 ++) &amp;#123;&lt;br&gt;      for (body22=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body22 &amp;lt; &lt;span class=&#34;hljs-keyword&#34;&gt;BLOCK&lt;/span&gt;; body22 ++) &amp;#123;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;OUT&lt;/span&gt;[body1] += compute(body1, body2 + body22);&lt;br&gt;      &amp;#125;&lt;br&gt;   &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在修改后的代码中，数据(body22)在缓存中被保留和重用，从而获得更好的性能。&lt;/p&gt;
&lt;p&gt;例如，上面的代码片段显示了一个分块NBody代码的示例。有两个循环(body1和body2)遍历所有主体。顶部的原始代码流经内部循环中的整个主体集，并且必须在每次迭代中从内存中加载body2值。底部的分块代码是通过将body2循环分解为一个迭代多个BLOCK中的body的外部循环和一个迭代BLOCK中的元素的内部body22循环，并交织body1和body2循环来获得的。这段代码在body1循环的多次迭代中重用了一组BLOCK body2值。如果BLOCK被选中，使得这组值适合缓存，内存流量就会降低一个BLOCK的因子。&lt;/p&gt;
&lt;p&gt;以下是来自OpenMP*版本的NBody基准测试的相关代码片段(使用CHUNK_SIZE因子进行分块应用)。&lt;/p&gt;
&lt;p&gt;在这种情况下，循环展开-阻塞转换被表示为一个pragma，并由编译器完成。在这种情况下，研究-opt-report的输出可以确认编译器确实为你的循环执行了展开阻塞优化。&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;#define CHUNK_SIZE &lt;span class=&#34;hljs-number&#34;&gt;8192&lt;/span&gt;&lt;br&gt;&lt;br&gt;#pragma omp parallel &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;(body_start_index)&lt;br&gt;  for(body_start_index = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; body_start_index &amp;lt; global_number_of_bodies; body_start_index += CHUNK_SIZE) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; i;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; body_end_index = body_start_index + CHUNK_SIZE;&lt;br&gt;&lt;br&gt;    #pragma omp for &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;(i) schedule(guided)&lt;br&gt;    #pragma unroll_and_jam (&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&lt;br&gt;    for(i=starting_index; i&amp;lt;ending_index; i++) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; j;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; acc_x_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, acc_y_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, acc_z_0 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;      for(j=body_start_index; j&amp;lt;body_end_index; j+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_x_0 = Input_Position_X[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_X[i];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_y_0 = Input_Position_Y[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_Y[i];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; delta_z_0 = Input_Position_Z[(j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)] - Input_Position_Z[i];&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; gamma_0 = delta_x_0*delta_x_0 + delta_y_0*delta_y_0 + delta_z_0*delta_z_0 + epsilon_sqr;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;TYPE&lt;/span&gt; s_0 = Mass[j+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]/(gamma_0 * &lt;span class=&#34;hljs-built_in&#34;&gt;SQRT&lt;/span&gt;(gamma_0));&lt;br&gt;        acc_x_0 += s_0*delta_x_0;&lt;br&gt;        acc_y_0 += s_0*delta_y_0;&lt;br&gt;        acc_z_0 += s_0*delta_z_0;&lt;br&gt;      &amp;#125;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] += acc_x_0;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] += acc_y_0;&lt;br&gt;      Output_Acceleration[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;*(i+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] += acc_z_0;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是Fortran中的一个矩阵乘法代码示例，其中用户执行高级块展开-分块转换(在修改版本中)，涉及本地复制数组以获得最佳性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fortran Source Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; j=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; k = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,N&lt;br&gt;      c(i,j) = c(i,j) + a(i,k) * b(k,j)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Modified Fortran Source:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; JJ = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TJ&lt;br&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; KK = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TK&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; jjj = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tj,N-jj+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)                     &lt;span class=&#34;hljs-comment&#34;&gt;! BCOPY - no transpose&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; kkk = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tk,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;             p(kkk,jjj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = B(kk+kkk-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, jj+jjj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; II = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, N, TI&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; iii = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;             &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(ti,N-ii+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)                   &lt;span class=&#34;hljs-comment&#34;&gt;!ACOPY - transpose&lt;/span&gt;&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; kkk = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tk,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;                Q(kkk,iii) = A(ii+iii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, kk+kkk-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; J = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(tj,N-jj+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; I = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(ti,N-ii+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;                t1 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t2 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t5 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t6 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t9 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t10 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t13 =&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ; t14 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;!DIR$ vector aligned                      !DIR$ unroll(2)&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; K = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;(TK,N-kk+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)      &lt;span class=&#34;hljs-comment&#34;&gt;! Innermost loop, vectorized and unrolled by 2 after that&lt;/span&gt;&lt;br&gt;                   qi = Q(K,I)           ;    qi1 = Q(K,I+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)  &lt;br&gt;                   t1 = t1+qi*P(K,J)     ;    t2 = t2+ qi1*P(K,J)&lt;br&gt;                   t5 = t5+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)  ;    t6 = t6+ qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;                   t9 = t9+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)  ;    t10 = t10+ qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;                   t13 = t13+ qi*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);    t14 = t14+qi1*P(K,J+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) +t1          ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t2&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t5     ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t6&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t9     ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t10&lt;br&gt;               c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t13    ; c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c(i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;+ii-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;+jj-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) + t14&lt;br&gt;             &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;       &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Take-Aways&#34;&gt;&lt;a href=&#34;#Take-Aways&#34; class=&#34;headerlink&#34; title=&#34;Take Aways&#34;&gt;&lt;/a&gt;Take Aways&lt;/h3&gt;&lt;p&gt;缓存分块是一种重新安排数据访问的技术，将数据子集(块)拉入缓存，并对这个块进行操作，以避免不得不重复从主存中获取数据。正如上面的示例所示，可以以这种方式手动分块循环数据以重用缓存。&lt;/p&gt;
&lt;p&gt;对于性能关键的循环，其中性能分析表明内存带宽限制，而-opt-report显示编译器没有以最佳方式分块循环，您可以考虑手动展开循环，以便更好地分块数据以实现缓存重用。&lt;/p&gt;
&lt;h3 id=&#34;NEXT-STEPS&#34;&gt;&lt;a href=&#34;#NEXT-STEPS&#34; class=&#34;headerlink&#34; title=&#34;NEXT STEPS&#34;&gt;&lt;/a&gt;NEXT STEPS&lt;/h3&gt;&lt;p&gt;您必须从头到尾阅读本指南，使用内置的超链接来指导您在Intel®Xeon处理器上成功地移植和调优应用程序。本指南中提供的路径反映了获得最佳应用程序性能所需的步骤。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/26/openmp008/</guid>
            <title>OpenMP:Internal Control Variables</title>
            <link>https://xingyuanjie.top/2023/02/26/openmp008/</link>
            <category>OpenMP</category>
            <pubDate>Sun, 26 Feb 2023 17:36:54 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;2-5-Internal-Control-Variables&#34;&gt;&lt;a href=&#34;#2-5-Internal-Control-Variables&#34; class=&#34;headerlink&#34; title=&#34;2.5 Internal Control Variables&#34;&gt;&lt;/a&gt;2.5 Internal Control Variables&lt;/h2&gt;&lt;p&gt;OpenMP实现必须像内部控制变量(icv)一样控制OpenMP程序的行为。这些icv存储的信息包括用于未来并行区域的线程数、用于工作共享循环的调度以及是否启用嵌套并行。在程序执行期间，icv在不同的时间被赋予值(如下所述)。它们是由实现本身初始化的，并且可以通过OpenMP环境变量和调用OpenMP API例程来赋值。程序只能通过OpenMP API例程检索这些icv的值。&lt;/p&gt;
&lt;p&gt;出于说明的目的，本文档使用特定的名称来引用icv，但是实现不需要使用这些名称，也不需要提供访问变量的任何方法，除非通过第&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2&#34;&gt;189&lt;/a&gt;页第&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2&#34;&gt;2.5.2节&lt;/a&gt;所示的方法。&lt;/p&gt;
&lt;p&gt;2.5.1 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu30.html#x49-670002.5.1&#34;&gt;ICV Descriptions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.5.2 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2&#34;&gt;ICV Initialization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.5.3 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu32.html#x51-710002.5.3&#34;&gt;Modifying and Retrieving ICV Values&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.5.4 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu33.html#x52-740002.5.4&#34;&gt;How ICVs are Scoped&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​		 2.5.4.1 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu33.html#x52-760002.5.4.1&#34;&gt;How the Per-Data Environment ICVs Work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.5.5 &lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu34.html#x53-770002.5.5&#34;&gt;ICV Override Relationships&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpse13.html#x48-660002.5&#34;&gt;Internal Control Variables (openmp.org)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/26/openmp007/</guid>
            <title>OpenMP线程绑定【未完结】</title>
            <link>https://xingyuanjie.top/2023/02/26/openmp007/</link>
            <category>OpenMP</category>
            <pubDate>Sun, 26 Feb 2023 17:06:59 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;OpenMP线程绑定&#34;&gt;&lt;a href=&#34;#OpenMP线程绑定&#34; class=&#34;headerlink&#34; title=&#34;OpenMP线程绑定&#34;&gt;&lt;/a&gt;OpenMP线程绑定&lt;/h2&gt;&lt;h3 id=&#34;OpenMP相关环境变量与指令&#34;&gt;&lt;a href=&#34;#OpenMP相关环境变量与指令&#34; class=&#34;headerlink&#34; title=&#34;OpenMP相关环境变量与指令&#34;&gt;&lt;/a&gt;OpenMP相关环境变量与指令&lt;/h3&gt;&lt;h4 id=&#34;OMP-PROC-BIND&#34;&gt;&lt;a href=&#34;#OMP-PROC-BIND&#34; class=&#34;headerlink&#34; title=&#34;OMP_PROC_BIND&#34;&gt;&lt;/a&gt;OMP_PROC_BIND&lt;/h4&gt;&lt;p&gt;OMP_PROC_BIND环境变量设置bind-var ICV的初始值。这个环境变量的值可以是true、false，或者用逗号分隔的master、close或spread列表。列表的值设置了对应嵌套级别的并行区域要使用的线程亲和策略。&lt;/p&gt;
&lt;p&gt;如果环境变量设置为false，则执行环境可能会在OpenMP位置之间移动OpenMP线程，线程相关性将被禁用，并行构造上的proc_bind子句将被忽略。&lt;/p&gt;
&lt;p&gt;否则，执行环境不应该在OpenMP位置之间移动OpenMP线程，线程亲和性被启用，并且初始线程被绑定到OpenMP位置列表中的第一个位置，先于第一个活动并行区域。&lt;/p&gt;
&lt;p&gt;如果OMP_PROC_BIND环境变量中的值不是true、false或master、close或spread的逗号分隔列表，则程序的行为是实现定义的。如果初始线程不能绑定到OpenMP位置列表中的第一个位置，则该行为也是实现定义的。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;setenv OMP_PROC_BIND false&lt;br&gt;setenv OMP_PROC_BIND &amp;quot;spread,	spread, close&amp;quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://harrychen.xyz/2022/05/08/numa-processor-and-cpu-binding/&#34;&gt;NUMA 处理器与进程绑定 - Harry Chen’s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpse52.html&#34;&gt;OMP_PROC_BIND (openmp.org)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpsu36.html#x56-900002.6.2&#34;&gt;Controlling OpenMP Thread Affinity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openmp.org/spec-html/5.0/openmpse53.html&#34;&gt;OMP_PLACES (openmp.org)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/optimization-and-programming/openmp-support/openmp-library-support/thread-affinity-interface.html&#34;&gt;Thread Affinity Interface (intel.com)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/24/Linux003/</guid>
            <title>基于GDB的程序调试</title>
            <link>https://xingyuanjie.top/2023/02/24/Linux003/</link>
            <category>Linux</category>
            <pubDate>Fri, 24 Feb 2023 16:50:20 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;基于GDB的程序调试&#34;&gt;&lt;a href=&#34;#基于GDB的程序调试&#34; class=&#34;headerlink&#34; title=&#34;基于GDB的程序调试&#34;&gt;&lt;/a&gt;基于GDB的程序调试&lt;/h2&gt;&lt;h3 id=&#34;程序调试工具GDB&#34;&gt;&lt;a href=&#34;#程序调试工具GDB&#34; class=&#34;headerlink&#34; title=&#34;程序调试工具GDB&#34;&gt;&lt;/a&gt;程序调试工具GDB&lt;/h3&gt;&lt;p&gt;编译器GCC，项目构建工具Make（又称gmake），以及GDB。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224165344672.png&#34; alt=&#34;image-20230224165344672&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GDB：GNU symbolic debugger是Linux下常用的程序调试器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB可以做什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224165606636.png&#34; alt=&#34;image-20230224165606636&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB官网：&lt;/strong&gt;&lt;a href=&#34;https://www.sourceware.org/gdb/&#34;&gt;GDB: The GNU Project Debugger (sourceware.org)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试案例一&#34;&gt;&lt;a href=&#34;#调试案例一&#34; class=&#34;headerlink&#34; title=&#34;调试案例一&#34;&gt;&lt;/a&gt;调试案例一&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n,sum;&lt;br&gt;    n = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    sum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;( n &amp;lt;= &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        sum = sum + n;&lt;br&gt;        n = n + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在编译程序的时候，需要加调试选项： -g&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;gcc gdb001.c -g -o ex1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用gdb启动程序：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;gdb ./ex1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;进入gdb调试环境&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170419171.png&#34; alt=&#34;image-20230224170419171&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在调试环境中：使用l选项会显示带行号的源代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170620617.png&#34; alt=&#34;image-20230224170620617&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是默认情况下，l选项只显示10行源代码，如果查看后续代码，在调试界面Enter回车即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170804048.png&#34; alt=&#34;image-20230224170804048&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在第7行源代码处打断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224171858691.png&#34; alt=&#34;image-20230224171858691&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行程序，遇到断点停止：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172105514.png&#34; alt=&#34;image-20230224172105514&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看代码中变量n的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172200662.png&#34; alt=&#34;image-20230224172200662&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前n的值为1，$1表示该变量所在存储区的名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在程序第12行处打断点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172321002.png&#34; alt=&#34;image-20230224172321002&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继续执行程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172356622.png&#34; alt=&#34;image-20230224172356622&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看当前n变量的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172422998.png&#34; alt=&#34;image-20230224172422998&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前n的值为101&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;退出调试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172456626.png&#34; alt=&#34;image-20230224172456626&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看调试环境所有断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172650422.png&#34; alt=&#34;image-20230224172650422&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除第7行的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172745323.png&#34; alt=&#34;image-20230224172745323&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;禁用编号为2的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172832507.png&#34; alt=&#34;image-20230224172832507&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意断点状态Enb(enable)由y变成n，代表禁用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;恢复编号为2的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224173006975.png&#34; alt=&#34;image-20230224173006975&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;GDB有三种调试模式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试执行程序：&lt;/strong&gt;（前面的案例），注意编译加调试信息(-g)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试core文件   ：&lt;/strong&gt;需要对系统设置的core文件大小作调整（ulimit - c unlimlited），否则可能无法							  产生core文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试正在执行的程序（gdb attach） ：&lt;/strong&gt;Top找到进程编号pid，Gdb attach pid&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB结构组成：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224173613247.png&#34; alt=&#34;image-20230224173613247&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;常用调试指令：&#34;&gt;&lt;a href=&#34;#常用调试指令：&#34; class=&#34;headerlink&#34; title=&#34;常用调试指令：&#34;&gt;&lt;/a&gt;常用调试指令：&lt;/h3&gt;&lt;h4 id=&#34;启动指令&#34;&gt;&lt;a href=&#34;#启动指令&#34; class=&#34;headerlink&#34; title=&#34;启动指令&#34;&gt;&lt;/a&gt;启动指令&lt;/h4&gt;&lt;p&gt;调试程序：gdb program&lt;/p&gt;
&lt;p&gt;根据core文件调试程序：gdb program corefile&lt;/p&gt;
&lt;p&gt;跟踪调试进程：gdb attach pid&lt;/p&gt;
&lt;h4 id=&#34;程序运行&#34;&gt;&lt;a href=&#34;#程序运行&#34; class=&#34;headerlink&#34; title=&#34;程序运行&#34;&gt;&lt;/a&gt;程序运行&lt;/h4&gt;&lt;p&gt;run，该命令会运行至程序结束，除非遇到断点或报错&lt;/p&gt;
&lt;h4 id=&#34;单步执行&#34;&gt;&lt;a href=&#34;#单步执行&#34; class=&#34;headerlink&#34; title=&#34;单步执行&#34;&gt;&lt;/a&gt;单步执行&lt;/h4&gt;&lt;p&gt;步进执行不进栈？next&lt;/p&gt;
&lt;p&gt;步进执行，进栈step&lt;/p&gt;
&lt;h4 id=&#34;代码查看&#34;&gt;&lt;a href=&#34;#代码查看&#34; class=&#34;headerlink&#34; title=&#34;代码查看&#34;&gt;&lt;/a&gt;代码查看&lt;/h4&gt;&lt;p&gt;列出断点附近或程序所有代码list&lt;/p&gt;
&lt;p&gt;设置现实代码的行数 set listsize &amp;lt;n&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;退出调试&#34;&gt;&lt;a href=&#34;#退出调试&#34; class=&#34;headerlink&#34; title=&#34;退出调试&#34;&gt;&lt;/a&gt;退出调试&lt;/h4&gt;&lt;p&gt;quit&lt;/p&gt;
&lt;h4 id=&#34;查看栈信息&#34;&gt;&lt;a href=&#34;#查看栈信息&#34; class=&#34;headerlink&#34; title=&#34;查看栈信息&#34;&gt;&lt;/a&gt;查看栈信息&lt;/h4&gt;&lt;p&gt;bt	打印当前的函数调用栈的所有信息&lt;/p&gt;
&lt;p&gt;bt &amp;lt;n&amp;gt;	n是一个正整数，表示只打印栈顶上n层的栈信息&lt;/p&gt;
&lt;p&gt;bt &amp;lt;-n&amp;gt;	表示只打印栈底下n层的栈信息&lt;/p&gt;
&lt;h4 id=&#34;设置断点&#34;&gt;&lt;a href=&#34;#设置断点&#34; class=&#34;headerlink&#34; title=&#34;设置断点&#34;&gt;&lt;/a&gt;设置断点&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;代码断点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;break lineNumber | functionName&lt;/li&gt;
&lt;li&gt;break lineNumber | functionName if condition&lt;/li&gt;
&lt;li&gt;tbreak lineNumber | functionName  临时断点，仅能使用一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内存断点（观察点）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控内存值改变 watch expr [if condition]&lt;/li&gt;
&lt;li&gt;监控内存值被读取 rwatch expr [if condition]&lt;/li&gt;
&lt;li&gt;监控内存值被读取和写入 awatch wxpr [if condition]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;事件断点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ exception，使用catch exception [name]&lt;/li&gt;
&lt;li&gt;Ada exception，使用catch handlers [name]&lt;/li&gt;
&lt;li&gt;exec事件，使用catch exec&lt;/li&gt;
&lt;li&gt;fork事件，使用catch fork 或者 catch vfork&lt;/li&gt;
&lt;li&gt;加载和卸载动态so事件，使用catch load|unload [regexp]&lt;/li&gt;
&lt;li&gt;监听系统信号，使用catch signal [signal]&lt;/li&gt;
&lt;li&gt;监听系统调用，使用catch syscall[name|number|group:groupname|g:groupname]…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;打印变量：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Print [file | func]::variable 查看局部变量或全局变量&lt;/li&gt;
&lt;li&gt;Print *array@len  数组首地址@查看长度&lt;/li&gt;
&lt;li&gt;x&amp;#x2F;[n | u] &amp;lt;addr&amp;gt;	x命令查看内存地址钟的值，n：表示显示内存的长度，u：表示从当前地址往后请求的字节数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;打印寄存器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;info register	查看寄存器（除了浮点寄存器）&lt;/p&gt;
&lt;p&gt;all-registers	查看所有寄存器&lt;/p&gt;
&lt;p&gt;info registers &amp;lt;reg_name …&amp;gt;查看所指定寄存器&lt;/p&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;来源培训PPT 作者：Relax  邮箱：&lt;a href=&#34;mailto:&amp;#119;&amp;#x61;&amp;#110;&amp;#x67;&amp;#x77;&amp;#49;&amp;#x31;&amp;#49;&amp;#64;&amp;#105;&amp;#99;&amp;#108;&amp;#111;&amp;#117;&amp;#x64;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&#34;&gt;&amp;#119;&amp;#x61;&amp;#110;&amp;#x67;&amp;#x77;&amp;#49;&amp;#x31;&amp;#49;&amp;#64;&amp;#105;&amp;#99;&amp;#108;&amp;#111;&amp;#117;&amp;#x64;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/19/Matrix002/</guid>
            <title>矩阵乘法计算拆分展示</title>
            <link>https://xingyuanjie.top/2023/02/19/Matrix002/</link>
            <category>Matrix</category>
            <category>GEMM</category>
            <pubDate>Sun, 19 Feb 2023 17:04:23 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;矩阵乘法计算拆分展示&#34;&gt;&lt;a href=&#34;#矩阵乘法计算拆分展示&#34; class=&#34;headerlink&#34; title=&#34;矩阵乘法计算拆分展示&#34;&gt;&lt;/a&gt;矩阵乘法计算拆分展示&lt;/h2&gt;&lt;h3 id=&#34;通用矩阵乘概念&#34;&gt;&lt;a href=&#34;#通用矩阵乘概念&#34; class=&#34;headerlink&#34; title=&#34;通用矩阵乘概念&#34;&gt;&lt;/a&gt;通用矩阵乘概念&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/02/19/Matrix002/image-20230219171156738.png&#34; alt=&#34;image-20230219171156738&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵各行，其行数与A的行数相等 &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵i行j列&lt;/span&gt;&lt;br&gt;        c[i][j] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p &amp;lt; k; p++)&amp;#123;		&lt;span class=&#34;hljs-comment&#34;&gt;//用p循环累加和计算C[i][j] &lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//计算区域&lt;/span&gt;&lt;br&gt;           C[i][j] += A[i][p] * B[p][j];		&lt;span class=&#34;hljs-comment&#34;&gt;//遍历A矩阵各行与B矩阵各列&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;计算拆分展示&#34;&gt;&lt;a href=&#34;#计算拆分展示&#34; class=&#34;headerlink&#34; title=&#34;计算拆分展示&#34;&gt;&lt;/a&gt;计算拆分展示&lt;/h3&gt;&lt;p&gt;图四将输出计算拆分为 &lt;strong&gt;1 × 4&lt;/strong&gt; 的小块，即将 &lt;strong&gt;N&lt;/strong&gt; 维度拆分为两部分。计算该块输出时，需要使用 &lt;strong&gt;A&lt;/strong&gt; 矩阵的1行，和 &lt;strong&gt;B&lt;/strong&gt; 矩阵的4列 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/19/Matrix002/image-20230219171904249.png&#34; alt=&#34;image-20230219171904249&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵各行，其行数与A的行数相等 &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j +=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵j-j+3列&lt;/span&gt;&lt;br&gt;        c[i][j + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i][j + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i][j + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i][j + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p &amp;lt; k; p++)&amp;#123;		&lt;span class=&#34;hljs-comment&#34;&gt;//用p循环累加和计算C[i][j] &lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//计算区域&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//遍历A矩阵各行与B矩阵各列&lt;/span&gt;&lt;br&gt;           C[i][j + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] += A[i][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];    &lt;br&gt;           C[i][j + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] += A[i][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];&lt;br&gt;           C[i][j + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] += A[i][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;           C[i][j + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] += A[i][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;];&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最内侧计算使用的矩阵&lt;strong&gt;A&lt;/strong&gt;的元素是一致的。因此可以将**A[i][p]**读取到寄存器中，从而实现4次数据复用。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; temp = A[i][p];&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一般将最内侧循环称作计算核(micro kernel)&lt;/p&gt;
&lt;p&gt;类似地，我们可以继续拆分输出&lt;strong&gt;M&lt;/strong&gt;维度，从而在内测循环中计算 &lt;strong&gt;4 × 4&lt;/strong&gt; 输出，如图五。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/19/Matrix002/image-20230219174355047.png&#34; alt=&#34;image-20230219174355047&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样的，将计算核心展开，可以得到下面的伪代码。这里我们将 &lt;strong&gt;1 × 4&lt;/strong&gt; 中展示过的N维度的计算简化表示。这种拆分可看成是&lt;strong&gt;4 × 1 × 4&lt;/strong&gt;，这样A和B的访存均可复用四次。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵i-i+3行，其行数与A的行数相等 &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j +=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵第j-j+3列&lt;/span&gt;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p &amp;lt; k; p++)&amp;#123;		&lt;span class=&#34;hljs-comment&#34;&gt;//用p循环累加和计算C[i][j] &lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//计算区域&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//遍历A矩阵各行与B矩阵各列&lt;/span&gt;&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];    &lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][p] * B[p][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;到目前为止。我们都是在输出的两个维度上展开，而整个计算还包含一个规约(Reduction)维度K。图六展示了在计算&lt;strong&gt;4 × 4&lt;/strong&gt;输出时，将维度K拆分，从而每次最内侧循环计算出输出矩阵C的&lt;strong&gt;4&amp;#x2F;K&lt;/strong&gt;的部分和。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/19/Matrix002/image-20230219180147184.png&#34; alt=&#34;image-20230219180147184&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面展示的是这部分计算的展开伪代码，其中维度M和N已经被简写。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵i-i+3行，其行数与A的行数相等 &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j +=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//遍历C矩阵第j-j+3列&lt;/span&gt;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        c[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p &amp;lt; k; p+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;		&lt;span class=&#34;hljs-comment&#34;&gt;//用p循环累加和计算C[i][j] &lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//计算区域&lt;/span&gt;&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][p + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] * B[p + &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];    &lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][p + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] * B[p + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][p + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] * B[p + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;           C[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;] += A[i + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;][p + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] * B[p + &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][j + &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.3&lt;/span&gt;];&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在对M和N展开式，我们可以分别复用B和A的数据；在对K展开时，其局部使用的C的内存是一致的，那么K迭代时可以将部分和累加在寄存器中——最内层循环整个迭代一次写到C的内存中。&lt;/p&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://zhenhuaw.me/blog/2019/gemm-optimization.html&#34;&gt;通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/18/leetcode11/</guid>
            <title>11. 盛最多水的容器</title>
            <link>https://xingyuanjie.top/2023/02/18/leetcode11/</link>
            <category>C++</category>
            <category>LeetCode</category>
            <category>双指针</category>
            <pubDate>Sat, 18 Feb 2023 16:27:01 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;11-盛最多水的容器&#34;&gt;&lt;a href=&#34;#11-盛最多水的容器&#34; class=&#34;headerlink&#34; title=&#34;11.盛最多水的容器&#34;&gt;&lt;/a&gt;11.盛最多水的容器&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;h4 id=&#34;11-盛最多水的容器-1&#34;&gt;&lt;a href=&#34;#11-盛最多水的容器-1&#34; class=&#34;headerlink&#34; title=&#34;11. 盛最多水的容器&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.cn/problems/container-with-most-water/&#34;&gt;11. 盛最多水的容器&lt;/a&gt;&lt;/h4&gt;&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;maxArea&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; height)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//双指针；&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ans =&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; left=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; right=height.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;()&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(left&amp;lt;right)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; temp=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(height[left]&amp;lt;=height[right])&amp;#123;&lt;br&gt;                temp = height[left]*(right-left);&lt;br&gt;                ans = std::&lt;span class=&#34;hljs-built_in&#34;&gt;max&lt;/span&gt;(ans,temp);&lt;br&gt;                left++;&lt;br&gt;            &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;                temp = height[right]*(right-left);&lt;br&gt;                ans = std::&lt;span class=&#34;hljs-built_in&#34;&gt;max&lt;/span&gt;(ans,temp);&lt;br&gt;                right--;&lt;br&gt;            &amp;#125;&lt;br&gt;            &lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ans;&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/&#34;&gt;盛最多水的容器 - 盛最多水的容器 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/17/leetcode001/</guid>
            <title>146.LRU cache</title>
            <link>https://xingyuanjie.top/2023/02/17/leetcode001/</link>
            <category>C++</category>
            <category>LeetCode</category>
            <pubDate>Fri, 17 Feb 2023 14:31:45 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;146-LRU-cache&#34;&gt;&lt;a href=&#34;#146-LRU-cache&#34; class=&#34;headerlink&#34; title=&#34;146.LRU cache&#34;&gt;&lt;/a&gt;146.LRU cache&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/lru-cache/&#34;&gt;146. LRU 缓存 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LRUCache&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; cap=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    list&amp;lt;pair&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; lru;   &lt;span class=&#34;hljs-comment&#34;&gt;//真正的cache&lt;/span&gt;&lt;br&gt;    unordered_map&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,list&amp;lt;pair&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;::iterator&amp;gt; mp;   &lt;span class=&#34;hljs-comment&#34;&gt;//主要用处就是查找&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;LRUCache&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; capacity) &amp;#123;&lt;br&gt;        cap = capacity;						&lt;span class=&#34;hljs-comment&#34;&gt;//容量&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;						&lt;span class=&#34;hljs-comment&#34;&gt;//作为就是把最近访问的放在表头&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(mp.&lt;span class=&#34;hljs-built_in&#34;&gt;find&lt;/span&gt;(key)!=mp.&lt;span class=&#34;hljs-built_in&#34;&gt;end&lt;/span&gt;())&amp;#123;							&lt;span class=&#34;hljs-comment&#34;&gt;//有这个元素&lt;/span&gt;&lt;br&gt;            lru.&lt;span class=&#34;hljs-built_in&#34;&gt;splice&lt;/span&gt;(lru.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;(),lru,mp[key]);			&lt;span class=&#34;hljs-comment&#34;&gt;//将一个 list 容器中的元素插入到另一个容器的指定位置&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; lru.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;()-&amp;gt;second;				&lt;span class=&#34;hljs-comment&#34;&gt;//返回元素&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;								&lt;span class=&#34;hljs-comment&#34;&gt;//没有这个元素&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; key, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt;(key)!=&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;)&amp;#123;				&lt;span class=&#34;hljs-comment&#34;&gt;//cache中有key，调用get后自动插入到表头【key存在】&lt;/span&gt;&lt;br&gt;            lru.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;()-&amp;gt;second = value;&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//【key不存在】&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(lru.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;()==cap)&amp;#123;			&lt;span class=&#34;hljs-comment&#34;&gt;//如果容量满了&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; delkey = lru.&lt;span class=&#34;hljs-built_in&#34;&gt;back&lt;/span&gt;().first;		 &lt;span class=&#34;hljs-comment&#34;&gt;//记录最久未访问的key&lt;/span&gt;&lt;br&gt;                lru.&lt;span class=&#34;hljs-built_in&#34;&gt;pop_back&lt;/span&gt;();						 &lt;span class=&#34;hljs-comment&#34;&gt;//pop掉，置换&lt;/span&gt;&lt;br&gt;                mp.&lt;span class=&#34;hljs-built_in&#34;&gt;erase&lt;/span&gt;(delkey);					 &lt;span class=&#34;hljs-comment&#34;&gt;//查找表中也删除	&lt;/span&gt;&lt;br&gt;            &amp;#125;&lt;br&gt;            lru.&lt;span class=&#34;hljs-built_in&#34;&gt;emplace_front&lt;/span&gt;(key,value);			&lt;span class=&#34;hljs-comment&#34;&gt;//头部生成一个元素&lt;/span&gt;&lt;br&gt;            mp[key]=lru.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;();					&lt;span class=&#34;hljs-comment&#34;&gt;//加入查找表&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * Your LRUCache object will be instantiated and called as such:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * LRUCache* obj = new LRUCache(capacity);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * int param_1 = obj-&amp;gt;get(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * obj-&amp;gt;put(key,value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/bbea4b2410e6&#34;&gt;C++实现LRU缓存——LeetCode146 - 简书 (jianshu.com)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/15/blislab003/</guid>
            <title>BLISlab中C矩阵初始化速度测试</title>
            <link>https://xingyuanjie.top/2023/02/15/blislab003/</link>
            <category>Linux</category>
            <category>dgemm</category>
            <pubDate>Wed, 15 Feb 2023 11:48:16 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;BLISlab中C矩阵初始化速度测试&#34;&gt;&lt;a href=&#34;#BLISlab中C矩阵初始化速度测试&#34; class=&#34;headerlink&#34; title=&#34;BLISlab中C矩阵初始化速度测试&#34;&gt;&lt;/a&gt;BLISlab中C矩阵初始化速度测试&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;假设我们想把C中的所有元素都设为0。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统一编译命令：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;g++  xxx.cpp -O0 -std=c++11 -o xxx&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本一：&#34;&gt;&lt;a href=&#34;#版本一：&#34; class=&#34;headerlink&#34; title=&#34;版本一：&#34;&gt;&lt;/a&gt;版本一：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;    		&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123; &lt;br&gt;        		&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(i,j) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;   		 	&amp;#125;&lt;br&gt;		&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：&#34;&gt;&lt;a href=&#34;#实测结果：&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776901341&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776901&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10776&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本二：&#34;&gt;&lt;a href=&#34;#版本二：&#34; class=&#34;headerlink&#34; title=&#34;版本二：&#34;&gt;&lt;/a&gt;版本二：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j*ldc ];			&lt;span class=&#34;hljs-comment&#34;&gt;//point cp to top of ith column&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;        	*cp++ = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;		&lt;span class=&#34;hljs-comment&#34;&gt;//set element that cp points to to zero and&lt;/span&gt;&lt;br&gt;    	&amp;#125;		&lt;span class=&#34;hljs-comment&#34;&gt;//advance the pointer&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-1&#34;&gt;&lt;a href=&#34;#实测结果：-1&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455968000&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455968&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3455&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本三：&#34;&gt;&lt;a href=&#34;#版本三：&#34; class=&#34;headerlink&#34; title=&#34;版本三：&#34;&gt;&lt;/a&gt;版本三：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;       		*(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        	cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;   		&amp;#125;&lt;br&gt;	&amp;#125;	&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-2&#34;&gt;&lt;a href=&#34;#实测结果：-2&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581347801&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581347&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2581&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;版本四：&#34;&gt;&lt;a href=&#34;#版本四：&#34; class=&#34;headerlink&#34; title=&#34;版本四：&#34;&gt;&lt;/a&gt;版本四：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C( i, j )     C[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i,j,m,n;&lt;br&gt;	m=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	n=&lt;span class=&#34;hljs-number&#34;&gt;20000&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc=m;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*	C =(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)_mm_malloc(m*n*&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;),&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; c0 =&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c1=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c2=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c3=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    	cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = c0;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c1;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = c2;&lt;br&gt;        	*(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = c3;&lt;br&gt;        	cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;   		 &amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::&lt;span class=&#34;hljs-built_in&#34;&gt;now&lt;/span&gt;();&lt;br&gt;	std::chrono::duration&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt;, std::nano&amp;gt; dur = tp2 - tp1;&lt;br&gt;	std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 纳秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 微妙&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 毫秒&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4 被计时代码耗时：&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::seconds&amp;gt;(dur).&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; 秒钟&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;实测结果：-3&#34;&gt;&lt;a href=&#34;#实测结果：-3&#34; class=&#34;headerlink&#34; title=&#34;实测结果：&#34;&gt;&lt;/a&gt;实测结果：&lt;/h3&gt;&lt;figure class=&#34;highlight basic&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs basic&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;1 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269606428&lt;/span&gt; 纳秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;2 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269606&lt;/span&gt; 微妙&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;3 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2269&lt;/span&gt; 毫秒&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;4 &lt;/span&gt;被计时代码耗时：&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; 秒钟&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;参考资料：&#34;&gt;&lt;a href=&#34;#参考资料：&#34; class=&#34;headerlink&#34; title=&#34;参考资料：&#34;&gt;&lt;/a&gt;参考资料：&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://gukaifeng.cn/posts/c-11-chrono-gao-jing-du-ji-shi-fang-fa/&#34;&gt;C++11 chrono 高精度计时方法 | GuKaifeng’s Blog&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/12/blislib002/</guid>
            <title>BLISlab tutoril阅读</title>
            <link>https://xingyuanjie.top/2023/02/12/blislib002/</link>
            <category>Linux</category>
            <category>dgemm</category>
            <pubDate>Sun, 12 Feb 2023 21:11:56 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;BLISlab-tutoril阅读&#34;&gt;&lt;a href=&#34;#BLISlab-tutoril阅读&#34; class=&#34;headerlink&#34; title=&#34;BLISlab tutoril阅读&#34;&gt;&lt;/a&gt;BLISlab tutoril阅读&lt;/h1&gt;&lt;h2 id=&#34;参考资料：&#34;&gt;&lt;a href=&#34;#参考资料：&#34; class=&#34;headerlink&#34; title=&#34;参考资料：&#34;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Git地址：&lt;/strong&gt;&lt;a href=&#34;https://github.com/flame/blislab&#34;&gt;https://github.com/flame/blislab&lt;/a&gt; 【代码包包含tutoril.pdf】&lt;/p&gt;
&lt;h2 id=&#34;BLISlab-A-Sandbox-for-Optimizing-GEMM&#34;&gt;&lt;a href=&#34;#BLISlab-A-Sandbox-for-Optimizing-GEMM&#34; class=&#34;headerlink&#34; title=&#34;BLISlab: A Sandbox for Optimizing GEMM&#34;&gt;&lt;/a&gt;BLISlab: A Sandbox for Optimizing GEMM&lt;/h2&gt;&lt;h2 id=&#34;Abstract&#34;&gt;&lt;a href=&#34;#Abstract&#34; class=&#34;headerlink&#34; title=&#34;Abstract&#34;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;矩阵-矩阵乘法是科学计算中非常重要的基本运算，机器学习也越来越重要。这是一个非常简单的概念，可以在典型的高中代数课程中引入，但在实践中又非常重要，它在计算机上的实现仍然是一个活跃的研究主题。本笔记描述了一组使用该操作的练习，如何在具有分层内存(多个缓存)的现代cpu上获得高性能。它是基于blas类库实例化软件(BLIS)框架下的见解，通过公开一个模仿BLIS实现的简化“沙盒”来实现的。因此，它也成为BLIS优化的“众包”工具。&lt;/p&gt;
&lt;h2 id=&#34;1-Introduction&#34;&gt;&lt;a href=&#34;#1-Introduction&#34; class=&#34;headerlink&#34; title=&#34;1.Introduction&#34;&gt;&lt;/a&gt;1.Introduction&lt;/h2&gt;&lt;p&gt;矩阵-矩阵乘法(Gemm)经常被用作一个简单的例子，以提高如何在现代处理器上优化代码的意识。原因是该操作描述简单，很难完全优化，而且具有实际意义。在本文档中，我们将带领读者了解目前CPU架构中最快实现的技术。&lt;/p&gt;
&lt;h3 id=&#34;1-1-Basic-Linear-Algebra-Subprograms-BLAS&#34;&gt;&lt;a href=&#34;#1-1-Basic-Linear-Algebra-Subprograms-BLAS&#34; class=&#34;headerlink&#34; title=&#34;1.1 Basic Linear Algebra Subprograms (BLAS)&#34;&gt;&lt;/a&gt;1.1 Basic Linear Algebra Subprograms (BLAS)&lt;/h3&gt;&lt;p&gt;基本线性代数子程序(BLAS)[10,5,4,14]为一组线性代数操作形成了一个接口，在此基础上构建了更高级别的线性代数库，如LAPACK[2]和libflame[19]。其思想是，如果有人针对给定的体系结构优化BLAS，那么所有以调用BLAS的方式编写的应用程序和库都将受益于这种优化。&lt;/p&gt;
&lt;p&gt;BLAS被分为三组:一级BLAS(矢量-矢量操作)、二级BLAS(矩阵-矢量操作)和三级BLAS(矩阵-矩阵操作)。最后一组得益于这样一个事实:如果所有矩阵操作数的大小都是n × n，则O(n3)浮点运算对O(n)个数据执行，因此在内存层(主存、缓存和寄存器)之间移动数据的成本可以在很多次计算中平摊。因此，如果仔细执行这些操作，原则上可以实现高性能。&lt;/p&gt;
&lt;h3 id=&#34;1-2-Matrix-matrix-multiplication&#34;&gt;&lt;a href=&#34;#1-2-Matrix-matrix-multiplication&#34; class=&#34;headerlink&#34; title=&#34;1.2 Matrix-matrix multiplication&#34;&gt;&lt;/a&gt;1.2 Matrix-matrix multiplication&lt;/h3&gt;&lt;p&gt;特别地，BLAS通过(Fortran)调用支持具有双精度浮点数的Gemm:&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;dgemm( transa, transb, m, n, k alpha, A,lda, B, ldb, beta, C, ldc)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过适当地选择转置a和转置b来计算:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230212215656711.png&#34; alt=&#34;image-20230212215656711&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里C是m × n, k是“第三维”。参数dla, dlb和dlc将在本文档后面进行解释。&lt;/p&gt;
&lt;p&gt;在我们的练习中，我们考虑Gemm的简化版本:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230212215836596.png&#34; alt=&#34;image-20230212215836596&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中C是m × n, A是m × k, B是k × n。如果了解如何优化dgemm的这种特殊情况，那么可以很容易地将此知识扩展到所有3级BLAS功能。&lt;/p&gt;
&lt;h3 id=&#34;1-3-High-performance-implementation&#34;&gt;&lt;a href=&#34;#1-3-High-performance-implementation&#34; class=&#34;headerlink&#34; title=&#34;1.3 High-performance implementation&#34;&gt;&lt;/a&gt;1.3 High-performance implementation&lt;/h3&gt;&lt;p&gt;高性能实现的复杂性使得BLAS(尤其是Gemm)的实现通常都是由默默无闻的专家来完成的，这些专家为硬件供应商开发数字库，例如IBM的ESSL、Intel的MKL、Cray的LibSci和AMD的ACML库。这些库通常是用汇编代码编写的(至少是部分)，并且针对特定的处理器高度专门化。&lt;/p&gt;
&lt;p&gt;一篇关键论文[1]展示了“算法和体系结构”方法如何携手设计ar体系结构、编译器和算法，使BLAS能够用高级语言(Fortan)为IBM Power体系结构编写，并解释了在这些处理器上实现高性能的复杂性。便携式高性能ANSI C (PHiPAC)[3]项目随后提供了用C编写高性能代码的指南，并建议如何自动生成和优化以这种方式编写的Gemm。Au tomatatically tuning Linear Algebra Software (ATLAS)[17,18]建立在这些见解的基础上，使BLAS库的自动调优和自动生成成为主流。&lt;/p&gt;
&lt;p&gt;在本文档的一部分中，我们讨论了有关该主题的最新论文，包括引入了实施Gemm[6]的Goto方法和该方法[16]的BLIS重构的论文，以及其他更直接相关的论文。&lt;/p&gt;
&lt;h3 id=&#34;1-4-Other-similar-exercises&#34;&gt;&lt;a href=&#34;#1-4-Other-similar-exercises&#34; class=&#34;headerlink&#34; title=&#34;1.4 Other similar exercises&#34;&gt;&lt;/a&gt;1.4 Other similar exercises&lt;/h3&gt;&lt;p&gt;还有一些人基于Gemm组合了练习。与本文相关的最新成果有:乌尔姆大学Michael Lehn所作的“优化微内核:从纯C到SSE”，以及我们自己整理的关于“优化微内核”的维基。&lt;/p&gt;
&lt;h3 id=&#34;1-5-We-need-you&#34;&gt;&lt;a href=&#34;#1-5-We-need-you&#34; class=&#34;headerlink&#34; title=&#34;1.5 We need you!&#34;&gt;&lt;/a&gt;1.5 We need you!&lt;/h3&gt;&lt;p&gt;本文的目的是指导您实现Gemm的高性能实现。我们的别有用心是，用于实现BLAS的BLIS框架需要针对各种cpu高度优化的所谓微内核。在教你基本技巧的过程中，我们希望找到“那个人”将贡献最好的微内核。就把它当做我们版的高性能计算机达人秀吧。虽然我们在描述中关注的是Intel Haswell架构的优化，但是设置可以很容易地修改，从而帮助您(和我们)优化其他cpu。事实上，BLIS本身支持的体系结构包括AMD和Intel的x86处理器，IBM的Power处理器，ARM处理器和德州仪器的DSP处理器[15,12,8]。&lt;/p&gt;
&lt;h2 id=&#34;2-Step-1-The-Basics&#34;&gt;&lt;a href=&#34;#2-Step-1-The-Basics&#34; class=&#34;headerlink&#34; title=&#34;2 Step 1: The Basics&#34;&gt;&lt;/a&gt;2 Step 1: The Basics&lt;/h2&gt;&lt;h3 id=&#34;2-1-Simple-matrix-matrix-multiplication&#34;&gt;&lt;a href=&#34;#2-1-Simple-matrix-matrix-multiplication&#34; class=&#34;headerlink&#34; title=&#34;2.1 Simple matrix-matrix multiplication&#34;&gt;&lt;/a&gt;2.1 Simple matrix-matrix multiplication&lt;/h3&gt;&lt;p&gt;在我们的讨论中，我们将考虑计算：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230213165803939.png&#34; alt=&#34;image-20230213165803939&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230213165826084.png&#34; alt=&#34;image-20230213165826084&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中，A、B、C分别为m × k、k × n、m × n矩阵。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230213165920897.png&#34; alt=&#34;image-20230213165920897&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果A、B和C存储在二维数组A、B和C中，下面的伪代码计算C:&amp;#x3D;&lt;br&gt;AB + C:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230213170125083.png&#34; alt=&#34;image-20230213170125083&#34;&gt;&lt;/p&gt;
&lt;p&gt;分别计算乘法和加法，计算需要2mnk个浮点运算(flop)。&lt;/p&gt;
&lt;h3 id=&#34;2-2-Setup&#34;&gt;&lt;a href=&#34;#2-2-Setup&#34; class=&#34;headerlink&#34; title=&#34;2.2 Setup&#34;&gt;&lt;/a&gt;2.2 Setup&lt;/h3&gt;&lt;p&gt;为了让您高效地学习如何高效地进行计算，您可以在启动项目时准备好大部分基础设施。我们已经构造了子目录step1，有点像实现真正库might的项目。对于我们的目的来说，这可能是多余的，但是如何构建软件项目是一项值得学习的有用技能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214173819349.png&#34; alt=&#34;image-20230214173819349&#34;&gt;&lt;/p&gt;
&lt;p&gt;考虑图4，它演示了子目录step1的目录结构:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;README&lt;/strong&gt;是一个描述目录内容以及如何编译和执行代码的文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;source .sh&lt;/strong&gt;配置环境变量的文件。在那个文件中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BLISLAB USE INTEL&lt;/strong&gt;设置是否使用INTEL编译器(true)或GNU编译器(false)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BLISLAB USE BLAS&lt;/strong&gt;指示您的参考dgemm是否使用外部BLAS库实现(如果您的机器上安装了这样的BLAS库，则为true)，还是简单的三重循环实现(false)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;COMPILER OPT LEVEL&lt;/strong&gt;设置GNU或Intel编译器的优化级别(O0, O1, O2, O3)。&lt;br&gt;(请注意，例如，O3由大写字母“O”和数字“3”组成。)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OMP NUM THREADS&lt;/strong&gt; and &lt;strong&gt;BLISLAB IC NT&lt;/strong&gt;设置用于并行版本的线程数&lt;br&gt;代码。对于第1步，将它们都设置为1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dgemm&lt;/strong&gt;是实现dgemm的例程存在的子目录。在其中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bl_dgemm_ref.c&lt;/strong&gt;包含例程&lt;strong&gt;dgemm ref&lt;/strong&gt;，它是dgemm的一个简单实现，如果&lt;strong&gt;BLISLAB_use_BLAS &amp;#x3D; false&lt;/strong&gt;，您将使用它来检查实现的正确性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;my_dgemm.c&lt;/strong&gt;包含例程&lt;strong&gt;dgemm&lt;/strong&gt;，它最初是dgemm的一个简单实现，您将优化它作为掌握如何优化gemm的第一步的一部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bl_dgemm_util.c&lt;/strong&gt;包含稍后会派上用场的实用程序例程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;include&lt;/strong&gt;这个目录包含包含各种宏定义和其他头信息的文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lib&lt;/strong&gt;此目录将保存由您实现的源文件(libblislab. lib)生成的库。libblislab.a)您还可以在此目录中安装参考库(例如OpenBLAS)以比较性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test&lt;/strong&gt; 这个目录包含“测试驱动程序”和各种实现的正确性&amp;#x2F;性能检查脚本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test_bl_demm .c&lt;/strong&gt;包含测试例程bl_demm的“测试驱动程序”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test_bl_dgemm.x&lt;/strong&gt;是&lt;strong&gt;test_bl_dgemm.c&lt;/strong&gt;的可执行文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run_bl_dgemm.sh&lt;/strong&gt;包含一个bash脚本，用于收集性能结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tacc_run_bl_dgemm.sh&lt;/strong&gt; contains a &lt;strong&gt;SLURM&lt;/strong&gt; script for you to (optionally) submit the job to the Texas Advanced Computing Center (TACC) machines if you have an account there.&lt;/p&gt;
&lt;h3 id=&#34;2-3-Getting-started&#34;&gt;&lt;a href=&#34;#2-3-Getting-started&#34; class=&#34;headerlink&#34; title=&#34;2.3 Getting started&#34;&gt;&lt;/a&gt;2.3 Getting started&lt;/h3&gt;&lt;p&gt;我们希望您从my_dgemm.c中的实现开始，并通过应用各种标准优化技术对其进行优化。该文件中的初始实现是具有图2中给出的三个循环的简单实现。首先要注意的是二维数组如何以所谓的列-主序映射到内存。这种选择的原因是最初的BLAS假定数组的列主存储，因为该接口首先是为Fortran用户提供的。检查&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214185803699.png&#34; alt=&#34;image-20230214185803699&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们注意到，每个操作数都是一个宏。考虑文件的早期&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214185849594.png&#34; alt=&#34;image-20230214185849594&#34;&gt;&lt;/p&gt;
&lt;p&gt;地址C处的线性数组用于存储元素Ci,j，因此i,j元素被映射到位置j * ldc + i。查看它的方法是C的每一列都是连续存储的。但是，可以把矩阵C看作是嵌入在一个更大的数组中，该数组有ldc行，因此访问一行就意味着跨ldc遍历数组C。二维数组C的前维数通常是指这个较大数组的行维数，因此变量ldc (C的前维数)。下图说明了这三个矩阵:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214190409172.png&#34; alt=&#34;image-20230214190409172&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中箭头表示列是连续存储的。&lt;/p&gt;
&lt;h4 id=&#34;2-3-1-Configure-the-default-implementation&#34;&gt;&lt;a href=&#34;#2-3-1-Configure-the-default-implementation&#34; class=&#34;headerlink&#34; title=&#34;2.3.1 Configure the default implementation&#34;&gt;&lt;/a&gt;2.3.1 Configure the default implementation&lt;/h4&gt;&lt;p&gt;默认情况下，练习编译并链接到Intel的icc编译器，该编译器将对代码应用编译器优化(O3级)。您需要通过以下命令设置环境变量:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;source sourceme.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在终端中，您将看到输出:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_INTEL = TRUE&lt;br&gt;COMPILER_OPT_LEVEL = O3&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-3-2-Compile-execute-and-collect-results&#34;&gt;&lt;a href=&#34;#2-3-2-Compile-execute-and-collect-results&#34; class=&#34;headerlink&#34; title=&#34;2.3.2 Compile, execute and collect results&#34;&gt;&lt;/a&gt;2.3.2 Compile, execute and collect results&lt;/h4&gt;&lt;p&gt;如果您无法访问Intel的编译器(icc)，请阅读第2.3.2小节和2.3.3小节，并继续阅读第2.3.5小节。&lt;/p&gt;
&lt;p&gt;您可以编译、执行代码并通过执行收集性能结果&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;make clean&lt;br&gt;make&lt;br&gt;cd test&lt;br&gt;./run_bl_dgemm.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在子目录step1中。您将看到性能结果输出:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214231134260.png&#34; alt=&#34;image-20230214231134260&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214231142311.png&#34; alt=&#34;image-20230214231142311&#34;&gt;&lt;/p&gt;
&lt;p&gt;您可以在run_bl_dgemm.sh中更改采样块大小。请注意，如果代码中有错误，这些错误将被报告为，例如，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230214231406465.png&#34; alt=&#34;image-20230214231406465&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-3-3-Draw-the-performance-graph&#34;&gt;&lt;a href=&#34;#2-3-3-Draw-the-performance-graph&#34; class=&#34;headerlink&#34; title=&#34;2.3.3 Draw the performance graph&#34;&gt;&lt;/a&gt;2.3.3 Draw the performance graph&lt;/h4&gt;&lt;p&gt;最后，您可以使用&lt;strong&gt;MATLAB&lt;/strong&gt;用我们的脚本绘制性能图。在&lt;strong&gt;test&lt;/strong&gt;子目录下，执行后&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;./collect_result_step1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你会得到一个MATLAB文件“step1_result.m”，具有性能结果。然后你可以执行&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;bl_dgemm_plot.m&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在MATLAB中，然后生成性能图。&lt;/p&gt;
&lt;h4 id=&#34;2-3-4-Change-to-the-GNU-compiler&#34;&gt;&lt;a href=&#34;#2-3-4-Change-to-the-GNU-compiler&#34; class=&#34;headerlink&#34; title=&#34;2.3.4 Change to the GNU compiler&#34;&gt;&lt;/a&gt;2.3.4 Change to the GNU compiler&lt;/h4&gt;&lt;p&gt;由于我们希望您明确地了解什么样的技巧可以带来高性能，并且由于有些人可能无法访问Intel编译器，因此接下来应该改为使用GNU C编译器。为此，你必须编辑&lt;strong&gt;sourceme.sh&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_INTEL=false&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，类似于默认设置，您需要通过执行以下命令来设置环境变量:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;source sourceme.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在终端，你会观察到:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_INTEL = false&lt;br&gt;COMILER_OPT_LEVEL = O3&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-3-5-Turn-off-optimization&#34;&gt;&lt;a href=&#34;#2-3-5-Turn-off-optimization&#34; class=&#34;headerlink&#34; title=&#34;2.3.5 Turn off optimization&#34;&gt;&lt;/a&gt;2.3.5 Turn off optimization&lt;/h4&gt;&lt;p&gt;接下来，我们希望您关闭编译器执行的优化。这有三个目的:首先，这意味着您将必须显式地执行优化，这将允许您了解架构和算法如何交互。其次，优化编译器很可能会试图“撤销”您显式试图完成的任务。第三，在代码中构建的技巧越多，编译器就越难找出优化的方法。&lt;/p&gt;
&lt;p&gt;你需要先编辑&lt;strong&gt;sourceme.sh:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;COMILER_OPT_LEVEL = O0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，类似于默认设置，您需要通过执行以下命令来设置环境变量:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;source sourceme.sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在终端中，您将看到输出:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_INTEL = false&lt;br&gt;COMILER_OPT_LEVEL =O0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-3-6-Optional-Use-optimized-BLAS-library-as-reference-implementation&#34;&gt;&lt;a href=&#34;#2-3-6-Optional-Use-optimized-BLAS-library-as-reference-implementation&#34; class=&#34;headerlink&#34; title=&#34;2.3.6 (Optional) Use optimized BLAS library as reference implementation&#34;&gt;&lt;/a&gt;2.3.6 (Optional) Use optimized BLAS library as reference implementation&lt;/h4&gt;&lt;p&gt;默认情况下，您的参考Gemm实现是一个非常缓慢的三循环实现。如果你在测试机器上安装了BLAS库，你可以通过设置该库中的dgemm作为你的参考实现:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_BLAS=true&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在sourceme.sh。如果使用Intel编译器，则不需要显式指定MKL的路径。但是，如果使用GNU编译器，则需要指定BLAS库的路径。例如，您可能希望从&lt;a href=&#34;https://github.com/flame/blis%E5%AE%89%E8%A3%85%E6%88%91%E4%BB%AC%E7%9A%84BLIS%E5%BA%93%E5%88%B0/home/lib/blis%E7%9B%AE%E5%BD%95%E5%90%8C%E6%97%B6%E5%9C%A8sourceme&#34;&gt;https://github.com/flame/blis安装我们的BLIS库到/home/lib/blis目录同时在sourceme&lt;/a&gt; .sh中设置&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLAS_DIR=/home/lib/blis&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行**$ source sourceme .sh**后，你会看到:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;BLISLAB_USE_BLAS = true&lt;br&gt;BLAS_DIR = /home/lib/blis&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;现在，您的实现的性能和准确性将与这个优化的库例程进行比较。&lt;/p&gt;
&lt;h3 id=&#34;2-4-Basic-techniques&#34;&gt;&lt;a href=&#34;#2-4-Basic-techniques&#34; class=&#34;headerlink&#34; title=&#34;2.4 Basic techniques&#34;&gt;&lt;/a&gt;2.4 Basic techniques&lt;/h3&gt;&lt;p&gt;在本小节中，我们将介绍一些基本的交易技巧。&lt;/p&gt;
&lt;h4 id=&#34;2-4-1-Using-pointers&#34;&gt;&lt;a href=&#34;#2-4-1-Using-pointers&#34; class=&#34;headerlink&#34; title=&#34;2.4.1 Using pointers&#34;&gt;&lt;/a&gt;2.4.1 Using pointers&lt;/h4&gt;&lt;p&gt;既然优化被关闭了，那么矩阵元素所在地址的计算将显式地公开。(优化编译器可以消除这种开销。)您要做的是更改my_gemm.c中的实现，以便它使用指针。在这样做之前，您可能需要备份原始的my_gemm.c，以防需要从头开始重新启动。实际上，在每个步骤中，您可能都希望在单独的文件中备份前面的实现&lt;/p&gt;
&lt;p&gt;这是基本的想法。假设我们想把C中的所有元素都设为0。一个基本的循环，按照在my_gemm.c中找到的内容来设计&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;(i,j) =&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Using pointers, we might implement this as&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    cp = &amp;amp;C[ j*ldc ];			&lt;span class=&#34;hljs-comment&#34;&gt;//point cp to top of ith column&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++)&amp;#123;&lt;br&gt;        *cp++ = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;		&lt;span class=&#34;hljs-comment&#34;&gt;//set element that cp points to to zero and&lt;/span&gt;&lt;br&gt;    &amp;#125;		&lt;span class=&#34;hljs-comment&#34;&gt;//advance the pointer&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意，我们有意地交换了循环的顺序，以便向前移动指针将我们带到C的列中。&lt;/p&gt;
&lt;h4 id=&#34;2-4-2-Loop-unrolling&#34;&gt;&lt;a href=&#34;#2-4-2-Loop-unrolling&#34; class=&#34;headerlink&#34; title=&#34;2.4.2 Loop unrolling&#34;&gt;&lt;/a&gt;2.4.2 Loop unrolling&lt;/h4&gt;&lt;p&gt;每次通过内部循环更新循环索引i和指针cp都会产生相当大的开销。&lt;/p&gt;
&lt;p&gt;因此，编译器将执行循环展开。使用展开因子4，我们将C设置为0的简单循环变成&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;重要的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i和cp现在每四次迭代才更新一次。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(cp+0)使用称为间接寻址的机器指令，这比使用&lt;/em&gt;(cp+k)计算更有效，其中k是变量。&lt;/li&gt;
&lt;li&gt;当它从内存中输入数据到缓存中时，每次输入一条64字节的缓存线。这意味着以64字节的块访问连续数据可以减少内存层之间的内存移动成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，在展开时，如果m不是4的倍数，则可能必须处理“边缘”。&lt;/p&gt;
&lt;p&gt;为了这个练习，你不需要担心这个边缘，只要你明智地选择你的采样块大小，就像第2.5节重申的那样。&lt;/p&gt;
&lt;h4 id=&#34;2-4-3-Register-variables&#34;&gt;&lt;a href=&#34;#2-4-3-Register-variables&#34; class=&#34;headerlink&#34; title=&#34;2.4.3 Register variables&#34;&gt;&lt;/a&gt;2.4.3 Register variables&lt;/h4&gt;&lt;p&gt;注意，只有当数据存储在寄存器中时，计算才会发生。编译器将自动转换代码，以便插入将某些数据放入寄存器的中间步骤。可以给编译器一个提示，将某些数据保存在寄存器中是很好的，如下面的例子所示:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *cp;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&amp;#123;&lt;br&gt;    cp = &amp;amp;C[ j * ldc ];&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; c0 =&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c1=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c2=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;,c3=&lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) = c0;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = c1;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = c2;&lt;br&gt;        *(cp+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = c3;&lt;br&gt;        cp+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-5-A-modest-first-goal&#34;&gt;&lt;a href=&#34;#2-5-A-modest-first-goal&#34; class=&#34;headerlink&#34; title=&#34;2.5 A modest first goal&#34;&gt;&lt;/a&gt;2.5 A modest first goal&lt;/h4&gt;&lt;p&gt;现在我们要求您使用上面讨论的技术来优化my_dgemm.c。现在，只需要考虑如何为较小的矩阵获得更好的性能。具体来说，请看下面这张图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230215110352304.png&#34; alt=&#34;image-20230215110352304&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们想让你做的是编写你的代码，使C的mR × nR块保存在寄存器中。你可以选择mR和nR，但是你需要用这些选项更新文件&lt;strong&gt;include&amp;#x2F;bl_config.h&lt;/strong&gt;。这确保了测试驱动程序只尝试这些块大小的倍数的问题大小，所以您不必担心“边缘”。&lt;/p&gt;
&lt;p&gt;您将注意到，即使对于可以放入某个缓存内存中的较小的矩阵，您的实现(比您可能已安装的MKL或其他优化的BLAS库的实现差得多)。原因是编译器没有为浮点运算使用最快的指令。可以通过使用向量intrinsic funtions函数(允许您从C显式地利用它们)或通过在汇编代码中编码来访问这些函数。现在，我们还没到那一步。我们将&lt;br&gt;在步骤3中讨论更多。&lt;/p&gt;
&lt;h2 id=&#34;3-Step-2-Blocking&#34;&gt;&lt;a href=&#34;#3-Step-2-Blocking&#34; class=&#34;headerlink&#34; title=&#34;3 Step 2: Blocking&#34;&gt;&lt;/a&gt;3 Step 2: Blocking&lt;/h2&gt;&lt;h3 id=&#34;3-1-Poorman’s-BLAS&#34;&gt;&lt;a href=&#34;#3-1-Poorman’s-BLAS&#34; class=&#34;headerlink&#34; title=&#34;3.1 Poorman’s BLAS&#34;&gt;&lt;/a&gt;3.1 Poorman’s BLAS&lt;/h3&gt;&lt;p&gt;本练习的第1步使您认识到，随着基于缓存的体系结构的出现，Gemm的高性能实现需要仔细注意数据在内存层之间移动的成本和对该数据的计算的摊薄。为了保持这种可管理性，认识到只有使用相对较小的矩阵执行矩阵-矩阵乘法的“内核”需要高度优化，这是有帮助的，因为使用较大的矩阵的计算可以被分块，然后使用这样的内核而不会对整体性能产生不利影响。这一见解在[9]中得到了明确的提倡。&lt;/p&gt;
&lt;p&gt;这有时被称为“穷人的BLAS”，因为如果一个人只能负担得起优化矩阵-矩阵乘法(使用子矩阵)，那么就可以构建Gemm，以及其他重要的矩阵-矩阵运算，即三级BLAS。我们稍后将看到的是，从模块化和性能的角度来看，这实际上是一个好主意。&lt;/p&gt;
&lt;p&gt;在上一节中，您已经看到了分块的示例。&lt;/p&gt;
&lt;h3 id=&#34;3-2-Blocked-matrix-matrix-multiplication&#34;&gt;&lt;a href=&#34;#3-2-Blocked-matrix-matrix-multiplication&#34; class=&#34;headerlink&#34; title=&#34;3.2 Blocked matrix-matrix multiplication&#34;&gt;&lt;/a&gt;3.2 Blocked matrix-matrix multiplication&lt;/h3&gt;&lt;p&gt;分块Gemm以利用处理器的分层内存的关键是理解当这些矩阵被分块时如何计算C:&amp;#x3D; AB + C。分块&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216130352894.png&#34; alt=&#34;image-20230216130352894&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-3-Your-mission-if-you-choose-to-accept-it&#34;&gt;&lt;a href=&#34;#3-3-Your-mission-if-you-choose-to-accept-it&#34; class=&#34;headerlink&#34; title=&#34;3.3 Your mission, if you choose to accept it&#34;&gt;&lt;/a&gt;3.3 Your mission, if you choose to accept it&lt;/h3&gt;&lt;p&gt;我们现在要求您在my_dgemm中实现分块矩阵-矩阵乘法。具体来说，对于小矩阵，您可以获得比大矩阵更好的性能，因为小矩阵适合缓存。将矩阵划分为能够获得更高性能的子矩阵，您将看到，即使对于更大的矩阵，所得到的实现也能保持更好的性能&lt;/p&gt;
&lt;h2 id=&#34;4-Step-3-Blocking-for-Multiple-Levels-of-Cache&#34;&gt;&lt;a href=&#34;#4-Step-3-Blocking-for-Multiple-Levels-of-Cache&#34; class=&#34;headerlink&#34; title=&#34;4 Step 3: Blocking for Multiple Levels of Cache&#34;&gt;&lt;/a&gt;4 Step 3: Blocking for Multiple Levels of Cache&lt;/h2&gt;&lt;h3 id=&#34;4-1-The-Goto-Approach-to-Implementing-gemm&#34;&gt;&lt;a href=&#34;#4-1-The-Goto-Approach-to-Implementing-gemm&#34; class=&#34;headerlink&#34; title=&#34;4.1 The Goto Approach to Implementing gemm&#34;&gt;&lt;/a&gt;4.1 The Goto Approach to Implementing gemm&lt;/h3&gt;&lt;p&gt;2000年左右，Kazushige Goto用他的技术彻底改变了Gemm在当前cpu上的实现方式，该技术首次发表在论文[6]上。&lt;/p&gt;
&lt;p&gt;最近在[16]中描述了这种方法的进一步“重构”。&lt;/p&gt;
&lt;p&gt;BLIS框架的优点是它将必须高度优化的内核(可能使用向量intrinsic或在汇编代码中)减少为微内核。在本节中，我们将简要描述该方法的重点。然而，我们强烈建议读者熟悉以上两篇论文本身。&lt;/p&gt;
&lt;p&gt;图3(左)说明了Goto方法为三层缓存(L1、L2和L3)构建分块的方式。在BLIS框架中，实现就是这样结构的，因此只有底层的微内核需要针对给定的体系结构进行高度优化和定制。在最初的GotoBLAS实现(现在维护为OpenBLAS[11])中，从围绕微内核的第二个循环开始的操作是定制的。为了获得最佳性能，所有数据都是连续访问的，这就是为什么在到达微内核之前的某个时刻，数据是按照箭头所示的顺序打包的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216131649371.png&#34; alt=&#34;image-20230216131649371&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，注意上图中A块的每一列都乘以B块对应行中的每个元素(我们称这些A块和B块为微面板)。这意味着L2缓存的延迟(从缓存中引入A微面板元素所需的时间)可以平摊到2nR flop上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216131916807.png&#34; alt=&#34;image-20230216131916807&#34;&gt;&lt;/p&gt;
&lt;p&gt;出于这个原因，我们可以组织计算，使A的微面板通常驻留在L2缓存中。实际上，我们可以做得更好:当A和B的微面板的一列发生排名1的更新时，A的微面板的下一列可以被带入寄存器，这样计算就可以掩盖数据移动的成本。事实上，我们希望将B的微面板保留在L1缓存中(因为它将被A的许多微面板重用)，这限制了分块参数kC。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216132839380.png&#34; alt=&#34;image-20230216132839380&#34;&gt;&lt;/p&gt;
&lt;p&gt;有人可能会问，上述方案是否是最优方案。在[7]中给出了一个理论，表明在一个理想化的模型下，上述是局部最优的(在某种意义上，假设数据在层次结构中的某个内存层中，在该级别上提出的阻塞最优地与下一个内存层平摊数据移动的成本)。[13]给出了指导各种分块参数选择的理论。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216133142749.png&#34; alt=&#34;image-20230216133142749&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-2-Setup&#34;&gt;&lt;a href=&#34;#4-2-Setup&#34; class=&#34;headerlink&#34; title=&#34;4.2 Setup&#34;&gt;&lt;/a&gt;4.2 Setup&lt;/h3&gt;&lt;p&gt;图4说明了子目录step3的目录结构。与步骤1相比，我们对以下目录&amp;#x2F;文件进行了修改&amp;#x2F;添加:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kernels&lt;/strong&gt; 这个目录包含各种架构的微内核实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bd_gemm_ukr.c&lt;/strong&gt;给出了一个原生的C实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bl_dgemm_int_kernel.c&lt;/strong&gt; gives an &lt;strong&gt;AVX&amp;#x2F;AVX2&lt;/strong&gt; intrinsics micro-kernel implementation for Haswell architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bl_dgemm_asm_kernel.c&lt;/strong&gt; gives an &lt;strong&gt;AVX&amp;#x2F;AVX2&lt;/strong&gt; assembly micro-kernel implementation for Haswell architecture.&lt;/p&gt;
&lt;h3 id=&#34;4-3-Advanced-techniques&#34;&gt;&lt;a href=&#34;#4-3-Advanced-techniques&#34; class=&#34;headerlink&#34; title=&#34;4.3 Advanced techniques&#34;&gt;&lt;/a&gt;4.3 Advanced techniques&lt;/h3&gt;&lt;p&gt;You can find the vector instructions online:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intel Intrinsics Guide&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intel ISA Extensions&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-3-1-An-introduction-example-for-“axpy”&#34;&gt;&lt;a href=&#34;#4-3-1-An-introduction-example-for-“axpy”&#34; class=&#34;headerlink&#34; title=&#34;4.3.1 An introduction example for “axpy”&#34;&gt;&lt;/a&gt;4.3.1 An introduction example for “axpy”&lt;/h4&gt;&lt;p&gt;我们提供了一个实现“axpy”的示例，以演示如何使用Intel AVX intrinsic和Assembly(在misc&amp;#x2F;examples子目录中)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216134020439.png&#34; alt=&#34;image-20230216134020439&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个例子可以作为学习基本broacast&amp;#x2F;fma&amp;#x2F;load&amp;#x2F;store指令的一个很好的起点。此外，这个示例实际上是4×4 rank-1更新的“broadcast”实现的原语。&lt;/p&gt;
&lt;h4 id=&#34;4-3-2-4×4-rank-1-update&#34;&gt;&lt;a href=&#34;#4-3-2-4×4-rank-1-update&#34; class=&#34;headerlink&#34; title=&#34;4.3.2 4×4 rank-1 update&#34;&gt;&lt;/a&gt;4.3.2 4×4 rank-1 update&lt;/h4&gt;&lt;p&gt;微内核实现可以归结为4×4级别1的更新。有两种可能的实现:一种基于广播(图5)，另一种是蝴蝶排列(图6)。您还可以尝试其他可能的实现。&lt;/p&gt;
&lt;h3 id=&#34;4-4-Your-mission-if-you-choose-to-accept-it&#34;&gt;&lt;a href=&#34;#4-4-Your-mission-if-you-choose-to-accept-it&#34; class=&#34;headerlink&#34; title=&#34;4.4 Your mission, if you choose to accept it&#34;&gt;&lt;/a&gt;4.4 Your mission, if you choose to accept it&lt;/h3&gt;&lt;p&gt;我们在my_dgemm中为您提供了简化BLIS框架的参考实现。代码的组织方式与图3所示相同。但是，每个循环中的步长并没有很好地选择，并且微内核实现是一个简单的C版本。因此。您不会期望代码具有高性能。我们要你做的就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在include&amp;#x2F;bl_config.h文件中指定分块参数mC, nC, kC和微内核大小参数mR, nR;&lt;/li&gt;
&lt;li&gt;使用矢量intrinsic或汇编代码实现高效的微内核。将代码放在kernels&amp;#x2F;bl_dgemm_int_kernel.c(用于向量intrinsic)或kernels&amp;#x2F;bl_dgemm_asm_kernel.c(用于as汇编)中。需要在“include&amp;#x2F; BL_config.h”中修改“BL_MICRO_KERNEL”，指定微内核的函数名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216140558800.png&#34; alt=&#34;image-20230216140558800&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-Step-4-Parallelizing-with-OpenMP&#34;&gt;&lt;a href=&#34;#5-Step-4-Parallelizing-with-OpenMP&#34; class=&#34;headerlink&#34; title=&#34;5 Step 4: Parallelizing with OpenMP&#34;&gt;&lt;/a&gt;5 Step 4: Parallelizing with OpenMP&lt;/h2&gt;&lt;p&gt;BLIS构造GotoBLAS方法实现Gemm的好处是，它在tt C中公开了5个循环，这些循环可以很容易地与OpenMP指令并行。&lt;/p&gt;
&lt;h3 id=&#34;5-1-To-parallelize-or-not-to-parallelize-that’s-the-question&#34;&gt;&lt;a href=&#34;#5-1-To-parallelize-or-not-to-parallelize-that’s-the-question&#34; class=&#34;headerlink&#34; title=&#34;5.1 To parallelize or not to parallelize, that’s the question&#34;&gt;&lt;/a&gt;5.1 To parallelize or not to parallelize, that’s the question&lt;/h3&gt;&lt;p&gt;最基本的问题是要并行化哪个循环。在[12]中详细讨论了每个循环的并行化的优点和缺点。对于多核体系结构(具有相对较少核的多线程体系结构)，可以在早期的论文[15]中找到结果。&lt;/p&gt;
&lt;h2 id=&#34;6-Conclusion&#34;&gt;&lt;a href=&#34;#6-Conclusion&#34; class=&#34;headerlink&#34; title=&#34;6 Conclusion&#34;&gt;&lt;/a&gt;6 Conclusion&lt;/h2&gt;&lt;p&gt;我们使用GEMM作为案例研究来展示如何为性能进行编程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216141029854.png&#34; alt=&#34;image-20230216141029854&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216141041389.png&#34; alt=&#34;image-20230216141041389&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/12/blislib002/image-20230216141057850.png&#34; alt=&#34;image-20230216141057850&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/07/niuke003/</guid>
            <title>JZ6 从尾到头打印链表</title>
            <link>https://xingyuanjie.top/2023/02/07/niuke003/</link>
            <category>C++</category>
            <category>牛客</category>
            <pubDate>Tue, 07 Feb 2023 18:21:41 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;JZ6-从尾到头打印链表&#34;&gt;&lt;a href=&#34;#JZ6-从尾到头打印链表&#34; class=&#34;headerlink&#34; title=&#34;JZ6 从尾到头打印链表&#34;&gt;&lt;/a&gt;&lt;strong&gt;JZ6&lt;/strong&gt; &lt;strong&gt;从尾到头打印链表&lt;/strong&gt;&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=265&amp;tqId=39210&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=265&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=&#34;&gt;从尾到头打印链表_牛客题霸_牛客网 (nowcoder.com)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*  struct ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*        int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*        struct ListNode *next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*        ListNode(int x) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*              val(x), next(NULL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-title&#34;&gt;printListFromTailToHead&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ListNode* head)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; s;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (head!=&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;br&gt;            s.&lt;span class=&#34;hljs-built_in&#34;&gt;insert&lt;/span&gt;(s.&lt;span class=&#34;hljs-built_in&#34;&gt;begin&lt;/span&gt;(),head-&amp;gt;val);				&lt;span class=&#34;hljs-comment&#34;&gt;//利用迭代器头插&lt;/span&gt;&lt;br&gt;            head=head-&amp;gt;next;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; s;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/07/niuke002/</guid>
            <title>JZ5 替换空格</title>
            <link>https://xingyuanjie.top/2023/02/07/niuke002/</link>
            <category>C++</category>
            <category>牛客</category>
            <pubDate>Tue, 07 Feb 2023 18:05:25 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;JZ5-替换空格&#34;&gt;&lt;a href=&#34;#JZ5-替换空格&#34; class=&#34;headerlink&#34; title=&#34;JZ5 替换空格&#34;&gt;&lt;/a&gt;&lt;strong&gt;JZ5&lt;/strong&gt; &lt;strong&gt;替换空格&lt;/strong&gt;&lt;/h2&gt;&lt;h2 id=&#34;题目链接&#34;&gt;&lt;a href=&#34;#题目链接&#34; class=&#34;headerlink&#34; title=&#34;题目链接&#34;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.nowcoder.com/practice/0e26e5551f2b489b9f58bc83aa4b6c68?tpId=265&amp;tqId=39209&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=/exam/oj/ta?tpId=13&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=&#34;&gt;替换空格_牛客题霸_牛客网 (nowcoder.com)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a href=&#34;#完整代码&#34; class=&#34;headerlink&#34; title=&#34;完整代码&#34;&gt;&lt;/a&gt;完整代码&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * @param s string字符串 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * @return string字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;string &lt;span class=&#34;hljs-title&#34;&gt;replaceSpace&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(string s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// write code here&lt;/span&gt;&lt;br&gt;        string str2 =&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%20&amp;quot;&lt;/span&gt;;&lt;br&gt;        string str3;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;s.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(s[i]!=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)					&lt;span class=&#34;hljs-comment&#34;&gt;//不是空格就插入到str3&lt;/span&gt;&lt;br&gt;                str3.&lt;span class=&#34;hljs-built_in&#34;&gt;push_back&lt;/span&gt;(s[i]);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;                str3.&lt;span class=&#34;hljs-built_in&#34;&gt;append&lt;/span&gt;(str2);			&lt;span class=&#34;hljs-comment&#34;&gt;//如果是空格就把str2插入到str3&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; str3;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/02/07/niuke001/</guid>
            <title>JZ3 数组中重复的数字</title>
            <link>https://xingyuanjie.top/2023/02/07/niuke001/</link>
            <category>C++</category>
            <category>牛客</category>
            <pubDate>Tue, 07 Feb 2023 16:58:01 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;JZ3-数组中重复的数字&#34;&gt;&lt;a href=&#34;#JZ3-数组中重复的数字&#34; class=&#34;headerlink&#34; title=&#34;JZ3 数组中重复的数字&#34;&gt;&lt;/a&gt;JZ3 数组中重复的数字&lt;/h2&gt;&lt;h2 id=&#34;题目链接：&#34;&gt;&lt;a href=&#34;#题目链接：&#34; class=&#34;headerlink&#34; title=&#34;题目链接：&#34;&gt;&lt;/a&gt;题目链接：&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524?tpId=265&amp;tqId=39207&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=/exam/oj/ta?tpId=13&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=&#34;&gt;数组中重复的数字_牛客题霸_牛客网 (nowcoder.com)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整解答：&#34;&gt;&lt;a href=&#34;#完整解答：&#34; class=&#34;headerlink&#34; title=&#34;完整解答：&#34;&gt;&lt;/a&gt;完整解答：&lt;/h2&gt;&lt;p&gt;set::count()是C++ STL中的内置函数，它返回元素在集合中出现的次数。由于set容器仅包含唯一元素，因此只能返回1或0。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法：set_name.count(element)&lt;/li&gt;
&lt;li&gt;参数：该函数接受一个强制性参数element，该元素指定要返回其计数的元素。&lt;/li&gt;
&lt;li&gt;返回值：该函数返回1或0，因为该集合仅包含唯一元素。如果设置的容器中存在该值，则返回1。如果容器中不存在它，则返回0。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * @param numbers int整型vector &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * @return int整型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;duplicate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; numbers)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// write code here&lt;/span&gt;&lt;br&gt;        set&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; s;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;numbers.&lt;span class=&#34;hljs-built_in&#34;&gt;size&lt;/span&gt;();i++)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(s.&lt;span class=&#34;hljs-built_in&#34;&gt;count&lt;/span&gt;(numbers[i])&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) 				&lt;span class=&#34;hljs-comment&#34;&gt;//此元素重复，则返回&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; numbers[i];&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;                s.&lt;span class=&#34;hljs-built_in&#34;&gt;insert&lt;/span&gt;(numbers[i]);				&lt;span class=&#34;hljs-comment&#34;&gt;//不重复则加入集合&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料：&#34;&gt;&lt;a href=&#34;#参考资料：&#34; class=&#34;headerlink&#34; title=&#34;参考资料：&#34;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/cmehppc/article/details/121712019&#34;&gt;(64条消息) 【c++】set.count()用法_杳杳捞到月亮了吗的博客-CSDN博客_c++set count&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
