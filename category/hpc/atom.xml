<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xingyuanjie.top</id>
    <title>Amicoyuan • Posts by &#34;hpc&#34; category</title>
    <link href="https://xingyuanjie.top" />
    <updated>2023-07-15T02:02:32.000Z</updated>
    <category term="AVX" />
    <category term="Data Structure" />
    <category term="String" />
    <category term="Find" />
    <category term="STL" />
    <category term="C++" />
    <category term="LinkList" />
    <category term="团体程序设计天梯赛" />
    <category term="双向链表" />
    <category term="Set" />
    <category term="Sort" />
    <category term="Graph" />
    <category term="邻接表" />
    <category term="Vector" />
    <category term="Binary tree" />
    <category term="BFS" />
    <category term="模拟" />
    <category term="邻接矩阵" />
    <category term="DFS" />
    <category term="结构体" />
    <category term="贪心" />
    <category term="Double类型相等比较" />
    <category term="并查集" />
    <category term="Map" />
    <category term="Pair" />
    <category term="CMU" />
    <category term="CSAPP" />
    <category term="CUDA" />
    <category term="Linux" />
    <category term="Tensorflow" />
    <category term="Machine Learning" />
    <category term="MPI" />
    <category term="Matrix" />
    <category term="GEMM" />
    <category term="blas" />
    <category term="gemm" />
    <category term="gemv" />
    <category term="AVX2" />
    <category term="dgemm" />
    <category term="Cache" />
    <category term="Blocking" />
    <category term="C/C++" />
    <category term="spmv" />
    <category term="SUMMA" />
    <category term="Intel" />
    <category term="LeetCode" />
    <category term="双指针" />
    <category term="数组翻转" />
    <category term="哈希表" />
    <category term="前缀和" />
    <category term="Seasons" />
    <category term="Mirror" />
    <category term="牛客" />
    <category term="Numactl" />
    <category term="OpenMP" />
    <category term="register" />
    <category term="Slurm" />
    <category term="性能分析工具" />
    <category term="bool" />
    <category term="gcov" />
    <entry>
        <id>https://xingyuanjie.top/2023/07/15/gemm0011/</id>
        <title>SUMMA:Scalable Universal Matrix Multiplication Algorithm</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/07/15/gemm0011/"/>
        <content type="html">&lt;h2 id=&#34;论文阅读：SUMMA-Scalable-Universal-Matrix-Multiplication-Algorithm&#34;&gt;&lt;a href=&#34;#论文阅读：SUMMA-Scalable-Universal-Matrix-Multiplication-Algorithm&#34; class=&#34;headerlink&#34; title=&#34;论文阅读：SUMMA: Scalable Universal Matrix Multiplication Algorithm&#34;&gt;&lt;/a&gt;论文阅读：SUMMA: Scalable Universal Matrix Multiplication Algorithm&lt;/h2&gt;&lt;h2 id=&#34;论文链接&#34;&gt;&lt;a href=&#34;#论文链接&#34; class=&#34;headerlink&#34; title=&#34;论文链接&#34;&gt;&lt;/a&gt;论文链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/doi/book/10.5555/899248&#34;&gt;SUMMA: Scalable Universal Matrix Multiplication Algorithm | Guide books (acm.org)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;文章总结&#34;&gt;&lt;a href=&#34;#文章总结&#34; class=&#34;headerlink&#34; title=&#34;文章总结&#34;&gt;&lt;/a&gt;文章总结&lt;/h2&gt;</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="SUMMA" />
        <updated>2023-07-15T02:02:32.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/07/11/gemm0010/</id>
        <title>论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/07/11/gemm0010/"/>
        <content type="html">&lt;h2 id=&#34;论文阅读：Towards-Efficient-SpMV-on-Sunway-Manycore-Architectures&#34;&gt;&lt;a href=&#34;#论文阅读：Towards-Efficient-SpMV-on-Sunway-Manycore-Architectures&#34; class=&#34;headerlink&#34; title=&#34;论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures&#34;&gt;&lt;/a&gt;论文阅读：Towards Efficient SpMV on Sunway Manycore Architectures&lt;/h2&gt;&lt;h2 id=&#34;文章链接：&#34;&gt;&lt;a href=&#34;#文章链接：&#34; class=&#34;headerlink&#34; title=&#34;文章链接：&#34;&gt;&lt;/a&gt;文章链接：&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3205289.3205313?accessTab=true&#34;&gt;Towards Efficient SpMV on Sunway Manycore Architectures | Proceedings of the 2018 International Conference on Supercomputing (acm.org)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;文章总结&#34;&gt;&lt;a href=&#34;#文章总结&#34; class=&#34;headerlink&#34; title=&#34;文章总结&#34;&gt;&lt;/a&gt;文章总结&lt;/h2&gt;&lt;h3 id=&#34;dual-side-multi-level-partitioning-technique&#34;&gt;&lt;a href=&#34;#dual-side-multi-level-partitioning-technique&#34; class=&#34;headerlink&#34; title=&#34;dual-side multi-level partitioning technique&#34;&gt;&lt;/a&gt;dual-side multi-level partitioning technique&lt;/h3&gt;&lt;p&gt;三层分块：Block-&amp;gt;Tile-&amp;gt;Slice&lt;/p&gt;
&lt;p&gt;其中在Tile这一层会有空Tile块，不需要计算&lt;/p&gt;
&lt;p&gt;其中Slice这一层也会有空Slice切片，不需要计算&lt;/p&gt;
&lt;p&gt;最底层Slice切片是我们的计算核心&lt;/p&gt;
&lt;p&gt;多级队列：负载均衡—&amp;gt;The work sharing mechanism in the block and slice queuesguarantee the workload balance across fleets and cores.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/07/11/gemm0010/image-20230711215435026.png&#34; alt=&#34;image-20230711215435026&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;映射细节：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/07/11/gemm0010/image-20230711220304175.png&#34; alt=&#34;image-20230711220304175&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;计算核心处理逻辑&#34;&gt;&lt;a href=&#34;#计算核心处理逻辑&#34; class=&#34;headerlink&#34; title=&#34;计算核心处理逻辑&#34;&gt;&lt;/a&gt;计算核心处理逻辑&lt;/h3&gt;&lt;p&gt;一行8个核心：7个计算核心，1个I&amp;#x2F;O核心&lt;/p&gt;
&lt;p&gt;计算核心负责SPMV计算&lt;/p&gt;
&lt;p&gt;I&amp;#x2F;O核心负责将结果写回内存&lt;/p&gt;
&lt;p&gt;多个slice组合—&amp;gt;batch，方便DMA，并进行数据预取(单位batch)，注意计算核心slice依然没有改变&lt;/p&gt;
&lt;p&gt;利用向量寄存器，巧妙搭载msg&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/07/11/gemm0010/image-20230711221015472.png&#34; alt=&#34;image-20230711221015472&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;I-x2F-O核心的处理逻辑&#34;&gt;&lt;a href=&#34;#I-x2F-O核心的处理逻辑&#34; class=&#34;headerlink&#34; title=&#34;I&amp;#x2F;O核心的处理逻辑&#34;&gt;&lt;/a&gt;I&amp;#x2F;O核心的处理逻辑&lt;/h3&gt;&lt;p&gt;整个block计算完才写回，避免反复访存&lt;/p&gt;
&lt;p&gt;向量计算器meg-&amp;gt;reduce&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用神威RMA&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="blas" />
        <category term="spmv" />
        <updated>2023-07-11T13:47:35.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/07/03/gemm0009/</id>
        <title>论文阅读：稀疏矩阵向量乘法在申威众核架构上的性能优化</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/07/03/gemm0009/"/>
        <content type="html">&lt;h2 id=&#34;稀疏矩阵向量乘法在申威众核架构上的性能优化&#34;&gt;&lt;a href=&#34;#稀疏矩阵向量乘法在申威众核架构上的性能优化&#34; class=&#34;headerlink&#34; title=&#34;稀疏矩阵向量乘法在申威众核架构上的性能优化&#34;&gt;&lt;/a&gt;稀疏矩阵向量乘法在申威众核架构上的性能优化&lt;/h2&gt;&lt;h2 id=&#34;文章链接：&#34;&gt;&lt;a href=&#34;#文章链接：&#34; class=&#34;headerlink&#34; title=&#34;文章链接：&#34;&gt;&lt;/a&gt;文章链接：&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C44YLTlOAiTRKibYlV5Vjs7i8oRR1PAr7RxjuAJk4dHXos_BuYfGFXVp2oi-VeHUWWPMdimPFvuCr6UTXzh1QasE&amp;uniplatform=NZKPT&#34;&gt;稀疏矩阵向量乘法在申威众核架构上的性能优化 - 中国知网 (cnki.net)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;文章总结&#34;&gt;&lt;a href=&#34;#文章总结&#34; class=&#34;headerlink&#34; title=&#34;文章总结&#34;&gt;&lt;/a&gt;文章总结&lt;/h2&gt;&lt;h3 id=&#34;固定划分方法&#34;&gt;&lt;a href=&#34;#固定划分方法&#34; class=&#34;headerlink&#34; title=&#34;固定划分方法&#34;&gt;&lt;/a&gt;固定划分方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;所有计算完再写回&lt;/li&gt;
&lt;li&gt;子矩阵(任务)-&amp;gt;子矩阵小块(核心计算)&lt;/li&gt;
&lt;li&gt;将子矩阵小块中的非零元存储在一起，以适应申威处理器上的DMA操作。(Packing)&lt;/li&gt;
&lt;li&gt;核心：寄存器通信-&amp;gt;RMA&lt;/li&gt;
&lt;li&gt;根据LDM大小提前计算，充分利用LDM空间，换句话说就是保证计算所需都在LDM中&lt;/li&gt;
&lt;li&gt;加载冗余X，避免DMA隔断&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一维负载均衡划分方法&#34;&gt;&lt;a href=&#34;#一维负载均衡划分方法&#34; class=&#34;headerlink&#34; title=&#34;一维负载均衡划分方法&#34;&gt;&lt;/a&gt;一维负载均衡划分方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;尽量使从核处理非零元数量相当&lt;/li&gt;
&lt;li&gt;4个层次：原矩阵-&amp;gt;矩阵带-&amp;gt;子矩阵-&amp;gt;小块&lt;/li&gt;
&lt;li&gt;交替分配矩阵带给从核行&lt;/li&gt;
&lt;li&gt;核心计算依然是子矩阵小块，同固定划分方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二维负载均衡划分方法&#34;&gt;&lt;a href=&#34;#二维负载均衡划分方法&#34; class=&#34;headerlink&#34; title=&#34;二维负载均衡划分方法&#34;&gt;&lt;/a&gt;二维负载均衡划分方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;矩阵带分配采取贪心的方法，尽可能保证不同行之间的负载均衡&lt;/li&gt;
&lt;li&gt;解决一维负载均衡方法带来的细粒度同步问题&lt;/li&gt;
&lt;li&gt;非零元过少的矩阵带，交给一个从核完成，而不再均分给同行上的几个从核&lt;/li&gt;
&lt;li&gt;一维和二维主要解决预处理，计算还是固定划分中的子矩阵小块&lt;/li&gt;
&lt;li&gt;排序-&amp;gt;根据矩阵带非零元数量从大到小排序(逻辑排序)&lt;/li&gt;
&lt;li&gt;Select函数会在所有ROWS行的从核中，选择出目前非零元数量最少的一行，并将当前的矩阵带i分配给它&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;输入：tiles,nnz_tile，ROWS&lt;br&gt;输出：set&lt;br&gt;nnz_set&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;-0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to tiles - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&lt;br&gt;    Select id &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; nnz_set[id] is minimal   &lt;span class=&#34;hljs-comment&#34;&gt;//注意：这里是选从核行，不是矩阵带&lt;/span&gt;&lt;br&gt;    nnz_set[id] += nnz_tiles[i]&lt;br&gt;    set[id] =  set[id]U&amp;#123;i&amp;#125;   &lt;span class=&#34;hljs-comment&#34;&gt;//任务分配&lt;/span&gt;&lt;br&gt;end &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里注意，我们在固定划分那里解决了数据局部性差等问题，之后的一二维划分，都是在做任务分配，核心计算子矩阵小块一直未改变&lt;/p&gt;
</content>
        <category term="blas" />
        <category term="spmv" />
        <updated>2023-07-03T13:56:03.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/06/09/gemm0008/</id>
        <title>论文阅读：面向国产申威 26010 众核处理器的 SpMV 实现与优化</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/06/09/gemm0008/"/>
        <content type="html">&lt;h2 id=&#34;面向国产申威-26010-众核处理器的-SpMV-实现与优化&#34;&gt;&lt;a href=&#34;#面向国产申威-26010-众核处理器的-SpMV-实现与优化&#34; class=&#34;headerlink&#34; title=&#34;面向国产申威 26010 众核处理器的 SpMV 实现与优化&#34;&gt;&lt;/a&gt;面向国产申威 26010 众核处理器的 SpMV 实现与优化&lt;/h2&gt;&lt;h2 id=&#34;文章链接：&#34;&gt;&lt;a href=&#34;#文章链接：&#34; class=&#34;headerlink&#34; title=&#34;文章链接：&#34;&gt;&lt;/a&gt;文章链接：&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C44YLTlOAiTRKibYlV5Vjs7iLik5jEcCI09uHa3oBxtWoDjpNvZMhBwTwYhU5_aacU5_o2Scyx5dsHMxE0wqndQa&amp;uniplatform=NZKPT&#34;&gt;面向国产申威26010众核处理器的SpMV实现与优化 - 中国知网 (cnki.net)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;文章总结&#34;&gt;&lt;a href=&#34;#文章总结&#34; class=&#34;headerlink&#34; title=&#34;文章总结&#34;&gt;&lt;/a&gt;文章总结&lt;/h2&gt;&lt;p&gt;存储格式：CSR&lt;/p&gt;
&lt;p&gt;数据名称定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;col:非零元的列号&lt;/li&gt;
&lt;li&gt;data:非零元数值，连续存放&lt;/li&gt;
&lt;li&gt;row_off:x数组，每行第一个元素前面的非零元素，最后一个rowoff代表总的非零元素&lt;/li&gt;
&lt;li&gt;vec:计算向量&lt;/li&gt;
&lt;li&gt;y:结果向量&lt;/li&gt;
&lt;li&gt;rows:行号&lt;/li&gt;
&lt;li&gt;srow:为当前申威处理器一个从核的 LDM 可以容纳的最多稀疏行大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;X动静态buffer&#34;&gt;&lt;a href=&#34;#X动静态buffer&#34; class=&#34;headerlink&#34; title=&#34;X动静态buffer&#34;&gt;&lt;/a&gt;X动静态buffer&lt;/h3&gt;&lt;p&gt;x静态buffer，初始化后一直不改变。(论文中有两种初始化方法)&lt;/p&gt;
&lt;p&gt;x动态buffer，未命中，则用dma更新x动态buffer&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//slave.c&lt;/span&gt;&lt;br&gt;LDM-&amp;gt;malloc   x_sbuffer   &lt;span class=&#34;hljs-comment&#34;&gt;//x静态buffer&lt;/span&gt;&lt;br&gt;LDM-&amp;gt;malloc   x_dbuffer   &lt;span class=&#34;hljs-comment&#34;&gt;//x动态buffer&lt;/span&gt;&lt;br&gt;sstart,send,dstart,&lt;span class=&#34;hljs-function&#34;&gt;dend&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;dma&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vec-&amp;gt;x_sbuffer,sstart,send)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;dma&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vec-&amp;gt;x_dbuffer,dstart,dend)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; srow&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; row&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;        &lt;span class=&#34;hljs-title&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(in x_sbuffer)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;            cal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(in x_dbuffer)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;            cal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;            &lt;span class=&#34;hljs-title&#34;&gt;update_dma&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(vec-&amp;gt;x_dbuffer,dstart,dend)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;            cal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;     store&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;负载均衡&#34;&gt;&lt;a href=&#34;#负载均衡&#34; class=&#34;headerlink&#34; title=&#34;负载均衡&#34;&gt;&lt;/a&gt;负载均衡&lt;/h3&gt;&lt;p&gt;动静态划分&lt;/p&gt;
&lt;p&gt;第一轮静态：每个从核分配相同的任务量即srow&lt;/p&gt;
&lt;p&gt;后续采用动态：哪个从核先计算完，就先从任务池里面拿新的任务&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//slave.c&lt;/span&gt;&lt;br&gt;eg:&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;个从核&lt;br&gt;task_num &lt;span class=&#34;hljs-comment&#34;&gt;//任务数&lt;/span&gt;&lt;br&gt;now_addr &lt;span class=&#34;hljs-comment&#34;&gt;//当前任务计算到哪里了&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//第一轮  每个从核执行相同的任务量即srow&lt;/span&gt;&lt;br&gt;    &lt;br&gt;cal srow&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//其余任务保存到任务池，用锁保护，实现互斥操作&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//任务池，当task_num为0时计算完毕&lt;/span&gt;&lt;br&gt;mutex = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;P&lt;/span&gt;(mutex)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//互斥区&lt;/span&gt;&lt;br&gt;task_num&lt;br&gt;now_addr&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;V&lt;/span&gt;(mutex)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取now_addr&lt;/span&gt;&lt;br&gt;cal  srow&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//随后 继续loop，直到task_num为0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="blas" />
        <category term="spmv" />
        <updated>2023-06-08T16:20:37.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/06/07/gemm0007/</id>
        <title>Packing into contiguous memory</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/06/07/gemm0007/"/>
        <content type="html">&lt;h2 id=&#34;Packing-into-contiguous-memory&#34;&gt;&lt;a href=&#34;#Packing-into-contiguous-memory&#34; class=&#34;headerlink&#34; title=&#34;Packing into contiguous memory&#34;&gt;&lt;/a&gt;Packing into contiguous memory&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先，我们打包A块，这样我们就可以连续地穿过它(march through it)。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_12&#34;&gt;Optimization_4x4_12 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_13&#34;&gt;Optimization_4x4_13 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这将带来惊人的性能提升:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/06/07/gemm0007/compare_MMult0_MMult-4x4-13.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/06/07/gemm0007/compare_MMult-4x4-11_MMult-4x4-13.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最后，我们打包B块，以便连续地遍历它。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14&#34;&gt;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_14&#34;&gt;Optimization_4x4_14 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们现在达到了处理器90%的涡轮增压峰值!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/06/07/gemm0007/compare_MMult0_MMult-4x4-15.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/06/07/gemm0007/compare_MMult-4x4-13_MMult-4x4-15.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Optimization-4x4-12&#34;&gt;&lt;a href=&#34;#Optimization-4x4-12&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_12&#34;&gt;&lt;/a&gt;Optimization_4x4_12&lt;/h2&gt;&lt;p&gt;在调用AddDot4x4之前，我们现在打包到4xk的A块。我们看到性能下降。如果检查内部内核，就会注意到每个4xk的A块都被重复打包，每次执行外部循环一次。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Block sizes */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; mc 256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; kc 128&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; min( i, j ) ( (i)&amp;lt;(j) ? (i): (j) )&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, p, pb, ib;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* This time, we compute a mc x n block of C by a call to the InnerKernel */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p+=kc )&amp;#123;&lt;br&gt;    pb = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( k-p, kc );&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=mc )&amp;#123;&lt;br&gt;      ib = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( m-i, mc );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;InnerKernel&lt;/span&gt;( ib, n, pb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,p ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;(p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;InnerKernel&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    packedA[ m * k ];&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;PackMatrixA&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;packedA[ i*k ] );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;packedA[ i*k ], &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a_to )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;k; j++)&amp;#123;  &lt;span class=&#34;hljs-comment&#34;&gt;/* loop over columns of A */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;      *a_ij_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, j );&lt;br&gt;&lt;br&gt;    *a_to++ = *a_ij_pntr;&lt;br&gt;    *a_to++ = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    *a_to++ = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;    *a_to++ = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;mmintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;xmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;pmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;emmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  __m128d v;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     And now we use vector registers and instructions */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,&lt;br&gt;    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,&lt;br&gt;    a_0p_a_1p_vreg,&lt;br&gt;    a_2p_a_3p_vreg,&lt;br&gt;    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; &lt;br&gt;    &lt;br&gt;  b_p0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  b_p1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  b_p2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  b_p3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_c_10_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_01_c_11_vreg.v = _mm_setzero_pd();&lt;br&gt;  c_02_c_12_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_03_c_13_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_20_c_30_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_21_c_31_vreg.v = _mm_setzero_pd();  &lt;br&gt;  c_22_c_32_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_23_c_33_vreg.v = _mm_setzero_pd(); &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_a_1p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) );&lt;br&gt;    a_2p_a_3p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) );&lt;br&gt;&lt;br&gt;    b_p0_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p0_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p1_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p1_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p2_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p2_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p3_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p3_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row and second rows */&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third and fourth rows */&lt;/span&gt;&lt;br&gt;    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-4x4-13&#34;&gt;&lt;a href=&#34;#Optimization-4x4-13&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_13&#34;&gt;&lt;/a&gt;Optimization_4x4_13&lt;/h2&gt;&lt;p&gt;这个版本保存了A的打包块，以便在InnerKernel的外部循环的第一次迭代之后，使用保存的版本。性能的提升是显而易见的!与上一个版本相比，唯一的变化是增加了if (j&amp;#x3D;&amp;#x3D; 0)。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs C++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Block sizes */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; mc 256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; kc 128&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; min( i, j ) ( (i)&amp;lt;(j) ? (i): (j) )&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, p, pb, ib;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* This time, we compute a mc x n block of C by a call to the InnerKernel */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p+=kc )&amp;#123;&lt;br&gt;    pb = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( k-p, kc );&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=mc )&amp;#123;&lt;br&gt;      ib = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( m-i, mc );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;InnerKernel&lt;/span&gt;( ib, n, pb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,p ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;(p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;InnerKernel&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    packedA[ m * k ];&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( j == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) &lt;span class=&#34;hljs-built_in&#34;&gt;PackMatrixA&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;packedA[ i*k ] );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;packedA[ i*k ], &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a_to )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;k; j++)&amp;#123;  &lt;span class=&#34;hljs-comment&#34;&gt;/* loop over columns of A */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;      *a_ij_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, j );&lt;br&gt;&lt;br&gt;    *a_to++ = *a_ij_pntr;&lt;br&gt;    *a_to++ = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    *a_to++ = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;    *a_to++ = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;mmintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;xmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;pmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;emmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  __m128d v;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     And now we use vector registers and instructions */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,&lt;br&gt;    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,&lt;br&gt;    a_0p_a_1p_vreg,&lt;br&gt;    a_2p_a_3p_vreg,&lt;br&gt;    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; &lt;br&gt;    &lt;br&gt;  b_p0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  b_p1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  b_p2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  b_p3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_c_10_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_01_c_11_vreg.v = _mm_setzero_pd();&lt;br&gt;  c_02_c_12_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_03_c_13_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_20_c_30_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_21_c_31_vreg.v = _mm_setzero_pd();  &lt;br&gt;  c_22_c_32_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_23_c_33_vreg.v = _mm_setzero_pd(); &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_a_1p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) a );&lt;br&gt;    a_2p_a_3p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) ( a+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;    a += &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    b_p0_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p0_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p1_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p1_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p2_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p2_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p3_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p3_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row and second rows */&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third and fourth rows */&lt;/span&gt;&lt;br&gt;    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-4x4-14&#34;&gt;&lt;a href=&#34;#Optimization-4x4-14&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_14&#34;&gt;&lt;/a&gt;Optimization_4x4_14&lt;/h2&gt;&lt;p&gt;我们现在打包b的kx4块，注意，在这个版本中，面板是重复打包的，这会对性能产生不利影响。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Block sizes */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; mc 256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; kc 128&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; min( i, j ) ( (i)&amp;lt;(j) ? (i): (j) )&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixB&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;InnerKernel&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, p, pb, ib;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* This time, we compute a mc x n block of C by a call to the InnerKernel */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p+=kc )&amp;#123;&lt;br&gt;    pb = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( k-p, kc );&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=mc )&amp;#123;&lt;br&gt;      ib = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( m-i, mc );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;InnerKernel&lt;/span&gt;( ib, n, pb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,p ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;(p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldc, i==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;InnerKernel&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; first_time )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    packedA[ m * k ], packedB[ k*n ];&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;PackMatrixB&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, j ), ldb, &amp;amp;packedB[ j*k ] );&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( j == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) &lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;PackMatrixA&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;packedA[ i*k ] );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;packedA[ i*k ], &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &amp;amp;packedB[ j*k ], k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a_to )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;k; j++)&amp;#123;  &lt;span class=&#34;hljs-comment&#34;&gt;/* loop over columns of A */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;      *a_ij_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, j );&lt;br&gt;&lt;br&gt;    *a_to     = *a_ij_pntr;&lt;br&gt;    *(a_to+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    *(a_to+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;    *(a_to+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    a_to += &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixB&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b_to )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    *b_i0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), *b_i1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ),&lt;br&gt;    *b_i2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ), *b_i3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;k; i++)&amp;#123;  &lt;span class=&#34;hljs-comment&#34;&gt;/* loop over rows of B */&lt;/span&gt;&lt;br&gt;    *b_to++ = *b_i0_pntr++;&lt;br&gt;    *b_to++ = *b_i1_pntr++;&lt;br&gt;    *b_to++ = *b_i2_pntr++;&lt;br&gt;    *b_to++ = *b_i3_pntr++;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;mmintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;xmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;pmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;emmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  __m128d v;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     And now we use vector registers and instructions */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,&lt;br&gt;    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,&lt;br&gt;    a_0p_a_1p_vreg,&lt;br&gt;    a_2p_a_3p_vreg,&lt;br&gt;    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; &lt;br&gt;&lt;br&gt;  c_00_c_10_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_01_c_11_vreg.v = _mm_setzero_pd();&lt;br&gt;  c_02_c_12_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_03_c_13_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_20_c_30_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_21_c_31_vreg.v = _mm_setzero_pd();  &lt;br&gt;  c_22_c_32_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_23_c_33_vreg.v = _mm_setzero_pd(); &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_a_1p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) a );&lt;br&gt;    a_2p_a_3p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) ( a+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;    a += &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    b_p0_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b );       &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p1_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) (b+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p2_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) (b+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p3_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) (b+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    b += &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row and second rows */&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third and fourth rows */&lt;/span&gt;&lt;br&gt;    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-4x4-15&#34;&gt;&lt;a href=&#34;#Optimization-4x4-15&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_15&#34;&gt;&lt;/a&gt;Optimization_4x4_15&lt;/h2&gt;&lt;p&gt;并且，我们再次添加了一些代码，这样我们就可以避免重新打包b的kx4块。现在性能令人印象深刻!&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Block sizes */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; mc 256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; kc 128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; nb 1000&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; min( i, j ) ( (i)&amp;lt;(j) ? (i): (j) )&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixB&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;InnerKernel&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, p, pb, ib;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* This time, we compute a mc x n block of C by a call to the InnerKernel */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p+=kc )&amp;#123;&lt;br&gt;    pb = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( k-p, kc );&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=mc )&amp;#123;&lt;br&gt;      ib = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( m-i, mc );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;InnerKernel&lt;/span&gt;( ib, n, pb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,p ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;(p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldc, i==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;InnerKernel&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; first_time )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    packedA[ m * k ];&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    packedB[ kc*nb ];    &lt;span class=&#34;hljs-comment&#34;&gt;/* Note: using a static buffer is not thread safe... */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( first_time )&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;PackMatrixB&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, j ), ldb, &amp;amp;packedB[ j*k ] );&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( j == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) &lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;PackMatrixA&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;packedA[ i*k ] );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;packedA[ i*k ], &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &amp;amp;packedB[ j*k ], k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a_to )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;k; j++)&amp;#123;  &lt;span class=&#34;hljs-comment&#34;&gt;/* loop over columns of A */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;      *a_ij_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, j );&lt;br&gt;&lt;br&gt;    *a_to     = *a_ij_pntr;&lt;br&gt;    *(a_to+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    *(a_to+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;    *(a_to+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) = *(a_ij_pntr+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    a_to += &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PackMatrixB&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b_to )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    *b_i0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), *b_i1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ),&lt;br&gt;    *b_i2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ), *b_i3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;k; i++)&amp;#123;  &lt;span class=&#34;hljs-comment&#34;&gt;/* loop over rows of B */&lt;/span&gt;&lt;br&gt;    *b_to++ = *b_i0_pntr++;&lt;br&gt;    *b_to++ = *b_i1_pntr++;&lt;br&gt;    *b_to++ = *b_i2_pntr++;&lt;br&gt;    *b_to++ = *b_i3_pntr++;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;mmintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;xmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;pmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;emmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  __m128d v;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     And now we use vector registers and instructions */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,&lt;br&gt;    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,&lt;br&gt;    a_0p_a_1p_vreg,&lt;br&gt;    a_2p_a_3p_vreg,&lt;br&gt;    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; &lt;br&gt;&lt;br&gt;  c_00_c_10_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_01_c_11_vreg.v = _mm_setzero_pd();&lt;br&gt;  c_02_c_12_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_03_c_13_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_20_c_30_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_21_c_31_vreg.v = _mm_setzero_pd();  &lt;br&gt;  c_22_c_32_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_23_c_33_vreg.v = _mm_setzero_pd(); &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_a_1p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) a );&lt;br&gt;    a_2p_a_3p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) ( a+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;    a += &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    b_p0_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b );       &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p1_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) (b+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p2_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) (b+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p3_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) (b+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    b += &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row and second rows */&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third and fourth rows */&lt;/span&gt;&lt;br&gt;    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="gemv" />
        <updated>2023-06-07T05:47:39.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/06/07/gemm0006/</id>
        <title>Blocking to maintain performance</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/06/07/gemm0006/"/>
        <content type="html">&lt;h2 id=&#34;Blocking-to-maintain-performance&#34;&gt;&lt;a href=&#34;#Blocking-to-maintain-performance&#34; class=&#34;headerlink&#34; title=&#34;Blocking to maintain performance&#34;&gt;&lt;/a&gt;Blocking to maintain performance&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为了保持较小问题规模的性能，我们分块矩阵C(以及相应的A和B):&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_11&#34;&gt;Optimization_4x4_11 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，性能得到了保持:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/06/07/gemm0006/compare_MMult0_MMult-4x4-11.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/06/07/gemm0006/compare_MMult-4x4-10_MMult-4x4-11.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Optimization-4x4-11&#34;&gt;&lt;a href=&#34;#Optimization-4x4-11&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_11&#34;&gt;&lt;/a&gt;Optimization_4x4_11&lt;/h2&gt;&lt;p&gt;我们注意到，对于迄今为止的所有优化，当涉及的矩阵比L2缓存所能容纳的矩阵大得多时，性能会大幅下降。在这个优化中，我们创建了一个额外的分块级别来克服这个问题。我们现在有一个主例程，它调用GotoBLAS和BLIS使用的内部内核，然后AddDot4x4例程是BLIS使用的微内核。&lt;/p&gt;
&lt;p&gt;这一步主要是为了分块，把原来的MY_MMult变成了InnerKernel，而现在的MY_MMult作用就是为了分块。分块大小通过宏定义给出。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Block sizes */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; mc 256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; kc 128&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; min( i, j ) ( (i)&amp;lt;(j) ? (i): (j) )&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j, p, pb, ib;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* This time, we compute a mc x n block of C by a call to the InnerKernel */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p+=kc )&amp;#123;&lt;br&gt;    pb = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( k-p, kc );&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=mc )&amp;#123;&lt;br&gt;      ib = &lt;span class=&#34;hljs-built_in&#34;&gt;min&lt;/span&gt;( m-i, mc );&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;InnerKernel&lt;/span&gt;( ib, n, pb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,p ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;(p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;InnerKernel&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                       &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;mmintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;xmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;pmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;emmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  __m128d v;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     And now we use vector registers and instructions */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,&lt;br&gt;    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,&lt;br&gt;    a_0p_a_1p_vreg,&lt;br&gt;    a_2p_a_3p_vreg,&lt;br&gt;    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; &lt;br&gt;    &lt;br&gt;  b_p0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  b_p1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  b_p2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  b_p3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_c_10_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_01_c_11_vreg.v = _mm_setzero_pd();&lt;br&gt;  c_02_c_12_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_03_c_13_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_20_c_30_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_21_c_31_vreg.v = _mm_setzero_pd();  &lt;br&gt;  c_22_c_32_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_23_c_33_vreg.v = _mm_setzero_pd(); &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_a_1p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) );&lt;br&gt;    a_2p_a_3p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) );&lt;br&gt;&lt;br&gt;    b_p0_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p0_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p1_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p1_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p2_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p2_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p3_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p3_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row and second rows */&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third and fourth rows */&lt;/span&gt;&lt;br&gt;    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="gemv" />
        <updated>2023-06-07T05:41:06.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/06/07/gemm0005/</id>
        <title>Further optimizing</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/06/07/gemm0005/"/>
        <content type="html">&lt;h2 id=&#34;Further-optimizing&#34;&gt;&lt;a href=&#34;#Further-optimizing&#34; class=&#34;headerlink&#34; title=&#34;Further optimizing&#34;&gt;&lt;/a&gt;Further optimizing&lt;/h2&gt;&lt;p&gt;现在我们开始以不同的方式优化1x4的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们在寄存器中存储一行k × 4矩阵B&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_8&#34;&gt;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，我们现在使用的常规寄存器比物理上可用的寄存器多得多……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们重新安排计算，以便一次计算两行4x4的C块。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_9&#34;&gt;Optimization_4x4_9 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我们使用向量寄存器和向量运算。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_10&#34;&gt;Optimization_4x4_10 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We notice a considerable performance boost:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/06/07/gemm0005/compare_MMult0_MMult-4x4-10.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/06/07/gemm0005/compare_MMult-1x4-9_MMult-4x4-10.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;不过，还有很大的改进空间。&lt;/p&gt;
&lt;h2 id=&#34;Optimization-4x4-8&#34;&gt;&lt;a href=&#34;#Optimization-4x4-8&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_8&#34;&gt;&lt;/a&gt;Optimization_4x4_8&lt;/h2&gt;&lt;p&gt;现在我们使用寄存器来存储B当前行的元素。(注意，对于一次计算C四个元素的情况，我们没有这样做。)性能实际上略有下降。但是这个步骤支持进一步的优化。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we use registers for elements in the current row&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     of B as well */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold contributions to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */&lt;/span&gt;&lt;br&gt;       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  &lt;br&gt;       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  &lt;br&gt;       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  &lt;br&gt;       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 0, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 1, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 2, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 3, p ) */&lt;/span&gt;&lt;br&gt;       a_0p_reg,&lt;br&gt;       a_1p_reg,&lt;br&gt;       a_2p_reg,&lt;br&gt;       a_3p_reg,&lt;br&gt;       b_p0_reg,&lt;br&gt;       b_p1_reg,&lt;br&gt;       b_p2_reg,&lt;br&gt;       b_p3_reg;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; &lt;br&gt;    &lt;br&gt;  b_p0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  b_p1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  b_p2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  b_p3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_01_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_02_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_03_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_10_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_11_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_12_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_13_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_20_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_21_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_22_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_23_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_30_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_31_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_32_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_33_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p );&lt;br&gt;    a_1p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p );&lt;br&gt;    a_2p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p );&lt;br&gt;    a_3p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p );&lt;br&gt;&lt;br&gt;    b_p0_reg = *b_p0_pntr++;&lt;br&gt;    b_p1_reg = *b_p1_pntr++;&lt;br&gt;    b_p2_reg = *b_p2_pntr++;&lt;br&gt;    b_p3_reg = *b_p3_pntr++;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row */&lt;/span&gt;&lt;br&gt;    c_00_reg += a_0p_reg * b_p0_reg;&lt;br&gt;    c_01_reg += a_0p_reg * b_p1_reg;&lt;br&gt;    c_02_reg += a_0p_reg * b_p2_reg;&lt;br&gt;    c_03_reg += a_0p_reg * b_p3_reg;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Second row */&lt;/span&gt;&lt;br&gt;    c_10_reg += a_1p_reg * b_p0_reg;&lt;br&gt;    c_11_reg += a_1p_reg * b_p1_reg;&lt;br&gt;    c_12_reg += a_1p_reg * b_p2_reg;&lt;br&gt;    c_13_reg += a_1p_reg * b_p3_reg;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third row */&lt;/span&gt;&lt;br&gt;    c_20_reg += a_2p_reg * b_p0_reg;&lt;br&gt;    c_21_reg += a_2p_reg * b_p1_reg;&lt;br&gt;    c_22_reg += a_2p_reg * b_p2_reg;&lt;br&gt;    c_23_reg += a_2p_reg * b_p3_reg;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Four row */&lt;/span&gt;&lt;br&gt;    c_30_reg += a_3p_reg * b_p0_reg;&lt;br&gt;    c_31_reg += a_3p_reg * b_p1_reg;&lt;br&gt;    c_32_reg += a_3p_reg * b_p2_reg;&lt;br&gt;    c_33_reg += a_3p_reg * b_p3_reg;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_10_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_11_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_12_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_13_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_30_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_31_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_32_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_33_reg;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-4x4-9&#34;&gt;&lt;a href=&#34;#Optimization-4x4-9&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_9&#34;&gt;&lt;/a&gt;Optimization_4x4_9&lt;/h2&gt;&lt;p&gt;从4x4_8到4x4_9是一个微妙的变化:我们不是一次一行地更新4x4块C的行，而是一次计算两行。这为我们使用向量操作做好了准备，我们用向量操作更新对C(0,j)和C(1,j) (j &amp;#x3D;0，…，3)。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     A simple rearrangement to prepare for the use of vector registers */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold contributions to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */&lt;/span&gt;&lt;br&gt;       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  &lt;br&gt;       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  &lt;br&gt;       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  &lt;br&gt;       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 0, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 1, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 2, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 3, p ) */&lt;/span&gt;&lt;br&gt;       a_0p_reg,&lt;br&gt;       a_1p_reg,&lt;br&gt;       a_2p_reg,&lt;br&gt;       a_3p_reg,&lt;br&gt;       b_p0_reg,&lt;br&gt;       b_p1_reg,&lt;br&gt;       b_p2_reg,&lt;br&gt;       b_p3_reg;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; &lt;br&gt;    &lt;br&gt;  b_p0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  b_p1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  b_p2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  b_p3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_01_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_02_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_03_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_10_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_11_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_12_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_13_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_20_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_21_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_22_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_23_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_30_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_31_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_32_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_33_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p );&lt;br&gt;    a_1p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p );&lt;br&gt;    a_2p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p );&lt;br&gt;    a_3p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p );&lt;br&gt;&lt;br&gt;    b_p0_reg = *b_p0_pntr++;&lt;br&gt;    b_p1_reg = *b_p1_pntr++;&lt;br&gt;    b_p2_reg = *b_p2_pntr++;&lt;br&gt;    b_p3_reg = *b_p3_pntr++;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row and second rows */&lt;/span&gt;&lt;br&gt;    c_00_reg += a_0p_reg * b_p0_reg;&lt;br&gt;    c_10_reg += a_1p_reg * b_p0_reg;&lt;br&gt;&lt;br&gt;    c_01_reg += a_0p_reg * b_p1_reg;&lt;br&gt;    c_11_reg += a_1p_reg * b_p1_reg;&lt;br&gt;&lt;br&gt;    c_02_reg += a_0p_reg * b_p2_reg;&lt;br&gt;    c_12_reg += a_1p_reg * b_p2_reg;&lt;br&gt;&lt;br&gt;    c_03_reg += a_0p_reg * b_p3_reg;&lt;br&gt;    c_13_reg += a_1p_reg * b_p3_reg;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third and fourth rows */&lt;/span&gt;&lt;br&gt;    c_20_reg += a_2p_reg * b_p0_reg;&lt;br&gt;    c_30_reg += a_3p_reg * b_p0_reg;&lt;br&gt;&lt;br&gt;    c_21_reg += a_2p_reg * b_p1_reg;&lt;br&gt;    c_31_reg += a_3p_reg * b_p1_reg;&lt;br&gt;&lt;br&gt;    c_22_reg += a_2p_reg * b_p2_reg;&lt;br&gt;    c_32_reg += a_3p_reg * b_p2_reg;&lt;br&gt;&lt;br&gt;    c_23_reg += a_2p_reg * b_p3_reg;&lt;br&gt;    c_33_reg += a_3p_reg * b_p3_reg;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_10_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_11_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_12_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_13_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_30_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_31_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_32_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_33_reg;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-4x4-10&#34;&gt;&lt;a href=&#34;#Optimization-4x4-10&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_10&#34;&gt;&lt;/a&gt;Optimization_4x4_10&lt;/h2&gt;&lt;p&gt;在这里，我们开始使用向量寄存器和向量操作。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;mmintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;xmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;pmmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;emmintrin.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// SSE3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  __m128d v;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; d[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     And now we use vector registers and instructions */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;v2df_t&lt;/span&gt;&lt;br&gt;    c_00_c_10_vreg,    c_01_c_11_vreg,    c_02_c_12_vreg,    c_03_c_13_vreg,&lt;br&gt;    c_20_c_30_vreg,    c_21_c_31_vreg,    c_22_c_32_vreg,    c_23_c_33_vreg,&lt;br&gt;    a_0p_a_1p_vreg,&lt;br&gt;    a_2p_a_3p_vreg,&lt;br&gt;    b_p0_vreg, b_p1_vreg, b_p2_vreg, b_p3_vreg; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; &lt;br&gt;    &lt;br&gt;  b_p0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  b_p1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  b_p2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  b_p3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_c_10_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_01_c_11_vreg.v = _mm_setzero_pd();&lt;br&gt;  c_02_c_12_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_03_c_13_vreg.v = _mm_setzero_pd(); &lt;br&gt;  c_20_c_30_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_21_c_31_vreg.v = _mm_setzero_pd();  &lt;br&gt;  c_22_c_32_vreg.v = _mm_setzero_pd();   &lt;br&gt;  c_23_c_33_vreg.v = _mm_setzero_pd(); &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_a_1p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) );&lt;br&gt;    a_2p_a_3p_vreg.v = _mm_load_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) );&lt;br&gt;&lt;br&gt;    b_p0_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p0_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p1_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p1_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p2_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p2_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;    b_p3_vreg.v = _mm_loaddup_pd( (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *) b_p3_pntr++ );   &lt;span class=&#34;hljs-comment&#34;&gt;/* load and duplicate */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row and second rows *  向量化，一次计算两个double/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    c_00_c_10_vreg.v += a_0p_a_1p_vreg.v * b_p0_vreg.v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    c_01_c_11_vreg.v += a_0p_a_1p_vreg.v * b_p1_vreg.v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    c_02_c_12_vreg.v += a_0p_a_1p_vreg.v * b_p2_vreg.v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    c_03_c_13_vreg.v += a_0p_a_1p_vreg.v * b_p3_vreg.v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    /* Third and fourth rows */&lt;/span&gt;&lt;br&gt;    c_20_c_30_vreg.v += a_2p_a_3p_vreg.v * b_p0_vreg.v;&lt;br&gt;    c_21_c_31_vreg.v += a_2p_a_3p_vreg.v * b_p1_vreg.v;&lt;br&gt;    c_22_c_32_vreg.v += a_2p_a_3p_vreg.v * b_p2_vreg.v;&lt;br&gt;    c_23_c_33_vreg.v += a_2p_a_3p_vreg.v * b_p3_vreg.v;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_c_10_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_c_11_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_c_12_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_c_13_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_c_30_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_c_31_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_c_32_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_c_33_vreg.d[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="gemv" />
        <updated>2023-06-07T05:18:10.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/05/31/gemm0004/</id>
        <title>Repeating the same optimizations</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/05/31/gemm0004/"/>
        <content type="html">&lt;h2 id=&#34;Repeating-the-same-optimizations&#34;&gt;&lt;a href=&#34;#Repeating-the-same-optimizations&#34; class=&#34;headerlink&#34; title=&#34;Repeating the same optimizations&#34;&gt;&lt;/a&gt;Repeating the same optimizations&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们在AddDot4x4子程序中一次计算4个C元素，该子程序一次执行16个乘积:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_3&#34;&gt;Optimization_4x4_3 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;现在我们内联16个独立的内积，并将循环融合为一个，从而在一个循环中同时计算16个乘积:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_4&#34;&gt;Optimization_4x4_4 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_5&#34;&gt;Optimization_4x4_5 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这一点上，我们再次开始看到一些性能改进:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/05/31/gemm0004/compare_MMult0_MMult-4x4-5.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/05/31/gemm0004/compare_MMult-1x4-5_MMult-4x4-5.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们将C的元素累加到寄存器中，并使用寄存器存储a的元素&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_6&#34;&gt;Optimization_4x4_6 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我们使用指针来定位B中的元素&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_4x4_7&#34;&gt;Optimization_4x4_7 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Optimization-4x4-3&#34;&gt;&lt;a href=&#34;#Optimization-4x4-3&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_3&#34;&gt;&lt;/a&gt;Optimization_4x4_3&lt;/h1&gt;&lt;p&gt;对循环变量i进行展开。由原来AddDot1x4变为AddDot4x4，一次计算16个乘积。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C */&lt;/span&gt; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* First row */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) );&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Second row */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) );&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Third row */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) );&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Four row */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) );&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macro to let X( i ) equal the ith element of x */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; X(i) x[ (i)*incx ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *x, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; incx,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *y, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *gamma )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* compute gamma := x&amp;#x27; * y + gamma with vectors x and y of length n.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  */&lt;/span&gt;&lt;br&gt; &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    *gamma += &lt;span class=&#34;hljs-built_in&#34;&gt;X&lt;/span&gt;( p ) * y[ p ];     &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;Optimization-4x4-4&#34;&gt;&lt;a href=&#34;#Optimization-4x4-4&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_4&#34;&gt;&lt;/a&gt;Optimization_4x4_4&lt;/h1&gt;&lt;p&gt;把AddDot计算kernel合并到AddDot4x4里面。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we &amp;quot;inline&amp;quot; AddDot */&lt;/span&gt; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* First row 第一行*/&lt;/span&gt;   &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 0 ), &amp;amp;C( 0, 0 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 1 ), &amp;amp;C( 0, 1 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 2 ), &amp;amp;C( 0, 2 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 3 ), &amp;amp;C( 0, 3 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Second row 第二行*/&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 1, 0 ), lda, &amp;amp;B( 0, 0 ), &amp;amp;C( 1, 0 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 1, 0 ), lda, &amp;amp;B( 0, 1 ), &amp;amp;C( 1, 1 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 1, 0 ), lda, &amp;amp;B( 0, 2 ), &amp;amp;C( 1, 2 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 1, 0 ), lda, &amp;amp;B( 0, 3 ), &amp;amp;C( 1, 3 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Third row 第三行*/&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 2, 0 ), lda, &amp;amp;B( 0, 0 ), &amp;amp;C( 2, 0 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 2, 0 ), lda, &amp;amp;B( 0, 1 ), &amp;amp;C( 2, 1 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 2, 0 ), lda, &amp;amp;B( 0, 2 ), &amp;amp;C( 2, 2 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 2, 0 ), lda, &amp;amp;B( 0, 3 ), &amp;amp;C( 2, 3 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Four row 第四行*/&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 3, 0 ), lda, &amp;amp;B( 0, 0 ), &amp;amp;C( 3, 0 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 3, 0 ), lda, &amp;amp;B( 0, 1 ), &amp;amp;C( 3, 1 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 3, 0 ), lda, &amp;amp;B( 0, 2 ), &amp;amp;C( 3, 2 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 3, 0 ), lda, &amp;amp;B( 0, 3 ), &amp;amp;C( 3, 3 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;Optimization-4x4-5&#34;&gt;&lt;a href=&#34;#Optimization-4x4-5&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_5&#34;&gt;&lt;/a&gt;Optimization_4x4_5&lt;/h1&gt;&lt;p&gt;合并16个for循环。&lt;/p&gt;
&lt;p&gt;现在，当矩阵变大时，我们看到了性能上的好处，因为数据在被放入寄存器后会得到更多的重用。&lt;/p&gt;
&lt;p&gt;以前是：1x4_5(一次计算C的4个元素)现在是：4x4_5(一次计算C的16个元素)。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we merge each set of four loops, computing four&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     inner products simultaneously. */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Second row */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third row */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Fourth row */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;Optimization-4x4-6&#34;&gt;&lt;a href=&#34;#Optimization-4x4-6&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_6&#34;&gt;&lt;/a&gt;Optimization_4x4_6&lt;/h1&gt;&lt;p&gt;矩阵C和A采用寄存器来存。&lt;/p&gt;
&lt;p&gt;我们为C的4x4块和A的当前4x1列的元素使用(常规)寄存器，这一事实使性能受益。请注意，我们使用的是比实际存在的更多的常规寄存器，所以任何人都可以猜测编译器会用它做什么。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we accumulate in registers and put A( 0, p ) in a register */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold contributions to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */&lt;/span&gt;&lt;br&gt;       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  &lt;br&gt;       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  &lt;br&gt;       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  &lt;br&gt;       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 0, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 1, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 2, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 3, p ) */&lt;/span&gt;&lt;br&gt;       a_0p_reg,&lt;br&gt;       a_1p_reg,&lt;br&gt;       a_2p_reg,&lt;br&gt;       a_3p_reg;&lt;br&gt;&lt;br&gt;  c_00_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_01_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_02_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_03_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_10_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_11_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_12_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_13_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_20_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_21_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_22_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_23_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_30_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_31_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_32_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_33_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p );&lt;br&gt;    a_1p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p );&lt;br&gt;    a_2p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p );&lt;br&gt;    a_3p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p );&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row */&lt;/span&gt;&lt;br&gt;    c_00_reg += a_0p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    c_01_reg += a_0p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    c_02_reg += a_0p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    c_03_reg += a_0p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Second row */&lt;/span&gt;&lt;br&gt;    c_10_reg += a_1p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    c_11_reg += a_1p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    c_12_reg += a_1p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    c_13_reg += a_1p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third row */&lt;/span&gt;&lt;br&gt;    c_20_reg += a_2p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    c_21_reg += a_2p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    c_22_reg += a_2p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    c_23_reg += a_2p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Four row */&lt;/span&gt;&lt;br&gt;    c_30_reg += a_3p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    c_31_reg += a_3p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    c_32_reg += a_3p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    c_33_reg += a_3p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_10_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_11_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_12_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_13_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_30_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_31_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_32_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_33_reg;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;Optimization-4x4-7&#34;&gt;&lt;a href=&#34;#Optimization-4x4-7&#34; class=&#34;headerlink&#34; title=&#34;Optimization_4x4_7&#34;&gt;&lt;/a&gt;Optimization_4x4_7&lt;/h1&gt;&lt;p&gt;这里我们改为使用指针来跟踪B的当前4x1块。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot4x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot4x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes a 4x4 block of matrix A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i  , j ), C( i  , j+1 ), C( i  , j+2 ), C( i  , j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+1, j ), C( i+1, j+1 ), C( i+1, j+2 ), C( i+1, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+2, j ), C( i+2, j+1 ), C( i+2, j+2 ), C( i+2, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i+3, j ), C( i+3, j+1 ), C( i+3, j+2 ), C( i+3, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we use pointer to track where in four columns of B we are */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold contributions to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 1, 0 ), C( 1, 1 ), C( 1, 2 ), C( 1, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 2, 0 ), C( 2, 1 ), C( 2, 2 ), C( 2, 3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 3, 0 ), C( 3, 1 ), C( 3, 2 ), C( 3, 3 )   */&lt;/span&gt;&lt;br&gt;       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  &lt;br&gt;       c_10_reg,   c_11_reg,   c_12_reg,   c_13_reg,  &lt;br&gt;       c_20_reg,   c_21_reg,   c_22_reg,   c_23_reg,  &lt;br&gt;       c_30_reg,   c_31_reg,   c_32_reg,   c_33_reg,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 0, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 1, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 2, p ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       A( 3, p ) */&lt;/span&gt;&lt;br&gt;       a_0p_reg,&lt;br&gt;       a_1p_reg,&lt;br&gt;       a_2p_reg,&lt;br&gt;       a_3p_reg;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *b_p0_pntr, *b_p1_pntr, *b_p2_pntr, *b_p3_pntr; &lt;br&gt;&lt;br&gt;  c_00_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_01_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_02_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_03_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_10_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_11_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_12_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_13_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_20_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_21_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_22_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_23_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  c_30_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_31_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_32_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;   c_33_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p );&lt;br&gt;    a_1p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, p );&lt;br&gt;    a_2p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, p );&lt;br&gt;    a_3p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, p );&lt;br&gt;	  &lt;br&gt;    b_p0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;    b_p1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;    b_p2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;    b_p3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );	  &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* First row */&lt;/span&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *b_p0_pntr;     &lt;br&gt;    c_01_reg += a_0p_reg * *b_p1_pntr;     &lt;br&gt;    c_02_reg += a_0p_reg * *b_p2_pntr;     &lt;br&gt;    c_03_reg += a_0p_reg * *b_p3_pntr;     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Second row */&lt;/span&gt;&lt;br&gt;    c_10_reg += a_1p_reg * *b_p0_pntr;     &lt;br&gt;    c_11_reg += a_1p_reg * *b_p1_pntr;     &lt;br&gt;    c_12_reg += a_1p_reg * *b_p2_pntr;     &lt;br&gt;    c_13_reg += a_1p_reg * *b_p3_pntr;     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Third row */&lt;/span&gt;&lt;br&gt;    c_20_reg += a_2p_reg * *b_p0_pntr;     &lt;br&gt;    c_21_reg += a_2p_reg * *b_p1_pntr;     &lt;br&gt;    c_22_reg += a_2p_reg * *b_p2_pntr;     &lt;br&gt;    c_23_reg += a_2p_reg * *b_p3_pntr;     &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Four row */&lt;/span&gt;&lt;br&gt;    c_30_reg += a_3p_reg * *b_p0_pntr++;     &lt;br&gt;    c_31_reg += a_3p_reg * *b_p1_pntr++;     &lt;br&gt;    c_32_reg += a_3p_reg * *b_p2_pntr++;     &lt;br&gt;    c_33_reg += a_3p_reg * *b_p3_pntr++;     &lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_10_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_11_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_12_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_13_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_20_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_21_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_22_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_23_reg;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_30_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_31_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_32_reg;   &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_33_reg;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="gemv" />
        <updated>2023-05-31T07:16:29.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/05/26/gemm0003/</id>
        <title>Further optimizing</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/05/26/gemm0003/"/>
        <content type="html">&lt;h2 id=&#34;Further-optimizing&#34;&gt;&lt;a href=&#34;#Further-optimizing&#34; class=&#34;headerlink&#34; title=&#34;Further optimizing&#34;&gt;&lt;/a&gt;Further optimizing&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们将C的元素累加到寄存器中，并使用寄存器存储a的元素&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_6&#34;&gt;Optimization_1x4_6 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我们使用指针来定位B中的元素&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_7&#34;&gt;Optimization_1x4_7 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我们将循环展开4次(展开因子的选择相对任意)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_8&#34;&gt;Optimization_1x4_8 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我们使用间接寻址来减少需要更新指针的次数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_9&#34;&gt;Optimization_1x4_9 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于问题大小适合L2缓存(至少部分地)有相当大的改进。不过，还有很大的改进空间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/05/26/gemm0003/compare_MMult0_MMult-1x4-9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Optimization-1x4-6&#34;&gt;&lt;a href=&#34;#Optimization-1x4-6&#34; class=&#34;headerlink&#34; title=&#34;Optimization_1x4_6&#34;&gt;&lt;/a&gt;Optimization_1x4_6&lt;/h2&gt;&lt;p&gt;我们在寄存器中对当前1x4行C的更新累积，并将元素A(p, 0)放在寄存器中，以减少缓存(cache)和寄存器(reg)之间的流量(traffic)。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot1x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes four elements of C: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we accumulate in registers and put A( 0, p ) in a register */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;    &lt;br&gt;    &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//C的累加在寄存器中，同时A也放在寄存器中&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold contributions to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */&lt;/span&gt;&lt;br&gt;       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* holds A( 0, p ) */&lt;/span&gt;&lt;br&gt;       a_0p_reg;&lt;br&gt;    &lt;br&gt;  c_00_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_01_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_02_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_03_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt; &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;    c_01_reg += a_0p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    c_02_reg += a_0p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    c_03_reg += a_0p_reg * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//计算完成后，再通过寄存器写回C&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_reg;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-1x4-7&#34;&gt;&lt;a href=&#34;#Optimization-1x4-7&#34; class=&#34;headerlink&#34; title=&#34;Optimization_1x4_7&#34;&gt;&lt;/a&gt;Optimization_1x4_7&lt;/h2&gt;&lt;p&gt;现在使用bp0_pntr、bp1_pntr、bp2_pntr和bp3_pntr四个指针来访问元素B(p, 0)、B(p, 1)、B(p, 2)、B(p, 3)。这减少了索引开销。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot1x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes four elements of C: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we use pointer to track where in four columns of B we are */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold contributions to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */&lt;/span&gt;&lt;br&gt;       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* holds A( 0, p ) */&lt;/span&gt;&lt;br&gt;       a_0p_reg;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//由于使用了宏定义，每次B(i,j)都会计算B中元素的位置&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//使用指针后，后续访问不需要再额外计算B中元素位置，只需在当前指针向后移动一位即可&lt;/span&gt;&lt;br&gt;  bp0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  bp1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  bp2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  bp3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_01_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_02_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_03_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt; &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *bp0_pntr++;&lt;br&gt;    c_01_reg += a_0p_reg * *bp1_pntr++;&lt;br&gt;    c_02_reg += a_0p_reg * *bp2_pntr++;&lt;br&gt;    c_03_reg += a_0p_reg * *bp3_pntr++;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_reg;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-1x4-8&#34;&gt;&lt;a href=&#34;#Optimization-1x4-8&#34; class=&#34;headerlink&#34; title=&#34;Optimization_1x4_8&#34;&gt;&lt;/a&gt;Optimization_1x4_8&lt;/h2&gt;&lt;p&gt;我们现在展开了4个循环。有趣的是，这会略微降低性能。这可能意味着，通过添加优化，我们混淆了编译器，因此它不能做以前做的优化。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot1x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes four elements of C: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     We now unroll the loop */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold contributions to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */&lt;/span&gt;&lt;br&gt;       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* holds A( 0, p ) */&lt;/span&gt;&lt;br&gt;       a_0p_reg;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; &lt;br&gt;    &lt;br&gt;  bp0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  bp1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  bp2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  bp3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_01_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_02_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_03_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//这里对循环变量p进行了展开，注意这里计算是顺序的&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *bp0_pntr++;&lt;br&gt;    c_01_reg += a_0p_reg * *bp1_pntr++;&lt;br&gt;    c_02_reg += a_0p_reg * *bp2_pntr++;&lt;br&gt;    c_03_reg += a_0p_reg * *bp3_pntr++;&lt;br&gt;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *bp0_pntr++;&lt;br&gt;    c_01_reg += a_0p_reg * *bp1_pntr++;&lt;br&gt;    c_02_reg += a_0p_reg * *bp2_pntr++;&lt;br&gt;    c_03_reg += a_0p_reg * *bp3_pntr++;&lt;br&gt;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *bp0_pntr++;&lt;br&gt;    c_01_reg += a_0p_reg * *bp1_pntr++;&lt;br&gt;    c_02_reg += a_0p_reg * *bp2_pntr++;&lt;br&gt;    c_03_reg += a_0p_reg * *bp3_pntr++;&lt;br&gt;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *bp0_pntr++;&lt;br&gt;    c_01_reg += a_0p_reg * *bp1_pntr++;&lt;br&gt;    c_02_reg += a_0p_reg * *bp2_pntr++;&lt;br&gt;    c_03_reg += a_0p_reg * *bp3_pntr++;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_reg;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-1x4-9&#34;&gt;&lt;a href=&#34;#Optimization-1x4-9&#34; class=&#34;headerlink&#34; title=&#34;Optimization_1x4_9&#34;&gt;&lt;/a&gt;Optimization_1x4_9&lt;/h2&gt;&lt;p&gt;在这里，*a0p_reg保存元素A(0, p+1)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们希望bp0_pntr指向元素B（p，0）。因此，bp0_pntr+1寻址元素B（p+1，0）。有一条特殊的机器指令可以访问bp0_pntr+1处的元素，该指令不需要更新指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因此，指向B列中元素的指针只需要在循环的第四次迭代中更新一次。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot1x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes four elements of C: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     We next use indirect addressing */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* hold contributions to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;       C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ) */&lt;/span&gt;&lt;br&gt;       c_00_reg,   c_01_reg,   c_02_reg,   c_03_reg,  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* holds A( 0, p ) */&lt;/span&gt;&lt;br&gt;       a_0p_reg;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* Point to the current elements in the four columns of B */&lt;/span&gt;&lt;br&gt;    *bp0_pntr, *bp1_pntr, *bp2_pntr, *bp3_pntr; &lt;br&gt;    &lt;br&gt;  bp0_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );&lt;br&gt;  bp1_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;  bp2_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;  bp3_pntr = &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;  c_00_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_01_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_02_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;; &lt;br&gt;  c_03_reg = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;;&lt;br&gt; &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *bp0_pntr;&lt;br&gt;    c_01_reg += a_0p_reg * *bp1_pntr;&lt;br&gt;    c_02_reg += a_0p_reg * *bp2_pntr;&lt;br&gt;    c_03_reg += a_0p_reg * *bp3_pntr;&lt;br&gt;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );&lt;br&gt;	&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//现在我们使用间接寻址，&amp;#x27;indirect addressing&amp;#x27;&lt;/span&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *(bp0_pntr+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    c_01_reg += a_0p_reg * *(bp1_pntr+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    c_02_reg += a_0p_reg * *(bp2_pntr+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    c_03_reg += a_0p_reg * *(bp3_pntr+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *(bp0_pntr+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;    c_01_reg += a_0p_reg * *(bp1_pntr+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;    c_02_reg += a_0p_reg * *(bp2_pntr+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;    c_03_reg += a_0p_reg * *(bp3_pntr+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    a_0p_reg = &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );&lt;br&gt;&lt;br&gt;    c_00_reg += a_0p_reg * *(bp0_pntr+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;    c_01_reg += a_0p_reg * *(bp1_pntr+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;    c_02_reg += a_0p_reg * *(bp2_pntr+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;    c_03_reg += a_0p_reg * *(bp3_pntr+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;	&lt;br&gt;      &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//更新指针，4次迭代中仅更新一次&lt;/span&gt;&lt;br&gt;    bp0_pntr+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;    bp1_pntr+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;    bp2_pntr+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;    bp3_pntr+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += c_00_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += c_01_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += c_02_reg; &lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += c_03_reg;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="gemv" />
        <updated>2023-05-26T09:20:18.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/05/26/gemm0002/</id>
        <title>Computing four elements at a time</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/05/26/gemm0002/"/>
        <content type="html">&lt;h2 id=&#34;Computing-four-elements-at-a-time&#34;&gt;&lt;a href=&#34;#Computing-four-elements-at-a-time&#34; class=&#34;headerlink&#34; title=&#34;Computing four elements at a time&#34;&gt;&lt;/a&gt;Computing four elements at a time&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们在子程序AddDot1x4中一次计算4个元素，该子程序一次执行4个内部乘积&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_3&#34;&gt;Optimization_1x4_3 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;现在我们内联(inline)四个独立的内积，并将循环融合为一个，从而在一个循环中同时计算四个内积:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_4&#34;&gt;Optimization_1x4_4 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization_1x4_5&#34;&gt;Optimization_1x4_5 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这一点上，我们开始看到一些性能改进:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/05/26/gemm0002/compare_MMult0_MMult-1x4-5.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Optimization-1x4-3&#34;&gt;&lt;a href=&#34;#Optimization-1x4-3&#34; class=&#34;headerlink&#34; title=&#34;Optimization_1x4_3&#34;&gt;&lt;/a&gt;Optimization_1x4_3&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;	  &lt;span class=&#34;hljs-comment&#34;&gt;//相交于上个版本，把4个AddDot合并成了一个AddDot1x4&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot1x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes four elements of C: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C */&lt;/span&gt; &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//一次AddDot1x4完成四次AddDot运算&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) );&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macro to let X( i ) equal the ith element of x */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; X(i) x[ (i)*incx ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *x, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; incx,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *y, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *gamma )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* compute gamma := x&amp;#x27; * y + gamma with vectors x and y of length n.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  */&lt;/span&gt;&lt;br&gt; &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    *gamma += &lt;span class=&#34;hljs-built_in&#34;&gt;X&lt;/span&gt;( p ) * y[ p ];     &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-1x4-4&#34;&gt;&lt;a href=&#34;#Optimization-1x4-4&#34; class=&#34;headerlink&#34; title=&#34;Optimization_1x4_4&#34;&gt;&lt;/a&gt;Optimization_1x4_4&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot1x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes four elements of C: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we &amp;quot;inline&amp;quot; AddDot */&lt;/span&gt; &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//在这里我们把AddDot中的运算，全部集成到了AddDot1x4中，即4段for执行4个内部乘积&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 0 ), &amp;amp;C( 0, 0 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 1 ), &amp;amp;C( 0, 1 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 2 ), &amp;amp;C( 0, 2 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 3 ), &amp;amp;C( 0, 3 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization-1x4-5&#34;&gt;&lt;a href=&#34;#Optimization-1x4-5&#34; class=&#34;headerlink&#34; title=&#34;Optimization_1x4_5&#34;&gt;&lt;/a&gt;Optimization_1x4_5&lt;/h2&gt;&lt;p&gt;在这个版本，我们开始看到性能上的好处。原因是四个循环已经融合，因此四个内部乘积运算现在正在同时进行。这有以下好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引p只需要每8次浮点操作更新一次(4次乘法4次加法)。&lt;/li&gt;
&lt;li&gt;元素A(0, p)只需要从内存中取出一次，而不是四次。(只有当矩阵不再适合二级缓存时，这才有好处)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ), C( i,j+1 ), C( i,j+2 ), and C( i,j+3 ) in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 one routine (four inner products) */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot1x4&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), ldb, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ), ldc );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot1x4&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* So, this routine computes four elements of C: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( 0, 0 ), C( 0, 1 ), C( 0, 2 ), C( 0, 3 ).  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Notice that this routine is called with c = C( i, j ) in the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     previous routine, so these are actually the elements &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;           C( i, j ), C( i, j+1 ), C( i, j+2 ), C( i, j+3 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     in the original matrix C.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     In this version, we merge the four loops, computing four inner&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     products simultaneously. */&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//在这个版本中，我们合并了4个for循环，使得可以同时计算4个乘积运算&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 0 ), &amp;amp;C( 0, 0 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 1 ), &amp;amp;C( 0, 1 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 2 ), &amp;amp;C( 0, 2 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//  AddDot( k, &amp;amp;A( 0, 0 ), lda, &amp;amp;B( 0, 3 ), &amp;amp;C( 0, 3 ) );&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; );     &lt;span class=&#34;hljs-comment&#34;&gt;//第一次取A( 0, p )&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; );     &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) += &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; );     &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="gemv" />
        <updated>2023-05-26T08:37:45.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/05/26/gemm0001/</id>
        <title>Hiding computation in a subroutine</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/05/26/gemm0001/"/>
        <content type="html">&lt;h2 id=&#34;Hiding-computation-in-a-subroutine&#34;&gt;&lt;a href=&#34;#Hiding-computation-in-a-subroutine&#34; class=&#34;headerlink&#34; title=&#34;Hiding computation in a subroutine&#34;&gt;&lt;/a&gt;Hiding computation in a subroutine&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们首先重写基本实现，将内部循环隐藏在子程序AddDot中:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization1&#34;&gt;Optimization1 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm/wiki/Optimization2&#34;&gt;Optimization2 · flame&amp;#x2F;how-to-optimize-gemm Wiki (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一步不会产生任何性能提升：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/flame/how-to-optimize-gemm/raw/master/figures/compare_MMult0_MMult2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;它其实是为我们下一步做好准备。&lt;/p&gt;
&lt;h2 id=&#34;Optimization1&#34;&gt;&lt;a href=&#34;#Optimization1&#34; class=&#34;headerlink&#34; title=&#34;Optimization1&#34;&gt;&lt;/a&gt;Optimization1&lt;/h2&gt;&lt;p&gt;这里最原始的矩阵乘代码：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//创建宏，使矩阵是列主序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j, p;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//loop i j p&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i++ )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C 遍历C的行 */&lt;/span&gt;   &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j++ )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C 遍历C的列 */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Update C( i,j ) with the inner&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;				       product of the ith row of A and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;				       the jth column of B */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//A的一行B的一列更新C(i,j)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ) = &lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ) +  &lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,p ) * &lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( p,j );&lt;br&gt;      &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;拆分内部循环，把乘加运算放在子程序AddDot中:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;	&lt;br&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;//loop j i p   在这里更改了循环变量的顺序&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update the C( i,j ) with the inner product of the ith row of A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 and the jth column of B */&lt;/span&gt;&lt;br&gt;	  &lt;span class=&#34;hljs-comment&#34;&gt;//拆分内部循环(循环变量p)，把乘加运算放在子程序AddDot中:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;//A的第i行，B的第j列&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ) );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macro to let X( i ) equal the ith element of x */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; X(i) x[ (i)*incx ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *x, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; incx,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *y, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *gamma )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* compute gamma := x&amp;#x27; * y + gamma with vectors x and y of length n.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  */&lt;/span&gt;&lt;br&gt; &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//列主序，同行访问带跨步，同列访问无需跨步。跨步大小lda&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    *gamma += &lt;span class=&#34;hljs-built_in&#34;&gt;X&lt;/span&gt;( p ) * y[ p ];     &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimization2&#34;&gt;&lt;a href=&#34;#Optimization2&#34; class=&#34;headerlink&#34; title=&#34;Optimization2&#34;&gt;&lt;/a&gt;Optimization2&lt;/h2&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macros so that the matrices are stored in column-major order */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; A(i,j) a[ (j)*lda + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; B(i,j) b[ (j)*ldb + (i) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; C(i,j) c[ (j)*ldc + (i) ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Routine for computing C = A * B + C */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; * )&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MY_MMult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; m, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; lda, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *b, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldb,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;                                    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ldc )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, j;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//在这里对C的列进行了循环展开，展开数为4。列主序&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( j=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; j&amp;lt;n; j+=&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the columns of C, unrolled by 4 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;m; i+=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; )&amp;#123;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Loop over the rows of C */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update the C( i,j ) with the inner product of the ith row of A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 and the jth column of B */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j ) );&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update the C( i,j+1 ) with the inner product of the ith row of A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 and the (j+1)th column of B */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) );&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update the C( i,j+2 ) with the inner product of the ith row of A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 and the (j+2)th column of B */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j+&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; ) );&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;/* Update the C( i,j+3 ) with the inner product of the ith row of A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 and the (j+1)th column of B */&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&#34;hljs-built_in&#34;&gt;AddDot&lt;/span&gt;( k, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;A&lt;/span&gt;( i,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ), lda, &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;B&lt;/span&gt;( &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ), &amp;amp;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;( i,j+&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; ) );&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Create macro to let X( i ) equal the ith element of x */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; X(i) x[ (i)*incx ]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//内层核心相较于上次来说，并没有修改&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AddDot&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *x, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; incx,  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *y, &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; *gamma )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* compute gamma := x&amp;#x27; * y + gamma with vectors x and y of length n.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     Here x starts at location x with increment (stride) incx and y starts at location y and has (implicit) stride of 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  */&lt;/span&gt;&lt;br&gt; &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; p;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( p=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; p&amp;lt;k; p++ )&amp;#123;&lt;br&gt;    *gamma += &lt;span class=&#34;hljs-built_in&#34;&gt;X&lt;/span&gt;( p ) * y[ p ];     &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="gemv" />
        <updated>2023-05-26T07:06:49.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/05/22/blas/</id>
        <title>BLAS（Basic Linear Algebra Subprograms）-基础线性代数子程序库</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/05/22/blas/"/>
        <content type="html">&lt;h2 id=&#34;how-to-optimize-gemm&#34;&gt;&lt;a href=&#34;#how-to-optimize-gemm&#34; class=&#34;headerlink&#34; title=&#34;how-to-optimize-gemm&#34;&gt;&lt;/a&gt;how-to-optimize-gemm&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;项目地址：&lt;/strong&gt;&lt;a href=&#34;https://github.com/flame/how-to-optimize-gemm&#34;&gt;flame&amp;#x2F;how-to-optimize-gemm (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Computing-four-elements-of-C-at-a-time&#34;&gt;&lt;a href=&#34;#Computing-four-elements-of-C-at-a-time&#34; class=&#34;headerlink&#34; title=&#34;Computing four elements of C at a time&#34;&gt;&lt;/a&gt;Computing four elements of C at a time&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/05/26/gemm0001/&#34;&gt;Hiding computation in a subroutine - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/05/26/gemm0002/&#34;&gt;Computing four elements at a time - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/05/26/gemm0003/&#34;&gt;Further optimizing - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Computing-a-4-x-4-block-of-C-at-a-time&#34;&gt;&lt;a href=&#34;#Computing-a-4-x-4-block-of-C-at-a-time&#34; class=&#34;headerlink&#34; title=&#34;Computing a 4 x 4 block of C at a time&#34;&gt;&lt;/a&gt;Computing a 4 x 4 block of C at a time&lt;/h3&gt;&lt;p&gt;为了有效地使用向量指令和向量寄存器，我们现在一次计算一个4 x 4的C代码块。其思想如下:作为SSE3指令集的一部分，有一些特殊的指令允许每个时钟周期执行两次“乘法累加”操作(两次乘法和两次加法)，每个时钟周期总共执行四个浮点操作。要使用这些，必须将数据放入“向量寄存器”中。有16个这样的向量寄存器，每个向量寄存器可以容纳两个双精度数。因此，我们可以在寄存器中保存32个双精度数。我们将使用其中的16个来保存C的元素，一个4 x 4的块。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/05/31/gemm0004/&#34;&gt;Repeating the same optimizations - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/06/07/gemm0005/&#34;&gt;Further optimizing - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/06/07/gemm0006/&#34;&gt;Blocking to maintain performance - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/06/07/gemm0007/&#34;&gt;Packing into contiguous memory - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Acknowledgement&#34;&gt;&lt;a href=&#34;#Acknowledgement&#34; class=&#34;headerlink&#34; title=&#34;Acknowledgement&#34;&gt;&lt;/a&gt;Acknowledgement&lt;/h3&gt;&lt;p&gt;This material was partially sponsored by grants from the National Science Foundation (Awards ACI-1148125&amp;#x2F;1340293).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation (NSF).&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;论文阅读&#34;&gt;&lt;a href=&#34;#论文阅读&#34; class=&#34;headerlink&#34; title=&#34;论文阅读&#34;&gt;&lt;/a&gt;论文阅读&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/06/09/gemm0008/&#34;&gt;论文阅读：面向国产申威 26010 众核处理器的 SpMV 实现与优化 - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2023/07/03/gemm0009/&#34;&gt;论文阅读：稀疏矩阵向量乘法在申威众核架构上的性能优化 - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;h3 id=&#34;博客&#34;&gt;&lt;a href=&#34;#博客&#34; class=&#34;headerlink&#34; title=&#34;博客:&#34;&gt;&lt;/a&gt;博客:&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/e01024892afb&#34;&gt;矩阵相乘在GPU上的终极优化：深度解析Maxas汇编器工作原理 - 简书 (jianshu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.leiphone.com/category/yanxishe/Puevv3ZWxn0heoEv.html&#34;&gt;OpenBLAS项目与矩阵乘法优化 | AI 研习社 | 雷峰网 (leiphone.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jcf94.com/2021/08/28/2021-08-28-simd/&#34;&gt;矩阵乘法与 SIMD | Chenfan Blog (jcf94.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhenhuaw.me/blog/2019/gemm-optimization.html&#34;&gt;通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/383115932&#34;&gt;大佬是怎么优雅实现矩阵乘法的？ - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/65436463&#34;&gt;OpenBLAS gemm从零入门 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://harleyszhang.github.io/cv_note/&#34;&gt;Introduction · cv算法工程师成长之路 (harleyszhang.github.io)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/435908830&#34;&gt;深入浅出GPU优化系列：GEMM优化（一） - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/410278370&#34;&gt;CUDA 矩阵乘法终极优化指南 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/368870275&#34;&gt;矩阵乘法的并行优化（1）：OPENMP、CUDA实现 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/617296073&#34;&gt;并行计算入门 UIUC ECE408 Lecture 7&amp;amp;8 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143328317&#34;&gt;移动端arm cpu优化学习笔记第4弹–内联汇编入门 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348372132&#34;&gt;C语言的内嵌汇编 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/105616727&#34;&gt;内嵌汇编学习 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/unbutun/article/details/6123472&#34;&gt;(88条消息) #define barrier() &lt;strong&gt;asm&lt;/strong&gt; &lt;strong&gt;volatile&lt;/strong&gt;(“”: : :”memory”) 中的memory是gcc的东西_unbutun的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38669561/article/details/105192200?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&#34;&gt;(88条消息) MIPS指令集：内嵌汇编asm语法介绍_daddu指令_无色云的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;论文：&#34;&gt;&lt;a href=&#34;#论文：&#34; class=&#34;headerlink&#34; title=&#34;论文：&#34;&gt;&lt;/a&gt;论文：&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://www.cs.utexas.edu/users/flame/FLAMEPublications.html&#34;&gt;Publications Related to the FLAME Project (utexas.edu)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/1356052.1356053&#34;&gt;Anatomy of high-performance matrix multiplication | ACM Transactions on Mathematical Software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3018743.3018755&#34;&gt;Understanding the GPU Microarchitecture to Achieve Bare-Metal Performance Tuning | Proceedings of the 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href=&#34;https://arxiv.org/abs/1804.06826&#34;&gt;1804.06826] Dissecting the NVIDIA Volta GPU Architecture via Microbenchmarking (arxiv.org)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/6114452&#34;&gt;Fast implementation of DGEMM on Fermi GPU | IEEE Conference Publication | IEEE Xplore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/3369583.3393611&#34;&gt;High Performance is All about Minimizing Data Movement | Proceedings of the 29th International Symposium on High-Performance Parallel and Distributed Computing (acm.org)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;社区-x2F-论坛&#34;&gt;&lt;a href=&#34;#社区-x2F-论坛&#34; class=&#34;headerlink&#34; title=&#34;社区&amp;#x2F;论坛:&#34;&gt;&lt;/a&gt;社区&amp;#x2F;论坛:&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://tvm.d2l.ai/chapter_gpu_schedules/vector_add.html#cuda-programming&#34;&gt;2. Vector Add — Dive into Deep Learning Compiler 0.1 documentation (d2l.ai)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html&#34;&gt;Intel® Intrinsics Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pytorch/QNNPACK&#34;&gt;https://github.com/pytorch/QNNPACK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/flame/blis&#34;&gt;https://github.com/flame/blis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mathematik.uni-ulm.de/~lehn/apfel/ulmBLAS/&#34;&gt;ulmBLAS (index) (uni-ulm.de)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mathematik.uni-ulm.de/~lehn/apfel/sghpc/gemm/index.html&#34;&gt;work&amp;#x2F;sghpc (index) (uni-ulm.de)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://shpc.oden.utexas.edu/&#34;&gt;The Science of High-Performance Computing Group (utexas.edu)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/BBuf/how-to-optimize-gemm&#34;&gt;GitHub - BBuf&amp;#x2F;how-to-optimize-gemm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Liu-xiandong/How_to_optimize_in_GPU&#34;&gt;GitHub - Liu-xiandong&amp;#x2F;How_to_optimize_in_GPU: This is a series of GPU optimization topics. Here we will introduce how to optimize the CUDA kernel in detail. I will introduce several basic kernel optimizations, including: elementwise, reduce, sgemv, sgemm, etc. The performance of these kernels is basically at or near the theoretical limit.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-c-programming-guide/#&#34;&gt;CUDA C++ Programming Guide (nvidia.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/NervanaSystems/maxas/wiki/SGEMM&#34;&gt;SGEMM · NervanaSystems&amp;#x2F;maxas Wiki · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Cjkkkk/CUDA_gemm&#34;&gt;GitHub - Cjkkkk&amp;#x2F;CUDA_gemm: A simple high performance CUDA GEMM implementation.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yzhaiustc/Optimizing-SGEMM-on-NVIDIA-Turing-GPUs&#34;&gt;GitHub - yzhaiustc&amp;#x2F;Optimizing-SGEMM-on-NVIDIA-Turing-GPUs: Optimizing SGEMM kernel functions on NVIDIA GPUs to a close-to-cuBLAS performance.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/&#34;&gt;https://developer.nvidia.com/blog/cutlass-linear-algebra-cuda/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.illinois.edu/wiki/display/ECE408/Class+Schedule&#34;&gt;Class Schedule - ECE408 - Illinois Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#toc2&#34;&gt;GCC-Inline-Assembly-HOWTO (ibiblio.org)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;计算机教育中缺失的一课 · the missing semester of your cs education (missing-semester-cn.github.io)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="blas" />
        <category term="gemm" />
        <category term="gemv" />
        <updated>2023-05-22T12:35:17.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/10/avx006/</id>
        <title>如何使用AVX和AVX2处理数据(个人翻译)</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/10/avx006/"/>
        <content type="html">&lt;h2 id=&#34;1-文章来源&#34;&gt;&lt;a href=&#34;#1-文章来源&#34; class=&#34;headerlink&#34; title=&#34;1.文章来源&#34;&gt;&lt;/a&gt;1.文章来源&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Matt Scarpino（USA）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX&#34;&gt;Crunching Numbers with AVX and AVX2 - CodeProject&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-介绍&#34;&gt;&lt;a href=&#34;#2-介绍&#34; class=&#34;headerlink&#34; title=&#34;2.介绍&#34;&gt;&lt;/a&gt;2.介绍&lt;/h2&gt;&lt;p&gt;在2003年，&lt;a href=&#34;https://www.codeproject.com/script/Membership/View.aspx?mid=22834&#34;&gt;Alex Fr&lt;/a&gt;写了一篇优秀的&lt;a href=&#34;https://www.codeproject.com/Articles/4522/Introduction-to-SSE-Programming&#34;&gt;文章&lt;/a&gt;[该文章现在已经被原作者删除]，解释了如何使用Intel的流式SIMD扩展(SSE)执行SIMD(单指令，多数据)处理。SSE是英特尔处理器支持的一组指令，可对大量数据执行高速运算。&lt;/p&gt;
&lt;p&gt;2008年，英特尔推出了一套新的高性能指令，称为高级向量扩展(AVX)。AVX执行许多与SSE指令相同的操作，但以更快的速度对更大的数据块进行操作。最近，英特尔在AVX2和AVX512系列中发布了额外的指令。本文的重点是通过称为intrinsic funtions的特殊C函数访问AVX和AVX2指令。&lt;/p&gt;
&lt;p&gt;本文不介绍整个AVX&amp;#x2F;AVX2 intrinsics，而是侧重于数学计算。特别地，目标是复数相乘。要使用AVX&amp;#x2F;AVX2执行此操作，需要三种类型的intrinsic:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialization intrinscis&lt;/li&gt;
&lt;li&gt;Arithmetic intrinsics&lt;/li&gt;
&lt;li&gt;Permute&amp;#x2F;shuffle intrinsics&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;		&lt;/p&gt;
&lt;p&gt;本文讨论每个类别中的intrinsics，并解释如何在代码中使用它们。本文的最后将展示如何用这些intrinsic进行乘法复数运算。&lt;/p&gt;
&lt;p&gt;理解处理器指令和intrinsic function之间的区别是很重要的。AVX指令是执行不可分割操作的汇编命令。例如，AVX指令vaddps添加了两个操作数，并将结果放在第三个操作数中。&lt;/p&gt;
&lt;p&gt;要在C&amp;#x2F;C++中执行操作，the intrinsic funtion _mm256_add_ps()直接映射到vaddps，将汇编的性能与高级函数的便利性结合起来。An intrinsic funtion不一定映射到单个指令，但与其他C&amp;#x2F; C++函数相比，AVX&amp;#x2F;AVX2 intrinsics提供了可靠的高性能。&lt;/p&gt;
&lt;h2 id=&#34;3-基本要求&#34;&gt;&lt;a href=&#34;#3-基本要求&#34; class=&#34;headerlink&#34; title=&#34;3.基本要求&#34;&gt;&lt;/a&gt;3.基本要求&lt;/h2&gt;&lt;p&gt;要理解本文的内容，您需要基本熟悉C语言和SIMD处理。要执行代码，您需要一个支持AVX或AVX&amp;#x2F;AVX2的CPU。以下是支持AVX的cpu:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel’s Sandy Bridge&amp;#x2F;Sandy Bridge E&amp;#x2F;Ivy Bridge&amp;#x2F;Ivy Bridge E&lt;/li&gt;
&lt;li&gt;Intel’s Haswell&amp;#x2F;Haswell E&amp;#x2F;Broadwell&amp;#x2F;Broadwell E&lt;/li&gt;
&lt;li&gt;AMD’s Bulldozer&amp;#x2F;Piledriver&amp;#x2F;Steamroller&amp;#x2F;Excavator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支持AVX2的CPU也支持AVX。以下是这些设备:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel’s Haswell&amp;#x2F;Haswell E&amp;#x2F;Broadwell&amp;#x2F;Broadwell E&lt;/li&gt;
&lt;li&gt;AMD’s Excavator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文中讨论的大多数函数都是由AVX提供的。但也有一些是AVX2特有的。为了区分它们，在本文的表中，我在AVX2 intrinsic的名称前面加上(2)。&lt;/p&gt;
&lt;p&gt;[个人补充]&lt;/p&gt;
&lt;p&gt;判断自己电脑CPU是否支持AVX和AVX2，最简单的就是在命令行执行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;lscpu&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你会得到以下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/10/avx006/image-20230129153048825.png&#34; alt=&#34;image-20230129153048825&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Flags里面你可以清楚的看到你的电脑是否支持AVX以及AVX2。&lt;/p&gt;
&lt;h2 id=&#34;4-向量化概述&#34;&gt;&lt;a href=&#34;#4-向量化概述&#34; class=&#34;headerlink&#34; title=&#34;4.向量化概述&#34;&gt;&lt;/a&gt;4.向量化概述&lt;/h2&gt;&lt;p&gt;AVX指令通过同时处理大块值而不是单独处理值来提高应用程序的性能。这些值大块称为向量，AVX向量最多可以包含256位数据。&lt;/p&gt;
&lt;p&gt;常见的AVX向量包含4个double (4 x 64位&amp;#x3D; 256)，8个float (8 x 32位&amp;#x3D; 256)或8个int (8 x 32位&amp;#x3D; 256)。[double 8B, flout 4B, int 4B]&lt;/p&gt;
&lt;p&gt;一个示例将演示AVX&amp;#x2F;AVX2处理的强大功能。假设一个函数需要将一个数组的8个浮点数乘以第二个数组的8个浮点数，并将结果添加到第三个数组。如果没有向量化，函数可能是这样的:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;multiply_and_add&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* a, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* b, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* c, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* d) &amp;#123;  &lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;; i++) &amp;#123;&lt;br&gt;    d[i] = a[i] * b[i];&lt;br&gt;    d[i] = d[i] + c[i];&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是使用AVX2函数的例子:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;__m256 &lt;span class=&#34;hljs-title&#34;&gt;multiply_and_add&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(__m256 a, __m256 b, __m256 c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; _mm256_fmadd_ps(a, b, c);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This AVX2 intrinsic funtion &lt;strong&gt;_mm256_fmadd_ps&lt;/strong&gt;处理24个floats，但它不映射到单个指令。相反，它执行三个指令:&lt;strong&gt;vfmadd132ps&lt;/strong&gt;、&lt;strong&gt;vfmadd213ps&lt;/strong&gt;和&lt;strong&gt;vfmadd231ps&lt;/strong&gt;。尽管如此，它执行得很快，比遍历单个元素快得多。&lt;/p&gt;
&lt;p&gt;尽管英特尔的intrinsics功能强大，但它们还是让许多程序员感到紧张。这通常有两个原因。首先，数据类型有奇怪的名字，比如**__m256&lt;strong&gt;。其次，函数有奇怪的名称，如&lt;/strong&gt;_mm256_fmadd_ps**。因此，在详细讨论intrinsic funtions之前，我想先讨论一下Intel的数据类型和命名约定。&lt;/p&gt;
&lt;h2 id=&#34;5-AVX编程基础&#34;&gt;&lt;a href=&#34;#5-AVX编程基础&#34; class=&#34;headerlink&#34; title=&#34;5.AVX编程基础&#34;&gt;&lt;/a&gt;5.AVX编程基础&lt;/h2&gt;&lt;p&gt;本文主要关注AVX和AVX2提供的与数学相关的intrinsic functions。但在看函数之前，有三点很重要:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data types&lt;/li&gt;
&lt;li&gt;Function naming conventions&lt;/li&gt;
&lt;li&gt;Compiling AVX applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节涉及这些要点，并提供一个简单的应用程序，用于一个向量减去另一个向量。&lt;/p&gt;
&lt;h3 id=&#34;5-1数据类型&#34;&gt;&lt;a href=&#34;#5-1数据类型&#34; class=&#34;headerlink&#34; title=&#34;5.1数据类型&#34;&gt;&lt;/a&gt;5.1数据类型&lt;/h3&gt;&lt;p&gt;少数intrinsic接受传统的数据类型，如&lt;strong&gt;int&lt;/strong&gt;或&lt;strong&gt;float&lt;/strong&gt;，但大多数intrinsic操作有特定的AVX和AVX2的数据类型。有六种主要的向量类型，表1列出了它们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 1:AVX&amp;#x2F;AVX2 Data Types&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m128&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128-bit vector containing 4 &lt;code&gt;float&lt;/code&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m128d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128-bit vector containing 2 &lt;code&gt;double&lt;/code&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m128i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128-bit vector containing integers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256-bit vector containing 8 &lt;code&gt;float&lt;/code&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m256d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256-bit vector containing 4 &lt;code&gt;double&lt;/code&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__m256i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256-bit vector containing integers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;每种类型都以两个下划线、一个m和向量的宽度(以位为单位)开始。AVX512支持以_m512开头的512位向量类型，但AVX&amp;#x2F;AVX2向量不超过256位。如果向量类型以d结尾，则代表double，如果没有后缀，则代表float。看起来_m128i和_m256i向量必须包含int型，但事实并非如此。整数向量类型可以包含任何类型的整数，from chars to shorts to unsigned long longs.That is, an _m256i may contain 32 chars, 16 shorts, 8 ints, or 4 longs.  These integers can be signed or unsigned.&lt;/p&gt;
&lt;h3 id=&#34;5-3函数命名约定&#34;&gt;&lt;a href=&#34;#5-3函数命名约定&#34; class=&#34;headerlink&#34; title=&#34;5.3函数命名约定&#34;&gt;&lt;/a&gt;5.3函数命名约定&lt;/h3&gt;&lt;p&gt;AVX&amp;#x2F;AVX2 intrinsics的名称一开始可能令人困惑，但命名约定确是非常直白的。一旦你理解了它，你就可以通过看它的名字来大致判断一个函数是做什么的。AVX&amp;#x2F;AVX2 intrinsics的一般形式如下:&lt;/p&gt;
&lt;p&gt;_mm&lt;bit_width&gt;_&lt;name&gt;_&lt;data_type&gt;&lt;/data_type&gt;&lt;/name&gt;&lt;/bit_width&gt;&lt;/p&gt;
&lt;p&gt;该格式的各部分如下所示:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;bit_width&amp;gt;&lt;/code&gt; identifies the size of the vector returned by the function. For 128-bit vectors, this is empty. For 256-bit vectors, this is set to &lt;code&gt;256&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; describes the operation performed by the intrinsic&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;data_type&amp;gt;&lt;/code&gt; identifies the data type of the function’s primary arguments&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后一部分&lt;data_type&gt;有点复杂。它标识输入值的内容，可以设置为以下任何值:&lt;/data_type&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt; - vectors contain &lt;code&gt;float&lt;/code&gt;s (&lt;code&gt;ps&lt;/code&gt; stands for packed single-precision)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pd&lt;/code&gt; - vectors contain &lt;code&gt;double&lt;/code&gt;s (&lt;code&gt;pd&lt;/code&gt; stands for packed double-precision)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epi8/epi16/epi32/epi64&lt;/code&gt; - vectors contain 8-bit&amp;#x2F;16-bit&amp;#x2F;32-bit&amp;#x2F;64-bit signed integers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epu8/epu16/epu32/epu64&lt;/code&gt; - vectors contain 8-bit&amp;#x2F;16-bit&amp;#x2F;32-bit&amp;#x2F;64-bit unsigned integers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;si128&lt;/code&gt;&amp;#x2F;&lt;code&gt;si256&lt;/code&gt; - unspecified 128-bit vector or 256-bit vector&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m128/m128i/m128d/m256/m256i/m256d&lt;/code&gt; - identifies input vector types when they’re different than the type of the returned vector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，考虑_mm256_srlv_epi64。即使您不知道srlv是什么意思，_mm256前缀告诉您该函数返回一个256位向量，_epi64告诉您参数包含64位有符号整数。&lt;/p&gt;
&lt;p&gt;作为第二个示例，考虑_mm_testnzc_ps。_mm表示函数返回一个128位的向量。末尾的_ps表示参数向量包含浮点数。&lt;/p&gt;
&lt;p&gt;AVX数据类型以两个下划线和一个m开头。函数以一个下划线和两个m开头。我很容易搞混这一点，所以我想出了一种方法来记住它们的区别:数据类型代表内存（&lt;strong&gt;m&lt;/strong&gt;emory），函数代表多媒体操作（&lt;strong&gt;m&lt;/strong&gt;ulti&lt;strong&gt;m&lt;/strong&gt;edia）。这是我能做的最好的了。&lt;/p&gt;
&lt;h3 id=&#34;5-4构建AVX应用程序&#34;&gt;&lt;a href=&#34;#5-4构建AVX应用程序&#34; class=&#34;headerlink&#34; title=&#34;5.4构建AVX应用程序&#34;&gt;&lt;/a&gt;5.4构建AVX应用程序&lt;/h3&gt;&lt;p&gt;要构建使用AVX intrinsic的应用程序，不需要链接任何库。但是您需要包含&lt;strong&gt;imminrin .h&lt;/strong&gt;头文件。此头文件包括将AVX&amp;#x2F;AVX2函数映射到指令的其他头文件。&lt;/p&gt;
&lt;p&gt;hello_avx.c中的代码显示了一个基本的AVX应用程序的样子:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Initialize the two argument vectors */&lt;/span&gt;			&lt;span class=&#34;hljs-comment&#34;&gt;//初始化&lt;/span&gt;&lt;br&gt;  __m256 evens = _mm256_set_ps(&lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;12.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;14.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;16.0&lt;/span&gt;);&lt;br&gt;  __m256 odds = _mm256_set_ps(&lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;9.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;11.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;13.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;15.0&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Compute the difference between the two vectors */&lt;/span&gt;&lt;br&gt;  __m256 result = _mm256_sub_ps(evens, odds);			&lt;span class=&#34;hljs-comment&#34;&gt;//减法&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Display the elements of the result vector */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* f = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&amp;amp;result;					&lt;span class=&#34;hljs-comment&#34;&gt;//类型转换&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%f %f %f %f %f %f %f %f\n&amp;quot;&lt;/span&gt;,&lt;br&gt;    f[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], f[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], f[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], f[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;], f[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;], f[&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;], f[&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;], f[&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;]);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;要构建应用程序，需要告诉编译器该体系结构支持AVX。这个标志取决于编译器，gcc需要-mavx标志。因此，可以使用以下命令编译hello_avx.c源文件:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;gcc -mavx -o hello_avx hello_avx.c&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在本例中，所有函数都以_mm256开始，以_ps结束，因此我希望所有操作都清楚地涉及包含floats的256位向量。我还希望结果向量中的每个元素都等于1.0。如果运行应用程序，您将看到情况就是这样。&lt;/p&gt;
&lt;p&gt;[这就是一个简单的向量减法例子，大家可以对应数据看一下]&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;5-5初始化intrinsics&#34;&gt;&lt;a href=&#34;#5-5初始化intrinsics&#34; class=&#34;headerlink&#34; title=&#34;5.5初始化intrinsics&#34;&gt;&lt;/a&gt;5.5初始化intrinsics&lt;/h3&gt;&lt;p&gt;在对AVX向量进行操作之前，需要用数据填充向量。因此，本文讨论的第一组intrinsics用数据初始化向量。有两种方法:用标量值初始化向量和用从内存加载的数据初始化向量。&lt;/p&gt;
&lt;h4 id=&#34;5-5-1使用标量值初始化&#34;&gt;&lt;a href=&#34;#5-5-1使用标量值初始化&#34; class=&#34;headerlink&#34; title=&#34;5.5.1使用标量值初始化&#34;&gt;&lt;/a&gt;5.5.1使用标量值初始化&lt;/h4&gt;&lt;p&gt;AVX提供了将一个或多个值组合成256位向量的intrinsics funtions。表2列出了它们的名称，并提供了每个名称的描述。也有类似的intrinsics初始化128位向量，但它们是由SSE提供的，而不是AVX。函数名的唯一区别是_mm256_被替换为_mm_。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 2: Initialization Intrinsics&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_setzero_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns a floating-point vector filled with zeros&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_setzero_si256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns an integer vector whose bytes are set to zero&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_set1_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fill a vector with a floating-point value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_set1_epi8/epi16&lt;/code&gt; &lt;code&gt;_mm256_set1_epi32/epi64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fill a vector with an integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_set_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Initialize a vector with eight floats (ps) or four doubles (pd)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_set_epi8/epi16&lt;/code&gt; &lt;code&gt;_mm256_set_epi32/epi64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Initialize a vector with integers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_set_m128/m128d/&lt;/code&gt; &lt;code&gt;_mm256_set_m128i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Initialize a 256-bit vector with two 128-bit vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_setr_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Initialize a vector with eight floats (ps) or four doubles (pd) in reverse order&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_setr_epi8/epi16&lt;/code&gt; &lt;code&gt;_mm256_setr_epi32/epi64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Initialize a vector with integers in reverse order&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;表中的第一个函数是最容易理解的。_m256_setzero_ps返回一个__m256向量，包含8个设置为0的浮点数。类似地，_m256_setzero_si256返回一个__m256i向量，其字节被设置为0。例如，下面这行代码创建了一个256位的向量，其中包含4个设为0的double:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;_m256d dbl_vector = _m256_setzero_pd();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;名称中包含set1的函数接受一个值，并在整个向量中重复该值。例如，下面这行代码创建了一个__m256i，它的16个short value被设置为47:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;_m256i short_vector = _m256_set1_pd();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;表2中的其他函数包含_set_或_setr_。这些函数接受一系列值，每个向量的元素对应一个值。这些值被放置在返回的向量中，理解顺序很重要。下面的函数调用返回一个包含8个整数的向量，其值范围为1到8:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;_m256i int_vector = _m256_set_epi32(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;您可能希望值按照给定的顺序存储。但英特尔的架构是&lt;strong&gt;小端&lt;/strong&gt;存储类型的[这里很重要]，所以最低有效值(8)先存储，最高有效值(1)最后存储。您可以通过将int_vector转换为int指针并打印存储的值来验证这一点。如下代码所示:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256i int_vector = _mm256_set_epi32(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *ptr = (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&amp;amp;int_vector;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d %d %d %d %d %d %d %d\n&amp;quot;&lt;/span&gt;, ptr[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;]);&lt;br&gt;--&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果希望值按给定顺序存储，可以使用_setr_函数之一创建向量，其中r可能代表reverse。下面的代码展示了它是如何工作的:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;__m256i int_vector = _mm256_setr_epi32(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *ptr = (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&amp;amp;int_vector;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d %d %d %d %d %d %d %d\n&amp;quot;&lt;/span&gt;, ptr[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;], ptr[&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;]);&lt;br&gt;--&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有趣的是，AVX和AVX2都没有提供用无符号整数初始化向量的intrinsic。但是，它们提供了对带无符号整数的向量进行操作的函数。&lt;/p&gt;
&lt;h4 id=&#34;5-5-2从内存加载数据&#34;&gt;&lt;a href=&#34;#5-5-2从内存加载数据&#34; class=&#34;headerlink&#34; title=&#34;5.5.2从内存加载数据&#34;&gt;&lt;/a&gt;5.5.2从内存加载数据&lt;/h4&gt;&lt;p&gt;AVX&amp;#x2F;AVX2的一个常见用法是将数据从内存加载到向量中，对向量进行处理，并将结果存储回内存。第一步是使用表3中列出的intrinsic funtions完成的。最后两个函数前面有(2)，因为它们是由AVX2而不是AVX提供的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 3: Vector Load Intrinsics&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_load_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Loads a floating-point vector from an  aligned memory address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_load_si256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Loads an integer vector from an aligned memory address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_loadu_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Loads a floating-point vector from an  unaligned memory address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_loadu_si256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Loads an integer vector from an unaligned memory address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm_maskload_ps/pd&lt;/code&gt; &lt;code&gt;_mm256_maskload_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Load portions of a 128-bit&amp;#x2F;256-bit floating-point vector according to a mask&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_maskload_epi32/64&lt;/code&gt; &lt;code&gt;(2)_mm256_maskload_epi32/64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Load portions of a 128-bit&amp;#x2F;256-bit integer vector according to a mask&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;当将数据加载到向量中时，内存对齐变得特别重要。每个&lt;strong&gt;_mm256_load_&lt;/strong&gt;* intrinsic接受一个必须在32字节边界上对齐的内存地址。即地址必须能被32整除。下面的代码展示了如何在实践中使用它:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* aligned_floats = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;aligned_alloc&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt; * &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;));		&lt;span class=&#34;hljs-comment&#34;&gt;//这里使用了内存对齐&lt;/span&gt;&lt;br&gt;... Initialize data ...&lt;br&gt;__m256 vec = _mm256_load_ps(aligned_floats);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;【个人补充】关于内存对齐以及相关函数&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2022/06/12/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/&#34;&gt;内存对齐 - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xingyuanjie.top/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/&#34;&gt;AVX向量化学习(二)-内存对齐的应用 - Amicoyuan (xingyuanjie.top)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;任何使用_m256_load_*加载未对齐数据的尝试都会造成&lt;strong&gt;segmentation fault&lt;/strong&gt;。如果数据不是以32位边界对齐，则应该使用_m256_loadu_*函数。如下代码所示:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;* unaligned_floats = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt; * &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;));				&lt;span class=&#34;hljs-comment&#34;&gt;//未使用内存对齐&lt;/span&gt;&lt;br&gt;... Initialize data ...&lt;br&gt;__m256 vec = _mm256_loadu_ps(unaligned_floats);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;假设你想用AVX向量处理一个浮点数组(float)，但是数组的长度是11，不能被8整除。在这种情况下，第二个__m256向量的最后五个浮点数需要设置为0[或者使用非向量计算手段]，这样它们就不会影响计算。这种选择性加载可以用表3底部的**_maskload_**函数来完成。&lt;/p&gt;
&lt;p&gt;每个_maskload_函数接受两个参数:一个内存地址和一个与返回向量元素数量相同的整数向量。对于整数向量中最高位为1的每个元素，将从内存中读取返回向量中相应的元素。如果整数向量中的最高位为零，则返回向量中的相应元素被设置为零。&lt;/p&gt;
&lt;p&gt;一个示例将说明如何使用这些函数。mask_load.c中的代码将8个整型读入一个向量，最后3个应该设置为0。要使用的函数是_mm256_maskload_epi32，它的第二个参数应该是__m256i掩码向量。这个掩码向量包含5个最高位为1的整数和3个最高位为0的整数。下面是代码的样子:&lt;/p&gt;
&lt;p&gt;【int型在计算机的存储是补码，正数的补码最高位为0，所以这里返回0，负数的补码最高位为1，所以这里返回的是内存中相应的元素】&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i;&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; int_array[&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;300&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;500&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;600&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;700&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;800&lt;/span&gt;&amp;#125;;&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Initialize the mask vector */&lt;/span&gt;&lt;br&gt;  __m256i mask = _mm256_setr_epi32(&lt;span class=&#34;hljs-number&#34;&gt;-20&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;-72&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;-48&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;-9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;-100&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;);	&lt;span class=&#34;hljs-comment&#34;&gt;//这里需要充分理解计算机组成原理中的补码&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Selectively load data into the vector */&lt;/span&gt;&lt;br&gt;  __m256i result = _mm256_maskload_epi32(int_array, mask);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Display the elements of the result vector */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* res = (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&amp;amp;result;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d %d %d %d %d %d %d %d\n&amp;quot;&lt;/span&gt;, &lt;br&gt;    res[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;]);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果您在支持AVX2的系统上运行此应用程序，它将打印以下结果:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;300&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;500&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有三点是需要注意的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码使用_setr_函数而不是_set_来设置掩码向量的内容，因为它在将向量元素传递给函数时对它们进行排序。&lt;/li&gt;
&lt;li&gt;负整数的最高位总是1。这就是掩码向量包含五个负数和三个正数的原因。&lt;/li&gt;
&lt;li&gt;_mm256_maskload_epi32函数由AVX2提供，而不是AVX。因此，要用gcc编译这段代码，必须使用-mavx2标志而不是-mavx。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了表3中列出的函数之外，AVX2还提供了从内存加载索引数据的集合函数。&lt;/p&gt;
&lt;h2 id=&#34;6-Arithmetic-Intrinsics&#34;&gt;&lt;a href=&#34;#6-Arithmetic-Intrinsics&#34; class=&#34;headerlink&#34; title=&#34;6.Arithmetic Intrinsics&#34;&gt;&lt;/a&gt;6.Arithmetic Intrinsics&lt;/h2&gt;&lt;p&gt;数学是AVX存在的主要原因，基本操作是加、减、乘和除。本节将介绍执行这些操作的intrinsic funtions，还将介绍AVX2提供的新的融合乘法和加法函数。&lt;/p&gt;
&lt;h3 id=&#34;6-1加法和减法&#34;&gt;&lt;a href=&#34;#6-1加法和减法&#34; class=&#34;headerlink&#34; title=&#34;6.1加法和减法&#34;&gt;&lt;/a&gt;6.1加法和减法&lt;/h3&gt;&lt;p&gt;表4列出了执行加法和减法的AVX&amp;#x2F;AVX2 intrinsic。由于考虑到饱和度，它们大多数都作用于包含整数的向量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 4: Addition and Subtraction Intrinsics&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_add_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add two floating-point vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_sub_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract two floating-point vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_add_epi8/16/32/64 &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add two integer vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm236_sub_epi8/16/32/64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract two integer vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_adds_epi8/16&lt;/code&gt; &lt;code&gt;(2)_mm256_adds_epu8/16 &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add two integer vectors with saturation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_subs_epi8/16&lt;/code&gt; &lt;code&gt;(2)_mm256_subs_epu8/16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract two integer vectors with saturation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_hadd_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add two floating-point vectors horizontally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_hsub_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract two floating-point vectors horizontally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_hadd_epi16/32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add two integer vectors horizontally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_hsub_epi16/32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract two integer vectors horizontally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_hadds_epi16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add two vectors containing shorts horizontally with saturation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_hsubs_epi16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract two vectors containing shorts horizontally with saturation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_addsub_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add and subtract two floating-point vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;加法和减法整数向量时，重要的是要查看_add_&amp;#x2F;_sub_函数和_adds_&amp;#x2F;_subs_函数之间的区别。额外的s代表饱和，当结果需要的内存超过向量可以存储的内存时，就会产生饱和。Functions that take saturation into account clamp the result to the minimum&amp;#x2F;maximum value that can be stored.没有饱和的函数在发生饱和时忽略内存问题。&lt;/p&gt;
&lt;p&gt;例如，假设一个向量包含有符号字节，那么每个元素的最大值是127 (0x7F)。如果一个运算将98加到85，数学和是183 (0xB7)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果使用_mm256_add_epi8添加这些值，饱和度将被忽略，存储的结果将是-73 (0xB7)。&lt;/li&gt;
&lt;li&gt;如果使用_mm256_adds_epi8添加这些值，结果将被固定为最大值127 (0x7F)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为另一个例子，考虑两个包含有符号短整数的向量。最小值为-32,768。如果计算-18,000 - 19,000，数学结果是-37,000 (0xFFFF6F78作为32位整数)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果用_mm256_sub_epi16减去这些值，饱和度将被忽略，存储的结果将是28,536 (0x6F78)。&lt;/li&gt;
&lt;li&gt;如果用_mm256_subs_epi16减去这些值，结果将被压缩到最小值-32,768 (0x8000)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;_hadd_&amp;#x2F;_hsub_函数水平执行加法和减法。也就是说，它们不是添加或减去不同向量的元素，而是在每个向量中添加或减去&lt;strong&gt;相邻&lt;/strong&gt;的元素。结果以交错的方式存储。图1显示了_mm256_hadd_pd的工作原理，它水平地添加了两个向量A和B:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/10/avx006/Fig1.jpg&#34; alt=&#34;Image 1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 1: Horizontal Addition of Two Vectors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;水平加减元素看起来可能很奇怪，但这些操作在复数相乘时很有用。本文稍后将对此进行解释。表4中的最后一个函数_mm256_addsub_ps&amp;#x2F;pd交替减法和加法两个浮点向量的元素。也就是说，偶数元素被减去，奇数元素被加上。例如，如果vec_a包含(0.1,0.2,0.3,0.4)，vec_b包含(0.5,0.6,0.7,0.8)，则_mm256_addsub_pd(vec_a, vec_b)等于(-0.4,0.8，-0.4,1.2)【需要注意数组下标从0开始】。&lt;/p&gt;
&lt;h3 id=&#34;6-2乘法和除法&#34;&gt;&lt;a href=&#34;#6-2乘法和除法&#34; class=&#34;headerlink&#34; title=&#34;6.2乘法和除法&#34;&gt;&lt;/a&gt;6.2乘法和除法&lt;/h3&gt;&lt;p&gt;表5列出了执行乘法和除法的AVX&amp;#x2F;AVX2 intrinsic。与加法和减法一样，对整数进行运算也有一些特殊的特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 5: Multiplication and Division Intrinsics&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_mul_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two floating-point vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_mul_epi32/&lt;/code&gt; &lt;code&gt;(2)_mm256_mul_epu32 &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply the lowest four elements of vectors containing 32-bit integers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_mullo_epi16/32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply integers and store low halves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_mulhi_epi16/&lt;/code&gt; &lt;code&gt;(2)_mm256_mulhi_epu16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply integers and store high halves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_mulhrs_epi16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply 16-bit elements to form 32-bit elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_div_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Divide two floating-point vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如果两个N位的数字在计算机上相乘，结果可以占用2N位【这里你需要熟悉计算机组成原理中的乘法原理，同时思考会不会在某些函数出现精度损失的情况】。因此，只有_mm256_mul_epi32和_mm256_mul_epu32的四个低元素被乘在一起，结果是一个包含四个长整数的向量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;___m256i _mm256_mul_epi32 (m256i a, __m256i b)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Multiply the low signed 32-bit integers from each packed 64-bit element in a and b, and store the signed 64-bit results in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;FOR&lt;/span&gt; j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;i&lt;/span&gt; := j*&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt; &lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] := SignExtend&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;(a[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i]) * SignExtend&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;(b[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i]) &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;ENDFOR&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;图2:整数向量的低元素相乘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;_mullo_函数类似于整数_mul_函数，但它们不是乘低元素，而是乘两个向量的每个元素，只存储每个乘积的低一半。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m256i _mm256_mullo_epi32 (m256i a, __m256i b)&lt;/strong&gt;&lt;br&gt;#include &amp;lt;immintrin.h&amp;gt;&lt;br&gt;Instruction: vpmulld ymm, ymm, ymm&lt;br&gt;CPUID Flags: AVX2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Multiply the packed signed 32-bit integers in a and b, producing intermediate 64-bit integers, and store the low 32 bits of the intermediate integers in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;FOR&lt;/span&gt; j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; &lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;i&lt;/span&gt; := j*&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt; &lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;tmp&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] := a[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i] * b[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i] &lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[i+&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:i] := tmp[&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;ENDFOR&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;图3:整数相乘和存储低二分之一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;_mm256_mulhi_epi16和_mm256_mulhi_epu16 intrinsics类似，但是它们存储整数积的高一半。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m256i _mm256_mulhi_epi16 (m256i a, __m256i b)&lt;/strong&gt;&lt;br&gt;#include &amp;lt;immintrin.h&amp;gt;&lt;br&gt;Instruction: vpmulhw ymm, ymm, ymm&lt;br&gt;CPUID Flags: AVX2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Multiply the packed signed 16-bit integers in a and b, producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;FOR&lt;/span&gt; j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt; &lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;i&lt;/span&gt; := j*&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt; &lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;tmp&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] := SignExtend&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;(a[i+&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;:i]) * SignExtend&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;(b[i+&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;:i]) 		   	   dst[i+&lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt;:i] := tmp[&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;] &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;ENDFOR&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;6-3Fused-Multiply-and-Add-FMA&#34;&gt;&lt;a href=&#34;#6-3Fused-Multiply-and-Add-FMA&#34; class=&#34;headerlink&#34; title=&#34;6.3Fused Multiply and Add (FMA)&#34;&gt;&lt;/a&gt;6.3Fused Multiply and Add (FMA)&lt;/h3&gt;&lt;p&gt;如前所述，两个N位数字相乘的结果可以占用2N位。因此，当您将两个浮点值a和b相乘时，结果实际上是四舍五入(a * b)，其中四舍五入(x)返回最接近x的浮点值。随着进一步操作的执行，这种精度损失会增加。【这里需要注意分部乘加，先乘法后加法和使用FMA两者的计算精度】&lt;/p&gt;
&lt;p&gt;AVX2提供了将乘法和加法融合在一起的指令。也就是说，它们不是返回整数(整数(a * b) + c)，而是返回整数(a * b + c)。因此，这些指令比分别执行乘法和加法提供了更高的速度和准确性【这里正是FMA的特点】。&lt;/p&gt;
&lt;p&gt;表6列出了AVX2提供的FMA intrinsic，并包括对每个函数的描述。表中的每条指令都接受三个输入向量，我把它们分别称为a、b和c。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 6: FMA Intrinsics&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fmadd_ps/pd/&lt;/code&gt; &lt;code&gt;(2)_mm256_fmadd_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two vectors and add the product to a third (res &amp;#x3D; a * b + c)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fmsub_ps/pd/&lt;/code&gt; &lt;code&gt;(2)_mm256_fmsub_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two vectors and subtract a vector from the product (res &amp;#x3D; a * b - c)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fmadd_ss/sd &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply and add the lowest element in the vectors (res[0] &amp;#x3D; a[0] * b[0] + c[0])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fmsub_ss/sd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply and subtract the lowest element in the vectors (res[0] &amp;#x3D; a[0] * b[0] - c[0])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fnmadd_ps/pd&lt;/code&gt; &lt;code&gt;(2)_mm256_fnmadd_ps/pd &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two vectors and add the negated product to a third (res &amp;#x3D; -(a * b) + c)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fnmsub_ps/pd/&lt;/code&gt; &lt;code&gt;(2)_mm256_fnmsub_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two vectors and add the negated product to a third (res &amp;#x3D; -(a * b) - c)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fnmadd_ss/sd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply the two lowest elements and add the negated product to the lowest element of the third vector (res[0] &amp;#x3D; -(a[0] * b[0]) + c[0])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fnmsub_ss/sd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply the lowest elements and subtract the lowest element of the third vector from the negated product (res[0] &amp;#x3D; -(a[0] * b[0]) - c[0])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fmaddsub_ps/pd/&lt;/code&gt; &lt;code&gt;(2)_mm256_fmaddsub_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two vectors and alternately add and subtract from the product (res &amp;#x3D; a * b - c)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm_fmsubadd_ps/pd/&lt;/code&gt; &lt;code&gt;(2)_mmf256_fmsubadd_ps/pd &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two vectors and alternately subtract and add from the product (res &amp;#x3D; a * b - c)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如果一个内征的名称以_ps或_pd结尾，则输入向量的每个元素都包含在运算中。如果intrinsic的名称以_ss或_sd结尾，则只包括最低的元素。输出向量中的其余元素被设置为与第一个输入向量中的元素相等。例如,假设vec_a &amp;#x3D; (1.0, 2.0)， vec_b &amp;#x3D; (5.0, 10.0)， vec_c &amp;#x3D;(7.0, 14.0)。在本例中，_mm_fmadd_sd(vec_a, vec_b, vec_c)返回(12.0,2.0)，因为(1.0 * 5.0)+ 7.0 &amp;#x3D; 12.0,2.0是vec_a的第二个元素。&lt;/p&gt;
&lt;p&gt;了解_fmadd_&amp;#x2F;_fmsub_和_fnmadd_&amp;#x2F;_fnmsub_ intrinsic之间的区别很重要。后一种函数在加上或减去第三个输入向量之前，对前两个输入向量的乘积求反。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__m256d _mm256_fnmadd_pd (m256d a, m256d b, m256d c)&lt;/strong&gt;&lt;br&gt;#include &amp;lt;immintrin.h&amp;gt;&lt;br&gt;Instruction: vfnmadd132pd ymm, ymm, ymm&lt;br&gt;       vfnmadd213pd ymm, ymm, ymm&lt;br&gt;       vfnmadd231pd ymm, ymm, ymm&lt;br&gt;CPUID Flags: FMA&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Multiply packed double-precision (64-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;FOR&lt;/span&gt; j := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; to &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;i&lt;/span&gt; := j*&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt; &lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] := -(a[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] * b[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i]) + c[i+&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:i] &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;ENDFOR&lt;/span&gt;	 &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;dst&lt;/span&gt;[MAX:&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;] := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;_fmaddsub_和_fmsubadd_内在函数在第三个向量的加法和减法元素之间交替使用。_fmaddsub_ intrinsic奇数元素做加法而偶数元素做减法。_fmsubadd_ intrinsic奇数元素做减法而偶数元素做加法。fmatest.c中的代码展示了如何在实践中使用_mm256_fmaddsub_pd intrinsic。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;br&gt;  __m256d veca = _mm256_setr_pd(&lt;span class=&#34;hljs-number&#34;&gt;6.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6.0&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  __m256d vecb = _mm256_setr_pd(&lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2.0&lt;/span&gt;);&lt;br&gt;  &lt;br&gt;  __m256d vecc = _mm256_setr_pd(&lt;span class=&#34;hljs-number&#34;&gt;7.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7.0&lt;/span&gt;);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Alternately subtract and add the third vector&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     from the product of the first and second vectors */&lt;/span&gt;&lt;br&gt;  __m256d result = _mm256_fmaddsub_pd(veca, vecb, vecc);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Display the elements of the result vector */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;* res = (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)&amp;amp;result;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%lf %lf %lf %lf\n&amp;quot;&lt;/span&gt;, res[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当这段代码在支持AVX2的处理器上编译和执行时，打印的结果如下:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;5.000000&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;19.000000&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;5.000000&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;19.000000&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;FMA指令是由AVX2提供的，因此您可能认为使用gcc构建应用程序需要使用-mavx2标志。但是我发现-mfma标志是&lt;strong&gt;必需&lt;/strong&gt;的。否则，我会得到奇怪的编译错误。&lt;/p&gt;
&lt;h2 id=&#34;7-Permuting-and-Shuffling&#34;&gt;&lt;a href=&#34;#7-Permuting-and-Shuffling&#34; class=&#34;headerlink&#34; title=&#34;7.Permuting and Shuffling&#34;&gt;&lt;/a&gt;7.Permuting and Shuffling&lt;/h2&gt;&lt;p&gt;许多应用程序必须重新排列向量元素，以确保正确执行操作。&lt;/p&gt;
&lt;p&gt;AVX&amp;#x2F;AVX2为此目的提供了许多intrinsic funtion，其中两大类是_permute_函数和_shuffle_函数。本节介绍这两种类型的intrinsic。&lt;/p&gt;
&lt;h3 id=&#34;7-1Permuting&#34;&gt;&lt;a href=&#34;#7-1Permuting&#34; class=&#34;headerlink&#34; title=&#34;7.1Permuting&#34;&gt;&lt;/a&gt;7.1Permuting&lt;/h3&gt;&lt;p&gt;AVX提供了返回一个向量的函数，该向量包含一个向量的重新排列的元素。表7列出了这些排列函数，并提供了对每个函数的描述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 7: Permute Intrinsics&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm_permute_ps/pd/&lt;/code&gt; &lt;code&gt;_mm256_permute_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select elements from the input vector based on an 8-bit control value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_permute4x64_pd/&lt;/code&gt; &lt;code&gt;(2)_mm256_permute4x64_epi64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select 64-bit elements from the input vector based on an 8-bit control value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_permute2f128_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select 128-bit chunks from two input vectors based on an 8-bit control value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_permute2f128_si256 &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select 128-bit chunks from two input vectors based on an 8-bit control value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm_permutevar_ps/pd&lt;/code&gt; &lt;code&gt;_mm256_permutevar_ps/pd &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select elements from the input vector based on bits in an integer vector&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_permutevar8x32_ps&lt;/code&gt;&amp;#x2F; &lt;code&gt;(2)_mm256_permutevar8x32_epi32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select 32-bit elements (&lt;code&gt;float&lt;/code&gt;s and &lt;code&gt;int&lt;/code&gt;s) using indices in an integer vector&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;_permute_ intrinsic接受两个参数:一个输入向量和一个8位控制值。控制值的位决定输入向量的哪个元素插入到输出中。&lt;/p&gt;
&lt;p&gt;对于_mm256_permute_ps，每对控制位通过选择输入向量中的一个上或下元素来确定一个上或下输出元素。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;br&gt;  __m128 v1 = _mm_setr_ps(&lt;span class=&#34;hljs-number&#34;&gt;2.3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4.1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6.2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8.4&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; * a =(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&amp;amp;v1;&lt;br&gt;   &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; ;i++)&lt;br&gt;   &amp;#123;&lt;br&gt;   	 cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;;&lt;br&gt;   &amp;#125;&lt;br&gt;   cout&amp;lt;&amp;lt;endl;&lt;br&gt;   __m128 v2 = _mm_permute_ps (v1, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;   &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; * b =(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&amp;amp;v2;&lt;br&gt;   &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; ;i++)&lt;br&gt;   &amp;#123;&lt;br&gt;   	 cout&amp;lt;&amp;lt;b[i]&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;;&lt;br&gt;   &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;2&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;8&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Figure 4: Operation of the Permute Intrinsic Function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如图所示，输入向量的值可以在输出中重复多次。其他输入值可能根本不被选择。&lt;/p&gt;
&lt;p&gt;在_mm256_permute_pd中，控制值的低四位在相邻的双精度数对之间进行选择。_mm256_permute4x4_pd类似，但使用所有控制位来选择将哪个64位元素放在输出中。在_permute2f128_ intrinsic中，控制值从两个输入向量中选择128位块，而不是从一个输入向量中选择元素。&lt;/p&gt;
&lt;p&gt;_permutevar_ intrinsic执行与_permute_ intrinsic相同的操作。但是它们不是使用8位控制值来选择元素，而是依赖于与输入向量大小相同的整数向量。例如，_mm256_permute_ps的输入向量是_mm256，因此整数向量是_mm256i。整数向量的高位执行选择的方式与_permute_ intrinsic的8位控制值的位相同。&lt;/p&gt;
&lt;h3 id=&#34;7-2Shuffling&#34;&gt;&lt;a href=&#34;#7-2Shuffling&#34; class=&#34;headerlink&#34; title=&#34;7.2Shuffling&#34;&gt;&lt;/a&gt;7.2Shuffling&lt;/h3&gt;&lt;p&gt;像_permute_ intrinsic一样，_shuffle_ intrinsic从一个或两个输入向量中选择元素，并将它们放在输出向量中。表8列出了这些功能，并提供了每个功能的描述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 8: Shuffle Intrinsics&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_shuffle_ps/pd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select floating-point elements according to an 8-bit value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_mm256_shuffle_epi8/&lt;/code&gt; &lt;code&gt;_mm256_shuffle_epi32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select integer elements according to an 8-bit value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(2)_mm256_shufflelo_epi16/ &lt;/code&gt; &lt;code&gt;(2)_mm256_shufflehi_epi16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select 128-bit chunks from two input vectors based on an 8-bit control value&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;所有的shuffle_ intrinsic运算于256位向量。在每种情况下，最后一个参数是一个8位的值，它决定哪些输入元素应该放在输出向量中。&lt;/p&gt;
&lt;p&gt;对于_mm256_shuffle_ps，只使用控件值的高四位。如果输入向量包含整型或浮点数，则使用所有控制位。对于_mm256_shuffle_ps，前两对位选择第一个向量中的元素，后两对位选择第二个向量中的元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m256 _mm256_shuffle_ps (m256 a, __m256 b, const int imm8)&lt;/strong&gt;&lt;br&gt;#include &amp;lt;immintrin.h&amp;gt;&lt;br&gt;Instruction: vshufps ymm, ymm, ymm, imm8&lt;br&gt;CPUID Flags: AVX&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight stylus&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs stylus&#34;&gt;DEFINE SELECT4(&lt;span class=&#34;hljs-attribute&#34;&gt;src&lt;/span&gt;, control) &amp;#123; &lt;br&gt;		CASE(control&lt;span class=&#34;hljs-selector-attr&#34;&gt;[1:0]&lt;/span&gt;) OF &lt;br&gt;		&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;:	tmp&lt;span class=&#34;hljs-selector-attr&#34;&gt;[31:0]&lt;/span&gt; := &lt;span class=&#34;hljs-attribute&#34;&gt;src&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;31&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] &lt;br&gt;		&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;:	tmp&lt;span class=&#34;hljs-selector-attr&#34;&gt;[31:0]&lt;/span&gt; := &lt;span class=&#34;hljs-attribute&#34;&gt;src&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;63&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;] &lt;br&gt;		&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;:	tmp&lt;span class=&#34;hljs-selector-attr&#34;&gt;[31:0]&lt;/span&gt; := &lt;span class=&#34;hljs-attribute&#34;&gt;src&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;95&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;] &lt;br&gt;		&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;:	tmp&lt;span class=&#34;hljs-selector-attr&#34;&gt;[31:0]&lt;/span&gt; := &lt;span class=&#34;hljs-attribute&#34;&gt;src&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;127&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;96&lt;/span&gt;] &lt;br&gt;		ESAC &lt;br&gt;		RETURN tmp&lt;span class=&#34;hljs-selector-attr&#34;&gt;[31:0]&lt;/span&gt; &lt;br&gt;		&amp;#125; &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[31:0]&lt;/span&gt; := SELECT4(&lt;span class=&#34;hljs-selector-tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[127:0]&lt;/span&gt;, imm8&lt;span class=&#34;hljs-selector-attr&#34;&gt;[1:0]&lt;/span&gt;) &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[63:32]&lt;/span&gt; := SELECT4(&lt;span class=&#34;hljs-selector-tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[127:0]&lt;/span&gt;, imm8&lt;span class=&#34;hljs-selector-attr&#34;&gt;[3:2]&lt;/span&gt;) &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[95:64]&lt;/span&gt; := SELECT4(&lt;span class=&#34;hljs-selector-tag&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[127:0]&lt;/span&gt;, imm8&lt;span class=&#34;hljs-selector-attr&#34;&gt;[5:4]&lt;/span&gt;) &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[127:96]&lt;/span&gt; := SELECT4(&lt;span class=&#34;hljs-selector-tag&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[127:0]&lt;/span&gt;, imm8&lt;span class=&#34;hljs-selector-attr&#34;&gt;[7:6]&lt;/span&gt;) &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[159:128]&lt;/span&gt; := SELECT4(&lt;span class=&#34;hljs-selector-tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[255:128]&lt;/span&gt;, imm8&lt;span class=&#34;hljs-selector-attr&#34;&gt;[1:0]&lt;/span&gt;) &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[191:160]&lt;/span&gt; := SELECT4(&lt;span class=&#34;hljs-selector-tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[255:128]&lt;/span&gt;, imm8&lt;span class=&#34;hljs-selector-attr&#34;&gt;[3:2]&lt;/span&gt;) &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[223:192]&lt;/span&gt; := SELECT4(&lt;span class=&#34;hljs-selector-tag&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[255:128]&lt;/span&gt;, imm8&lt;span class=&#34;hljs-selector-attr&#34;&gt;[5:4]&lt;/span&gt;) &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[255:224]&lt;/span&gt; := SELECT4(&lt;span class=&#34;hljs-selector-tag&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[255:128]&lt;/span&gt;, imm8&lt;span class=&#34;hljs-selector-attr&#34;&gt;[7:6]&lt;/span&gt;) &lt;br&gt;dst&lt;span class=&#34;hljs-selector-attr&#34;&gt;[MAX:256]&lt;/span&gt; := &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;为了shuffle16位值，AVX2提供了_mm256_shufflelo_epi16和_mm256_shufflehi_epi16。与_mm256_shuffle_ps一样，控制值被分成四对从八个元素中选择的位。但是对于_mm256_shufflelo_epi16, 8个元素是从8个低的16位值中取出的。对于_mm256_shufflehi_epi16, 8个元素取自8个高的16位值。&lt;/p&gt;
&lt;h2 id=&#34;8-Complex-Multiplication&#34;&gt;&lt;a href=&#34;#8-Complex-Multiplication&#34; class=&#34;headerlink&#34; title=&#34;8.Complex Multiplication&#34;&gt;&lt;/a&gt;8.Complex Multiplication&lt;/h2&gt;&lt;p&gt;在信号处理应用中，复数乘法是一项必须反复执行的耗时操作。我不会深入讨论这个理论，但每个复数都可以表示为a + bi，其中a和b是浮点值，i是-1的平方根。A是实部，b是虚部。如果(a + bi)和(c + di)相乘，乘积等于(ac - bd) + (ad + bc)i。&lt;/p&gt;
&lt;p&gt;复数可以以交错的方式存储，这意味着每个实数部分后面跟着虚数部分。假设vec1是一个__m256d，存储两个复数(a + bi)和(x + yi)， vec2是一个__m256d，存储(c + di)和(z + wi)。图6说明了如何存储这些值。如图所示，prod向量存储了两个产物:(ac - bd) + (ad + bc)i和(xz - yw) + (xw + yz)i。&lt;/p&gt;
&lt;p&gt;【图片丢失】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 6: Complex Multiplication Using Vectors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我不知道用AVX&amp;#x2F;AVX2计算复杂乘积的最快方法。但我想出了一个方法，效果很好。它包括五个步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将vec1和vec2相乘，并将结果存储在vec3中。&lt;/li&gt;
&lt;li&gt;切换vec2的实&amp;#x2F;虚值。&lt;/li&gt;
&lt;li&gt;求vec2的虚数的负数。&lt;/li&gt;
&lt;li&gt;将vec1和vec2相乘，并将结果存储在vec4中。&lt;/li&gt;
&lt;li&gt;对vec3和vec4进行水平相减，得到vec1中的答案。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;complex_multi .c中的代码展示了如何使用AVX intrinsic执行此操作:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;immintrin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;&lt;br&gt;  __m256d vec1 = _mm256_setr_pd(&lt;span class=&#34;hljs-number&#34;&gt;4.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;13.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6.0&lt;/span&gt;);&lt;br&gt;  __m256d vec2 = _mm256_setr_pd(&lt;span class=&#34;hljs-number&#34;&gt;9.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7.0&lt;/span&gt;);&lt;br&gt;  __m256d neg = _mm256_setr_pd(&lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;-1.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;-1.0&lt;/span&gt;);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Step 1: Multiply vec1 and vec2 */&lt;/span&gt;&lt;br&gt;  __m256d vec3 = _mm256_mul_pd(vec1, vec2);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Step 2: Switch the real and imaginary elements of vec2 */&lt;/span&gt;&lt;br&gt;  vec2 = _mm256_permute_pd(vec2, &lt;span class=&#34;hljs-number&#34;&gt;0x5&lt;/span&gt;);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Step 3: Negate the imaginary elements of vec2 */&lt;/span&gt;&lt;br&gt;  vec2 = _mm256_mul_pd(vec2, neg);  &lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Step 4: Multiply vec1 and the modified vec2 */&lt;/span&gt;&lt;br&gt;  __m256d vec4 = _mm256_mul_pd(vec1, vec2);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Horizontally subtract the elements in vec3 and vec4 */&lt;/span&gt;&lt;br&gt;  vec1 = _mm256_hsub_pd(vec3, vec4);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* Display the elements of the result vector */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;* res = (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;*)&amp;amp;vec1;&lt;br&gt;  &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%lf %lf %lf %lf\n&amp;quot;&lt;/span&gt;, res[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], res[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]);&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;21&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;000000&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;57&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;000000&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;36&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;000000&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;127&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;000000&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这段代码作用于双向量，但是可以很容易地扩展该方法以支持浮点向量。&lt;/p&gt;
&lt;h2 id=&#34;9-Points-of-Interest&#34;&gt;&lt;a href=&#34;#9-Points-of-Interest&#34; class=&#34;headerlink&#34; title=&#34;9.Points of Interest&#34;&gt;&lt;/a&gt;9.Points of Interest&lt;/h2&gt;&lt;p&gt;许多开发人员可能会避免学习AVX&amp;#x2F;AVX2，希望编译器能够执行自动向量化。自动向量化是一个很好的特性，但是如果您了解本质，就可以重新安排算法以更好地利用SIMD处理。通过插入AVX&amp;#x2F;AVX2 intrinsic，我极大地提高了信号处理应用程序的处理速度。&lt;/p&gt;
&lt;h2 id=&#34;10-History&#34;&gt;&lt;a href=&#34;#10-History&#34; class=&#34;headerlink&#34; title=&#34;10.History&#34;&gt;&lt;/a&gt;10.History&lt;/h2&gt;&lt;p&gt;2&amp;#x2F;20 - Fixed formatting and image links&lt;/p&gt;
&lt;p&gt;4&amp;#x2F;2 - Fixed a couple typographical errors&lt;/p&gt;
&lt;h2 id=&#34;11-License&#34;&gt;&lt;a href=&#34;#11-License&#34; class=&#34;headerlink&#34; title=&#34;11.License&#34;&gt;&lt;/a&gt;11.License&lt;/h2&gt;&lt;p&gt;This article, along with any associated source code and files, is licensed under &lt;a href=&#34;http://www.codeproject.com/info/cpol10.aspx&#34;&gt;The Code Project Open License (CPOL)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Written By&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.codeproject.com/Members/mattscar&#34;&gt;Matt Scarpino&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/10/avx006/US.gif&#34; alt=&#34;United States&#34;&gt; United States&lt;/p&gt;
&lt;p&gt;I’ve been a programmer and engineer for over 20 years. I’m a certified Azure Developer Associate and an Azure IoT Developer Specialist.&lt;/p&gt;
</content>
        <category term="AVX" />
        <category term="AVX2" />
        <updated>2023-03-10T06:51:44.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/09/cuda015/</id>
        <title>CUDA使用二维网格和二位块对矩阵求和</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/09/cuda015/"/>
        <content type="html">&lt;h2 id=&#34;CUDA使用二维网格和二位块对矩阵求和&#34;&gt;&lt;a href=&#34;#CUDA使用二维网格和二位块对矩阵求和&#34; class=&#34;headerlink&#34; title=&#34;CUDA使用二维网格和二位块对矩阵求和&#34;&gt;&lt;/a&gt;CUDA使用二维网格和二位块对矩阵求和&lt;/h2&gt;&lt;p&gt;在本节中，我们将使用一个二维网格和二位块来编写一个矩阵加法核函数。首先，应该编写一个校验主函数以验证矩阵加法核函数是否能得出正确的结果：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumMatrixOnhost&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nx, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ny)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *ia = A;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *ib = B;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *ic = C;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; iy=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;iy&amp;lt;ny;iy++)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ix=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;ix&amp;lt;nx;ix++)&amp;#123;&lt;br&gt;            ic[ix]=ia[ix]+ib[ix];&lt;br&gt;        &amp;#125;&lt;br&gt;        ia += nx;&lt;br&gt;        ib += nx;&lt;br&gt;        ic += nx;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，创建一个新的核函数，目的是采用一个二维线程块来进行矩阵求和：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;__global__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumMatrixOnGPU2D&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *MatA, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *MatB, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *MatC, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nx, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ny)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ix = threadIdx.x + blockIdx.x * blockDim.x;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; iy = threadIdx.y + blockIdx.y * blockDim.y;&lt;br&gt;    ubsigned &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; idx = iy*nx + ix;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(ix &amp;lt; nx &amp;amp;&amp;amp; iy &amp;lt;ny)&lt;br&gt;        MatC[idx] = MatA[idx] + MatB[idx];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个核函数的关键步骤是将每个线程从它的线程索引映射到全局线性内存索引中，如图2-12所示。&lt;/p&gt;
&lt;p&gt;接下来，每个维度下的矩阵大小可以按如下方法设置为16384个元素：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nx = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ny = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，使用一个二维网格和二维块按如下方法设置核函数的执行配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/09/cuda015/image-20230309125059653.png&#34; alt=&#34;image-20230309125059653&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dimx = &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dimy = &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(dimx, dimy)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((nx + block.x - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)/block.x, (ny + block.y - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)/block.y)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;把所有的代码整合到名为sumMatrixOnGPU-2D-grid-2D-block.cu的文件中。主函数代码如代码清单2-7所示。&lt;/p&gt;
&lt;p&gt;代码清单2-7 使用一个二维网格和二维块的矩阵加法(sumMatrixOnGPU-2D-grid-2D-block.cu)&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s Starting...\n&amp;quot;&lt;/span&gt;,zrgv[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dev = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    cudaDeviceProp deviceProp;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CHECK&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;cudaGetDeviceProperties&lt;/span&gt;(&amp;amp;deviceProp, dev));&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Using Device %d: %s\n&amp;quot;&lt;/span&gt;,dev, deviceProp.name);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CHECK&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;cudaSetDevice&lt;/span&gt;(dev));&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up data size of matrix&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nx = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ny = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nxy = nx*ny;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nBytes = nxy *&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Matrix size: nx %d ny %d\n&amp;quot;&lt;/span&gt;,nx,ny);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *h_A, *h_B, *hostRef, *gpuRef;&lt;br&gt;    h_A = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    h_B = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    hostRef = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    gpuRef = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//initialize data at host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; iStart = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialData&lt;/span&gt; (h_A, nxy);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialData&lt;/span&gt; (h_B, nxy);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; iElaps = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;() - iStart;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(hostRef, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(gpuRef, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//add matrix at host side for result checks&lt;/span&gt;&lt;br&gt;    iStart = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;sumMatrixOnHost&lt;/span&gt; (h_A, h_B, hostRef, nx,ny);&lt;br&gt;    iElaps = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;() - iStart;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc device global memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *d_MatA, *d_MatB, *d_MatC;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; **)&amp;amp;d_MatA,nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; **)&amp;amp;d_MatB,nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; **)&amp;amp;d_MatC,nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//transfer data from host to device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_MatA, h_A, nBytes, cudaMemcpyHostToDevice);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_MatB, h_B, nBytes, cudaMemcpyHostToDevice);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//invoke kernel at host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dimx = &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dimy = &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(dimx,dimy)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((nx+block.x&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;)/block.x,(ny+block.y&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;)/block.y)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    iStart = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;();&lt;br&gt;    sumMatrixOnGPU2D&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(d_MatA, d_MatB, d_MatC, nx,ny);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaDeviceSynchronize&lt;/span&gt;();&lt;br&gt;    iElaps = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;() - iStart;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sumMatrixOnGPU2D&amp;lt;&amp;lt;&amp;lt;(%d,%d),(%d,%d)&amp;gt;&amp;gt;&amp;gt; elapsed %f sec\n&amp;quot;&lt;/span&gt;,grid.x, grid.y, block.x,block.y,iElaps);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//copy kernel result back to host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(gpuRef, d_MatC, nBytes, cudaMemcpyDeviceToHost);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//check device results&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;checkResult&lt;/span&gt;(hostRef, gpuRef,nxy);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free device global memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_MatA);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_MatB);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_MatC);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_A);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_B);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(hostRef);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(gpuRef);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//reset device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaDeviceReset&lt;/span&gt;();&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用以下命令编译并运行该代码：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nvcc -arch=sm_20 sumMatrixOnGPU-2D-grid-2D-block.cu -o matrix2D&lt;br&gt;./matrix2D&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在Tesla M2070上运行的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/09/cuda015/image-20230309224513603.png&#34; alt=&#34;image-20230309224513603&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来，调整块的尺寸为32×16并重新编译和运行该代码。核函数的执行速度几乎快了两倍：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/09/cuda015/image-20230309224626772.png&#34; alt=&#34;image-20230309224626772&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可能好奇为什么只是改变了执行配置，内核性能就几乎翻了一倍。直观地说，你可能会觉得这是因为第二次配置的线程块数是第一次配置块数的两倍，所以并行性也是两倍。你的直觉是正确的，但是，如果进一步减小块的大小变为16×16，相比第一次配置你已经将块的数量翻了四倍。如下所示，这种配置比第一个结果好但是不如第二个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/09/cuda015/image-20230309224912499.png&#34; alt=&#34;image-20230309224912499&#34;&gt;&lt;/p&gt;
&lt;p&gt;表2-3总结了不同执行配置的性能。结果显示，增加块的数量不一定能提升内核性能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/09/cuda015/image-20230309225004531.png&#34; alt=&#34;image-20230309225004531&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-09T04:34:51.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/09/cuda014/</id>
        <title>CUDA使用块和线程建立矩阵索引</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/09/cuda014/"/>
        <content type="html">&lt;h2 id=&#34;CUDA使用块和线程建立矩阵索引&#34;&gt;&lt;a href=&#34;#CUDA使用块和线程建立矩阵索引&#34; class=&#34;headerlink&#34; title=&#34;CUDA使用块和线程建立矩阵索引&#34;&gt;&lt;/a&gt;CUDA使用块和线程建立矩阵索引&lt;/h2&gt;&lt;p&gt;通常情况下，一个矩阵用行优先的方法在全局内存中进行线性存储。图2-9所示的是一个8×6矩阵的小例子。&lt;/p&gt;
&lt;p&gt;在一个矩阵加法核函数中，一个线程通常被分配一个数据元素来处理。首先要完成的任务是使用块和线程索引从全局内存中访问指定的数据。通常情况下，对一个二维示例来说，需要管理3种索引。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/09/cuda014/image-20230309113733674.png&#34; alt=&#34;image-20230309113733674&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程和块索引&lt;/li&gt;
&lt;li&gt;矩阵中给定点的坐标&lt;/li&gt;
&lt;li&gt;全局线性内存中的偏移量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一个给定的线程，首先可以通过把线程和块索引映射到矩阵坐标上来获取线程块和线程索引的全局内存偏移量，然后将这些矩阵坐标映射到全局内存的存储单元中。&lt;/p&gt;
&lt;p&gt;第一步，可以用以下公式把线程和块索引映射到矩阵坐标上：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;ix = threadIdx.x + blockIdx.x * blockDim.x;&lt;br&gt;iy = threadIdx.y + blockIdx.y * blockDim.y;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第二步，可以用以下公式把矩阵坐标映射到全局内存中的索引&amp;#x2F;存储单元上:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;idx = iy * nx + ix&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;图2-10说明了块和线程索引，矩阵坐标以及线性全局内存索引之间的对应关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/09/cuda014/image-20230309114815497.png&#34; alt=&#34;image-20230309114815497&#34;&gt;&lt;/p&gt;
&lt;p&gt;printThreadInfo函数被用于输出关于每个线程的以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程索引&lt;/li&gt;
&lt;li&gt;块索引&lt;/li&gt;
&lt;li&gt;矩阵坐标&lt;/li&gt;
&lt;li&gt;线性全局内存偏移量&lt;/li&gt;
&lt;li&gt;相应元素的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用以下命令编译并运行该程序：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nvcc -arch=sm_20 checkThreadIndex.cu -o checkIndex&lt;br&gt;./checkIndex&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对于每个线程，你可以获取以下信息：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;thread_id&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)	&lt;span class=&#34;hljs-built_in&#34;&gt;block_id&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)	&lt;span class=&#34;hljs-built_in&#34;&gt;coordinate&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)	global index &lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt; ival &lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;图2-11说明了这三项索引之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/09/cuda014/image-20230309115229368.png&#34; alt=&#34;image-20230309115229368&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码清单2-6 检查块和线程索引（checkT和readIndex.cu）&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;cuda_runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#inclde &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; CHECK(call)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; cudaError_t error = call;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(error != cudaSuccess)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Error: %s:%d, &amp;quot;&lt;/span&gt;,__FILE__, __LINE__);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code:%d, reason: %s\n&amp;quot;&lt;/span&gt;,error, &lt;span class=&#34;hljs-built_in&#34;&gt;cudaGetErrorString&lt;/span&gt;(error));&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;-10&lt;/span&gt;*error);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;initialInt&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *p, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; size)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;i&amp;lt;size;i++)&amp;#123;&lt;br&gt;        ip[i] = i;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;printMateix&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *C,&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nx, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ny)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *ic = C;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\nMatrix:	(%d.%d)\n&amp;quot;&lt;/span&gt;.nx,ny);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; iy=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;iy&amp;lt;ny;iy++)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ix=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; ix&amp;lt;nx;ix++)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%3d&amp;quot;&lt;/span&gt;,ic[ix]);&lt;br&gt;        &amp;#125;&lt;br&gt;        ic += nx;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;__global__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;printThreadIndex&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nx, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ny)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ix = threadIdx.x + blockIdx.x * blockDim.x;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; iy = threadIdx.y + blockIdx.y * blockDim.y;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; idx = iy*nx + ix;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread_id (%d,%d) block_id (%d,%d) coordinate (%d,%d) global index %2d ival %2d\n&amp;quot;&lt;/span&gt;, threadIdx.x, threadIdx.y, blockIdx.x,blockIdx.y,ix,iy,idx,A[idx]);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; argc,&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s Starting...\n&amp;quot;&lt;/span&gt;,argv[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//get device information&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dev = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    cudaDeviceProp deviceProp;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CHECK&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;cudaGetDeviceProperties&lt;/span&gt;(&amp;amp;deviceProp, dev));&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Using Device %d: %s\n&amp;quot;&lt;/span&gt;, dev, deviceProp.name);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set matrix dimension&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nx = &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; ny = &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nxy = nx*ny;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nBytes = nxy * &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *h_A;&lt;br&gt;    h_A = (&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//initialize host matrix with interger&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialInt&lt;/span&gt;(h_A, nxy);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printMatrix&lt;/span&gt;(h_A, nx, ny);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc device memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; *d_MatA;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;**)&amp;amp;d_MatA, nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//transfer data from host to device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_MatA, h_A, nBytes, cudaMemcpyHostToDevice);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up execution configuration&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((nx+block.x&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;)/block.x,(ny+block.y&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;)/block.y)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//invoke the kernel&lt;/span&gt;&lt;br&gt;    printThreadIndex&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(d_MatA,nx,ny);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaDeviceSynchronize&lt;/span&gt;();&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free host and device memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_MatA);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_A);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//reset device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaDeviceReset&lt;/span&gt;();&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-09T03:32:36.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/08/cuda013/</id>
        <title>CUDA组织并行编程</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/08/cuda013/"/>
        <content type="html">&lt;h2 id=&#34;组织并行编程&#34;&gt;&lt;a href=&#34;#组织并行编程&#34; class=&#34;headerlink&#34; title=&#34;组织并行编程&#34;&gt;&lt;/a&gt;组织并行编程&lt;/h2&gt;&lt;p&gt;从前面的例子可以看出，如果使用了合适的网格和块大小来正确地组织线程，那么可以对内核性能产生很大的影响。在向量加法的例子中，为了实现最佳性能我们调整了块的大小，并基于块大小和向量数据大小计算出了网格大小。&lt;/p&gt;
&lt;p&gt;现在通过一个矩阵加法的例子说明这一点。对于矩阵运算，传统的方法是在内核中使用一个包含二维网格与二位块的布局来组织线程。但是，这种传统的方法无法获得最佳性能。在矩阵加法中使用以下布局将有助于了解更多关于网格和块的启发性的用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有二维线程块构成的二维网格&lt;/li&gt;
&lt;li&gt;由一维线程块构成的一维网格&lt;/li&gt;
&lt;li&gt;由一维线程块构成的二维网格&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-08T14:13:01.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/07/CUDA012/</id>
        <title>CUDA给核函数计时</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/07/CUDA012/"/>
        <content type="html">&lt;h2 id=&#34;CUDA给核函数计时&#34;&gt;&lt;a href=&#34;#CUDA给核函数计时&#34; class=&#34;headerlink&#34; title=&#34;CUDA给核函数计时&#34;&gt;&lt;/a&gt;CUDA给核函数计时&lt;/h2&gt;&lt;p&gt;在内核的性能转换过程中，了解核函数的执行需要多长时间是很有帮助并且十分关键的。衡量核函数性能的方法有很多。最简单的方法是在主机端使用一个CPU或GPU计时器来计算内核的执行时间。在本节，你需要设置一个CPU计时器，并使用NVIDIA分析工具来计算执行时间。&lt;/p&gt;
&lt;h3 id=&#34;用CPU计时器计时&#34;&gt;&lt;a href=&#34;#用CPU计时器计时&#34; class=&#34;headerlink&#34; title=&#34;用CPU计时器计时&#34;&gt;&lt;/a&gt;用CPU计时器计时&lt;/h3&gt;&lt;p&gt;可以使用gettimeofday系统调用来创建一个CPU计时器，以获取系统的时钟时间，它将返回自1970年1月1日零点以来，到现在的秒数。程序中需要添加sys&amp;#x2F;time.h头文件，如代码清单2-5所示。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;cpuSecond&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;timeval&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;tp&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;gettimeofday&lt;/span&gt;(&amp;amp;tp,&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ((&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;)tp.tv_sec + (&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt;)tp.tv_usec*&lt;span class=&#34;hljs-number&#34;&gt;1.e-6&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你可以用cpuSecond函数来测试你的核函数：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; iStart = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;();&lt;br&gt;kernel_name&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;cudaDeviceSynchronize&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; iElaps = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;() - iStart;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于核函数调用与主机端程序是异步的，你需要用cudaDeviceSynchronize函数来等待所有的GPU线程运行结束。变量iElaps表示程序运行的时间，就像你用手表记录的核函数的执行时间（用秒计算）。&lt;/p&gt;
&lt;p&gt;现在，通过设置数据集大小来对一个有16M个元素的大向量进行测试：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nElem = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于GPU的可扩展性，你需要借助块和线程的索引来计算一个按行优先的数组索引 i ，并对核函数进行修改，添加限定条件（i &amp;lt; N）来检验索引值是否越界，如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;__global__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArraysOnGPU&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; N)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = blockIdx.x * blockDim.x + threadIdx.x;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( n &amp;lt; N) C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有了这些更改，可以使用不同的执行配置来衡量核函数。为了解决创建的线程总数大于向量元素总数的情况，你需要限制内核不能非法访问全局内存，如图2-7所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/07/CUDA012/image-20230307120643741.png&#34; alt=&#34;image-20230307120643741&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码清单2-5展示了如何在主函数中用CPU计时器测试向量加法的核函数。&lt;/p&gt;
&lt;p&gt;代码清单2-5	测试向量加法的核函数（sumArraysOnGPU-timer.cu）&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;cuda_runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; argc,&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s Starting...\n&amp;quot;&lt;/span&gt;,argv[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dev = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    cudaDeviceProp deviceProp;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CHECK&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;cudaGetDeviceProperties&lt;/span&gt;(&amp;amp;deviceProp, dev));&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Using Device %d: %s\n&amp;quot;&lt;/span&gt;, dev, deviceProp.name);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;CHECK&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;cudaSetDevice&lt;/span&gt;(dev));&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up data size of vectors&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nElem = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Vector size %d\n&amp;quot;&lt;/span&gt;,nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt; nBytes = nElem * &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *h_A, *h_B, *hostRef, *gpuRef;&lt;br&gt;    h_A = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    h_B = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    hostRef = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    gpuRef = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; iStart,iElaps;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//initialize data at host side&lt;/span&gt;&lt;br&gt;    iStart = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialData&lt;/span&gt;(h_A, nElem);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialData&lt;/span&gt;(h_B, nElem);&lt;br&gt;    iElaps = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;() - iStart;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(hostRef, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ,nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(gpuRef, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ,nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//add vector at host side for result checks&lt;/span&gt;&lt;br&gt;    iStart = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;sumArraysOnHost&lt;/span&gt;(h_A, h_B, hostRef, nElem);&lt;br&gt;    iElaps = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;() - iStart;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc device global memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *d_A, *d_B, *d_C;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_A, nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_B, nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_C, nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//transfer data from host to device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_A, h_A, nBytes, cudaMemcpyHostTodevice);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_B, h_B, nBytes, cudaMemcpyHostTodevice);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//invoke kernel at host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; iLen = &lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(iLen)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((nElem+block.x&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;))&lt;/span&gt;/block.x)&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    iStart = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;();&lt;br&gt;    sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(d_A, d_B, d_C,nElem);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaDeviceSynchronize&lt;/span&gt;();&lt;br&gt;    iElaps = &lt;span class=&#34;hljs-built_in&#34;&gt;cpuSecond&lt;/span&gt;() - iStart;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;%d,%d&amp;gt;&amp;gt;&amp;gt; Time elapsed %f sec\n&amp;quot;&lt;/span&gt;,grid.x, block.x, iElaps);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//copy kernel result back to host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//check device results&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;checkResult&lt;/span&gt;(hostRef, gpuRef, nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free device global memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_A);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_B);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_C);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_A);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_B);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(hostRef);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(gpuRef);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;默认的执行配置被设置为一个包含16384个块的一维网格，每个块包含1024个线程。用以下命令编译并运行程序：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nvcc sumArraysOnGPU-timer.cu -o sumArraysOnGPU-timer&lt;br&gt;./sumArraysOnGPU-timer&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在基于英特尔Sandy Bridge架构的系统上进行测试，从代码清单2-5的示例中可以看出，在GPU上进行的向量加法的运算速度是在CPU上运行向量加法的3.86倍。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;./sumArraysOnGPU-timer Starting...&lt;br&gt;Using Device 0:Tesia M2070&lt;br&gt;Vector size 16777216&lt;br&gt;sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;16384, 1024&amp;gt;&amp;gt;&amp;gt;		Time elapsed 0.002456 sec&lt;br&gt;Arrays match.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;把块的维度减少到512可以创建32768个块。在这个新的配置下，内核的性能提升了1.19倍。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;32768, 512&amp;gt;&amp;gt;&amp;gt;	Time elapsed 0.002058 sec&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果进一步将块的维度降低到256，系统将提示以下错误信息，信息表示块的总数超过一维网格的限制。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;./sumArraysOnGPU-timer Starting...&lt;br&gt;Using Device 0:	Tesla M2070&lt;br&gt;Vector size 16777216&lt;br&gt;sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;65536, 256&amp;gt;&amp;gt;&amp;gt;  Time elapsed 0.000183 sec&lt;br&gt;Error: sumArraysOnGPU-timer.cu:153, code:9, reason: invalid configuration argument&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;了解自身局限性&#34;&gt;&lt;a href=&#34;#了解自身局限性&#34; class=&#34;headerlink&#34; title=&#34;了解自身局限性&#34;&gt;&lt;/a&gt;了解自身局限性&lt;/h3&gt;&lt;p&gt;在调整执行配置时需要了解的一个关键点是对网格和块维度的限制。线程层次结构中每个层次的最大尺寸取决于设备。&lt;/p&gt;
&lt;p&gt;CUDA提供了通过查询GPU来了解这些限制的能力。&lt;/p&gt;
&lt;p&gt;对于Fermi设备，每个块的最大线程数是1024，且网格的x,y,z三个方向上的维度最大值是65535&lt;/p&gt;
&lt;h3 id=&#34;用nvprof工具计时&#34;&gt;&lt;a href=&#34;#用nvprof工具计时&#34; class=&#34;headerlink&#34; title=&#34;用nvprof工具计时&#34;&gt;&lt;/a&gt;用nvprof工具计时&lt;/h3&gt;&lt;p&gt;自CUDA 5.0以来，NVIDIA提供了一个名为nvprof的命令行分析工具，可以帮助从应用程序的CPU和GPU活动情况中获取时间线信息，其包括内核执行，内存传输以及CUDA API的调用。其用法如下。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nvprof [nvprof_args] &amp;lt;application&amp;gt;  [application_args]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以使用以下命令获取更多关于nvprof的帮助信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nvprof --help&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你可以用如下命令去测试内核：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nvprof  ./sumArraysOnGPU-timer&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;nvprof的输出结果会因为你使用的GPU类型不同而有所差异。以下结果是从Tesla GPU中得到的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/07/CUDA012/image-20230307142027522.png&#34; alt=&#34;image-20230307142027522&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上结果的前半部分来自于程序的输出，后半部分来自于nvprof的输出。可以注意到，CPU计时器显示消耗的内核时间为3.26ms，而nvprof显示消耗的内核时间为2.90ms。在这个例子中，nvprof的结果更为精确，因为CPU计时器测量的时间中包含了来自nvprof附加的时间。&lt;/p&gt;
&lt;p&gt;nvprof是一个能帮助你理解在执行应用程序时所花费的时间主要用在何处的强大工具。可以注意到，在这个例子中，主机和设备之间的数据传输需要的时间比内核执行的时间要多。图2-8所描绘的时间线（未按比例绘制），显示了在CPU上消耗的时间，数据传输所用的时间以及在GPU上计算所用的时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/03/07/CUDA012/image-20230307145539161.png&#34; alt=&#34;image-20230307145539161&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于HPC工作负载，理解程序中通信比的计算是非常重要的。如果你的应用程序用于计算的时间大于数据传输所用的时间，那么或许可以压缩这些操作，并完全隐藏与传输数据有关的延迟。如果你的应用程序用于计算的时间少于数据传输所用的时间，那么需要尽量减少主机和设备之间的传输。&lt;/p&gt;
&lt;h3 id=&#34;比较应用程序的性能将理论界限最大化&#34;&gt;&lt;a href=&#34;#比较应用程序的性能将理论界限最大化&#34; class=&#34;headerlink&#34; title=&#34;比较应用程序的性能将理论界限最大化&#34;&gt;&lt;/a&gt;比较应用程序的性能将理论界限最大化&lt;/h3&gt;&lt;p&gt;在进行程序优化时，如何将应用程序和理论界限进行比较是很重要的。由nvprof得到的计数器可以帮助你获取应用程序的指令和内存吞吐量。如果将应用程序的测量值与理论峰值进行比较，可以判定你的应用程序的性能是受限于算法还是受限于内存带宽的。以Tesla K10为例，可以得到理论上的比率：&lt;/p&gt;
&lt;p&gt;Tesla K10单精度峰值浮点运算次数&lt;/p&gt;
&lt;p&gt;745 MHz核心频率*2 GPU&amp;#x2F;芯片*  （8个多处理器&lt;em&gt;192个浮点单元&lt;/em&gt;32核心&amp;#x2F;多处理器）*2OPS&amp;#x2F;周期 &amp;#x3D; 4.58 TFLOPS （FLOPS表示每秒浮点运算次数）&lt;/p&gt;
&lt;p&gt;Tesla K10内存带宽峰值&lt;/p&gt;
&lt;p&gt;2 GPU&amp;#x2F;芯片&lt;em&gt;256位&lt;/em&gt;2500 MHz内存时钟*2 DDR&amp;#x2F;8位&amp;#x2F;字节 &amp;#x3D; 320 GB&amp;#x2F;s&lt;/p&gt;
&lt;p&gt;指令比：字节&lt;/p&gt;
&lt;p&gt;4.58 TFLOPS&amp;#x2F;320 GB&amp;#x2F;s,	也就是13.6个指令：1个字节&lt;/p&gt;
&lt;p&gt;对于Tesla K10而言，如果你的应用程序每访问一个字节所产生的指令数多于13.6，那么你的应用程序受算法性能限制。大多数HPC工作负载受内存带宽的限制。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-07T01:53:34.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/cuda011/</id>
        <title>CUDA编译与执行</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/cuda011/"/>
        <content type="html">&lt;h2 id=&#34;CUDA编译与执行&#34;&gt;&lt;a href=&#34;#CUDA编译与执行&#34; class=&#34;headerlink&#34; title=&#34;CUDA编译与执行&#34;&gt;&lt;/a&gt;CUDA编译与执行&lt;/h2&gt;&lt;p&gt;现在把所有的代码放在一个文件名为sumArraysOnGPU-small-case.cu的文件中，如代码清单2-4所示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码清单2-4		基于GPU的向量加法（sumArraysOnGPU-small-case.cu）&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;cuda_runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#define CHECK(call)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    const cudaError_t error = call;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    if(error != cudaSuccess)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;        printf(&amp;quot;Error:%s:%d, &amp;quot;, __FILE__, __LINE__);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;        printf(&amp;quot;code:%d, reason: %s\n&amp;quot;, error, cudaGetErrorString(error));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;checkResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *hostRef, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *gpuRef, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; N)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; epsilon = &lt;span class=&#34;hljs-number&#34;&gt;1.0E-8&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; match = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ;i &amp;lt; N; i++)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;abs&lt;/span&gt;(hostRef[i] - gpuRef[i]) &amp;gt; epsilon)&amp;#123;&lt;br&gt;            match = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Arrays do not match!\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;host %5.2f gpu %5.2f at current %d\n&amp;quot;&lt;/span&gt;,hostRef[i],gpuRef[i],i);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(match) &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Arrays match.\n\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;initialData&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *ip,&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; size)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//generate different seed for random number&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;time_t&lt;/span&gt; t;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;srand&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;unsigned&lt;/span&gt;) &lt;span class=&#34;hljs-built_in&#34;&gt;time&lt;/span&gt;(&amp;amp;t));&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i&amp;lt;size;i++)&amp;#123;&lt;br&gt;        ip[i] = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;)(&lt;span class=&#34;hljs-built_in&#34;&gt;rand&lt;/span&gt;() &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xFF&lt;/span&gt;) /&lt;span class=&#34;hljs-number&#34;&gt;10.0f&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArraysOnHost&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A,&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = threadIdx.x;&lt;br&gt;    C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;__gloal__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArraysOnGPU&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = threadIdx.x;&lt;br&gt;    C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; argc,&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s Starting...\n&amp;quot;&lt;/span&gt;,argv[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; dev = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaSetDevice&lt;/span&gt;(dev);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//set up data size of vectors&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nElem = &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Vector size %d\n&amp;quot;&lt;/span&gt;,nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;size_t&lt;/span&gt; nBytes = nElem * &lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *h_A, *h_B, *hostRef, *gpuRef;&lt;br&gt;    h_A = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    h_B = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    hostRef = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    gpuRef = (&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//initialize data at host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialData&lt;/span&gt;(h_A, nElem);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;initialData&lt;/span&gt;(h_B, nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(hostRef, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ,nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;memset&lt;/span&gt;(gpuRef, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ,nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//malloc device global memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *d_A, *d_B, *d_C;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_A, nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_B, nBytes);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMalloc&lt;/span&gt;((&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt;**)&amp;amp;d_C, nBytes);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//transfer data from host to device&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_A, h_A, nBytes, cudaMemcpyHostTodevice);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(d_B, h_B, nBytes, cudaMemcpyHostTodevice);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//invoke kernel at host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem/block.x)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    sumArraysOnGPU&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(d_A, d_B, d_C);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;pritnf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Execution configuration &amp;lt;&amp;lt;&amp;lt;%d, %d&amp;gt;&amp;gt;&amp;gt;\n&amp;quot;&lt;/span&gt;,grid.x,block.x);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//copy kernel result back to host side&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaMemcpy&lt;/span&gt;(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//add vector at host side for result checks&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;sumArraysOnHost&lt;/span&gt;(h_A, h_B, hostRef, nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//check device results&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;checkResult&lt;/span&gt;(hostRef, gpuRef, nElem);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free device global memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_A);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_B);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;cudaFree&lt;/span&gt;(d_C);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//free host memory&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_A);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(h_B);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(hostRef);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(gpuRef);&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这段代码中，向量大小被设置为32，如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nElem = &lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行配置被放入一个块内，其中包含32个元素：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem/block.x)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用以下命令编译和执行该带啊吗：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nvcc sumArraysOnGPU-small-case.cu -o addvector&lt;br&gt;./addvector&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;系统报告如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;./addvector Starting...&lt;br&gt;Vector size 32&lt;br&gt;Execution configuration &amp;lt;&amp;lt;&amp;lt;1,32&amp;gt;&amp;gt;&amp;gt;&lt;br&gt;Arrays match.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果你将执行配置重新定义为32个块，每个块只有一个元素，如下所示；&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;dim3 &lt;span class=&#34;hljs-title&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(nElem)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么就需要在代码清单2-4中对核函数sumArraysOnGPU进行修改：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;用&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = threadIdx.x;    替换&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = blockIdx.x;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一般情况下，可以基于给定的一维网格和块的信息来计算全局数据访问的唯一索引：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;__gloal__ &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sumArraysOnGPU&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *A, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *B, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *C)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = blockIdx.x * blockDim.x * threadIdx.x;&lt;br&gt;    C[i] = A[i] + B[i];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你需要确保一般情况下进行更改所产生结果的正确性。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-06T08:18:09.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/cuda010/</id>
        <title>CUDA处理错误</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/cuda010/"/>
        <content type="html">&lt;h2 id=&#34;CUDA处理错误&#34;&gt;&lt;a href=&#34;#CUDA处理错误&#34; class=&#34;headerlink&#34; title=&#34;CUDA处理错误&#34;&gt;&lt;/a&gt;CUDA处理错误&lt;/h2&gt;&lt;p&gt;由于许多CUDA调用是异步的，所以有时可能很难确定某个错误是由哪一步程序引起的。定义一个错误处理宏封装所有的CUDA API调用，这简化了错误检查过程：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;define&lt;/span&gt; CHECK(call)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; cudaError_t error = call;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(error != cudaSuccess)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Error:%s:%d, &amp;quot;&lt;/span&gt;, __FILE__, __LINE__);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code:%d, reason: %s\n&amp;quot;&lt;/span&gt;, error, &lt;span class=&#34;hljs-built_in&#34;&gt;cudaGetErrorString&lt;/span&gt;(error));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;例如，你可以在以下代码中使用宏：&lt;/p&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;&lt;span class=&#34;hljs-constructor&#34;&gt;CHECK(&lt;span class=&#34;hljs-params&#34;&gt;cudaMemcpy&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;d_C&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;gpuRef&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;nBytes&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;cudaMemcpyHostToDevice&lt;/span&gt;)&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果内存拷贝或之前的异步操作产生了错误，这个宏会报告错误代码，并输出一个可读信息，然后停止程序。也可以用下述方法，在核函数调用后检查核函数错误：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kernel_function&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(argument list);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;CHECK&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;cudaDeviceSynchronize&lt;/span&gt;());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;CHECK(cudaDeviceSynchronize())会阻塞主机端线程的运行直到设备端所有的请求任务都结束，并确保最后的核函数启动部分不会出错。以上仅是以调试为目的的，因为在核函数启动后添加这个检查点会阻塞主机端线程，使该检查点成为全局屏障。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-06T08:17:59.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/03/06/cuda009/</id>
        <title>CUDA验证核函数</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/03/06/cuda009/"/>
        <content type="html">&lt;h2 id=&#34;CUDA验证核函数&#34;&gt;&lt;a href=&#34;#CUDA验证核函数&#34; class=&#34;headerlink&#34; title=&#34;CUDA验证核函数&#34;&gt;&lt;/a&gt;CUDA验证核函数&lt;/h2&gt;&lt;p&gt;既然你已经编写了核函数，你如何能知道它是否正确运行？你需要一个主机函数来验证核函数的结果。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;checkResult&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *hostRef, &lt;span class=&#34;hljs-keyword&#34;&gt;float&lt;/span&gt; *gpuRef, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; N)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; epsilon = &lt;span class=&#34;hljs-number&#34;&gt;1.0E-8&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; match = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ;i &amp;lt; N; i++)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;abs&lt;/span&gt;(hostRef[i] - gpuRef[i]) &amp;gt; epsilon)&amp;#123;&lt;br&gt;            match = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Arrays do not match!\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;host %5.2f gpu %5.2f at current %d\n&amp;quot;&lt;/span&gt;,hostRef[i],gpuRef[i],i);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(match) &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Arrays match.\n\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;验证核函数代码&#34;&gt;&lt;a href=&#34;#验证核函数代码&#34; class=&#34;headerlink&#34; title=&#34;验证核函数代码&#34;&gt;&lt;/a&gt;验证核函数代码&lt;/h3&gt;&lt;p&gt;除了许多可用的调试工具外，还有两个非常简单实用的方法可以验证核函数。&lt;/p&gt;
&lt;p&gt;首先，你可以在Fermi及更高版本的设备端的核函数中使用printf函数。&lt;/p&gt;
&lt;p&gt;其次，可以将执行参数设置为&amp;lt;&amp;lt;&amp;lt;1,1&amp;gt;&amp;gt;&amp;gt;，因此强制用一个块和一个线程执行核函数，这模拟了串行执行程序。这对于调试和验证结果是否正确是非常有用的，而且，如果你遇到了运算次序的问题，这有助于你对比验证数值结果是否是按位精确的。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher &lt;/p&gt;
</content>
        <category term="CUDA" />
        <updated>2023-03-06T08:06:35.000Z</updated>
    </entry>
</feed>
