{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"hpc\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/06/12/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/",
            "url": "http://example.com/2022/06/12/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/",
            "title": "MPI学习(一)-简单的发送接收",
            "date_published": "2022-06-12T07:11:29.651Z",
            "content_html": "<h1 id=\"MPI-简单的发送接收\"><a href=\"#MPI-简单的发送接收\" class=\"headerlink\" title=\"MPI-简单的发送接收\"></a>MPI-简单的发送接收</h1><p>打印来自进程问候语句的MPI程序</p>\n<h2 id=\"所使用的MPI原语\"><a href=\"#所使用的MPI原语\" class=\"headerlink\" title=\"所使用的MPI原语\"></a>所使用的MPI原语</h2><p><img src=\"/2022/06/12/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/mpi001.png\"></p>\n<p><img src=\"/2022/06/12/MPI%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6/mpi002.png\"></p>\n<h2 id=\"程序运行平台\"><a href=\"#程序运行平台\" class=\"headerlink\" title=\"程序运行平台\"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>mpi&#x2F;intel&#x2F;2017.5</p>\n<h2 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h2><p>mpicc  3.1.cpp -o 3.1</p>\n<h2 id=\"运行指令\"><a href=\"#运行指令\" class=\"headerlink\" title=\"运行指令\"></a>运行指令</h2><p>mpirun -np 4 .&#x2F;3.1(本地提交,采取4个进程)</p>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mpi.h&gt;</span>   <span class=\"hljs-comment\">//头文件</span></span><br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAX_STRING = <span class=\"hljs-number\">100</span> ;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> **argv)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">char</span> greeting[MAX_STRING];<br>\t<span class=\"hljs-keyword\">int</span> comm_sz;<br>\t<span class=\"hljs-keyword\">int</span> my_rank;<br>\tMPI_Status status;<br><br>\t<span class=\"hljs-built_in\">MPI_Init</span>(&amp;argc,&amp;argv);<br><br>\t<span class=\"hljs-built_in\">MPI_Comm_size</span>(MPI_COMM_WORLD,&amp;comm_sz);<br>\t<span class=\"hljs-built_in\">MPI_Comm_rank</span>(MPI_COMM_WORLD,&amp;my_rank);<br>\t<br>\t<span class=\"hljs-keyword\">if</span>(my_rank != <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//其他进程向0号进程发消息</span><br>\t\t<span class=\"hljs-built_in\">sprintf</span>(greeting,<span class=\"hljs-string\">&quot;Greetings from process %d of %d!&quot;</span>,my_rank,comm_sz);<br>\t\t<span class=\"hljs-built_in\">MPI_Send</span>(greeting,<span class=\"hljs-built_in\">strlen</span>(greeting)+<span class=\"hljs-number\">1</span>,MPI_CHAR,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,MPI_COMM_WORLD); <br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Greetings from process %d of %d!\\n&quot;</span>,my_rank,comm_sz);<br>\t\t<span class=\"hljs-comment\">//0号进程接受来自其他进程的消息并输出</span><br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> q=<span class=\"hljs-number\">1</span>;q&lt;comm_sz;q++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">MPI_Recv</span>(greeting,MAX_STRING,MPI_CHAR,q,<span class=\"hljs-number\">0</span>,MPI_COMM_WORLD,&amp;status);<br>\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>,greeting);<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">MPI_Finalize</span>();<br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Greetings from process <span class=\"hljs-number\">0</span> of <span class=\"hljs-number\">4</span>!<br>Greetings from process <span class=\"hljs-number\">1</span> of <span class=\"hljs-number\">4</span>!<br>Greetings from process <span class=\"hljs-number\">2</span> of <span class=\"hljs-number\">4</span>!<br>Greetings from process <span class=\"hljs-number\">3</span> of <span class=\"hljs-number\">4</span>!<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "MPI"
            ]
        },
        {
            "id": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/",
            "url": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/",
            "title": "AVX向量化学习(二)-内存对齐的应用",
            "date_published": "2022-06-12T07:11:29.549Z",
            "content_html": "<h1 id=\"AVX指令集的简单操作-内存对齐版\"><a href=\"#AVX指令集的简单操作-内存对齐版\" class=\"headerlink\" title=\"AVX指令集的简单操作(内存对齐版)\"></a>AVX指令集的简单操作(内存对齐版)</h1><p>使用AVX指令集进行2个double型的数组相加操作</p>\n<h2 id=\"常用的内存对齐函数\"><a href=\"#常用的内存对齐函数\" class=\"headerlink\" title=\"常用的内存对齐函数\"></a>常用的内存对齐函数</h2><p>因为AVX中要求mem__addr必须在32字节边界上对齐，否则可能会产生通用保护异常。  </p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)_mm_malloc(<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>),<span class=\"hljs-number\">32</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">aligned_alloc</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__attribute__ ((<span class=\"hljs-built_in\">aligned</span>(<span class=\"hljs-number\">32</span>)))<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>]  =&#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256d _mm256_load_pd (<span class=\"hljs-keyword\">double</span> <span class=\"hljs-keyword\">const</span> * mem_addr)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into dst. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>] := MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr]<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-1\"><a href=\"#2-1\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256 _mm256_add_ps (__m256 a, __m256 b)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">7</span><br>\t<span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">32</span><br>\t<span class=\"hljs-attribute\">dst</span>[i+<span class=\"hljs-number\">31</span>:i] := a[i+<span class=\"hljs-number\">31</span>:i] + b[i+<span class=\"hljs-number\">31</span>:i]<br><span class=\"hljs-attribute\">ENDFOR</span><br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-stream的作用：绕过缓存直接写入内存\"><a href=\"#3-stream的作用：绕过缓存直接写入内存\" class=\"headerlink\" title=\"3.stream的作用：绕过缓存直接写入内存\"></a>3.stream的作用：绕过缓存直接写入内存</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> _mm256_stream_pd (<span class=\"hljs-keyword\">double</span> * mem_addr, __m256d a)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory using a non-temporal memory hint. mem_addr must be aligned on a 32-byte boundary or a general-protection exception may be generated.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr] := a[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"样例程序举例：\"><a href=\"#样例程序举例：\" class=\"headerlink\" title=\"样例程序举例：\"></a>样例程序举例：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;malloc.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span>*\ta =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">9</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">double</span>*\tb =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">4</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">double</span> af[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125; ;<br>\t<span class=\"hljs-keyword\">double</span> bf[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span>*\tc =(<span class=\"hljs-keyword\">double</span>*)<span class=\"hljs-built_in\">memalign</span>(<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">4</span>*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>));<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i =<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\ta[i]=af[i];<br>\t\tb[i]=bf[i];<br>\t&#125;<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t__m256d v0;<br>\t__m256d v1;<br>\t__m256d v2;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span><span class=\"hljs-number\">-4</span>;i+=<span class=\"hljs-number\">4</span>)<br>\t&#123;\t<br>\t\t\tv0 = _mm256_load_pd(a+i);<br>\t\t\tv1 = _mm256_load_pd(b+i);<br>\t\t\tv2=_mm256_add_pd(v0,v1);<br>\t\t \t_mm256_stream_pd(c+i,v2);<br>\t\t\t<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure>\n\n<h2 id=\"样例程序输出：\"><a href=\"#样例程序输出：\" class=\"headerlink\" title=\"样例程序输出：\"></a>样例程序输出：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "url": "http://example.com/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "title": "AVX向量化学习(一)",
            "date_published": "2022-06-12T07:11:29.538Z",
            "content_html": "<h1 id=\"AVX指令集的简单操作\"><a href=\"#AVX指令集的简单操作\" class=\"headerlink\" title=\"AVX指令集的简单操作\"></a>AVX指令集的简单操作</h1><p>使用AVX指令集进行2个double型的数组相加操作</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256 _mm256_loadu_ps (<span class=\"hljs-keyword\">float</span> <span class=\"hljs-keyword\">const</span> * mem_addr)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into dst. mem_addr does not need to be aligned on any particular boundary.</p>\n<h3 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>] := MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr]<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256d _mm256_add_pd (__m256d a, __m256d b)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Description-1\"><a href=\"#Description-1\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.</p>\n<h3 id=\"Operation-1\"><a href=\"#Operation-1\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span><br>\ti := j*<span class=\"hljs-number\">64</span><br>\tdst[i+<span class=\"hljs-number\">63</span>:i] := a[i+<span class=\"hljs-number\">63</span>:i] + b[i+<span class=\"hljs-number\">63</span>:i]<br>ENDFOR<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> _mm256_storeu_pd (<span class=\"hljs-keyword\">double</span> * mem_addr, __m256d a)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Description-2\"><a href=\"#Description-2\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory. mem_addr does not need to be aligned on any particular boundary.</p>\n<h3 id=\"Operation-2\"><a href=\"#Operation-2\" class=\"headerlink\" title=\"Operation\"></a>Operation</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr] := a[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"未进行AVX向量化的情况\"><a href=\"#未进行AVX向量化的情况\" class=\"headerlink\" title=\"未进行AVX向量化的情况\"></a>未进行AVX向量化的情况</h2><h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> c[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span> ;i&lt;<span class=\"hljs-number\">9</span>;i++)\t<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t\t<br>\t&#125;<br>\t<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c.\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"进行AVX向量化的情况\"><a href=\"#进行AVX向量化的情况\" class=\"headerlink\" title=\"进行AVX向量化的情况\"></a>进行AVX向量化的情况</h2><h3 id=\"程序源代码-1\"><a href=\"#程序源代码-1\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> c[<span class=\"hljs-number\">9</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>\t__m256d v0;<br>\t__m256d v1;<br>\t__m256d v2;<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span><span class=\"hljs-number\">-4</span>;i+=<span class=\"hljs-number\">4</span>)<br>\t&#123;\t<br>\t\t\tv0 = _mm256_loadu_pd(a+i);<br>\t\t\tv1 = _mm256_loadu_pd(b+i);<br>\t\t\tv2=_mm256_add_pd(v0,v1);<br>\t\t \t_mm256_storeu_pd(c+i,v2);<br>\t\t\t<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\tc[i]=a[i]+b[i];<br>\t<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is c with AVX.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,c[i]);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序输出-1\"><a href=\"#程序输出-1\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is c with AVX.<br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">5.400000</span><br><span class=\"hljs-number\">9.700000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">9.200000</span><br><span class=\"hljs-number\">16.500000</span><br><span class=\"hljs-number\">12.800000</span><br><span class=\"hljs-number\">13.000000</span><br><span class=\"hljs-number\">8.700000</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/05/20/slurm001/",
            "url": "http://example.com/2022/05/20/slurm001/",
            "title": "Slurm",
            "date_published": "2022-05-20T09:43:02.000Z",
            "content_html": "<h2 id=\"Slurm\"><a href=\"#Slurm\" class=\"headerlink\" title=\"Slurm\"></a>Slurm</h2><h4 id=\"1-sstat-查看RUNNING作业\"><a href=\"#1-sstat-查看RUNNING作业\" class=\"headerlink\" title=\"1.sstat 查看RUNNING作业\"></a>1.sstat 查看RUNNING作业</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sstat -e<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/slurm001/image-20220520174453969.png\" alt=\"image-20220520174453969\"></p>\n<p><strong>使用举例：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sstat -a --format=&quot;JobId,Pids,AveCPU,AveRSS,MaxRSS&quot;  1755818<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/slurm001/image-20220520175001331.png\" alt=\"image-20220520175001331\"></p>\n<h4 id=\"2-sacct-查看FINISHED作业\"><a href=\"#2-sacct-查看FINISHED作业\" class=\"headerlink\" title=\"2.sacct 查看FINISHED作业\"></a>2.sacct 查看FINISHED作业</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sacct -e<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/slurm001/image-20220520174622868.png\" alt=\"image-20220520174622868\"></p>\n<p><strong>使用举例：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sacct --format=&quot;JobId,Elapsed,CPUTime,CPUTimeRAW,AveCPU,TotalCPU,UserCPU,SystemCPU,AveRSS,MaxRSS&quot; -j 1754217<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/slurm001/image-20220520174807162.png\" alt=\"image-20220520174807162\"></p>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><p><a href=\"https://blog.csdn.net/kongxx/article/details/52556943\">(28条消息) Slurm查看作业CPU和MEM_kongxx的博客-CSDN博客_slurm 查看节点</a></p>\n",
            "tags": [
                "Linux",
                "Slurm"
            ]
        },
        {
            "id": "http://example.com/2022/05/20/numactl001/",
            "url": "http://example.com/2022/05/20/numactl001/",
            "title": "numactl",
            "date_published": "2022-05-20T09:35:59.000Z",
            "content_html": "<ol>\n<li></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">numactl --hardware<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/numactl001/image-20220520173911653.png\" alt=\"image-20220520173911653\"></p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shelll\">numastat<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/numactl001/image-20220520174030171.png\" alt=\"image-20220520174030171\"></p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">numactl --show<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/numactl001/image-20220520174148487.png\" alt=\"image-20220520174148487\"></p>\n<h5 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h5><p><a href=\"https://blog.csdn.net/qccz123456/article/details/81979819\">(28条消息) Linux工具之numactl_qccz123456的博客-CSDN博客_numactl</a></p>\n<p><a href=\"https://baijiahao.baidu.com/s?id=1699088343604813491&wfr=spider&for=pc&searchword=numactl\">宋宝华：为什么numactl内存绑定对代码段不起作用 (baidu.com)</a></p>\n",
            "tags": [
                "Linux",
                "Numactl"
            ]
        },
        {
            "id": "http://example.com/2022/05/20/Linux002/",
            "url": "http://example.com/2022/05/20/Linux002/",
            "title": "linux的jobs,fg,bg命令",
            "date_published": "2022-05-20T09:13:08.000Z",
            "content_html": "<h3 id=\"linux让前台程序脱离终端运行\"><a href=\"#linux让前台程序脱离终端运行\" class=\"headerlink\" title=\"linux让前台程序脱离终端运行\"></a>linux让前台程序脱离终端运行</h3><p>1.首先运行你的程序</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520171436032.png\" alt=\"image-20220520171436032\"></p>\n<p>2.随后使用Ctrl + z，挂起你的进程</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520171510946.png\" alt=\"image-20220520171510946\"></p>\n<p>3.然后使用jobs查看所有的进程</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520171913979.png\" alt=\"image-20220520171913979\"></p>\n<p>4.随后使用bg+id，表示该任务为后台1号任务</p>\n<p>bg命令用于将作业放到后台运行，使前台可以执行其他任务</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520172110992.png\" alt=\"image-20220520172110992\"></p>\n<h3 id=\"linux让后台程序移动到前台终端\"><a href=\"#linux让后台程序移动到前台终端\" class=\"headerlink\" title=\"linux让后台程序移动到前台终端\"></a>linux让后台程序移动到前台终端</h3><p>Linux常用命令fg主要用于将后台作业移动到前台终端运行</p>\n<p><img src=\"/2022/05/20/Linux002/image-20220520172358345.png\" alt=\"image-20220520172358345\"></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2022/05/20/Linux001/",
            "url": "http://example.com/2022/05/20/Linux001/",
            "title": "Linux常用指令",
            "date_published": "2022-05-20T09:08:45.000Z",
            "content_html": "<h2 id=\"Linux常用指令\"><a href=\"#Linux常用指令\" class=\"headerlink\" title=\"Linux常用指令\"></a>Linux常用指令</h2><h4 id=\"杀死进程\"><a href=\"#杀死进程\" class=\"headerlink\" title=\"杀死进程\"></a>杀死进程</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">kill <span class=\"hljs-number\">-9</span> id<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/05/20/Linux001/image-20220520171246860.png\" alt=\"image-20220520171246860\"></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2022/05/08/tool004/",
            "url": "http://example.com/2022/05/08/tool004/",
            "title": "gcov代码覆盖率测试-完整样例-SLIC",
            "date_published": "2022-05-08T02:34:59.000Z",
            "content_html": "<h2 id=\"gcov代码覆盖率测试-完整样例-SLIC\"><a href=\"#gcov代码覆盖率测试-完整样例-SLIC\" class=\"headerlink\" title=\"gcov代码覆盖率测试-完整样例-SLIC\"></a>gcov代码覆盖率测试-完整样例-SLIC</h2><h3 id=\"gcov代码覆盖率测试介绍：\"><a href=\"#gcov代码覆盖率测试介绍：\" class=\"headerlink\" title=\"gcov代码覆盖率测试介绍：\"></a>gcov代码覆盖率测试介绍：</h3><p><a href=\"https://xingyuanjie.top/2022/01/18/tool002/\">gcov代码覆盖率测试 - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<h3 id=\"完整样例-SLIC：\"><a href=\"#完整样例-SLIC：\" class=\"headerlink\" title=\"完整样例-SLIC：\"></a>完整样例-SLIC：</h3><p><a href=\"https://xingyuanjie.top/2022/05/08/tool004/result.zip\">https://xingyuanjie.top/2022/05/08/tool004/result.zip</a></p>\n",
            "tags": [
                "性能分析工具",
                "gcov"
            ]
        },
        {
            "id": "http://example.com/2022/04/02/mpi006/",
            "url": "http://example.com/2022/04/02/mpi006/",
            "title": "MPI学习(六)-两个矩阵相加MPI版本",
            "date_published": "2022-04-02T08:07:46.000Z",
            "content_html": "<h1 id=\"MPI学习-六-两个矩阵相加MPI版本\"><a href=\"#MPI学习-六-两个矩阵相加MPI版本\" class=\"headerlink\" title=\"MPI学习(六)-两个矩阵相加MPI版本\"></a>MPI学习(六)-两个矩阵相加MPI版本</h1><p>这里，我们演示了两个简单的程序，一个是矩阵相加串行版本，一个是矩阵相加MPI版本</p>\n<h2 id=\"串行版本\"><a href=\"#串行版本\" class=\"headerlink\" title=\"串行版本\"></a>串行版本</h2><h3 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<br>\t\t\t\t<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<br>\t\t\t\t<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">12</span>,<br>\t\t\t\t<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">16</span>&#125;;<br>\t<span class=\"hljs-keyword\">int</span> b[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>]=&#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<br>\t\t\t\t<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<br>\t\t\t\t<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">17</span>,<span class=\"hljs-number\">5</span>,<br>\t\t\t\t<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">3</span>&#125;;<br>\t<span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<br>\t<span class=\"hljs-built_in\">memset</span>(c,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(c)); <br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">4</span>;j++)<br>\t\t&#123;<br>\t\t\tc[i][j]=a[i][j]+b[i][j];<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">4</span>;j++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,c[i][j]);<br>\t\t&#125;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">6</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">17</span><br><span class=\"hljs-number\">20</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">17</span><br><span class=\"hljs-number\">28</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">35</span> <span class=\"hljs-number\">19</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"MPI版本\"><a href=\"#MPI版本\" class=\"headerlink\" title=\"MPI版本\"></a>MPI版本</h2><h3 id=\"程序运行平台\"><a href=\"#程序运行平台\" class=\"headerlink\" title=\"程序运行平台\"></a>程序运行平台</h3><p>北京超级云计算中心A3分区</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>mpi&#x2F;intel&#x2F;2017.5</p>\n<h3 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h3><p>mpicxx mpi006.c -o mpi006</p>\n<h3 id=\"运行指令\"><a href=\"#运行指令\" class=\"headerlink\" title=\"运行指令\"></a>运行指令</h3><p>srun -p amd_256 -N 1 -n  5  .&#x2F;mpi006(使用SLURM任务调度系统)</p>\n<p>1个分区，核数为5</p>\n<h3 id=\"程序源代码-1\"><a href=\"#程序源代码-1\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;mpi.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc ,<span class=\"hljs-keyword\">char</span> **argv)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<br>\t\t\t\t<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<br>\t\t\t\t<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">12</span>,<br>\t\t\t\t<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">16</span>&#125;;<br>\t<span class=\"hljs-keyword\">int</span> b[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>]=&#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<br>\t\t\t\t<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<br>\t\t\t\t<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">17</span>,<span class=\"hljs-number\">5</span>,<br>\t\t\t\t<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">3</span>&#125;;<br>\t<span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<br>\t<span class=\"hljs-keyword\">int</span> tmp[<span class=\"hljs-number\">4</span>];<br>\t<span class=\"hljs-built_in\">memset</span>(c,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(c));<br>\t<span class=\"hljs-keyword\">int</span> myid, numprocs;<br>\tMPI_Status status;<br>\tMPI_Request request;<br>\t<span class=\"hljs-built_in\">MPI_Init</span>(&amp;argc,&amp;argv);<br>\t<span class=\"hljs-built_in\">MPI_Comm_size</span>(MPI_COMM_WORLD,&amp;numprocs);<br>\t<span class=\"hljs-built_in\">MPI_Comm_rank</span>(MPI_COMM_WORLD,&amp;myid);<br>\t<span class=\"hljs-keyword\">if</span>(myid == <span class=\"hljs-number\">0</span>)\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//0号进程接受来自其他进程的消息</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;numprocs;i++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">MPI_Irecv</span>(&amp;c[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">4</span>,MPI_INT,i,<span class=\"hljs-number\">0</span>,MPI_COMM_WORLD,&amp;request);\t\t<span class=\"hljs-comment\">//采用非阻塞接受</span><br>\t\t\t<span class=\"hljs-built_in\">MPI_Wait</span>(&amp;request,&amp;status);<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++)\t\t\t\t\t\t\t<span class=\"hljs-comment\">//打印矩阵</span><br>\t\t&#123;<br>\t\t\t<br>\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">4</span>;j++)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,c[i][j]);<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span>(myid != <span class=\"hljs-number\">0</span> )\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//当进程不是0号进程时，则向0号进程发送消息</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">memset</span>(tmp,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(tmp));\t\t\t\t\t\t<span class=\"hljs-comment\">//初始化tmp数组</span><br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++)<br>\t\t&#123;<br>\t\t\ttmp[i]=a[myid<span class=\"hljs-number\">-1</span>][i]+b[myid<span class=\"hljs-number\">-1</span>][i];\t\t\t<span class=\"hljs-comment\">//用tmp来临时存储相加结果，随后发送给0号进程</span><br>\t\t\t<br>\t\t&#125;<br>\t\t<span class=\"hljs-built_in\">MPI_Isend</span>(&amp;tmp,<span class=\"hljs-number\">4</span>,MPI_INT,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,MPI_COMM_WORLD,&amp;request);\t\t\t\t\t<span class=\"hljs-comment\">//采用非阻塞发送</span><br>\t\t<span class=\"hljs-built_in\">MPI_Wait</span>(&amp;request,&amp;status);<br>\t&#125;<br>\t<span class=\"hljs-built_in\">MPI_Finalize</span>();\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"程序输出-1\"><a href=\"#程序输出-1\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">11</span> <br><span class=\"hljs-number\">6</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">17</span> <br><span class=\"hljs-number\">20</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">17</span> <br><span class=\"hljs-number\">28</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">35</span> <span class=\"hljs-number\">19</span><br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "MPI"
            ]
        },
        {
            "id": "http://example.com/2022/01/19/tool003/",
            "url": "http://example.com/2022/01/19/tool003/",
            "title": "perf-系统级性能分析工具",
            "date_published": "2022-01-19T03:56:40.000Z",
            "content_html": "<p>系统级性能优化通常包括两个阶段：性能剖析（performance profiling）和代码优化。</p>\n<p>性能剖析的目标是寻找性能瓶颈，查找引发性能问题的原因及热点代码。</p>\n<p>代码优化的目标是针对具体性能问题而优化代码或编译选项，以改善软件性能。</p>\n<p>在性能剖析阶段，需要借助于现有的profiling工具，如perf等。在代码优化阶段往往需要借助开发者的经验，编写简洁高效的代码，甚至在汇编级别合理使用各种指令，合理安排各种指令的执行顺序。</p>\n<p>perf是一款Linux性能分析工具。Linux性能计数器是一个新的基于内核的子系统，它提供一个性能分析框架，比如硬件（CPU、PMU(Performance Monitoring Unit)）功能和软件(软件计数器、tracepoint)功能。<br>通过perf，应用程序可以利用PMU、tracepoint和内核中的计数器来进行性能统计。它不但可以分析制定应用程序的性能问题（per thread），也可以用来分析内核的性能问题，当然也可以同时分析应用程序和内核，从而全面理解应用程序中的性能瓶颈。</p>\n<p>使用perf，可以分析程序运行期间发生的硬件事件，比如instructions retired、processor clock cycles等；也可以分析软件时间，比如page fault和进程切换。</p>\n<p>perf是一款综合性分析工具，大到系统全局性性能，再小到进程线程级别，甚至到函数及汇编级别。</p>\n<p>perf提供了十八般武器，可以拿大刀大卸八块，也可以拿起手术刀细致分析。</p>\n<h1 id=\"1-背景知识\"><a href=\"#1-背景知识\" class=\"headerlink\" title=\"1. 背景知识\"></a>1. 背景知识</h1><h2 id=\"1-1-tracepoints\"><a href=\"#1-1-tracepoints\" class=\"headerlink\" title=\"1.1 tracepoints\"></a>1.1 tracepoints</h2><p>tracepoints是散落在内核源码中的一些hook，它们可以在特定的代码被执行到时触发，这一特定可以被各种trace&#x2F;debug工具所使用。</p>\n<p>perf将tracepoint产生的时间记录下来，生成报告，通过分析这些报告，便可以了解程序运行期间内核的各种细节，对性能症状做出准确的诊断。</p>\n<p>这些tracepint的对应的sysfs节点在&#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing&#x2F;events目录下。</p>\n<h2 id=\"1-2-硬件特性之cache\"><a href=\"#1-2-硬件特性之cache\" class=\"headerlink\" title=\"1.2 硬件特性之cache\"></a>1.2 硬件特性之cache</h2><p>内存读写是很快的，但是还是无法和处理器指令执行速度相比。为了从内存中读取指令和数据，处理器需要等待，用处理器时间来衡量，这种等待非常漫长。cache是一种SRAM，读写速度非常快，能和处理器相匹配。因此将常用的数据保存在cache中，处理器便无需等待，从而提高性能。cache的尺寸一般都很小，充分利用cache是软件调优非常重要部分。</p>\n<h1 id=\"2-主要关注点\"><a href=\"#2-主要关注点\" class=\"headerlink\" title=\"2. 主要关注点\"></a>2. 主要关注点</h1><p>基于性能分析，可以进行算法优化（空间复杂度和时间复杂度权衡）、代码优化（提高执行速度、减少内存占用）。</p>\n<p>评估程序对硬件资源的使用情况，例如各级cache的访问次数、各级cache的丢失次数、流水线停顿周期、前端总线访问次数等。</p>\n<p>评估程序对操作系统资源的使用情况，系统调用次数、上下文切换次数、任务迁移次数。</p>\n<p>事件可以分为三种：</p>\n<ol>\n<li>Hardware Event由PMU部件产生，在特定的条件下探测性能事件是否发生以及发生的次数。比如cache命中。</li>\n<li>Software Event是内核产生的事件，分布在各个功能模块中，统计和操作系统相关性能事件。比如进程切换，tick数等。</li>\n<li>Tracepoint Event是内核中静态tracepoint所触发的事件，这些tracepoint用来判断程序运行期间内核的行为细节，比如slab分配器的分配次数等。</li>\n</ol>\n<h1 id=\"3-perf的使用\"><a href=\"#3-perf的使用\" class=\"headerlink\" title=\"3. perf的使用\"></a>3. perf的使用</h1><p>perf –help后可以看到perf的二级命令</p>\n<p><img src=\"/2022/01/19/tool003/image-20220119120817508.png\"></p>\n<h2 id=\"3-1perf-list\"><a href=\"#3-1perf-list\" class=\"headerlink\" title=\"3.1perf list\"></a>3.1perf list</h2><p>perf list查看支持的事件类型</p>\n<p><img src=\"/2022/01/19/tool003/image-20220119121131231.png\"></p>\n<h2 id=\"3-2perf-top\"><a href=\"#3-2perf-top\" class=\"headerlink\" title=\"3.2perf top\"></a>3.2perf top</h2><p>即可以正常显示perf top如下：</p>\n<p>第一列：符号引发的性能事件的比例，指占用的cpu周期比例。</p>\n<p>第二列：符号所在的DSO(Dynamic Shared Object)，可以是应用程序、内核、动态链接库、模块。</p>\n<p>第三列：DSO的类型。[.]表示此符号属于用户态的ELF文件，包括可执行文件与动态链接库；[k]表述此符号属于内核或模块。</p>\n<p>第四列：符号名。有些符号不能解析为函数名，只能用地址表示。</p>\n<p><img src=\"/2022/01/19/tool003/image-20220119121453395.png\"></p>\n<h2 id=\"3-3-perf-stat\"><a href=\"#3-3-perf-stat\" class=\"headerlink\" title=\"3.3 perf stat\"></a>3.3 perf stat</h2><p>perf stat用于运行指令，并分析其统计结果。虽然perf top也可以指定pid，但是必须先启动应用才能查看信息。</p>\n<p>perf stat能完整统计应用整个生命周期的信息。</p>\n<p>命令格式为：</p>\n<blockquote>\n<p>perf stat [-e <EVENT> | –event&#x3D;EVENT] [-a] <command><br>perf stat [-e <EVENT> | –event&#x3D;EVENT] [-a] — <command> [<options>]</options></EVENT></EVENT></p>\n</blockquote>\n<p><img src=\"/2022/01/19/tool003/image-20220119122351095.png\" alt=\"image-20220119122351095\"></p>\n<p><img src=\"/2022/01/19/tool003/C2DDB2280E83453D6D8FE0D11A4380C3.png\"></p>\n<p>cpu-clock：任务真正占用的处理器时间，单位为ms。CPUs utilized &#x3D; task-clock &#x2F; time elapsed，CPU的占用率。</p>\n<p>context-switches：程序在运行过程中上下文的切换次数。</p>\n<p>CPU-migrations：程序在运行过程中发生的处理器迁移次数。Linux为了维持多个处理器的负载均衡，在特定条件下会将某个任务从一个CPU迁移到另一个CPU。</p>\n<p>CPU迁移和上下文切换：发生上下文切换不一定会发生CPU迁移，而发生CPU迁移时肯定会发生上下文切换。发生上下文切换有可能只是把上下文从当前CPU中换出，下一次调度器还是将进程安排在这个CPU上执行。</p>\n<p>page-faults：缺页异常的次数。当应用程序请求的页面尚未建立、请求的页面不在内存中，或者请求的页面虽然在内存中，但物理地址和虚拟地址的映射关系尚未建立时，都会触发一次缺页异常。另外TLB不命中，页面访问权限不匹配等情况也会触发缺页异常。</p>\n<p>cycles：消耗的处理器周期数。如果把被ls使用的cpu cycles看成是一个处理器的，那么它的主频为2.486GHz。可以用cycles &#x2F; task-clock算出。</p>\n<p>stalled-cycles-frontend：指令读取或解码的质量步骤，未能按理想状态发挥并行左右，发生停滞的时钟周期。</p>\n<p>stalled-cycles-backend：指令执行步骤，发生停滞的时钟周期。</p>\n<p>instructions：执行了多少条指令。IPC为平均每个cpu cycle执行了多少条指令。</p>\n<p>branches：遇到的分支指令数。branch-misses是预测错误的分支指令数。</p>\n<h2 id=\"3-4-perf-record-amp-report\"><a href=\"#3-4-perf-record-amp-report\" class=\"headerlink\" title=\"3.4 perf record &amp; report\"></a>3.4 perf record &amp; report</h2><p>运行一个命令，并将其数据保存到perf.data中。随后，可以使用perf report进行分析。</p>\n<p>perf record和perf report可以更精确的分析一个应用，perf record可以精确到函数级别。并且在函数里面混合显示汇编语言和代码。</p>\n<p><img src=\"/2022/01/19/tool003/image-20220119123152290.png\"></p>\n<p>1.编译程序(这里以test.c为例子)</p>\n<p><img src=\"/2022/01/19/tool003/image-20220119124049654.png\"></p>\n<p>2.perf record</p>\n<p><img src=\"/2022/01/19/tool003/image-20220119124217563.png\"></p>\n<p>3.perf report</p>\n<p><img src=\"/2022/01/19/tool003/image-20220119124149337.png\"></p>\n<p><img src=\"/2022/01/19/tool003/image-20220119124013315.png\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.cnblogs.com/arnoldlu/p/6241297.html\">系统级性能分析工具perf的介绍与使用 - ArnoldLu - 博客园 (cnblogs.com)</a>-系统性能分析工具perf的介绍与使用</p>\n<p><a href=\"https://www.bilibili.com/video/BV1MK4y1m7Uj?from=search&seid=11304698501320722134&spm_id_from=333.337.0.0\">如何使用gcov和perf工具抓热点代码 - 陈小欧 - 20210331 - PLCT实验室_哔哩哔哩_bilibili</a>-如何使用gcov和perf工具抓热点代码 - 陈小欧 - 20210331 - PLCT实验室</p>\n",
            "tags": [
                "性能分析工具"
            ]
        },
        {
            "id": "http://example.com/2022/01/18/tool002/",
            "url": "http://example.com/2022/01/18/tool002/",
            "title": "gcov代码覆盖率测试",
            "date_published": "2022-01-18T06:35:05.000Z",
            "content_html": "<h1 id=\"gcov代码覆盖率测试\"><a href=\"#gcov代码覆盖率测试\" class=\"headerlink\" title=\"gcov代码覆盖率测试\"></a>gcov代码覆盖率测试</h1><h2 id=\"gcov的简单介绍\"><a href=\"#gcov的简单介绍\" class=\"headerlink\" title=\"gcov的简单介绍\"></a>gcov的简单介绍</h2><p>1.gcov是一个测试代码覆盖率的工具。与GCC一起使用来分析程序，以帮助创建更高效、更快的运行代码，并发现程序的未测试部分<br>2.是一个命令行方式的控制台程序。需要结合lcov,gcovr等前端图形工具才能实现统计数据图形化<br>3.伴随GCC发布，不需要单独下载gcov工具。配合GCC共同实现对c&#x2F;c++文件的语句覆盖和分支覆盖测试<br>4.与程序概要分析工具（profiling tool，例如gprof）一起工作，可以估计程序中哪段代码最耗时</p>\n<h2 id=\"gcov能做什么\"><a href=\"#gcov能做什么\" class=\"headerlink\" title=\"gcov能做什么\"></a>gcov能做什么</h2><p>使用像gcov或gprof这样的分析器，您可以找到一些基本的性能统计数据：</p>\n<ul>\n<li>每一行代码执行的频率是多少</li>\n<li>实际执行了哪些行代码，配合测试用例达到满意的覆盖率和预期工作</li>\n<li>每段代码使用了多少计算时间，从而找到热点优化代码</li>\n<li>gcov创建一个sourcefile.gcov的日志文件，此文件标识源文件sourcefile.c每一行执行的次数,您可以与gprof一起使用这些日志文件来帮助优化程序的性能。gprof提供了您可以使用的时间信息以及从gcov获得的信息。</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>1.通过将一些代码行合并到一个函数中，可能不会提供足够的信息来查找代码使用大量计算机时间的“热点”。同样地，由于gcov按行(在最低的分辨率下)积累统计数据，它最适合于只在每行上放置一个语句的编程风格。如果您使用扩展到循环或其他控制结构的复杂宏，那么统计信息就没有那么有用了——它们只报告出现宏调用的行。如果您的复杂宏的行为类似于函数，那么您可以用inline fu替换它们。<br>2.gcov只在使用GCC编译的代码上工作。它与任何其他概要或测试覆盖机制不兼容。</p>\n<h2 id=\"使用gcov的3个阶段\"><a href=\"#使用gcov的3个阶段\" class=\"headerlink\" title=\"使用gcov的3个阶段\"></a>使用gcov的3个阶段</h2><h3 id=\"1-编译阶段\"><a href=\"#1-编译阶段\" class=\"headerlink\" title=\"1.编译阶段\"></a>1.编译阶段</h3><p>要开启gcov功能，需要在源码编译参数中加入-fprofile-arcs -ftest-coverage</p>\n<ul>\n<li>-ftest-coverage：在编译的时候产生.gcno文件，它包含了重建基本块图和相应的块的源码的行号的信息。</li>\n<li>-fprofile-arcs：在运行编译过的程序的时候，会产生.gcda文件，它包含了弧跳变的次数等信息。</li>\n</ul>\n<p>以下我们以test.c这个程序为例子，源码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> n=<span class=\"hljs-number\">4</span>;<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>\t&#123;<br>\t   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello World!\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">int</span> a =<span class=\"hljs-number\">20220118</span>;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,a);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编译阶段：</strong></p>\n<p><img src=\"/2022/01/18/tool002/image-20220118145007919.png\"></p>\n<h3 id=\"2-gcov收集代码运行信息\"><a href=\"#2-gcov收集代码运行信息\" class=\"headerlink\" title=\"2. gcov收集代码运行信息\"></a>2. gcov收集代码运行信息</h3><ul>\n<li>运行<code>./test</code>产生<code>test.gcda</code>文件，其中包含了代码基本块和狐跳变次数统计信息</li>\n</ul>\n<p><img src=\"/2022/01/18/tool002/image-20220118145103922.png\"></p>\n<h4 id=\"3-生成gcov代码覆盖率报告\"><a href=\"#3-生成gcov代码覆盖率报告\" class=\"headerlink\" title=\"3. 生成gcov代码覆盖率报告\"></a>3. 生成gcov代码覆盖率报告</h4><ul>\n<li>再次运行<code>gcov test.c</code>产生的<code>test.c.gcov</code>中包含了代码覆盖率数据,其数据的来源为<code>test.gcda</code></li>\n</ul>\n<p><img src=\"/2022/01/18/tool002/image-20220118145303290.png\"></p>\n<h3 id=\"4-查看生成gcov代码覆盖率报告\"><a href=\"#4-查看生成gcov代码覆盖率报告\" class=\"headerlink\" title=\"4.查看生成gcov代码覆盖率报告\"></a>4.查看生成gcov代码覆盖率报告</h3><p><img src=\"/2022/01/18/tool002/image-20220118145514099.png\"></p>\n<p>可以看到以下结果：</p>\n<ul>\n<li>其中<code>#####</code>表示未运行的行</li>\n<li>每行前面的数字表示行运行的次数</li>\n<li>—代表不必执行</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">-:    <span class=\"hljs-number\">0</span>:Source:test.c<br>-:    <span class=\"hljs-number\">0</span>:Graph:test.gcno<br>-:    <span class=\"hljs-number\">0</span>:Data:test.gcda<br>-:    <span class=\"hljs-number\">0</span>:Runs:<span class=\"hljs-number\">1</span><br>-:    <span class=\"hljs-number\">0</span>:Programs:<span class=\"hljs-number\">1</span><br>-:    <span class=\"hljs-number\">1</span>:<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-number\">1</span>:    <span class=\"hljs-number\">2</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">-:    3:</span>&#123;<br><span class=\"hljs-number\">1</span>:    <span class=\"hljs-number\">4</span>:        <span class=\"hljs-keyword\">int</span> n=<span class=\"hljs-number\">4</span>;<br><span class=\"hljs-number\">1</span>:    <span class=\"hljs-number\">5</span>:        <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-number\">5</span>:    <span class=\"hljs-number\">6</span>:        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>-:    <span class=\"hljs-number\">7</span>:        &#123;<br><span class=\"hljs-number\">4</span>:    <span class=\"hljs-number\">8</span>:           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello World!\\n&quot;</span>);<br>-:    <span class=\"hljs-number\">9</span>:        &#125;<br><span class=\"hljs-number\">1</span>:   <span class=\"hljs-number\">10</span>:        <span class=\"hljs-keyword\">int</span> a =<span class=\"hljs-number\">20220118</span>;<br><span class=\"hljs-number\">1</span>:   <span class=\"hljs-number\">11</span>:        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,a);<br><span class=\"hljs-number\">1</span>:   <span class=\"hljs-number\">12</span>:        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>-:   <span class=\"hljs-number\">13</span>:&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配合lcov使用，图形化显示\"><a href=\"#配合lcov使用，图形化显示\" class=\"headerlink\" title=\"配合lcov使用，图形化显示\"></a>配合lcov使用，图形化显示</h2><p><strong>1.centos安装lcov:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">yum install lcov<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.运行lcov，生成相应信息</strong></p>\n<p><img src=\"/2022/01/18/tool002/image-20220118151526665.png\"></p>\n<p>运行结果：</p>\n<p><img src=\"/2022/01/18/tool002/image-20220118151553801.png\"></p>\n<p><strong>3.生成web可视化信息</strong></p>\n<p><img src=\"/2022/01/18/tool002/image-20220118151821325.png\"></p>\n<p>运行结果：</p>\n<p><img src=\"/2022/01/18/tool002/image-20220118151853477.png\"></p>\n<p><strong>4.打包result文件</strong></p>\n<p><img src=\"/2022/01/18/tool002/image-20220118152629648.png\"></p>\n<p><strong>5.从服务器下载到本地</strong></p>\n<p><img src=\"/2022/01/18/tool002/image-20220118152705023.png\"></p>\n<p><strong>6.查看web</strong></p>\n<p>​\t\t\t\t\t1）查看index.html：</p>\n<p><img src=\"/2022/01/18/tool002/image-20220118152825105.png\"></p>\n<p>​\t\t\t\t\t\t2）详细信息：</p>\n<p><img src=\"/2022/01/18/tool002/image-20220118152908078.png\"></p>\n<p>上述界面包含：</p>\n<ul>\n<li>函数覆盖率（执行率）</li>\n<li>代码行数覆盖率（执行率）</li>\n<li>语句执行次数</li>\n<li>源码级的详细信息</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/yanxiangyfg/article/details/80989680\">(6条消息) gcov代码覆盖率测试-原理和实践总结_yanxiangyfg的专栏-CSDN博客_gcov代码覆盖率</a>-gcov代码覆盖率测试-原理和实践总结</p>\n<p><a href=\"https://blog.csdn.net/u012247418/article/details/90137291\">(6条消息) 代码覆盖率测试工具：gcov和lcov的使用_ARM-Linux-CSDN博客</a>-代码覆盖率测试工具：gcov和lcov的使用</p>\n<p><a href=\"https://www.cnblogs.com/haoshine/p/5777735.html\">linux文件夹打包命令 - 小作一个 - 博客园 (cnblogs.com)</a>-Linux文件打包命令</p>\n<p><a href=\"https://www.bilibili.com/video/BV1MK4y1m7Uj?from=search&seid=16561916178807634748&spm_id_from=333.337.0.0\">如何使用gcov和perf工具抓热点代码 - 陈小欧 - 20210331 - PLCT实验室_哔哩哔哩_bilibili</a>-如何使用gcov和perf工具抓热点代码 - 陈小欧 - 20210331 - PLCT实验室</p>\n",
            "tags": [
                "性能分析工具"
            ]
        },
        {
            "id": "http://example.com/2022/01/17/AVX005/",
            "url": "http://example.com/2022/01/17/AVX005/",
            "title": "AVX向量化学习(五)-INT型数组相加操作",
            "date_published": "2022-01-17T13:28:22.000Z",
            "content_html": "<h1 id=\"AVX向量化学习-五-INT型数组相加操作\"><a href=\"#AVX向量化学习-五-INT型数组相加操作\" class=\"headerlink\" title=\"AVX向量化学习(五)-INT型数组相加操作\"></a>AVX向量化学习(五)-INT型数组相加操作</h1><p>使用AVX指令集进行2个INT型的数组相加操作</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256i _mm256_loadu_si256 (__m256i <span class=\"hljs-keyword\">const</span> * mem_addr)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Synopsis</strong></p>\n<p>m256i _mm256_loadu_si256 (m256i const * mem_addr)<br>#include &lt;immintrin.h&gt;<br>Instruction: vmovdqu ymm, m256<br>CPUID Flags: AVX</p>\n<p><strong>Description</strong></p>\n<p>Load 256-bits of integer data from memory into dst. mem_addr does not need to be aligned on any particular boundary.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">255</span>:<span class=\"hljs-number\">0</span>] := MEM[mem_addr+<span class=\"hljs-number\">255</span>:mem_addr] <br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>Performance</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Architecture</th>\n<th align=\"center\">Latency</th>\n<th align=\"center\">Throughput (CPI)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Icelake</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0.5</td>\n</tr>\n<tr>\n<td align=\"left\">Skylake</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0.5</td>\n</tr>\n<tr>\n<td align=\"left\">Broadwell</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.25</td>\n</tr>\n<tr>\n<td align=\"left\">Haswell</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.25</td>\n</tr>\n<tr>\n<td align=\"left\">Ivy Bridge</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.5</td>\n</tr>\n</tbody></table>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256i _mm256_add_epi32 (__m256i a, __m256i b)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Synopsis</strong></p>\n<p>m256i _mm256_add_epi32 (m256i a, __m256i b)<br>#include &lt;immintrin.h&gt;<br>Instruction: vpaddd ymm, ymm, ymm<br>CPUID Flags: AVX2</p>\n<p><strong>Description</strong></p>\n<p>Add packed 32-bit integers in a and b, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">FOR</span> j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">7</span> <br>\t     <span class=\"hljs-attribute\">i</span> := j*<span class=\"hljs-number\">32</span> <br>\t     <span class=\"hljs-attribute\">dst</span>[i+<span class=\"hljs-number\">31</span>:i] := a[i+<span class=\"hljs-number\">31</span>:i] + b[i+<span class=\"hljs-number\">31</span>:i] <br><span class=\"hljs-attribute\">ENDFOR</span> <br><span class=\"hljs-attribute\">dst</span>[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>Performance</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Architecture</th>\n<th align=\"center\">Latency</th>\n<th align=\"center\">Throughput (CPI)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Icelake</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.33</td>\n</tr>\n<tr>\n<td align=\"left\">Skylake</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.33</td>\n</tr>\n<tr>\n<td align=\"left\">Broadwell</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.5</td>\n</tr>\n<tr>\n<td align=\"left\">Haswell</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0.5</td>\n</tr>\n</tbody></table>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">40</span>];<br>\t<span class=\"hljs-keyword\">int</span> b[<span class=\"hljs-number\">40</span>];<br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">int</span> ans1[<span class=\"hljs-number\">40</span>];    <span class=\"hljs-comment\">//记录串行结果 </span><br>\t<span class=\"hljs-keyword\">int</span> ans2[<span class=\"hljs-number\">40</span>];\t <span class=\"hljs-comment\">//记录AVX向量化后的结果</span><br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\ta[i]=i;<br>\t\tb[i]=<span class=\"hljs-number\">2</span>*i;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\tans1[i]=a[i]+b[i];<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;串行计算结果：\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,ans1[i]);<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>\t__m256i v0;<br>\t__m256i v1;<br>\t__m256i v2;<br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span><span class=\"hljs-number\">-8</span>;i+=<span class=\"hljs-number\">8</span>)<br>\t&#123;\t<br>\t\tv0 = _mm256_loadu_si256((<span class=\"hljs-keyword\">const</span> __m256i*)(a+i));\t <span class=\"hljs-comment\">//强制类型转换</span><br>\t\tv1 = _mm256_loadu_si256((<span class=\"hljs-keyword\">const</span> __m256i*)(b+i));\t <span class=\"hljs-comment\">//强制类型转化</span><br>\t\tv2 = _mm256_add_epi32(v0,v1);     <span class=\"hljs-comment\">//v0+v1</span><br>\t\t_mm256_storeu_si256((__m256i*)(ans2+i),v2);<br>\t\t<br>\t&#125;<span class=\"hljs-comment\">//边界处理</span><br>\t<span class=\"hljs-keyword\">for</span> (;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\tans2[i]=a[i]+b[i];<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;并行计算结果：\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">40</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,ans2[i]);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">串行计算结果：<br><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">24</span> <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">33</span> <span class=\"hljs-number\">36</span> <span class=\"hljs-number\">39</span> <span class=\"hljs-number\">42</span> <span class=\"hljs-number\">45</span> <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">51</span> <span class=\"hljs-number\">54</span> <span class=\"hljs-number\">57</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">63</span> <span class=\"hljs-number\">66</span> <span class=\"hljs-number\">69</span> <span class=\"hljs-number\">72</span> <span class=\"hljs-number\">75</span> <span class=\"hljs-number\">78</span> <span class=\"hljs-number\">81</span> <span class=\"hljs-number\">84</span> <span class=\"hljs-number\">87</span> <span class=\"hljs-number\">90</span> <span class=\"hljs-number\">93</span> <span class=\"hljs-number\">96</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">102</span> <span class=\"hljs-number\">105</span> <span class=\"hljs-number\">108</span> <span class=\"hljs-number\">111</span> <span class=\"hljs-number\">114</span> <span class=\"hljs-number\">117</span><br>并行计算结果：<br><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">24</span> <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">33</span> <span class=\"hljs-number\">36</span> <span class=\"hljs-number\">39</span> <span class=\"hljs-number\">42</span> <span class=\"hljs-number\">45</span> <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">51</span> <span class=\"hljs-number\">54</span> <span class=\"hljs-number\">57</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">63</span> <span class=\"hljs-number\">66</span> <span class=\"hljs-number\">69</span> <span class=\"hljs-number\">72</span> <span class=\"hljs-number\">75</span> <span class=\"hljs-number\">78</span> <span class=\"hljs-number\">81</span> <span class=\"hljs-number\">84</span> <span class=\"hljs-number\">87</span> <span class=\"hljs-number\">90</span> <span class=\"hljs-number\">93</span> <span class=\"hljs-number\">96</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">102</span> <span class=\"hljs-number\">105</span> <span class=\"hljs-number\">108</span> <span class=\"hljs-number\">111</span> <span class=\"hljs-number\">114</span> <span class=\"hljs-number\">117</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/01/17/AVX004/",
            "url": "http://example.com/2022/01/17/AVX004/",
            "title": "AVX向量化学习(四)-INT类型转化成DOUBLE类型",
            "date_published": "2022-01-17T12:41:56.000Z",
            "content_html": "<h1 id=\"AVX向量化学习-四-INT类型转化成DOUBLE类型\"><a href=\"#AVX向量化学习-四-INT类型转化成DOUBLE类型\" class=\"headerlink\" title=\"AVX向量化学习(四)-INT类型转化成DOUBLE类型\"></a>AVX向量化学习(四)-INT类型转化成DOUBLE类型</h1><p>使用AVX指令集把INT类型转化为DOUBLE类型</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m128i _mm_setr_epi32 (<span class=\"hljs-keyword\">int</span> e3, <span class=\"hljs-keyword\">int</span> e2, <span class=\"hljs-keyword\">int</span> e1, <span class=\"hljs-keyword\">int</span> e0)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Synopsis</strong></p>\n<p>__m128i _mm_setr_epi32 (int e3, int e2, int e1, int e0)<br>#include &lt;emmintrin.h&gt;<br>Instruction: <strong>Sequence</strong><br>CPUID Flags: SSE2</p>\n<p><strong>Description</strong></p>\n<p>Set packed 32-bit integers in dst with the supplied values in reverse order.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">dst[<span class=\"hljs-number\">31</span>:<span class=\"hljs-number\">0</span>] := e3 <br>dst[<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">32</span>] := e2 <br>dst[<span class=\"hljs-number\">95</span>:<span class=\"hljs-number\">64</span>] := e1 <br>dst[<span class=\"hljs-number\">127</span>:<span class=\"hljs-number\">96</span>] := e0<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256d _mm256_cvtepi32_pd (__m128i a)<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Synopsis</strong></p>\n<p>m256d _mm256_cvtepi32_pd (m128i a)<br>#include &lt;immintrin.h&gt;<br>Instruction: vcvtdq2pd ymm, xmm<br>CPUID Flags: AVX</p>\n<p><strong>Description</strong></p>\n<p>Convert packed signed 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span> <br>    i := j*<span class=\"hljs-number\">32</span> <br>    m := j*<span class=\"hljs-number\">64</span> <br>    dst[m+<span class=\"hljs-number\">63</span>:m] := <span class=\"hljs-built_in\">Convert_Int32_To_FP64</span>(a[i+<span class=\"hljs-number\">31</span>:i]) <br>ENDFOR <br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>Performance</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Architecture</th>\n<th align=\"center\">Latency</th>\n<th align=\"center\">Throughput (CPI)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Icelake</td>\n<td align=\"center\">7</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Skylake</td>\n<td align=\"center\">7</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Broadwell</td>\n<td align=\"center\">6</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Haswell</td>\n<td align=\"center\">6</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Ivy Bridge</td>\n<td align=\"center\">4</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<h2 id=\"程序运行平台\"><a href=\"#程序运行平台\" class=\"headerlink\" title=\"程序运行平台\"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p>\n<h2 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h2><p>g++ int_to_double.cpp -msse2 -mavx -o test01</p>\n<h2 id=\"运行指令\"><a href=\"#运行指令\" class=\"headerlink\" title=\"运行指令\"></a>运行指令</h2><p>.&#x2F;test01</p>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">4</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br>    __m128i x = _mm_setr_epi32(a[<span class=\"hljs-number\">0</span>], a[<span class=\"hljs-number\">1</span>], a[<span class=\"hljs-number\">2</span>],a[<span class=\"hljs-number\">3</span>]);   <span class=\"hljs-comment\">//load</span><br> \t__m256d v5=_mm256_cvtepi32_pd(x);       <span class=\"hljs-comment\">//convert</span><br>    _mm256_storeu_pd(b,v5);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>    &#123;<br>    \tcout&lt;&lt;b[i]&lt;&lt;endl;<br>\t&#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n",
            "tags": [
                "AVX"
            ]
        },
        {
            "id": "http://example.com/2022/01/09/tool001/",
            "url": "http://example.com/2022/01/09/tool001/",
            "title": "gprof、gprof2dot.py、dot使用方法简介",
            "date_published": "2022-01-09T08:33:37.000Z",
            "content_html": "<h1 id=\"gprof、gprof2dot-py、dot使用方法简介\"><a href=\"#gprof、gprof2dot-py、dot使用方法简介\" class=\"headerlink\" title=\"gprof、gprof2dot.py、dot使用方法简介\"></a>gprof、gprof2dot.py、dot使用方法简介</h1><h2 id=\"1-：gprof使用步骤如下，以SLIC为例：\"><a href=\"#1-：gprof使用步骤如下，以SLIC为例：\" class=\"headerlink\" title=\"(1)：gprof使用步骤如下，以SLIC为例：\"></a>(1)：gprof使用步骤如下，以SLIC为例：</h2><h3 id=\"1-在编译过程中添加-pg选项，命令如下：\"><a href=\"#1-在编译过程中添加-pg选项，命令如下：\" class=\"headerlink\" title=\"1 在编译过程中添加-pg选项，命令如下：\"></a>1 在编译过程中添加-pg选项，命令如下：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">gcc -pg SLIC.cpp -o SLIC<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-运行程序，运行结束之后会形成文件gmon-out，命令如下\"><a href=\"#2-运行程序，运行结束之后会形成文件gmon-out，命令如下\" class=\"headerlink\" title=\"2 运行程序，运行结束之后会形成文件gmon.out，命令如下:\"></a>2 运行程序，运行结束之后会形成文件gmon.out，命令如下:</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">./SLIC</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用gprof再次执行程序，并将结果重定位到prof-log中，命令如下：\"><a href=\"#3-使用gprof再次执行程序，并将结果重定位到prof-log中，命令如下：\" class=\"headerlink\" title=\"3 使用gprof再次执行程序，并将结果重定位到prof.log中，命令如下：\"></a>3 使用gprof再次执行程序，并将结果重定位到prof.log中，命令如下：</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">gprof ./SLIC &gt; <span class=\"hljs-keyword\">prof</span>.<span class=\"hljs-built_in\">log</span><br></code></pre></td></tr></table></figure>\n\n<p>分析prof.log就可以获得程序的调用关系、函数执行时间等信息。对gprof的分析方法见以下blog</p>\n<p><a href=\"http://blog.csdn.net/macky0668/article/details/6839517\">http://blog.csdn.net/macky0668/article/details/6839517</a></p>\n<h2 id=\"2-：配合gprof2dot-py与dot工具的使用-我是安装在了Win10平台\"><a href=\"#2-：配合gprof2dot-py与dot工具的使用-我是安装在了Win10平台\" class=\"headerlink\" title=\"(2)：配合gprof2dot.py与dot工具的使用(我是安装在了Win10平台)\"></a>(2)：配合<em>gprof2dot.py</em>与dot工具的使用(我是安装在了Win10平台)</h2><p>以上方法仍然存在一个问题就是分析结果不够直观，特别是函数的调用关系。因此为解决以上问题，可以配合<em>gprof2dot.py</em>与dot工具的使用。</p>\n<h3 id=\"1-安装gprof2dot-py与dot\"><a href=\"#1-安装gprof2dot-py与dot\" class=\"headerlink\" title=\"1.安装gprof2dot.py与dot\"></a>1.安装<em>gprof2dot.py</em>与dot</h3><p><a href=\"https://github.com/jrfonseca/gprof2dot\">GitHub - jrfonseca&#x2F;gprof2dot: Converts profiling output to a dot graph.</a></p>\n<h3 id=\"2-通过以下地址可获得graphviz，安装graphviz后可使用dot工具\"><a href=\"#2-通过以下地址可获得graphviz，安装graphviz后可使用dot工具\" class=\"headerlink\" title=\"2.通过以下地址可获得graphviz，安装graphviz后可使用dot工具\"></a>2.通过以下地址可获得graphviz，安装graphviz后可使用dot工具</h3><p><a href=\"https://graphviz.org/download/source/\">Source Code | Graphviz</a></p>\n<p>在使用上述工具前，还需要先产生prof.log文件，prof.log文件的产生方法见上文。</p>\n<h3 id=\"3-首先通过命令行进入你安装gprof2dot-py的根目录：\"><a href=\"#3-首先通过命令行进入你安装gprof2dot-py的根目录：\" class=\"headerlink\" title=\"3.首先通过命令行进入你安装gprof2dot.py的根目录：\"></a>3.首先通过命令行进入你安装gprof2dot.py的根目录：</h3><p><img src=\"/2022/01/09/tool001/image-20220109165659998.png\"></p>\n<h3 id=\"4-通过以下命令即可得到函数调用图：\"><a href=\"#4-通过以下命令即可得到函数调用图：\" class=\"headerlink\" title=\"4.通过以下命令即可得到函数调用图：\"></a>4.通过以下命令即可得到函数调用图：</h3><p><img src=\"/2022/01/09/tool001/image-20220109170212157.png\"></p>\n<h3 id=\"5-结果如下：\"><a href=\"#5-结果如下：\" class=\"headerlink\" title=\"5.结果如下：\"></a>5.结果如下：</h3><p><img src=\"/2022/01/09/tool001/image-20220109170315471.png\"></p>\n<h2 id=\"3-：接上文补充几点可能无法产生gmon-out文件的情况：\"><a href=\"#3-：接上文补充几点可能无法产生gmon-out文件的情况：\" class=\"headerlink\" title=\"(3)：接上文补充几点可能无法产生gmon.out文件的情况：\"></a>(3)：接上文补充几点可能无法产生gmon.out文件的情况：</h2><p>  1.程序不是从main return或exit()退出，则可能不生成gmon.out。<br>  2.程序如果崩溃，可能不生成gmon.out。<br>  3.测试发现在虚拟机上运行，可能不生成gmon.out。<br>  4.程序忽略SIGPROF信号！一定不能捕获、忽略SIGPROF信号。man手册对SIGPROF的解释是：profiling timer expired. 如果忽略这个信号，gprof的输出则是：Each sample counts as 0.01 seconds. no time accumulated.<br>  5.如果程序运行时间非常短，则gprof可能无效</p>\n<h2 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h2><p><a href=\"https://blog.csdn.net/u012927281/article/details/51132064\">(4条消息) gprof、gprof2dot.py、dot使用方法简介_Andy.Wang的博客-CSDN博客_gprof2dot</a></p>\n",
            "tags": [
                "性能分析工具"
            ]
        },
        {
            "id": "http://example.com/2022/01/01/mpi005/",
            "url": "http://example.com/2022/01/01/mpi005/",
            "title": "MPI学习(五)-环形拓扑上利用MPI进行通信",
            "date_published": "2022-01-01T09:01:47.000Z",
            "content_html": "<h1 id=\"MPI学习-五-环形拓扑上利用MPI进行通信\"><a href=\"#MPI学习-五-环形拓扑上利用MPI进行通信\" class=\"headerlink\" title=\"MPI学习(五)-环形拓扑上利用MPI进行通信\"></a>MPI学习(五)-环形拓扑上利用MPI进行通信</h1><p>这里，我们演示了一个简单的MPI程序，它使用阻塞通信原语send和receive来进行广播操作：</p>\n<h2 id=\"程序运行平台\"><a href=\"#程序运行平台\" class=\"headerlink\" title=\"程序运行平台\"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>mpi&#x2F;intel&#x2F;2017.5</p>\n<h2 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h2><p>mpic++ mpi005.cpp -o mpi005</p>\n<h2 id=\"运行指令\"><a href=\"#运行指令\" class=\"headerlink\" title=\"运行指令\"></a>运行指令</h2><p>srun -p amd_256 -N 1 -n  4   .&#x2F;mpi005(使用SLURM任务调度系统)</p>\n<p>1个分区，核数为4</p>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mpi.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> *argv[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> rank, value, size;<br>\tMPI_Status status;<br>\t<span class=\"hljs-built_in\">MPI_Init</span>(&amp;argc, &amp;argv);<br>\t<span class=\"hljs-built_in\">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;rank);<br>\t<span class=\"hljs-built_in\">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;size);<br>\t<br>\t<span class=\"hljs-keyword\">if</span>(rank == <span class=\"hljs-number\">0</span>) &#123;<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;value );<br>\t<span class=\"hljs-comment\">/*Master node sends out the value*/</span><br>\t<span class=\"hljs-built_in\">MPI_Send</span>(&amp;value, <span class=\"hljs-number\">1</span>, MPI_INT, rank + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, MPI_COMM_WORLD);&#125;<span class=\"hljs-comment\">//</span><br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\t\t<span class=\"hljs-comment\">/*Slave nodes block on receive the send on the value*/</span><br>        <span class=\"hljs-comment\">//接受上一个进程发送的消息</span><br>\t\t<span class=\"hljs-built_in\">MPI_Recv</span>(&amp;value, <span class=\"hljs-number\">1</span>, MPI_INT, rank - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>,MPI_COMM_WORLD, &amp;status);<br>\t\t\t<br>\t\t<span class=\"hljs-keyword\">if</span>(rank &lt; size<span class=\"hljs-number\">-1</span>)<br>\t\t&#123;<br>            <span class=\"hljs-comment\">//向下一个进程发送消息</span><br>\t\t\t<span class=\"hljs-built_in\">MPI_Send</span>(&amp;value, <span class=\"hljs-number\">1</span>, MPI_INT, rank + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, MPI_COMM_WORLD);<br>\t\t&#125;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;process %d got %d\\n&quot;</span>, rank, value);<br>\t&#125;<br>\t<span class=\"hljs-built_in\">MPI_Finalize</span>();<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//5 5为读入的value值</span><br>process <span class=\"hljs-number\">1</span> got <span class=\"hljs-number\">5</span><br>process <span class=\"hljs-number\">2</span> got <span class=\"hljs-number\">5</span><br>process <span class=\"hljs-number\">3</span> got <span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "MPI"
            ]
        },
        {
            "id": "http://example.com/2021/11/27/mpi004/",
            "url": "http://example.com/2021/11/27/mpi004/",
            "title": "MPI学习(四)-广播、散播、收集、归约和全归约的MPI语法",
            "date_published": "2021-11-27T08:58:36.000Z",
            "content_html": "<h1 id=\"MPI-广播、散播、收集、归约和全归约的MPI语法\"><a href=\"#MPI-广播、散播、收集、归约和全归约的MPI语法\" class=\"headerlink\" title=\"MPI-广播、散播、收集、归约和全归约的MPI语法\"></a>MPI-广播、散播、收集、归约和全归约的MPI语法</h1><h2 id=\"广播：MPI-Bcast\"><a href=\"#广播：MPI-Bcast\" class=\"headerlink\" title=\"广播：MPI_Bcast\"></a>广播：MPI_Bcast</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MPI_Bcast</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *buffer, <span class=\"hljs-keyword\">int</span> count, MPI_Datatype datatype, <span class=\"hljs-keyword\">int</span> root, MPI_Comm comm)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-comment\">//int root 广播数据的根进程的标识号(整型)</span></span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/11/27/mpi004/mpi001.png\"></p>\n<h2 id=\"散播：MPI-Scatter\"><a href=\"#散播：MPI-Scatter\" class=\"headerlink\" title=\"散播：MPI_Scatter\"></a>散播：MPI_Scatter</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MPI_Scatter</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *sendbuf, <span class=\"hljs-keyword\">int</span> sendcount, MPI_Datatype sendtype, <span class=\"hljs-keyword\">void</span> *recvbuf, <span class=\"hljs-keyword\">int</span> root, MPI_Comm comm)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-comment\">//void *sendbuf 发送消息缓冲区的起始地址(可选数据类型)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-comment\">//void *recvbuf 接收消息缓冲区的起始地址(可选数据类型)</span></span><br><span class=\"hljs-function\"></span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/11/27/mpi004/mpi002.png\"></p>\n<h2 id=\"收集：MPI-Gather\"><a href=\"#收集：MPI-Gather\" class=\"headerlink\" title=\"收集：MPI_Gather\"></a>收集：MPI_Gather</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MPI_Gather</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *sendbuf, <span class=\"hljs-keyword\">int</span> sendcount, MPI_Datatype sendtype, <span class=\"hljs-keyword\">void</span> *recvbuf, <span class=\"hljs-keyword\">int</span> recvcount, MPI_Datatype recvtype, <span class=\"hljs-keyword\">int</span> root, MPI_Comm comm)</span></span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/11/27/mpi004/mpi003.png\"></p>\n<h2 id=\"归约：MPI-Reduce\"><a href=\"#归约：MPI-Reduce\" class=\"headerlink\" title=\"归约：MPI_Reduce\"></a>归约：MPI_Reduce</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MPI_Reduce</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *sendbuf, <span class=\"hljs-keyword\">void</span> *recvbuf, <span class=\"hljs-keyword\">int</span> count, MPI_Datatype datatype, MPI_Op op, <span class=\"hljs-keyword\">int</span> root,  MPI_Comm comm)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-comment\">//MPI_Op op  归约操作符(句柄)</span></span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/11/27/mpi004/mpi004.png\"></p>\n<p><img src=\"/2021/11/27/mpi004/mpi005.png\"></p>\n<h2 id=\"全归约：MPI-Allreduce\"><a href=\"#全归约：MPI-Allreduce\" class=\"headerlink\" title=\"全归约：MPI_Allreduce\"></a>全归约：MPI_Allreduce</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MPI_Allreduce</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *sendbuf, <span class=\"hljs-keyword\">void</span> *recvbuf, <span class=\"hljs-keyword\">int</span> count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)</span></span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/11/27/mpi004/mpi006.png\"></p>\n",
            "tags": [
                "MPI"
            ]
        },
        {
            "id": "http://example.com/2021/11/26/mpi003/",
            "url": "http://example.com/2021/11/26/mpi003/",
            "title": "MPI学习(三)-通过OpenmMP使用MPI",
            "date_published": "2021-11-26T14:09:37.000Z",
            "content_html": "<h1 id=\"MPI-通过OpenMP使用MPI\"><a href=\"#MPI-通过OpenMP使用MPI\" class=\"headerlink\" title=\"MPI-通过OpenMP使用MPI\"></a>MPI-通过OpenMP使用MPI</h1><p>OpenMP是另一种为基于共享内存的并行编程提供的应用编程接口。当人们想使用多核处理器时，通常使用OpenMP。下面是一个“Hello World”程序，使用了MPI和OpenMP的API。</p>\n<h2 id=\"程序运行平台\"><a href=\"#程序运行平台\" class=\"headerlink\" title=\"程序运行平台\"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>mpi&#x2F;intel&#x2F;2017.5</p>\n<h2 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h2><p>mpic++    -fopenmp  mpi003.cpp -o mpi003</p>\n<h2 id=\"运行指令\"><a href=\"#运行指令\" class=\"headerlink\" title=\"运行指令\"></a>运行指令</h2><p>srun -p amd_256 -N 2 -n  2   .&#x2F;mpi003(使用SLURM任务调度系统)</p>\n<p>2个分区，核数为2</p>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;omp.h&gt;</span>  <span class=\"hljs-comment\">//OpenMP所需要的头文件</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mpi.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span>  <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> **argv)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t\t<span class=\"hljs-keyword\">int</span> myid, numprocs;<br>\t\t<span class=\"hljs-keyword\">int</span> namelen;<br>\t\t<span class=\"hljs-keyword\">int</span> thread_id , nthreads;<br>\t\t<span class=\"hljs-keyword\">char</span> processor_name[MPI_MAX_PROCESSOR_NAME];<br>\t\t<span class=\"hljs-built_in\">MPI_Init</span>(&amp;argc, &amp;argv);<br>\t\t<span class=\"hljs-built_in\">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;myid);<br>\t\t<span class=\"hljs-built_in\">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;numprocs);<br>\t\t<span class=\"hljs-built_in\">MPI_Get_processor_name</span>(processor_name, &amp;namelen);<br>    \t<span class=\"hljs-comment\">//构造并行区</span><br>\t\t<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp parallel private(thread_id, nthreads) num_threads(8) <span class=\"hljs-comment\">//设置线程数为8</span></span><br>\t\t&#123;<br>\t\t\tthread_id = <span class=\"hljs-built_in\">omp_get_thread_num</span>();  <span class=\"hljs-comment\">//获得当前线程的id</span><br>\t\t\tnthreads = <span class=\"hljs-built_in\">omp_get_num_threads</span>();  <span class=\"hljs-comment\">//获得总的线程数</span><br>\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Thread number %d (on %d) for the MPI process number %d (on %d) [%s]\\n&quot;</span>,<br>\t\t\tthread_id, nthreads, myid, numprocs, processor_name);\t<br>\t\t&#125; \t\t<br>\t\t<span class=\"hljs-built_in\">MPI_Finalize</span>();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Thread number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">2</span>) [eb1316.para.bscc]<br>Thread number <span class=\"hljs-number\">4</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">2</span>) [eb1316.para.bscc]<br>Thread number <span class=\"hljs-number\">3</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">2</span>) [eb1316.para.bscc]<br>Thread number <span class=\"hljs-number\">5</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">2</span>) [eb1316.para.bscc]<br>Thread number <span class=\"hljs-number\">2</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">2</span>) [eb1316.para.bscc]<br>Thread number <span class=\"hljs-number\">6</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">2</span>) [eb1316.para.bscc]<br>Thread number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">2</span>) [eb1314.para.bscc]<br>Thread number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">2</span>) [eb1314.para.bscc]<br>Thread number <span class=\"hljs-number\">2</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">2</span>) [eb1314.para.bscc]<br>Thread number <span class=\"hljs-number\">5</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">2</span>) [eb1314.para.bscc]<br>Thread number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">2</span>) [eb1316.para.bscc]<br>Thread number <span class=\"hljs-number\">7</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">1</span> (on <span class=\"hljs-number\">2</span>) [eb1316.para.bscc]<br>Thread number <span class=\"hljs-number\">3</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">2</span>) [eb1314.para.bscc]<br>Thread number <span class=\"hljs-number\">4</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">2</span>) [eb1314.para.bscc]<br>Thread number <span class=\"hljs-number\">6</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">2</span>) [eb1314.para.bscc]<br>Thread number <span class=\"hljs-number\">7</span> (on <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> the MPI process number <span class=\"hljs-number\">0</span> (on <span class=\"hljs-number\">2</span>) [eb1314.para.bscc]<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "MPI"
            ]
        },
        {
            "id": "http://example.com/2021/11/26/mpi002/",
            "url": "http://example.com/2021/11/26/mpi002/",
            "title": "MPI学习(二)-非阻塞通信程序(无缓冲)",
            "date_published": "2021-11-26T09:44:34.000Z",
            "content_html": "<h1 id=\"MPI-非阻塞通信程序-无缓冲\"><a href=\"#MPI-非阻塞通信程序-无缓冲\" class=\"headerlink\" title=\"MPI-非阻塞通信程序(无缓冲)\"></a>MPI-非阻塞通信程序(无缓冲)</h1><p>非阻塞通信程序(无缓冲)是由MPI中的Isend和Ireceive来表示的，即异步通信。在这种情况下，发送进程发布一条“发送授权请求”(挂起的消息)的消息，并继续其程序的执行。当接收进程发布一个“同意发送”许可指令时，数据传输就启动了。所有的这些机制都是通过操作系统的信号进行内部管理的。当数据传输完成时，检查状态并指示进程是否可以安全地进行读&#x2F;写数据。                                                                      需要注意的是原语MPI_Wait(&amp;request,&amp;status)等到数据传输完成(或中断后)，使用一个成为status的状态变量来指示数据传输是否已经成功。</p>\n<h2 id=\"相关的MPI原语\"><a href=\"#相关的MPI原语\" class=\"headerlink\" title=\"相关的MPI原语\"></a>相关的MPI原语</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MPI_Isend</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *buf, <span class=\"hljs-keyword\">int</span> count, MPI_Datatype datatype, <span class=\"hljs-keyword\">int</span> dest, <span class=\"hljs-keyword\">int</span> tag, MPI_comm comm, MPI_Request *req)</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MPI_Irecv</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *buf, <span class=\"hljs-keyword\">int</span> count, MPI_Datatype datatype, <span class=\"hljs-keyword\">int</span> src, <span class=\"hljs-keyword\">int</span> tag, MPI_Comm comm, MPI_Request *req)</span></span><br></code></pre></td></tr></table></figure>\n\n<p>MPI_Request结构中经常使用的：当*req操作完成时返回 *flag &#x3D; 1,否则返回 0。</p>\n<p>原语MPI_Wait一直等到*req所执行的操作完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">MPI_Wait</span><span class=\"hljs-params\">(MPI_Request *req, MPI_Status *status)</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序运行平台\"><a href=\"#程序运行平台\" class=\"headerlink\" title=\"程序运行平台\"></a>程序运行平台</h2><p>北京超级云计算中心A3分区</p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>mpi&#x2F;intel&#x2F;2017.5</p>\n<h2 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h2><p>mpicc  mpi002.cpp -o mpi002</p>\n<h2 id=\"运行指令\"><a href=\"#运行指令\" class=\"headerlink\" title=\"运行指令\"></a>运行指令</h2><p>mpirun -np 10   .&#x2F;mpi002(本地提交,采取10个进程)</p>\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mpi.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span> **argv)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> myid, numprocs;<br>\t<span class=\"hljs-keyword\">int</span> tag,source,destination,count;<br>\t<span class=\"hljs-keyword\">int</span> buffer;<br>\tMPI_Status status;<br>\tMPI_Request request;<br>\t<span class=\"hljs-built_in\">MPI_Init</span>(&amp;argc,&amp;argv);<br>\t<span class=\"hljs-built_in\">MPI_Comm_size</span>(MPI_COMM_WORLD,&amp;numprocs);<br>\t<span class=\"hljs-built_in\">MPI_Comm_rank</span>(MPI_COMM_WORLD,&amp;myid);<br>\ttag =<span class=\"hljs-number\">2021</span>; <span class=\"hljs-comment\">/* any integer to tag messages */</span><br>\tsource = <span class=\"hljs-number\">0</span>;<br>\tcount = <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-keyword\">if</span>(myid != source )<br>\t&#123;<br>\t\tbuffer =<span class=\"hljs-number\">2077</span>;<br>\t\t<span class=\"hljs-comment\">//其他进程向0号进程发送消息</span><br>\t\t<span class=\"hljs-built_in\">MPI_Isend</span>(&amp;buffer,count,MPI_INT,source,tag,MPI_COMM_WORLD,&amp;request);<br>\t\t<span class=\"hljs-built_in\">MPI_Wait</span>(&amp;request,&amp;status);<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;processor %d send %d to processor %d\\n&quot;</span>,myid,buffer,source);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span>(myid == source )<br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//0号进程接收来自其他进程的消息</span><br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;numprocs;i++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">MPI_Irecv</span>(&amp;buffer,count,MPI_INT,i,tag,MPI_COMM_WORLD,&amp;request);<br>\t\t\t<span class=\"hljs-built_in\">MPI_Wait</span>(&amp;request,&amp;status);<br>\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;processor %d received %d from processor %d \\n&quot;</span>,myid,buffer,i);<br>\t\t&#125;<br>\t\t<br>\t&#125;<br><br>\t<span class=\"hljs-built_in\">MPI_Finalize</span>();<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">processor <span class=\"hljs-number\">2</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">3</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">5</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">6</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">7</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">8</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">9</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">4</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">1</span> send <span class=\"hljs-number\">2077</span> to processor <span class=\"hljs-number\">0</span><br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">1</span> <br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">2</span> <br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">3</span> <br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">4</span> <br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">5</span> <br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">6</span> <br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">7</span> <br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">8</span> <br>processor <span class=\"hljs-number\">0</span> received <span class=\"hljs-number\">2077</span> from processor <span class=\"hljs-number\">9</span> <br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "MPI"
            ]
        },
        {
            "id": "http://example.com/2021/11/24/AVX003/",
            "url": "http://example.com/2021/11/24/AVX003/",
            "title": "AVX向量化学习(三)-if判断的处理",
            "date_published": "2021-11-24T09:42:35.000Z",
            "content_html": "<h1 id=\"AVX-if判断的处理\"><a href=\"#AVX-if判断的处理\" class=\"headerlink\" title=\"AVX-if判断的处理\"></a>AVX-if判断的处理</h1><p>使用AVX指令集对if判断进行处理</p>\n<h2 id=\"使用到的AVX函数介绍\"><a href=\"#使用到的AVX函数介绍\" class=\"headerlink\" title=\"使用到的AVX函数介绍\"></a>使用到的AVX函数介绍</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256d _mm256_blendv_pd (__m256d a, __m256d b, __m256d mask)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Blend packed double-precision (64-bit) floating-point elements from a and b using mask, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span><br>\ti := j*<span class=\"hljs-number\">64</span><br>\tIF mask[i+<span class=\"hljs-number\">63</span>]<br>\t\tdst[i+<span class=\"hljs-number\">63</span>:i] := b[i+<span class=\"hljs-number\">63</span>:i]<br>\tELSE<br>\t\tdst[i+<span class=\"hljs-number\">63</span>:i] := a[i+<span class=\"hljs-number\">63</span>:i]<br>\tFI<br>ENDFOR<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">__m256d _mm256_cmp_pd (__m256d a, __m256d b, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> imm8)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Description</strong></p>\n<p>Compare packed double-precision (64-bit) floating-point elements in a and b based on the comparison operand specified by imm8, and store the results in dst.</p>\n<p><strong>Operation</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">CASE</span> (imm8[<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">0</span>]) OF<br><span class=\"hljs-number\">0</span>: OP := _CMP_EQ_OQ<br><span class=\"hljs-number\">1</span>: OP := _CMP_LT_OS<br><span class=\"hljs-number\">2</span>: OP := _CMP_LE_OS<br><span class=\"hljs-number\">3</span>: OP := _CMP_UNORD_Q <br><span class=\"hljs-number\">4</span>: OP := _CMP_NEQ_UQ<br><span class=\"hljs-number\">5</span>: OP := _CMP_NLT_US<br><span class=\"hljs-number\">6</span>: OP := _CMP_NLE_US<br><span class=\"hljs-number\">7</span>: OP := _CMP_ORD_Q<br><span class=\"hljs-number\">8</span>: OP := _CMP_EQ_UQ<br><span class=\"hljs-number\">9</span>: OP := _CMP_NGE_US<br><span class=\"hljs-number\">10</span>: OP := _CMP_NGT_US<br><span class=\"hljs-number\">11</span>: OP := _CMP_FALSE_OQ<br><span class=\"hljs-number\">12</span>: OP := _CMP_NEQ_OQ<br><span class=\"hljs-number\">13</span>: OP := _CMP_GE_OS<br><span class=\"hljs-number\">14</span>: OP := _CMP_GT_OS<br><span class=\"hljs-number\">15</span>: OP := _CMP_TRUE_UQ<br><span class=\"hljs-number\">16</span>: OP := _CMP_EQ_OS<br><span class=\"hljs-number\">17</span>: OP := _CMP_LT_OQ<br><span class=\"hljs-number\">18</span>: OP := _CMP_LE_OQ<br><span class=\"hljs-number\">19</span>: OP := _CMP_UNORD_S<br><span class=\"hljs-number\">20</span>: OP := _CMP_NEQ_US<br><span class=\"hljs-number\">21</span>: OP := _CMP_NLT_UQ<br><span class=\"hljs-number\">22</span>: OP := _CMP_NLE_UQ<br><span class=\"hljs-number\">23</span>: OP := _CMP_ORD_S<br><span class=\"hljs-number\">24</span>: OP := _CMP_EQ_US<br><span class=\"hljs-number\">25</span>: OP := _CMP_NGE_UQ <br><span class=\"hljs-number\">26</span>: OP := _CMP_NGT_UQ <br><span class=\"hljs-number\">27</span>: OP := _CMP_FALSE_OS <br><span class=\"hljs-number\">28</span>: OP := _CMP_NEQ_OS <br><span class=\"hljs-number\">29</span>: OP := _CMP_GE_OQ<br><span class=\"hljs-number\">30</span>: OP := _CMP_GT_OQ<br><span class=\"hljs-number\">31</span>: OP := _CMP_TRUE_US<br>ESAC<br>FOR j := <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">3</span><br>\ti := j*<span class=\"hljs-number\">64</span><br>\tdst[i+<span class=\"hljs-number\">63</span>:i] := ( a[i+<span class=\"hljs-number\">63</span>:i] OP b[i+<span class=\"hljs-number\">63</span>:i] ) ? <span class=\"hljs-number\">0xFFFFFFFFFFFFFFFF</span> : <span class=\"hljs-number\">0</span><br>ENDFOR<br>dst[MAX:<span class=\"hljs-number\">256</span>] := <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序源代码\"><a href=\"#程序源代码\" class=\"headerlink\" title=\"程序源代码\"></a>程序源代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">double</span> a[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.3</span>,<span class=\"hljs-number\">4.4</span>,<span class=\"hljs-number\">5.5</span>,<span class=\"hljs-number\">6.6</span>,<span class=\"hljs-number\">7.7</span>,<span class=\"hljs-number\">8.8</span>,<span class=\"hljs-number\">2.1</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> b[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.2</span>,<span class=\"hljs-number\">6.4</span>,<span class=\"hljs-number\">8.6</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">9.9</span>,<span class=\"hljs-number\">5.1</span>,<span class=\"hljs-number\">4.2</span>,<span class=\"hljs-number\">6.6</span>&#125;;<br>\t<span class=\"hljs-keyword\">double</span> d[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;     <span class=\"hljs-comment\">//记录原始if判断后的值</span><br>\t<span class=\"hljs-keyword\">double</span> e[<span class=\"hljs-number\">9</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;     <span class=\"hljs-comment\">//记录AVX-if判断后的值</span><br>\t<br>\t__m256d v0;<br>\t__m256d v1;<br>\t__m256d v2,v3;<br>\t__m256d v4;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span>(a[i]&gt;b[i])<br>\t\t&#123;<br>\t\t\td[i] = a[i];<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span><br>\t\t&#123;<br>\t\t\td[i]=b[i];<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span><span class=\"hljs-number\">-4</span>;i+=<span class=\"hljs-number\">4</span>)<br>\t&#123;\t<br>\t\t\tv0 = _mm256_loadu_pd(a+i);<br>\t\t\tv1 = _mm256_loadu_pd(b+i);<br>\t\t\tv2=_mm256_add_pd(v0,v1);<br>\t\t\tv3 =_mm256_blendv_pd(v0,v1,_mm256_cmp_pd(v0,v1,_CMP_LE_OQ));<br>\t\t\t_mm256_storeu_pd(e+i,v3);<br>\t\t\t<br>\t&#125;<br>    <br>\t<span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span>(a[i]&gt;b[i])<br>\t\t&#123;<br>\t\t\te[i] = a[i];<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span><br>\t\t&#123;<br>\t\t\te[i]=b[i];<br>\t\t&#125;<br>\t&#125;<br>    <br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is d.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,d[i]);<br>\t&#125;<br>    <br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;this is e with AVX.\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf\\n&quot;</span>,e[i]);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure>\n\n<h2 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">this</span> is d.<br><span class=\"hljs-number\">2.100000</span><br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">6.400000</span><br><span class=\"hljs-number\">8.600000</span><br><span class=\"hljs-number\">5.500000</span><br><span class=\"hljs-number\">9.900000</span><br><span class=\"hljs-number\">7.700000</span><br><span class=\"hljs-number\">8.800000</span><br><span class=\"hljs-number\">6.600000</span><br><span class=\"hljs-keyword\">this</span> is e with AVX.<br><span class=\"hljs-number\">2.100000</span><br><span class=\"hljs-number\">3.200000</span><br><span class=\"hljs-number\">6.400000</span><br><span class=\"hljs-number\">8.600000</span><br><span class=\"hljs-number\">5.500000</span><br><span class=\"hljs-number\">9.900000</span><br><span class=\"hljs-number\">7.700000</span><br><span class=\"hljs-number\">8.800000</span><br><span class=\"hljs-number\">6.600000</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p>[<a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/]\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/]</a>: \t“ Intel® Intrinsics Guide”</p>\n<p>[<a href=\"https://stackoverflow.com/questions/16988199/how-to-choose-avx-compare-predicate-variants\">simd - How to choose AVX compare predicate variants - Stack Overflow</a>]: \t“Stack Overflow”</p>\n<p>[<a href=\"https://www.officedaytime.com/simd512e/simdimg/si.php?f=blendvpd\">blendvpd (officedaytime.com)</a>]: \t“_mm256_Blendv_pd()原理解释”</p>\n",
            "tags": [
                "AVX"
            ]
        }
    ]
}