{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"hpc\" category",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/03/06/cuda007/",
            "url": "https://xingyuanjie.top/2023/03/06/cuda007/",
            "title": "启动一个CUDA核函数",
            "date_published": "2023-03-06T05:59:18.000Z",
            "content_html": "<h2 id=\"启动一个CUDA核函数\"><a href=\"#启动一个CUDA核函数\" class=\"headerlink\" title=\"启动一个CUDA核函数\"></a>启动一个CUDA核函数</h2><p>你应该对下列C语言函数调用语句很熟悉：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">function_name</span> (argument list);<br></code></pre></div></td></tr></table></figure>\n\n<p>CUDA内核调用是对C语言函数调用语句的延申，&lt;&lt;&lt;&gt;&gt;&gt;运算符内是核函数的执行配置。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kerbel_name&lt;&lt;&lt;grid,block&gt;&gt;&gt;(srgument list);<br></code></pre></div></td></tr></table></figure>\n\n<p>正如上一节所述，CUDA编程模型揭示了线程层次结构。利用执行配置可以指定线程在GPU上调度运行的方式。执行配置的第一个值是网格维度，也就是启动块的数目。第二个值是块维度，也就是每个块中线程的数目。通过指定网格和块的维度，你可以进行一下配置：</p>\n<ul>\n<li>内核中线程的数目</li>\n<li>内核中使用的线程布局</li>\n</ul>\n<p>同一个块中的线程之间可以相互协作，不同块内的线程不能协作。对于一个给定的问题，可以使用不同的网格和块布局来组织你的线程。例如，假设你有32个数据元素用于计算，每8个元素一个块，需要启动4个块：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kernel_name&lt;&lt;&lt;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>&gt;&gt;&gt;(argument list);<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/03/06/cuda007/image-20230306140924311.png\" alt=\"image-20230306140924311\"></p>\n<p>由于数据在全局内存中是线性存储的，因此可以用变量blockIdx.x和threadIdx.x来进行以下操作。</p>\n<ul>\n<li>在网格中标识一个唯一的线程</li>\n<li>建立线程和数据元素之间的映射关系</li>\n</ul>\n<p>如果把32个元素放到一个块里，那么只会得到一个块：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kernel_name&lt;&lt;&lt;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">32</span>&gt;&gt;&gt;(argument list);<br></code></pre></div></td></tr></table></figure>\n\n<p>如果每个块只含一个元素，那么会有32个块：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">kernel_name&lt;&lt;&lt;<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">1</span>&gt;&gt;&gt;(argument list);<br></code></pre></div></td></tr></table></figure>\n\n<p>核函数的调用与主机线程是异步的。核函数调用结束后，控制权立刻返回给主机端。你可以调用以下函数来强制主机端程序等待所有的核函数执行结束：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">cudaError_t <span class=\"hljs-title\">cudaDeviceSynchronize</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>一些CUDA运行时API在主机和设备之间是隐式同步的。当使用cudaMemcpy函数在主机和设备之间拷贝数据时，主机端隐式同步，即主机端程序必须等待数据拷贝完成后才能继续执行程序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">cudaError_t <span class=\"hljs-title\">cudaMemcpy</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>* dst, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">void</span>* src, <span class=\"hljs-keyword\">size_t</span> count, cudaMemcpyKind kind)</span></span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>之前所有的核函数调用完成后开始拷贝数据。当拷贝完成后，控制权立刻返回给主机端。</p>\n<h3 id=\"异步行为\"><a href=\"#异步行为\" class=\"headerlink\" title=\"异步行为\"></a>异步行为</h3><p>不同于C语言的函数调用，所有的CUDA核函数的启动都是异步的。CUDA内核调用完成后，控制权立刻返回给CPU。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/26/intel001/",
            "url": "https://xingyuanjie.top/2023/02/26/intel001/",
            "title": "unroll_and_jam/nounroll_and_jam",
            "date_published": "2023-02-26T11:12:51.000Z",
            "content_html": "<h1 id=\"unroll-and-jam-x2F-nounroll-and-jam\"><a href=\"#unroll-and-jam-x2F-nounroll-and-jam\" class=\"headerlink\" title=\"unroll_and_jam&#x2F;nounroll_and_jam\"></a>unroll_and_jam&#x2F;nounroll_and_jam</h1><p>启用或禁用循环展开和阻塞。这些指令只能应用于迭代for循环。</p>\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><p>#pragma unroll_and_jam\t#pragma unroll_and_jam (n)\t#pragma nounroll_and_jam</p>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>展开因子，表示展开循环的次数;必须是0到255之间的整数常数</p>\n<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>unroll_and_jam指令部分展开套中比最内层循环更高的一个或多个循环，并将结果循环融合&#x2F;阻塞回一起。这种转换允许在循环中进行更多的重用。</p>\n<p>此pragma对最内层循环无效。确保紧随其后的循环不是编译器发起的交换完成后的最内层循环。</p>\n<p>指定此pragma是向编译器提示展开和阻塞序列是合法且有利可图的。编译器会在任何可能的情况下启用这种转换。</p>\n<p>对于它影响的每个for循环，unroll_and_jam指令必须在for语句之前。如果指定了n，优化器将展开循环n次。如果n被省略或超出允许的范围，优化器将分配展开循环的次数。编译器通过比较n和循环计数生成正确的代码。</p>\n<p>只有在设置了编译器选项O3时，才支持此pragma。unroll_and_jam指令将覆盖从命令行展开循环的任何设置。</p>\n<p>当展开循环会增加寄存器压力和代码大小时，可能需要防止展开嵌套循环或不完美的嵌套循环。在这种情况下，使用nounroll_and_jam编译指令。nounroll_and_jam pragma提示编译器不要展开指定的循环。</p>\n<p><strong>Examples</strong></p>\n<p><strong>Use the unroll_and_jam pragma:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> b[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-keyword\">int</span> d[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>]; <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unroll</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i,j,k;<br>    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> unroll_and_jam (6)</span><br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) &#123;<br>       <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> unroll_and_jam (6)</span><br>       <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">1</span>; j &lt; n; j++) &#123;<br>          <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt; n; k++)&#123;<br>            a[i][j] += b[i][k]*c[k][j];<br>            &#125;<br>       &#125;<br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/pragmas/intel-specific-pragma-reference/unroll-and-jam-nounroll-and-jam.html\">unroll_and_jam nounroll_and_jam (intel.com)</a></p>\n",
            "tags": [
                "C++",
                "Intel"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/26/cache001/",
            "url": "https://xingyuanjie.top/2023/02/26/cache001/",
            "title": "Cache Blocking Techniques【个人翻译】",
            "date_published": "2023-02-26T10:02:29.000Z",
            "content_html": "<h2 id=\"Cache-Blocking-Techniques\"><a href=\"#Cache-Blocking-Techniques\" class=\"headerlink\" title=\"Cache Blocking Techniques\"></a>Cache Blocking Techniques</h2><p><strong>文章来源：</strong><a href=\"https://www.intel.cn/content/www/cn/zh/developer/articles/technical/cache-blocking-techniques.html\">Cache Blocking Techniques (intel.cn)</a></p>\n<p><strong>文章作者：</strong><a href=\"https://community.intel.com/cipcp26785/plugins/custom/intel/intel/custom.userprofile?id=3UpJu61CDTyShonSVJNwDw==&iv=8843887237217530\">Amanda K Sharp</a></p>\n<h3 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h3><p>一类重要的算法更改涉及分块数据结构以适应缓存。通过组织数据内存访问，可以用一个大得多的数据集的一个小子集加载缓存。接下来的想法是在缓存中处理这个数据块。通过在缓存中使用&#x2F;重用这些数据，我们减少了访问内存的需要(减少内存带宽压力)。</p>\n<h3 id=\"Topic\"><a href=\"#Topic\" class=\"headerlink\" title=\"Topic\"></a>Topic</h3><p>分块是一种著名的优化技术，可以帮助避免许多应用程序中的内存带宽瓶颈。分块背后的关键思想是利用应用程序中固有的数据重用，确保数据在多个用途之间保持在缓存中。分块可以在1-D、2-D或3-D空间数据结构上执行。一些迭代应用程序可以进一步受益于多次迭代的分块(通常称为时间分块)，以进一步缓解带宽瓶颈。就代码更改而言，分块通常涉及循环分割和交换的组合。在大多数应用程序代码中，通过对分块因子进行一些参数化，对源进行正确的更改，用户可以最好地执行分块。</p>\n<h3 id=\"Original-Source\"><a href=\"#Original-Source\" class=\"headerlink\" title=\"Original Source\"></a>Original Source</h3><figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">for (body1 = <span class=\"hljs-number\">0</span>; body1 &lt; NBODIES; body1 ++) &#123;<br>   for (body2=<span class=\"hljs-number\">0</span>; body2 &lt; NBODIES; body2++) &#123;<br>     <span class=\"hljs-keyword\">OUT</span>[body1] += compute(body1, body2);<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在本例中，数据(body2)来自内存。假设NBODIES很大，我们将无法在缓存中重用。此应用程序受内存带宽限制。应用程序将以内存到CPU的速度运行，而不是最佳速度。</p>\n<p><strong>Modified Source (with 1-D blocking):</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">for (body2 = <span class=\"hljs-number\">0</span>; body2 &lt; NBODIES; body2 += <span class=\"hljs-keyword\">BLOCK</span>) &#123;<br>   for (body1=<span class=\"hljs-number\">0</span>; body1 &lt; NBODIES; body1 ++) &#123;<br>      for (body22=<span class=\"hljs-number\">0</span>; body22 &lt; <span class=\"hljs-keyword\">BLOCK</span>; body22 ++) &#123;<br>         <span class=\"hljs-keyword\">OUT</span>[body1] += compute(body1, body2 + body22);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在修改后的代码中，数据(body22)在缓存中被保留和重用，从而获得更好的性能。</p>\n<p>例如，上面的代码片段显示了一个分块NBody代码的示例。有两个循环(body1和body2)遍历所有主体。顶部的原始代码流经内部循环中的整个主体集，并且必须在每次迭代中从内存中加载body2值。底部的分块代码是通过将body2循环分解为一个迭代多个BLOCK中的body的外部循环和一个迭代BLOCK中的元素的内部body22循环，并交织body1和body2循环来获得的。这段代码在body1循环的多次迭代中重用了一组BLOCK body2值。如果BLOCK被选中，使得这组值适合缓存，内存流量就会降低一个BLOCK的因子。</p>\n<p>以下是来自OpenMP*版本的NBody基准测试的相关代码片段(使用CHUNK_SIZE因子进行分块应用)。</p>\n<p>在这种情况下，循环展开-阻塞转换被表示为一个pragma，并由编译器完成。在这种情况下，研究-opt-report的输出可以确认编译器确实为你的循环执行了展开阻塞优化。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">#define CHUNK_SIZE <span class=\"hljs-number\">8192</span><br><br>#pragma omp parallel <span class=\"hljs-keyword\">private</span>(body_start_index)<br>  for(body_start_index = <span class=\"hljs-number\">0</span>; body_start_index &lt; global_number_of_bodies; body_start_index += CHUNK_SIZE) &#123;<br>    <span class=\"hljs-built_in\">int</span> i;<br>    <span class=\"hljs-built_in\">int</span> body_end_index = body_start_index + CHUNK_SIZE;<br><br>    #pragma omp for <span class=\"hljs-keyword\">private</span>(i) schedule(guided)<br>    #pragma unroll_and_jam (<span class=\"hljs-number\">4</span>)<br>    for(i=starting_index; i&lt;ending_index; i++) &#123;<br>      <span class=\"hljs-built_in\">int</span> j;<br>      <span class=\"hljs-keyword\">TYPE</span> acc_x_0 = <span class=\"hljs-number\">0</span>, acc_y_0 = <span class=\"hljs-number\">0</span>, acc_z_0 = <span class=\"hljs-number\">0</span>;<br>      for(j=body_start_index; j&lt;body_end_index; j+=<span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">TYPE</span> delta_x_0 = Input_Position_X[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_X[i];<br>        <span class=\"hljs-keyword\">TYPE</span> delta_y_0 = Input_Position_Y[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_Y[i];<br>        <span class=\"hljs-keyword\">TYPE</span> delta_z_0 = Input_Position_Z[(j+<span class=\"hljs-number\">0</span>)] - Input_Position_Z[i];<br><br>        <span class=\"hljs-keyword\">TYPE</span> gamma_0 = delta_x_0*delta_x_0 + delta_y_0*delta_y_0 + delta_z_0*delta_z_0 + epsilon_sqr;<br>        <span class=\"hljs-keyword\">TYPE</span> s_0 = Mass[j+<span class=\"hljs-number\">0</span>]/(gamma_0 * <span class=\"hljs-built_in\">SQRT</span>(gamma_0));<br>        acc_x_0 += s_0*delta_x_0;<br>        acc_y_0 += s_0*delta_y_0;<br>        acc_z_0 += s_0*delta_z_0;<br>      &#125;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">0</span>] += acc_x_0;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">1</span>] += acc_y_0;<br>      Output_Acceleration[<span class=\"hljs-number\">3</span>*(i+<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">2</span>] += acc_z_0;<br>    &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>下面是Fortran中的一个矩阵乘法代码示例，其中用户执行高级块展开-分块转换(在修改版本中)，涉及本地复制数组以获得最佳性能。</p>\n<p><strong>Fortran Source Example:</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\"><span class=\"hljs-keyword\">do</span> j=<span class=\"hljs-number\">1</span>,N<br>  <span class=\"hljs-keyword\">do</span> k = <span class=\"hljs-number\">1</span>,N<br>    <span class=\"hljs-keyword\">do</span> i = <span class=\"hljs-number\">1</span>,N<br>      c(i,j) = c(i,j) + a(i,k) * b(k,j)<br>    <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>  <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br><span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>Modified Fortran Source:</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\"><span class=\"hljs-keyword\">do</span> JJ = <span class=\"hljs-number\">1</span>, N, TJ<br><br>       <span class=\"hljs-keyword\">do</span> KK = <span class=\"hljs-number\">1</span>, N, TK<br>         <span class=\"hljs-keyword\">do</span> jjj = <span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">min</span>(tj,N-jj+<span class=\"hljs-number\">1</span>)                     <span class=\"hljs-comment\">! BCOPY - no transpose</span><br>           <span class=\"hljs-keyword\">do</span> kkk = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tk,N-kk+<span class=\"hljs-number\">1</span>)<br>             p(kkk,jjj-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">1</span>) = B(kk+kkk-<span class=\"hljs-number\">1</span>, jj+jjj-<span class=\"hljs-number\">1</span>)<br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">do</span> II = <span class=\"hljs-number\">1</span>, N, TI<br>           <span class=\"hljs-keyword\">do</span> iii = <span class=\"hljs-number\">1</span>,<br>             <span class=\"hljs-built_in\">min</span>(ti,N-ii+<span class=\"hljs-number\">1</span>)                   <span class=\"hljs-comment\">!ACOPY - transpose</span><br>             <span class=\"hljs-keyword\">do</span> kkk = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tk,N-kk+<span class=\"hljs-number\">1</span>)<br>                Q(kkk,iii) = A(ii+iii-<span class=\"hljs-number\">1</span>, kk+kkk-<span class=\"hljs-number\">1</span>)<br>             <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">do</span> J = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(tj,N-jj+<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">4</span><br>             <span class=\"hljs-keyword\">do</span> I = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">min</span>(ti,N-ii+<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">2</span><br>                t1 = <span class=\"hljs-number\">0</span> ; t2 = <span class=\"hljs-number\">0</span> ; t5 = <span class=\"hljs-number\">0</span> ; t6 = <span class=\"hljs-number\">0</span> ; t9 = <span class=\"hljs-number\">0</span> ; t10 = <span class=\"hljs-number\">0</span> ; t13 =<span class=\"hljs-number\">0</span> ; t14 = <span class=\"hljs-number\">0</span><br>                <span class=\"hljs-comment\">!DIR$ vector aligned                      !DIR$ unroll(2)</span><br>                <span class=\"hljs-keyword\">do</span> K = <span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">min</span>(TK,N-kk+<span class=\"hljs-number\">1</span>)      <span class=\"hljs-comment\">! Innermost loop, vectorized and unrolled by 2 after that</span><br>                   qi = Q(K,I)           ;    qi1 = Q(K,I+<span class=\"hljs-number\">1</span>)  <br>                   t1 = t1+qi*P(K,J)     ;    t2 = t2+ qi1*P(K,J)<br>                   t5 = t5+ qi*P(K,J+<span class=\"hljs-number\">1</span>)  ;    t6 = t6+ qi1*P(K,J+<span class=\"hljs-number\">1</span>)<br>                   t9 = t9+ qi*P(K,J+<span class=\"hljs-number\">2</span>)  ;    t10 = t10+ qi1*P(K,J+<span class=\"hljs-number\">2</span>)<br>                   t13 = t13+ qi*P(K,J+<span class=\"hljs-number\">3</span>);    t14 = t14+qi1*P(K,J+<span class=\"hljs-number\">3</span>)<br>                <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) +t1          ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+jj-<span class=\"hljs-number\">1</span>) + t2<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) + t5     ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>+jj-<span class=\"hljs-number\">1</span>) + t6<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) + t9     ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">2</span>+jj-<span class=\"hljs-number\">1</span>) + t10<br>               c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) + t13    ; c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) = c(i+<span class=\"hljs-number\">1</span>+ii-<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">3</span>+jj-<span class=\"hljs-number\">1</span>) + t14<br>             <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>           <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>         <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>       <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br>     <span class=\"hljs-keyword\">end</span> <span class=\"hljs-keyword\">do</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"Take-Aways\"><a href=\"#Take-Aways\" class=\"headerlink\" title=\"Take Aways\"></a>Take Aways</h3><p>缓存分块是一种重新安排数据访问的技术，将数据子集(块)拉入缓存，并对这个块进行操作，以避免不得不重复从主存中获取数据。正如上面的示例所示，可以以这种方式手动分块循环数据以重用缓存。</p>\n<p>对于性能关键的循环，其中性能分析表明内存带宽限制，而-opt-report显示编译器没有以最佳方式分块循环，您可以考虑手动展开循环，以便更好地分块数据以实现缓存重用。</p>\n<h3 id=\"NEXT-STEPS\"><a href=\"#NEXT-STEPS\" class=\"headerlink\" title=\"NEXT STEPS\"></a>NEXT STEPS</h3><p>您必须从头到尾阅读本指南，使用内置的超链接来指导您在Intel®Xeon处理器上成功地移植和调优应用程序。本指南中提供的路径反映了获得最佳应用程序性能所需的步骤。</p>\n",
            "tags": [
                "Cache",
                "Blocking"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/26/openmp008/",
            "url": "https://xingyuanjie.top/2023/02/26/openmp008/",
            "title": "OpenMP:Internal Control Variables",
            "date_published": "2023-02-26T09:36:54.000Z",
            "content_html": "<h2 id=\"2-5-Internal-Control-Variables\"><a href=\"#2-5-Internal-Control-Variables\" class=\"headerlink\" title=\"2.5 Internal Control Variables\"></a>2.5 Internal Control Variables</h2><p>OpenMP实现必须像内部控制变量(icv)一样控制OpenMP程序的行为。这些icv存储的信息包括用于未来并行区域的线程数、用于工作共享循环的调度以及是否启用嵌套并行。在程序执行期间，icv在不同的时间被赋予值(如下所述)。它们是由实现本身初始化的，并且可以通过OpenMP环境变量和调用OpenMP API例程来赋值。程序只能通过OpenMP API例程检索这些icv的值。</p>\n<p>出于说明的目的，本文档使用特定的名称来引用icv，但是实现不需要使用这些名称，也不需要提供访问变量的任何方法，除非通过第<a href=\"https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2\">189</a>页第<a href=\"https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2\">2.5.2节</a>所示的方法。</p>\n<p>2.5.1 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu30.html#x49-670002.5.1\">ICV Descriptions</a></p>\n<p>2.5.2 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu31.html#x50-680002.5.2\">ICV Initialization</a></p>\n<p>2.5.3 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu32.html#x51-710002.5.3\">Modifying and Retrieving ICV Values</a></p>\n<p>2.5.4 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu33.html#x52-740002.5.4\">How ICVs are Scoped</a></p>\n<p>​\t\t 2.5.4.1 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu33.html#x52-760002.5.4.1\">How the Per-Data Environment ICVs Work</a></p>\n<p>2.5.5 <a href=\"https://www.openmp.org/spec-html/5.0/openmpsu34.html#x53-770002.5.5\">ICV Override Relationships</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.openmp.org/spec-html/5.0/openmpse13.html#x48-660002.5\">Internal Control Variables (openmp.org)</a></p>\n",
            "tags": [
                "OpenMP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/26/openmp007/",
            "url": "https://xingyuanjie.top/2023/02/26/openmp007/",
            "title": "OpenMP线程绑定【未完结】",
            "date_published": "2023-02-26T09:06:59.000Z",
            "content_html": "<h2 id=\"OpenMP线程绑定\"><a href=\"#OpenMP线程绑定\" class=\"headerlink\" title=\"OpenMP线程绑定\"></a>OpenMP线程绑定</h2><h3 id=\"OpenMP相关环境变量与指令\"><a href=\"#OpenMP相关环境变量与指令\" class=\"headerlink\" title=\"OpenMP相关环境变量与指令\"></a>OpenMP相关环境变量与指令</h3><h4 id=\"OMP-PROC-BIND\"><a href=\"#OMP-PROC-BIND\" class=\"headerlink\" title=\"OMP_PROC_BIND\"></a>OMP_PROC_BIND</h4><p>OMP_PROC_BIND环境变量设置bind-var ICV的初始值。这个环境变量的值可以是true、false，或者用逗号分隔的master、close或spread列表。列表的值设置了对应嵌套级别的并行区域要使用的线程亲和策略。</p>\n<p>如果环境变量设置为false，则执行环境可能会在OpenMP位置之间移动OpenMP线程，线程相关性将被禁用，并行构造上的proc_bind子句将被忽略。</p>\n<p>否则，执行环境不应该在OpenMP位置之间移动OpenMP线程，线程亲和性被启用，并且初始线程被绑定到OpenMP位置列表中的第一个位置，先于第一个活动并行区域。</p>\n<p>如果OMP_PROC_BIND环境变量中的值不是true、false或master、close或spread的逗号分隔列表，则程序的行为是实现定义的。如果初始线程不能绑定到OpenMP位置列表中的第一个位置，则该行为也是实现定义的。</p>\n<p>例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">setenv OMP_PROC_BIND false<br>setenv OMP_PROC_BIND &quot;spread,\tspread, close&quot;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://harrychen.xyz/2022/05/08/numa-processor-and-cpu-binding/\">NUMA 处理器与进程绑定 - Harry Chen’s Blog</a></p>\n<p><a href=\"https://www.openmp.org/spec-html/5.0/openmpse52.html\">OMP_PROC_BIND (openmp.org)</a></p>\n<p><a href=\"https://www.openmp.org/spec-html/5.0/openmpsu36.html#x56-900002.6.2\">Controlling OpenMP Thread Affinity</a></p>\n<p><a href=\"https://www.openmp.org/spec-html/5.0/openmpse53.html\">OMP_PLACES (openmp.org)</a></p>\n<p><a href=\"https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/optimization-and-programming/openmp-support/openmp-library-support/thread-affinity-interface.html\">Thread Affinity Interface (intel.com)</a></p>\n",
            "tags": [
                "OpenMP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/19/Matrix002/",
            "url": "https://xingyuanjie.top/2023/02/19/Matrix002/",
            "title": "矩阵乘法计算拆分展示",
            "date_published": "2023-02-19T09:04:23.000Z",
            "content_html": "<h2 id=\"矩阵乘法计算拆分展示\"><a href=\"#矩阵乘法计算拆分展示\" class=\"headerlink\" title=\"矩阵乘法计算拆分展示\"></a>矩阵乘法计算拆分展示</h2><h3 id=\"通用矩阵乘概念\"><a href=\"#通用矩阵乘概念\" class=\"headerlink\" title=\"通用矩阵乘概念\"></a>通用矩阵乘概念</h3><p><img src=\"/2023/02/19/Matrix002/image-20230219171156738.png\" alt=\"image-20230219171156738\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵各行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵i行j列</span><br>        c[i][j] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p++)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>           C[i][j] += A[i][p] * B[p][j];\t\t<span class=\"hljs-comment\">//遍历A矩阵各行与B矩阵各列</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<h3 id=\"计算拆分展示\"><a href=\"#计算拆分展示\" class=\"headerlink\" title=\"计算拆分展示\"></a>计算拆分展示</h3><p>图四将输出计算拆分为 <strong>1 × 4</strong> 的小块，即将 <strong>N</strong> 维度拆分为两部分。计算该块输出时，需要使用 <strong>A</strong> 矩阵的1行，和 <strong>B</strong> 矩阵的4列 。</p>\n<p><img src=\"/2023/02/19/Matrix002/image-20230219171904249.png\" alt=\"image-20230219171904249\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵各行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j +=<span class=\"hljs-number\">4</span>)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵j-j+3列</span><br>        c[i][j + <span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i][j + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i][j + <span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i][j + <span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p++)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>            <span class=\"hljs-comment\">//遍历A矩阵各行与B矩阵各列</span><br>           C[i][j + <span class=\"hljs-number\">0</span>] += A[i][p] * B[p][j + <span class=\"hljs-number\">0</span>];    <br>           C[i][j + <span class=\"hljs-number\">1</span>] += A[i][p] * B[p][j + <span class=\"hljs-number\">1</span>];<br>           C[i][j + <span class=\"hljs-number\">2</span>] += A[i][p] * B[p][j + <span class=\"hljs-number\">2</span>];<br>           C[i][j + <span class=\"hljs-number\">3</span>] += A[i][p] * B[p][j + <span class=\"hljs-number\">3</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>最内侧计算使用的矩阵<strong>A</strong>的元素是一致的。因此可以将**A[i][p]**读取到寄存器中，从而实现4次数据复用。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> temp = A[i][p];<br></code></pre></div></td></tr></table></figure>\n\n<p>一般将最内侧循环称作计算核(micro kernel)</p>\n<p>类似地，我们可以继续拆分输出<strong>M</strong>维度，从而在内测循环中计算 <strong>4 × 4</strong> 输出，如图五。</p>\n<p><img src=\"/2023/02/19/Matrix002/image-20230219174355047.png\" alt=\"image-20230219174355047\"></p>\n<p>同样的，将计算核心展开，可以得到下面的伪代码。这里我们将 <strong>1 × 4</strong> 中展示过的N维度的计算简化表示。这种拆分可看成是<strong>4 × 1 × 4</strong>，这样A和B的访存均可复用四次。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i+=<span class=\"hljs-number\">4</span>)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵i-i+3行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j +=<span class=\"hljs-number\">4</span>)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵第j-j+3列</span><br>        c[i + <span class=\"hljs-number\">0</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">2</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p++)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>            <span class=\"hljs-comment\">//遍历A矩阵各行与B矩阵各列</span><br>           C[i + <span class=\"hljs-number\">0</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0</span>][p] * B[p][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];    <br>           C[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">1</span>][p] * B[p][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>           C[i + <span class=\"hljs-number\">2</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">2</span>][p] * B[p][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>           C[i + <span class=\"hljs-number\">3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">3</span>][p] * B[p][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>到目前为止。我们都是在输出的两个维度上展开，而整个计算还包含一个规约(Reduction)维度K。图六展示了在计算<strong>4 × 4</strong>输出时，将维度K拆分，从而每次最内侧循环计算出输出矩阵C的<strong>4&#x2F;K</strong>的部分和。</p>\n<p><img src=\"/2023/02/19/Matrix002/image-20230219180147184.png\" alt=\"image-20230219180147184\"></p>\n<p>下面展示的是这部分计算的展开伪代码，其中维度M和N已经被简写。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i+=<span class=\"hljs-number\">4</span>)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵i-i+3行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j +=<span class=\"hljs-number\">4</span>)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵第j-j+3列</span><br>        c[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        c[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p+=<span class=\"hljs-number\">4</span>)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>           C[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][p + <span class=\"hljs-number\">0</span>] * B[p + <span class=\"hljs-number\">0</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];    <br>           C[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][p + <span class=\"hljs-number\">1</span>] * B[p + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>           C[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][p + <span class=\"hljs-number\">2</span>] * B[p + <span class=\"hljs-number\">2</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>           C[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>] += A[i + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>][p + <span class=\"hljs-number\">3</span>] * B[p + <span class=\"hljs-number\">3</span>][j + <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.3</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>在对M和N展开式，我们可以分别复用B和A的数据；在对K展开时，其局部使用的C的内存是一致的，那么K迭代时可以将部分和累加在寄存器中——最内层循环整个迭代一次写到C的内存中。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://zhenhuaw.me/blog/2019/gemm-optimization.html\">通用矩阵乘（GEMM）优化算法 | 黎明灰烬 博客 (zhenhuaw.me)</a></p>\n",
            "tags": [
                "Matrix",
                "GEMM"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/15/blislab003/",
            "url": "https://xingyuanjie.top/2023/02/15/blislab003/",
            "title": "BLISlab中C矩阵初始化速度测试",
            "date_published": "2023-02-15T03:48:16.000Z",
            "content_html": "<h2 id=\"BLISlab中C矩阵初始化速度测试\"><a href=\"#BLISlab中C矩阵初始化速度测试\" class=\"headerlink\" title=\"BLISlab中C矩阵初始化速度测试\"></a>BLISlab中C矩阵初始化速度测试</h2><p><strong>假设我们想把C中的所有元素都设为0。</strong></p>\n<p><strong>统一编译命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">g++  xxx.cpp -O0 -std=c++11 -o xxx<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"版本一：\"><a href=\"#版本一：\" class=\"headerlink\" title=\"版本一：\"></a>版本一：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C( i, j )     C[ (j)*ldc + (i) ]</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;\t<br>\t<span class=\"hljs-keyword\">int</span> i,j,m,n;<br>\tm=<span class=\"hljs-number\">20000</span>;<br>\tn=<span class=\"hljs-number\">20000</span>;<br>\t<span class=\"hljs-keyword\">int</span> ldc=m;<br>\t<span class=\"hljs-keyword\">double</span>*\tC =(<span class=\"hljs-keyword\">double</span>*)_mm_malloc(m*n*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>),<span class=\"hljs-number\">32</span>);<br>\tstd::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::<span class=\"hljs-built_in\">now</span>();<br>\t\t<span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>    \t\t<span class=\"hljs-keyword\">for</span>( j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123; <br>        \t\t<span class=\"hljs-built_in\">C</span>(i,j) = <span class=\"hljs-number\">0.0</span>;<br>   \t\t \t&#125;<br>\t\t&#125;<br>\tstd::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::<span class=\"hljs-built_in\">now</span>();<br>\tstd::chrono::duration&lt;<span class=\"hljs-keyword\">size_t</span>, std::nano&gt; dur = tp2 - tp1;<br>\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;1 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 纳秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 微妙&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 毫秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::seconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 秒钟&quot;</span> &lt;&lt; std::endl;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"实测结果：\"><a href=\"#实测结果：\" class=\"headerlink\" title=\"实测结果：\"></a>实测结果：</h3><figure class=\"highlight basic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span>被计时代码耗时：<span class=\"hljs-number\">10776901341</span> 纳秒<br><span class=\"hljs-symbol\">2 </span>被计时代码耗时：<span class=\"hljs-number\">10776901</span> 微妙<br><span class=\"hljs-symbol\">3 </span>被计时代码耗时：<span class=\"hljs-number\">10776</span> 毫秒<br><span class=\"hljs-symbol\">4 </span>被计时代码耗时：<span class=\"hljs-number\">10</span> 秒钟<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"版本二：\"><a href=\"#版本二：\" class=\"headerlink\" title=\"版本二：\"></a>版本二：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C( i, j )     C[ (j)*ldc + (i) ]</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;\t<br>\t<span class=\"hljs-keyword\">int</span> i,j,m,n;<br>\tm=<span class=\"hljs-number\">20000</span>;<br>\tn=<span class=\"hljs-number\">20000</span>;<br>\t<span class=\"hljs-keyword\">int</span> ldc=m;<br>\t<span class=\"hljs-keyword\">double</span>*\tC =(<span class=\"hljs-keyword\">double</span>*)_mm_malloc(m*n*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>),<span class=\"hljs-number\">32</span>);<br>\t<span class=\"hljs-keyword\">double</span> *cp;<br>\tstd::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::<span class=\"hljs-built_in\">now</span>();<br>\t<span class=\"hljs-keyword\">for</span>( j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;<br>    \tcp = &amp;C[ j*ldc ];\t\t\t<span class=\"hljs-comment\">//point cp to top of ith column</span><br>    \t<span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>        \t*cp++ = <span class=\"hljs-number\">0.0</span>;\t\t<span class=\"hljs-comment\">//set element that cp points to to zero and</span><br>    \t&#125;\t\t<span class=\"hljs-comment\">//advance the pointer</span><br>\t&#125;<br>\tstd::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::<span class=\"hljs-built_in\">now</span>();<br>\tstd::chrono::duration&lt;<span class=\"hljs-keyword\">size_t</span>, std::nano&gt; dur = tp2 - tp1;<br>\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;1 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 纳秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 微妙&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 毫秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::seconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 秒钟&quot;</span> &lt;&lt; std::endl;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"实测结果：-1\"><a href=\"#实测结果：-1\" class=\"headerlink\" title=\"实测结果：\"></a>实测结果：</h3><figure class=\"highlight basic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span>被计时代码耗时：<span class=\"hljs-number\">3455968000</span> 纳秒<br><span class=\"hljs-symbol\">2 </span>被计时代码耗时：<span class=\"hljs-number\">3455968</span> 微妙<br><span class=\"hljs-symbol\">3 </span>被计时代码耗时：<span class=\"hljs-number\">3455</span> 毫秒<br><span class=\"hljs-symbol\">4 </span>被计时代码耗时：<span class=\"hljs-number\">3</span> 秒钟<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"版本三：\"><a href=\"#版本三：\" class=\"headerlink\" title=\"版本三：\"></a>版本三：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C( i, j )     C[ (j)*ldc + (i) ]</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;\t<br>\t<span class=\"hljs-keyword\">int</span> i,j,m,n;<br>\tm=<span class=\"hljs-number\">20000</span>;<br>\tn=<span class=\"hljs-number\">20000</span>;<br>\t<span class=\"hljs-keyword\">int</span> ldc=m;<br>\t<span class=\"hljs-keyword\">double</span>*\tC =(<span class=\"hljs-keyword\">double</span>*)_mm_malloc(m*n*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>),<span class=\"hljs-number\">32</span>);<br>\t<span class=\"hljs-keyword\">double</span> *cp;<br>\tstd::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::<span class=\"hljs-built_in\">now</span>();<br>\t<span class=\"hljs-keyword\">for</span>( j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;<br>    \tcp = &amp;C[ j * ldc ];<br>    \t<span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; m; i+=<span class=\"hljs-number\">4</span>)&#123;<br>       \t\t*(cp+<span class=\"hljs-number\">0</span>) = <span class=\"hljs-number\">0.0</span>;<br>        \t*(cp+<span class=\"hljs-number\">1</span>) = <span class=\"hljs-number\">0.0</span>;<br>        \t*(cp+<span class=\"hljs-number\">2</span>) = <span class=\"hljs-number\">0.0</span>;<br>        \t*(cp+<span class=\"hljs-number\">3</span>) = <span class=\"hljs-number\">0.0</span>;<br>        \tcp+=<span class=\"hljs-number\">4</span>;<br>   \t\t&#125;<br>\t&#125;\t<br>\tstd::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::<span class=\"hljs-built_in\">now</span>();<br>\tstd::chrono::duration&lt;<span class=\"hljs-keyword\">size_t</span>, std::nano&gt; dur = tp2 - tp1;<br>\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;1 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 纳秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 微妙&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 毫秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::seconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 秒钟&quot;</span> &lt;&lt; std::endl;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"实测结果：-2\"><a href=\"#实测结果：-2\" class=\"headerlink\" title=\"实测结果：\"></a>实测结果：</h3><figure class=\"highlight basic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span>被计时代码耗时：<span class=\"hljs-number\">2581347801</span> 纳秒<br><span class=\"hljs-symbol\">2 </span>被计时代码耗时：<span class=\"hljs-number\">2581347</span> 微妙<br><span class=\"hljs-symbol\">3 </span>被计时代码耗时：<span class=\"hljs-number\">2581</span> 毫秒<br><span class=\"hljs-symbol\">4 </span>被计时代码耗时：<span class=\"hljs-number\">2</span> 秒钟<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"版本四：\"><a href=\"#版本四：\" class=\"headerlink\" title=\"版本四：\"></a>版本四：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> C( i, j )     C[ (j)*ldc + (i) ]</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;\t<br>\t<span class=\"hljs-keyword\">int</span> i,j,m,n;<br>\tm=<span class=\"hljs-number\">20000</span>;<br>\tn=<span class=\"hljs-number\">20000</span>;<br>\t<span class=\"hljs-keyword\">int</span> ldc=m;<br>\t<span class=\"hljs-keyword\">double</span>*\tC =(<span class=\"hljs-keyword\">double</span>*)_mm_malloc(m*n*<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">double</span>),<span class=\"hljs-number\">32</span>);<br>\t<span class=\"hljs-keyword\">double</span> *cp;<br>\tstd::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::<span class=\"hljs-built_in\">now</span>();<br>    <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> c0 =<span class=\"hljs-number\">0.0</span>,c1=<span class=\"hljs-number\">0.0</span>,c2=<span class=\"hljs-number\">0.0</span>,c3=<span class=\"hljs-number\">0.0</span>;<br>\t<span class=\"hljs-keyword\">for</span>( j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;<br>    \tcp = &amp;C[ j * ldc ];<br>    \t<span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; m; i+=<span class=\"hljs-number\">4</span>)&#123;<br>        \t*(cp+<span class=\"hljs-number\">0</span>) = c0;<br>        \t*(cp+<span class=\"hljs-number\">1</span>) = c1;<br>        \t*(cp+<span class=\"hljs-number\">2</span>) = c2;<br>        \t*(cp+<span class=\"hljs-number\">3</span>) = c3;<br>        \tcp+=<span class=\"hljs-number\">4</span>;<br>   \t\t &#125;<br>\t&#125;<br>\tstd::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::<span class=\"hljs-built_in\">now</span>();<br>\tstd::chrono::duration&lt;<span class=\"hljs-keyword\">size_t</span>, std::nano&gt; dur = tp2 - tp1;<br>\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;1 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 纳秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 微妙&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 毫秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4 被计时代码耗时：&quot;</span> &lt;&lt; std::chrono::duration_cast&lt;std::chrono::seconds&gt;(dur).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; 秒钟&quot;</span> &lt;&lt; std::endl;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"实测结果：-3\"><a href=\"#实测结果：-3\" class=\"headerlink\" title=\"实测结果：\"></a>实测结果：</h3><figure class=\"highlight basic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span>被计时代码耗时：<span class=\"hljs-number\">2269606428</span> 纳秒<br><span class=\"hljs-symbol\">2 </span>被计时代码耗时：<span class=\"hljs-number\">2269606</span> 微妙<br><span class=\"hljs-symbol\">3 </span>被计时代码耗时：<span class=\"hljs-number\">2269</span> 毫秒<br><span class=\"hljs-symbol\">4 </span>被计时代码耗时：<span class=\"hljs-number\">2</span> 秒钟<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://gukaifeng.cn/posts/c-11-chrono-gao-jing-du-ji-shi-fang-fa/\">C++11 chrono 高精度计时方法 | GuKaifeng’s Blog</a></p>\n",
            "tags": [
                "Linux",
                "dgemm"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/12/blislib002/",
            "url": "https://xingyuanjie.top/2023/02/12/blislib002/",
            "title": "BLISlab tutoril阅读",
            "date_published": "2023-02-12T13:11:56.000Z",
            "content_html": "<h1 id=\"BLISlab-tutoril阅读\"><a href=\"#BLISlab-tutoril阅读\" class=\"headerlink\" title=\"BLISlab tutoril阅读\"></a>BLISlab tutoril阅读</h1><h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><strong>Git地址：</strong><a href=\"https://github.com/flame/blislab\">https://github.com/flame/blislab</a> 【代码包包含tutoril.pdf】</p>\n<h2 id=\"BLISlab-A-Sandbox-for-Optimizing-GEMM\"><a href=\"#BLISlab-A-Sandbox-for-Optimizing-GEMM\" class=\"headerlink\" title=\"BLISlab: A Sandbox for Optimizing GEMM\"></a>BLISlab: A Sandbox for Optimizing GEMM</h2><h2 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h2><p>矩阵-矩阵乘法是科学计算中非常重要的基本运算，机器学习也越来越重要。这是一个非常简单的概念，可以在典型的高中代数课程中引入，但在实践中又非常重要，它在计算机上的实现仍然是一个活跃的研究主题。本笔记描述了一组使用该操作的练习，如何在具有分层内存(多个缓存)的现代cpu上获得高性能。它是基于blas类库实例化软件(BLIS)框架下的见解，通过公开一个模仿BLIS实现的简化“沙盒”来实现的。因此，它也成为BLIS优化的“众包”工具。</p>\n<h2 id=\"1-Introduction\"><a href=\"#1-Introduction\" class=\"headerlink\" title=\"1.Introduction\"></a>1.Introduction</h2><p>矩阵-矩阵乘法(Gemm)经常被用作一个简单的例子，以提高如何在现代处理器上优化代码的意识。原因是该操作描述简单，很难完全优化，而且具有实际意义。在本文档中，我们将带领读者了解目前CPU架构中最快实现的技术。</p>\n<h3 id=\"1-1-Basic-Linear-Algebra-Subprograms-BLAS\"><a href=\"#1-1-Basic-Linear-Algebra-Subprograms-BLAS\" class=\"headerlink\" title=\"1.1 Basic Linear Algebra Subprograms (BLAS)\"></a>1.1 Basic Linear Algebra Subprograms (BLAS)</h3><p>基本线性代数子程序(BLAS)[10,5,4,14]为一组线性代数操作形成了一个接口，在此基础上构建了更高级别的线性代数库，如LAPACK[2]和libflame[19]。其思想是，如果有人针对给定的体系结构优化BLAS，那么所有以调用BLAS的方式编写的应用程序和库都将受益于这种优化。</p>\n<p>BLAS被分为三组:一级BLAS(矢量-矢量操作)、二级BLAS(矩阵-矢量操作)和三级BLAS(矩阵-矩阵操作)。最后一组得益于这样一个事实:如果所有矩阵操作数的大小都是n × n，则O(n3)浮点运算对O(n)个数据执行，因此在内存层(主存、缓存和寄存器)之间移动数据的成本可以在很多次计算中平摊。因此，如果仔细执行这些操作，原则上可以实现高性能。</p>\n<h3 id=\"1-2-Matrix-matrix-multiplication\"><a href=\"#1-2-Matrix-matrix-multiplication\" class=\"headerlink\" title=\"1.2 Matrix-matrix multiplication\"></a>1.2 Matrix-matrix multiplication</h3><p>特别地，BLAS通过(Fortran)调用支持具有双精度浮点数的Gemm:</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs fortran\">dgemm( transa, transb, m, n, k alpha, A,lda, B, ldb, beta, C, ldc)<br></code></pre></div></td></tr></table></figure>\n\n<p>通过适当地选择转置a和转置b来计算:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230212215656711.png\" alt=\"image-20230212215656711\"></p>\n<p>这里C是m × n, k是“第三维”。参数dla, dlb和dlc将在本文档后面进行解释。</p>\n<p>在我们的练习中，我们考虑Gemm的简化版本:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230212215836596.png\" alt=\"image-20230212215836596\"></p>\n<p>其中C是m × n, A是m × k, B是k × n。如果了解如何优化dgemm的这种特殊情况，那么可以很容易地将此知识扩展到所有3级BLAS功能。</p>\n<h3 id=\"1-3-High-performance-implementation\"><a href=\"#1-3-High-performance-implementation\" class=\"headerlink\" title=\"1.3 High-performance implementation\"></a>1.3 High-performance implementation</h3><p>高性能实现的复杂性使得BLAS(尤其是Gemm)的实现通常都是由默默无闻的专家来完成的，这些专家为硬件供应商开发数字库，例如IBM的ESSL、Intel的MKL、Cray的LibSci和AMD的ACML库。这些库通常是用汇编代码编写的(至少是部分)，并且针对特定的处理器高度专门化。</p>\n<p>一篇关键论文[1]展示了“算法和体系结构”方法如何携手设计ar体系结构、编译器和算法，使BLAS能够用高级语言(Fortan)为IBM Power体系结构编写，并解释了在这些处理器上实现高性能的复杂性。便携式高性能ANSI C (PHiPAC)[3]项目随后提供了用C编写高性能代码的指南，并建议如何自动生成和优化以这种方式编写的Gemm。Au tomatatically tuning Linear Algebra Software (ATLAS)[17,18]建立在这些见解的基础上，使BLAS库的自动调优和自动生成成为主流。</p>\n<p>在本文档的一部分中，我们讨论了有关该主题的最新论文，包括引入了实施Gemm[6]的Goto方法和该方法[16]的BLIS重构的论文，以及其他更直接相关的论文。</p>\n<h3 id=\"1-4-Other-similar-exercises\"><a href=\"#1-4-Other-similar-exercises\" class=\"headerlink\" title=\"1.4 Other similar exercises\"></a>1.4 Other similar exercises</h3><p>还有一些人基于Gemm组合了练习。与本文相关的最新成果有:乌尔姆大学Michael Lehn所作的“优化微内核:从纯C到SSE”，以及我们自己整理的关于“优化微内核”的维基。</p>\n<h3 id=\"1-5-We-need-you\"><a href=\"#1-5-We-need-you\" class=\"headerlink\" title=\"1.5 We need you!\"></a>1.5 We need you!</h3><p>本文的目的是指导您实现Gemm的高性能实现。我们的别有用心是，用于实现BLAS的BLIS框架需要针对各种cpu高度优化的所谓微内核。在教你基本技巧的过程中，我们希望找到“那个人”将贡献最好的微内核。就把它当做我们版的高性能计算机达人秀吧。虽然我们在描述中关注的是Intel Haswell架构的优化，但是设置可以很容易地修改，从而帮助您(和我们)优化其他cpu。事实上，BLIS本身支持的体系结构包括AMD和Intel的x86处理器，IBM的Power处理器，ARM处理器和德州仪器的DSP处理器[15,12,8]。</p>\n<h2 id=\"2-Step-1-The-Basics\"><a href=\"#2-Step-1-The-Basics\" class=\"headerlink\" title=\"2 Step 1: The Basics\"></a>2 Step 1: The Basics</h2><h3 id=\"2-1-Simple-matrix-matrix-multiplication\"><a href=\"#2-1-Simple-matrix-matrix-multiplication\" class=\"headerlink\" title=\"2.1 Simple matrix-matrix multiplication\"></a>2.1 Simple matrix-matrix multiplication</h3><p>在我们的讨论中，我们将考虑计算：</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230213165803939.png\" alt=\"image-20230213165803939\"></p>\n<p><img src=\"/2023/02/12/blislib002/image-20230213165826084.png\" alt=\"image-20230213165826084\"></p>\n<p>其中，A、B、C分别为m × k、k × n、m × n矩阵。</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230213165920897.png\" alt=\"image-20230213165920897\"></p>\n<p>如果A、B和C存储在二维数组A、B和C中，下面的伪代码计算C:&#x3D;<br>AB + C:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230213170125083.png\" alt=\"image-20230213170125083\"></p>\n<p>分别计算乘法和加法，计算需要2mnk个浮点运算(flop)。</p>\n<h3 id=\"2-2-Setup\"><a href=\"#2-2-Setup\" class=\"headerlink\" title=\"2.2 Setup\"></a>2.2 Setup</h3><p>为了让您高效地学习如何高效地进行计算，您可以在启动项目时准备好大部分基础设施。我们已经构造了子目录step1，有点像实现真正库might的项目。对于我们的目的来说，这可能是多余的，但是如何构建软件项目是一项值得学习的有用技能。</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214173819349.png\" alt=\"image-20230214173819349\"></p>\n<p>考虑图4，它演示了子目录step1的目录结构:</p>\n<p><strong>README</strong>是一个描述目录内容以及如何编译和执行代码的文件。</p>\n<p><strong>source .sh</strong>配置环境变量的文件。在那个文件中</p>\n<p><strong>BLISLAB USE INTEL</strong>设置是否使用INTEL编译器(true)或GNU编译器(false)。</p>\n<p><strong>BLISLAB USE BLAS</strong>指示您的参考dgemm是否使用外部BLAS库实现(如果您的机器上安装了这样的BLAS库，则为true)，还是简单的三重循环实现(false)。</p>\n<p><strong>COMPILER OPT LEVEL</strong>设置GNU或Intel编译器的优化级别(O0, O1, O2, O3)。<br>(请注意，例如，O3由大写字母“O”和数字“3”组成。)</p>\n<p><strong>OMP NUM THREADS</strong> and <strong>BLISLAB IC NT</strong>设置用于并行版本的线程数<br>代码。对于第1步，将它们都设置为1。</p>\n<p><strong>dgemm</strong>是实现dgemm的例程存在的子目录。在其中</p>\n<p><strong>bl_dgemm_ref.c</strong>包含例程<strong>dgemm ref</strong>，它是dgemm的一个简单实现，如果<strong>BLISLAB_use_BLAS &#x3D; false</strong>，您将使用它来检查实现的正确性。</p>\n<p><strong>my_dgemm.c</strong>包含例程<strong>dgemm</strong>，它最初是dgemm的一个简单实现，您将优化它作为掌握如何优化gemm的第一步的一部分。</p>\n<p><strong>Bl_dgemm_util.c</strong>包含稍后会派上用场的实用程序例程</p>\n<p><strong>include</strong>这个目录包含包含各种宏定义和其他头信息的文件。</p>\n<p><strong>lib</strong>此目录将保存由您实现的源文件(libblislab. lib)生成的库。libblislab.a)您还可以在此目录中安装参考库(例如OpenBLAS)以比较性能。</p>\n<p><strong>test</strong> 这个目录包含“测试驱动程序”和各种实现的正确性&#x2F;性能检查脚本。</p>\n<p><strong>test_bl_demm .c</strong>包含测试例程bl_demm的“测试驱动程序”。</p>\n<p><strong>test_bl_dgemm.x</strong>是<strong>test_bl_dgemm.c</strong>的可执行文件。</p>\n<p><strong>Run_bl_dgemm.sh</strong>包含一个bash脚本，用于收集性能结果。</p>\n<p><strong>tacc_run_bl_dgemm.sh</strong> contains a <strong>SLURM</strong> script for you to (optionally) submit the job to the Texas Advanced Computing Center (TACC) machines if you have an account there.</p>\n<h3 id=\"2-3-Getting-started\"><a href=\"#2-3-Getting-started\" class=\"headerlink\" title=\"2.3 Getting started\"></a>2.3 Getting started</h3><p>我们希望您从my_dgemm.c中的实现开始，并通过应用各种标准优化技术对其进行优化。该文件中的初始实现是具有图2中给出的三个循环的简单实现。首先要注意的是二维数组如何以所谓的列-主序映射到内存。这种选择的原因是最初的BLAS假定数组的列主存储，因为该接口首先是为Fortran用户提供的。检查</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214185803699.png\" alt=\"image-20230214185803699\"></p>\n<p>我们注意到，每个操作数都是一个宏。考虑文件的早期</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214185849594.png\" alt=\"image-20230214185849594\"></p>\n<p>地址C处的线性数组用于存储元素Ci,j，因此i,j元素被映射到位置j * ldc + i。查看它的方法是C的每一列都是连续存储的。但是，可以把矩阵C看作是嵌入在一个更大的数组中，该数组有ldc行，因此访问一行就意味着跨ldc遍历数组C。二维数组C的前维数通常是指这个较大数组的行维数，因此变量ldc (C的前维数)。下图说明了这三个矩阵:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214190409172.png\" alt=\"image-20230214190409172\"></p>\n<p>其中箭头表示列是连续存储的。</p>\n<h4 id=\"2-3-1-Configure-the-default-implementation\"><a href=\"#2-3-1-Configure-the-default-implementation\" class=\"headerlink\" title=\"2.3.1 Configure the default implementation\"></a>2.3.1 Configure the default implementation</h4><p>默认情况下，练习编译并链接到Intel的icc编译器，该编译器将对代码应用编译器优化(O3级)。您需要通过以下命令设置环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">source sourceme.sh<br></code></pre></div></td></tr></table></figure>\n\n<p>在终端中，您将看到输出:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_INTEL = TRUE<br>COMPILER_OPT_LEVEL = O3<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-3-2-Compile-execute-and-collect-results\"><a href=\"#2-3-2-Compile-execute-and-collect-results\" class=\"headerlink\" title=\"2.3.2 Compile, execute and collect results\"></a>2.3.2 Compile, execute and collect results</h4><p>如果您无法访问Intel的编译器(icc)，请阅读第2.3.2小节和2.3.3小节，并继续阅读第2.3.5小节。</p>\n<p>您可以编译、执行代码并通过执行收集性能结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">make clean<br>make<br>cd test<br>./run_bl_dgemm.sh<br></code></pre></div></td></tr></table></figure>\n\n<p>在子目录step1中。您将看到性能结果输出:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214231134260.png\" alt=\"image-20230214231134260\"></p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214231142311.png\" alt=\"image-20230214231142311\"></p>\n<p>您可以在run_bl_dgemm.sh中更改采样块大小。请注意，如果代码中有错误，这些错误将被报告为，例如，</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230214231406465.png\" alt=\"image-20230214231406465\"></p>\n<h4 id=\"2-3-3-Draw-the-performance-graph\"><a href=\"#2-3-3-Draw-the-performance-graph\" class=\"headerlink\" title=\"2.3.3 Draw the performance graph\"></a>2.3.3 Draw the performance graph</h4><p>最后，您可以使用<strong>MATLAB</strong>用我们的脚本绘制性能图。在<strong>test</strong>子目录下，执行后</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">./collect_result_step1<br></code></pre></div></td></tr></table></figure>\n\n<p>你会得到一个MATLAB文件“step1_result.m”，具有性能结果。然后你可以执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">bl_dgemm_plot.m<br></code></pre></div></td></tr></table></figure>\n\n<p>在MATLAB中，然后生成性能图。</p>\n<h4 id=\"2-3-4-Change-to-the-GNU-compiler\"><a href=\"#2-3-4-Change-to-the-GNU-compiler\" class=\"headerlink\" title=\"2.3.4 Change to the GNU compiler\"></a>2.3.4 Change to the GNU compiler</h4><p>由于我们希望您明确地了解什么样的技巧可以带来高性能，并且由于有些人可能无法访问Intel编译器，因此接下来应该改为使用GNU C编译器。为此，你必须编辑<strong>sourceme.sh</strong>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_INTEL=false<br></code></pre></div></td></tr></table></figure>\n\n<p>然后，类似于默认设置，您需要通过执行以下命令来设置环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">source sourceme.sh<br></code></pre></div></td></tr></table></figure>\n\n<p>在终端，你会观察到:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_INTEL = false<br>COMILER_OPT_LEVEL = O3<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-3-5-Turn-off-optimization\"><a href=\"#2-3-5-Turn-off-optimization\" class=\"headerlink\" title=\"2.3.5 Turn off optimization\"></a>2.3.5 Turn off optimization</h4><p>接下来，我们希望您关闭编译器执行的优化。这有三个目的:首先，这意味着您将必须显式地执行优化，这将允许您了解架构和算法如何交互。其次，优化编译器很可能会试图“撤销”您显式试图完成的任务。第三，在代码中构建的技巧越多，编译器就越难找出优化的方法。</p>\n<p>你需要先编辑<strong>sourceme.sh:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">COMILER_OPT_LEVEL = O0<br></code></pre></div></td></tr></table></figure>\n\n<p>然后，类似于默认设置，您需要通过执行以下命令来设置环境变量:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">source sourceme.sh<br></code></pre></div></td></tr></table></figure>\n\n<p>在终端中，您将看到输出:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_INTEL = false<br>COMILER_OPT_LEVEL =O0<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-3-6-Optional-Use-optimized-BLAS-library-as-reference-implementation\"><a href=\"#2-3-6-Optional-Use-optimized-BLAS-library-as-reference-implementation\" class=\"headerlink\" title=\"2.3.6 (Optional) Use optimized BLAS library as reference implementation\"></a>2.3.6 (Optional) Use optimized BLAS library as reference implementation</h4><p>默认情况下，您的参考Gemm实现是一个非常缓慢的三循环实现。如果你在测试机器上安装了BLAS库，你可以通过设置该库中的dgemm作为你的参考实现:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_BLAS=true<br></code></pre></div></td></tr></table></figure>\n\n<p>在sourceme.sh。如果使用Intel编译器，则不需要显式指定MKL的路径。但是，如果使用GNU编译器，则需要指定BLAS库的路径。例如，您可能希望从<a href=\"https://github.com/flame/blis%E5%AE%89%E8%A3%85%E6%88%91%E4%BB%AC%E7%9A%84BLIS%E5%BA%93%E5%88%B0/home/lib/blis%E7%9B%AE%E5%BD%95%E5%90%8C%E6%97%B6%E5%9C%A8sourceme\">https://github.com/flame/blis安装我们的BLIS库到/home/lib/blis目录同时在sourceme</a> .sh中设置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLAS_DIR=/home/lib/blis<br></code></pre></div></td></tr></table></figure>\n\n<p>执行**$ source sourceme .sh**后，你会看到:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">BLISLAB_USE_BLAS = true<br>BLAS_DIR = /home/lib/blis<br></code></pre></div></td></tr></table></figure>\n\n<p>现在，您的实现的性能和准确性将与这个优化的库例程进行比较。</p>\n<h3 id=\"2-4-Basic-techniques\"><a href=\"#2-4-Basic-techniques\" class=\"headerlink\" title=\"2.4 Basic techniques\"></a>2.4 Basic techniques</h3><p>在本小节中，我们将介绍一些基本的交易技巧。</p>\n<h4 id=\"2-4-1-Using-pointers\"><a href=\"#2-4-1-Using-pointers\" class=\"headerlink\" title=\"2.4.1 Using pointers\"></a>2.4.1 Using pointers</h4><p>既然优化被关闭了，那么矩阵元素所在地址的计算将显式地公开。(优化编译器可以消除这种开销。)您要做的是更改my_gemm.c中的实现，以便它使用指针。在这样做之前，您可能需要备份原始的my_gemm.c，以防需要从头开始重新启动。实际上，在每个步骤中，您可能都希望在单独的文件中备份前面的实现</p>\n<p>这是基本的想法。假设我们想把C中的所有元素都设为0。一个基本的循环，按照在my_gemm.c中找到的内容来设计</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>    <span class=\"hljs-keyword\">for</span>( j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;<br>        <span class=\"hljs-built_in\">C</span>(i,j) =<span class=\"hljs-number\">0.0</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>Using pointers, we might implement this as</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span> *cp;<br><span class=\"hljs-keyword\">for</span>( j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;<br>    cp = &amp;C[ j*ldc ];\t\t\t<span class=\"hljs-comment\">//point cp to top of ith column</span><br>    <span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>        *cp++ = <span class=\"hljs-number\">0.0</span>;\t\t<span class=\"hljs-comment\">//set element that cp points to to zero and</span><br>    &#125;\t\t<span class=\"hljs-comment\">//advance the pointer</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>注意，我们有意地交换了循环的顺序，以便向前移动指针将我们带到C的列中。</p>\n<h4 id=\"2-4-2-Loop-unrolling\"><a href=\"#2-4-2-Loop-unrolling\" class=\"headerlink\" title=\"2.4.2 Loop unrolling\"></a>2.4.2 Loop unrolling</h4><p>每次通过内部循环更新循环索引i和指针cp都会产生相当大的开销。</p>\n<p>因此，编译器将执行循环展开。使用展开因子4，我们将C设置为0的简单循环变成</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span> *cp;<br><br><span class=\"hljs-keyword\">for</span>( j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;<br>    cp = &amp;C[ j * ldc ];<br>    <span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; m; i+=<span class=\"hljs-number\">4</span>)&#123;<br>        *(cp+<span class=\"hljs-number\">0</span>) = <span class=\"hljs-number\">0.0</span>;<br>        *(cp+<span class=\"hljs-number\">1</span>) = <span class=\"hljs-number\">0.0</span>;<br>        *(cp+<span class=\"hljs-number\">2</span>) = <span class=\"hljs-number\">0.0</span>;<br>        *(cp+<span class=\"hljs-number\">3</span>) = <span class=\"hljs-number\">0.0</span>;<br>        cp+=<span class=\"hljs-number\">4</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>重要的</p>\n<ul>\n<li>i和cp现在每四次迭代才更新一次。</li>\n<li><em>(cp+0)使用称为间接寻址的机器指令，这比使用</em>(cp+k)计算更有效，其中k是变量。</li>\n<li>当它从内存中输入数据到缓存中时，每次输入一条64字节的缓存线。这意味着以64字节的块访问连续数据可以减少内存层之间的内存移动成本。</li>\n</ul>\n<p>请注意，在展开时，如果m不是4的倍数，则可能必须处理“边缘”。</p>\n<p>为了这个练习，你不需要担心这个边缘，只要你明智地选择你的采样块大小，就像第2.5节重申的那样。</p>\n<h4 id=\"2-4-3-Register-variables\"><a href=\"#2-4-3-Register-variables\" class=\"headerlink\" title=\"2.4.3 Register variables\"></a>2.4.3 Register variables</h4><p>注意，只有当数据存储在寄存器中时，计算才会发生。编译器将自动转换代码，以便插入将某些数据放入寄存器的中间步骤。可以给编译器一个提示，将某些数据保存在寄存器中是很好的，如下面的例子所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">double</span> *cp;<br><br><span class=\"hljs-keyword\">for</span>( j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;<br>    cp = &amp;C[ j * ldc ];<br>    <span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; m; i+=<span class=\"hljs-number\">4</span>)&#123;<br>        <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> c0 =<span class=\"hljs-number\">0.0</span>,c1=<span class=\"hljs-number\">0.0</span>,c2=<span class=\"hljs-number\">0.0</span>,c3=<span class=\"hljs-number\">0.0</span>;<br>        *(cp+<span class=\"hljs-number\">0</span>) = c0;<br>        *(cp+<span class=\"hljs-number\">1</span>) = c1;<br>        *(cp+<span class=\"hljs-number\">2</span>) = c2;<br>        *(cp+<span class=\"hljs-number\">3</span>) = c3;<br>        cp+=<span class=\"hljs-number\">4</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-5-A-modest-first-goal\"><a href=\"#2-5-A-modest-first-goal\" class=\"headerlink\" title=\"2.5 A modest first goal\"></a>2.5 A modest first goal</h4><p>现在我们要求您使用上面讨论的技术来优化my_dgemm.c。现在，只需要考虑如何为较小的矩阵获得更好的性能。具体来说，请看下面这张图:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230215110352304.png\" alt=\"image-20230215110352304\"></p>\n<p>我们想让你做的是编写你的代码，使C的mR × nR块保存在寄存器中。你可以选择mR和nR，但是你需要用这些选项更新文件<strong>include&#x2F;bl_config.h</strong>。这确保了测试驱动程序只尝试这些块大小的倍数的问题大小，所以您不必担心“边缘”。</p>\n<p>您将注意到，即使对于可以放入某个缓存内存中的较小的矩阵，您的实现(比您可能已安装的MKL或其他优化的BLAS库的实现差得多)。原因是编译器没有为浮点运算使用最快的指令。可以通过使用向量intrinsic funtions函数(允许您从C显式地利用它们)或通过在汇编代码中编码来访问这些函数。现在，我们还没到那一步。我们将<br>在步骤3中讨论更多。</p>\n<h2 id=\"3-Step-2-Blocking\"><a href=\"#3-Step-2-Blocking\" class=\"headerlink\" title=\"3 Step 2: Blocking\"></a>3 Step 2: Blocking</h2><h3 id=\"3-1-Poorman’s-BLAS\"><a href=\"#3-1-Poorman’s-BLAS\" class=\"headerlink\" title=\"3.1 Poorman’s BLAS\"></a>3.1 Poorman’s BLAS</h3><p>本练习的第1步使您认识到，随着基于缓存的体系结构的出现，Gemm的高性能实现需要仔细注意数据在内存层之间移动的成本和对该数据的计算的摊薄。为了保持这种可管理性，认识到只有使用相对较小的矩阵执行矩阵-矩阵乘法的“内核”需要高度优化，这是有帮助的，因为使用较大的矩阵的计算可以被分块，然后使用这样的内核而不会对整体性能产生不利影响。这一见解在[9]中得到了明确的提倡。</p>\n<p>这有时被称为“穷人的BLAS”，因为如果一个人只能负担得起优化矩阵-矩阵乘法(使用子矩阵)，那么就可以构建Gemm，以及其他重要的矩阵-矩阵运算，即三级BLAS。我们稍后将看到的是，从模块化和性能的角度来看，这实际上是一个好主意。</p>\n<p>在上一节中，您已经看到了分块的示例。</p>\n<h3 id=\"3-2-Blocked-matrix-matrix-multiplication\"><a href=\"#3-2-Blocked-matrix-matrix-multiplication\" class=\"headerlink\" title=\"3.2 Blocked matrix-matrix multiplication\"></a>3.2 Blocked matrix-matrix multiplication</h3><p>分块Gemm以利用处理器的分层内存的关键是理解当这些矩阵被分块时如何计算C:&#x3D; AB + C。分块</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216130352894.png\" alt=\"image-20230216130352894\"></p>\n<h3 id=\"3-3-Your-mission-if-you-choose-to-accept-it\"><a href=\"#3-3-Your-mission-if-you-choose-to-accept-it\" class=\"headerlink\" title=\"3.3 Your mission, if you choose to accept it\"></a>3.3 Your mission, if you choose to accept it</h3><p>我们现在要求您在my_dgemm中实现分块矩阵-矩阵乘法。具体来说，对于小矩阵，您可以获得比大矩阵更好的性能，因为小矩阵适合缓存。将矩阵划分为能够获得更高性能的子矩阵，您将看到，即使对于更大的矩阵，所得到的实现也能保持更好的性能</p>\n<h2 id=\"4-Step-3-Blocking-for-Multiple-Levels-of-Cache\"><a href=\"#4-Step-3-Blocking-for-Multiple-Levels-of-Cache\" class=\"headerlink\" title=\"4 Step 3: Blocking for Multiple Levels of Cache\"></a>4 Step 3: Blocking for Multiple Levels of Cache</h2><h3 id=\"4-1-The-Goto-Approach-to-Implementing-gemm\"><a href=\"#4-1-The-Goto-Approach-to-Implementing-gemm\" class=\"headerlink\" title=\"4.1 The Goto Approach to Implementing gemm\"></a>4.1 The Goto Approach to Implementing gemm</h3><p>2000年左右，Kazushige Goto用他的技术彻底改变了Gemm在当前cpu上的实现方式，该技术首次发表在论文[6]上。</p>\n<p>最近在[16]中描述了这种方法的进一步“重构”。</p>\n<p>BLIS框架的优点是它将必须高度优化的内核(可能使用向量intrinsic或在汇编代码中)减少为微内核。在本节中，我们将简要描述该方法的重点。然而，我们强烈建议读者熟悉以上两篇论文本身。</p>\n<p>图3(左)说明了Goto方法为三层缓存(L1、L2和L3)构建分块的方式。在BLIS框架中，实现就是这样结构的，因此只有底层的微内核需要针对给定的体系结构进行高度优化和定制。在最初的GotoBLAS实现(现在维护为OpenBLAS[11])中，从围绕微内核的第二个循环开始的操作是定制的。为了获得最佳性能，所有数据都是连续访问的，这就是为什么在到达微内核之前的某个时刻，数据是按照箭头所示的顺序打包的:</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216131649371.png\" alt=\"image-20230216131649371\"></p>\n<p>现在，注意上图中A块的每一列都乘以B块对应行中的每个元素(我们称这些A块和B块为微面板)。这意味着L2缓存的延迟(从缓存中引入A微面板元素所需的时间)可以平摊到2nR flop上。</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216131916807.png\" alt=\"image-20230216131916807\"></p>\n<p>出于这个原因，我们可以组织计算，使A的微面板通常驻留在L2缓存中。实际上，我们可以做得更好:当A和B的微面板的一列发生排名1的更新时，A的微面板的下一列可以被带入寄存器，这样计算就可以掩盖数据移动的成本。事实上，我们希望将B的微面板保留在L1缓存中(因为它将被A的许多微面板重用)，这限制了分块参数kC。</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216132839380.png\" alt=\"image-20230216132839380\"></p>\n<p>有人可能会问，上述方案是否是最优方案。在[7]中给出了一个理论，表明在一个理想化的模型下，上述是局部最优的(在某种意义上，假设数据在层次结构中的某个内存层中，在该级别上提出的阻塞最优地与下一个内存层平摊数据移动的成本)。[13]给出了指导各种分块参数选择的理论。</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216133142749.png\" alt=\"image-20230216133142749\"></p>\n<h3 id=\"4-2-Setup\"><a href=\"#4-2-Setup\" class=\"headerlink\" title=\"4.2 Setup\"></a>4.2 Setup</h3><p>图4说明了子目录step3的目录结构。与步骤1相比，我们对以下目录&#x2F;文件进行了修改&#x2F;添加:</p>\n<p><strong>kernels</strong> 这个目录包含各种架构的微内核实现</p>\n<p><strong>bd_gemm_ukr.c</strong>给出了一个原生的C实现</p>\n<p><strong>bl_dgemm_int_kernel.c</strong> gives an <strong>AVX&#x2F;AVX2</strong> intrinsics micro-kernel implementation for Haswell architecture.</p>\n<p><strong>bl_dgemm_asm_kernel.c</strong> gives an <strong>AVX&#x2F;AVX2</strong> assembly micro-kernel implementation for Haswell architecture.</p>\n<h3 id=\"4-3-Advanced-techniques\"><a href=\"#4-3-Advanced-techniques\" class=\"headerlink\" title=\"4.3 Advanced techniques\"></a>4.3 Advanced techniques</h3><p>You can find the vector instructions online:</p>\n<p><strong>Intel Intrinsics Guide</strong></p>\n<p><strong>Intel ISA Extensions</strong></p>\n<h4 id=\"4-3-1-An-introduction-example-for-“axpy”\"><a href=\"#4-3-1-An-introduction-example-for-“axpy”\" class=\"headerlink\" title=\"4.3.1 An introduction example for “axpy”\"></a>4.3.1 An introduction example for “axpy”</h4><p>我们提供了一个实现“axpy”的示例，以演示如何使用Intel AVX intrinsic和Assembly(在misc&#x2F;examples子目录中)。</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216134020439.png\" alt=\"image-20230216134020439\"></p>\n<p>这个例子可以作为学习基本broacast&#x2F;fma&#x2F;load&#x2F;store指令的一个很好的起点。此外，这个示例实际上是4×4 rank-1更新的“broadcast”实现的原语。</p>\n<h4 id=\"4-3-2-4×4-rank-1-update\"><a href=\"#4-3-2-4×4-rank-1-update\" class=\"headerlink\" title=\"4.3.2 4×4 rank-1 update\"></a>4.3.2 4×4 rank-1 update</h4><p>微内核实现可以归结为4×4级别1的更新。有两种可能的实现:一种基于广播(图5)，另一种是蝴蝶排列(图6)。您还可以尝试其他可能的实现。</p>\n<h3 id=\"4-4-Your-mission-if-you-choose-to-accept-it\"><a href=\"#4-4-Your-mission-if-you-choose-to-accept-it\" class=\"headerlink\" title=\"4.4 Your mission, if you choose to accept it\"></a>4.4 Your mission, if you choose to accept it</h3><p>我们在my_dgemm中为您提供了简化BLIS框架的参考实现。代码的组织方式与图3所示相同。但是，每个循环中的步长并没有很好地选择，并且微内核实现是一个简单的C版本。因此。您不会期望代码具有高性能。我们要你做的就是:</p>\n<ul>\n<li>在include&#x2F;bl_config.h文件中指定分块参数mC, nC, kC和微内核大小参数mR, nR;</li>\n<li>使用矢量intrinsic或汇编代码实现高效的微内核。将代码放在kernels&#x2F;bl_dgemm_int_kernel.c(用于向量intrinsic)或kernels&#x2F;bl_dgemm_asm_kernel.c(用于as汇编)中。需要在“include&#x2F; BL_config.h”中修改“BL_MICRO_KERNEL”，指定微内核的函数名。</li>\n</ul>\n<p><img src=\"/2023/02/12/blislib002/image-20230216140558800.png\" alt=\"image-20230216140558800\"></p>\n<h2 id=\"5-Step-4-Parallelizing-with-OpenMP\"><a href=\"#5-Step-4-Parallelizing-with-OpenMP\" class=\"headerlink\" title=\"5 Step 4: Parallelizing with OpenMP\"></a>5 Step 4: Parallelizing with OpenMP</h2><p>BLIS构造GotoBLAS方法实现Gemm的好处是，它在tt C中公开了5个循环，这些循环可以很容易地与OpenMP指令并行。</p>\n<h3 id=\"5-1-To-parallelize-or-not-to-parallelize-that’s-the-question\"><a href=\"#5-1-To-parallelize-or-not-to-parallelize-that’s-the-question\" class=\"headerlink\" title=\"5.1 To parallelize or not to parallelize, that’s the question\"></a>5.1 To parallelize or not to parallelize, that’s the question</h3><p>最基本的问题是要并行化哪个循环。在[12]中详细讨论了每个循环的并行化的优点和缺点。对于多核体系结构(具有相对较少核的多线程体系结构)，可以在早期的论文[15]中找到结果。</p>\n<h2 id=\"6-Conclusion\"><a href=\"#6-Conclusion\" class=\"headerlink\" title=\"6 Conclusion\"></a>6 Conclusion</h2><p>我们使用GEMM作为案例研究来展示如何为性能进行编程</p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216141029854.png\" alt=\"image-20230216141029854\"></p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216141041389.png\" alt=\"image-20230216141041389\"></p>\n<p><img src=\"/2023/02/12/blislib002/image-20230216141057850.png\" alt=\"image-20230216141057850\"></p>\n",
            "tags": [
                "Linux",
                "dgemm"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/06/matrix001/",
            "url": "https://xingyuanjie.top/2023/02/06/matrix001/",
            "title": "矩阵乘法最基础版本",
            "date_published": "2023-02-06T14:00:14.000Z",
            "content_html": "<h2 id=\"矩阵乘法最基础版本\"><a href=\"#矩阵乘法最基础版本\" class=\"headerlink\" title=\"矩阵乘法最基础版本\"></a>矩阵乘法最基础版本</h2><h3 id=\"数学原理示例\"><a href=\"#数学原理示例\" class=\"headerlink\" title=\"数学原理示例\"></a>数学原理示例</h3><p><img src=\"/2023/02/06/matrix001/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pYW5uaWFueGk=,size_16,color_FFFFFF,t_70.png\" alt=\"img\"></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>用A的第i行分别和B的第j列的各个元素相乘求和，求得C的第i行j列的元素，这种算法中，B的访问是按列进行访问的，代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//m是A矩阵的行,k是A矩阵的列,n是B矩阵的列</span><br><span class=\"hljs-keyword\">double</span> temp=<span class=\"hljs-number\">0.0</span>;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;\t\t\t\t<span class=\"hljs-comment\">//遍历C矩阵各行，其行数与A的行数相等 </span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)&#123;\t\t\t<span class=\"hljs-comment\">//遍历C矩阵i行j列</span><br>        temp = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; k; p++)&#123;\t\t<span class=\"hljs-comment\">//用p循环累加和计算C[i][j] </span><br>            <span class=\"hljs-comment\">//计算区域</span><br>            temp += A[i][p] * B[p][j];\t\t<span class=\"hljs-comment\">//遍历A矩阵各行与B矩阵各列</span><br>        &#125;<br>        C[i][j] = temp;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//结果C矩阵m行n列</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://blog.csdn.net/niannianxi/article/details/104028215\">(64条消息) C语言实现矩阵的乘法_꧁年年曦꧂的博客-CSDN博客_c语言矩阵乘法</a></p>\n<p><a href=\"https://www.jb51.net/article/75750.htm\">C语言科学计算入门之矩阵乘法的相关计算_C 语言_脚本之家 (jb51.net)</a></p>\n",
            "tags": [
                "Matrix",
                "GEMM"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/02/blislab/",
            "url": "https://xingyuanjie.top/2023/02/02/blislab/",
            "title": "BLISlab dgemm优化",
            "date_published": "2023-02-02T06:38:00.000Z",
            "content_html": "<h1 id=\"BLISlab-dgemm优化\"><a href=\"#BLISlab-dgemm优化\" class=\"headerlink\" title=\"BLISlab dgemm优化\"></a>BLISlab dgemm优化</h1><h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><strong>Git地址：</strong><a href=\"https://github.com/flame/blislab\">https://github.com/flame/blislab</a></p>\n<p><strong>视频教程：</strong><a href=\"https://www.bilibili.com/video/BV1c94y117Uw?vd_source=3ae32e36058f58c5b85935fca9b77797%E3%80%90%E6%BE%8E%E5%B3%B0%E7%A7%91%E6%8A%80-%E5%BC%A0%E5%85%88%E8%BD%B6%E8%80%81%E5%B8%88%E3%80%91\">https://www.bilibili.com/video/BV1c94y117Uw?vd_source=3ae32e36058f58c5b85935fca9b77797【澎峰科技-张先轶老师】</a></p>\n<p><strong>阅读</strong>：tutorial.pdf【位于代码包中】</p>\n<h2 id=\"Step0\"><a href=\"#Step0\" class=\"headerlink\" title=\"Step0\"></a>Step0</h2><h3 id=\"1-克隆项目到本地\"><a href=\"#1-克隆项目到本地\" class=\"headerlink\" title=\"1.克隆项目到本地\"></a>1.克隆项目到本地</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">git clone https://github.com/flame/blislab.git<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-代码结构\"><a href=\"#2-代码结构\" class=\"headerlink\" title=\"2.代码结构\"></a>2.代码结构</h3><p><img src=\"/2023/02/02/blislab/image-20230202155728203.png\" alt=\"image-20230202155728203\"></p>\n<h3 id=\"3-编译环境\"><a href=\"#3-编译环境\" class=\"headerlink\" title=\"3.编译环境\"></a>3.编译环境</h3><p><img src=\"/2023/02/02/blislab/image-20230202155820411.png\" alt=\"image-20230202155820411\"></p>\n<h3 id=\"4-运行环境配置脚本\"><a href=\"#4-运行环境配置脚本\" class=\"headerlink\" title=\"4.运行环境配置脚本\"></a>4.运行环境配置脚本</h3><p><img src=\"/2023/02/02/blislab/image-20230202160027957.png\" alt=\"image-20230202160027957\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 step0]# source ./sourceme.sh <br>BLISLAB_DIR = .<br>BLISLAB_USE_INTEL = false<br>BLISLAB_USE_BLAS = false<br>COMPILER_OPT_LEVEL = O3<br>BLAS_DIR = /u/jianyu/lib/openblas<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-Makefile\"><a href=\"#5-Makefile\" class=\"headerlink\" title=\"5.Makefile\"></a>5.Makefile</h3><p><img src=\"/2023/02/02/blislab/image-20230202160244490.png\" alt=\"image-20230202160244490\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 step0]# make<br>gcc -O3 -march=core-avx2 -fPIC -c dgemm/my_dgemm.c -o dgemm/my_dgemm.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br>gcc -O3 -march=core-avx2 -fPIC -c dgemm/bl_dgemm_ref.c -o dgemm/bl_dgemm_ref.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br>gcc -O3 -march=core-avx2 -fPIC -c dgemm/bl_dgemm_util.c -o dgemm/bl_dgemm_util.o -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br>ar cr lib/libblislab.a dgemm/my_dgemm.o dgemm/bl_dgemm_ref.o dgemm/bl_dgemm_util.o    <br>ranlib lib/libblislab.a<br>gcc -O3 -march=core-avx2 -fPIC -shared -o lib/libblislab.so dgemm/my_dgemm.o dgemm/bl_dgemm_ref.o dgemm/bl_dgemm_util.o     ./lib/libblislab.a -lpthread -lm -lrt<br>cd ./test &amp;&amp; make &amp;&amp; cd . -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br>make[1]: 进入目录“/root/blislab/step0/test”<br>gcc -O3 -march=core-avx2 -fPIC test_bl_dgemm.c -o test_bl_dgemm.x -I../include -I../kernels -I/u/jianyu/lib/openblas/include ../lib/libblislab.a -lpthread -lm -lrt<br>make[1]: 离开目录“/root/blislab/step0/test”<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"6-make-gnu-inc\"><a href=\"#6-make-gnu-inc\" class=\"headerlink\" title=\"6.make.gnu.inc\"></a>6.make.gnu.inc</h3><p><img src=\"/2023/02/02/blislab/image-20230202160608401.png\" alt=\"image-20230202160608401\"></p>\n<h3 id=\"7-ref参考实现是否调用BLAS\"><a href=\"#7-ref参考实现是否调用BLAS\" class=\"headerlink\" title=\"7.ref参考实现是否调用BLAS\"></a>7.ref参考实现是否调用BLAS</h3><p><img src=\"/2023/02/02/blislab/image-20230202160904158.png\" alt=\"image-20230202160904158\"></p>\n<h3 id=\"8-my-dgemm-c\"><a href=\"#8-my-dgemm-c\" class=\"headerlink\" title=\"8.my_dgemm.c\"></a>8.my_dgemm.c</h3><p><img src=\"/2023/02/02/blislab/image-20230202160939940.png\" alt=\"image-20230202160939940\"></p>\n<h3 id=\"9-相关数据变量含义\"><a href=\"#9-相关数据变量含义\" class=\"headerlink\" title=\"9.相关数据变量含义\"></a>9.相关数据变量含义</h3><p><img src=\"/2023/02/02/blislab/image-20230202161055971.png\" alt=\"image-20230202161055971\"></p>\n<h3 id=\"10-代码采用列主元\"><a href=\"#10-代码采用列主元\" class=\"headerlink\" title=\"10.代码采用列主元\"></a>10.代码采用列主元</h3><p><img src=\"/2023/02/02/blislab/image-20230202161219553.png\" alt=\"image-20230202161219553\"></p>\n<h3 id=\"11-dgemm使用脚本测试\"><a href=\"#11-dgemm使用脚本测试\" class=\"headerlink\" title=\"11.dgemm使用脚本测试\"></a>11.dgemm使用脚本测试</h3><p>Test目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 test]# ./run_bl_dgemm.sh <br>result=[<br><span class=\"hljs-meta\">%</span><span class=\"bash\">m\t%n\t%k\t%MY_GFLOPS\t%REF_GFLOPS</span><br>   16\t    16\t    16\t  7.35\t  1.93<br>   32\t    32\t    32\t  7.88\t  1.29<br>   48\t    48\t    48\t  9.81\t  1.17<br>   64\t    64\t    64\t  8.98\t  1.20<br>   80\t    80\t    80\t  9.59\t  1.11<br>   96\t    96\t    96\t  7.74\t  1.08<br>  112\t   112\t   112\t  8.32\t  0.95<br>  128\t   128\t   128\t  7.74\t  1.04<br>  144\t   144\t   144\t  7.39\t  0.99<br>  160\t   160\t   160\t  7.13\t  1.06<br>  176\t   176\t   176\t  7.58\t  1.06<br>  192\t   192\t   192\t  7.73\t  0.98<br>  208\t   208\t   208\t  7.29\t  1.01<br>  224\t   224\t   224\t  7.90\t  0.97<br>  240\t   240\t   240\t  7.61\t  1.00<br>  256\t   256\t   256\t  6.72\t  0.96<br>  272\t   272\t   272\t  7.51\t  0.99<br>  288\t   288\t   288\t  7.39\t  0.99<br>  304\t   304\t   304\t  7.84\t  0.99<br>  320\t   320\t   320\t  7.61\t  0.97<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//run_bl_dgemm.sh</span><br>#!/bin/bash<br><br>#For Mac OS only<br><span class=\"hljs-keyword\">export</span> DYLD_LIBRARY_PATH=/opt/intel/lib:/opt/intel/mkl/lib<br><br>#Single Thread<br><span class=\"hljs-keyword\">export</span> KMP_AFFINITY=compact  #Rule to bind core to thread <span class=\"hljs-keyword\">for</span> OMP thread with Intel compiler <span class=\"hljs-keyword\">for</span> parallel version<br><span class=\"hljs-keyword\">export</span> OMP_NUM_THREADS=<span class=\"hljs-number\">1</span>     #Set OMP number of threads <span class=\"hljs-keyword\">for</span> parallel version<br><span class=\"hljs-keyword\">export</span> BLISLAB_IC_NT=<span class=\"hljs-number\">1</span>       #Set BLISLAB number of threads <span class=\"hljs-keyword\">for</span> parallel version<br>k_start=<span class=\"hljs-number\">16</span>\t\t\t\t\t\t<span class=\"hljs-comment\">//起始大小\t\t</span><br>k_end=<span class=\"hljs-number\">1024</span>\t\t\t\t\t\t<span class=\"hljs-comment\">//结束大小</span><br>k_blocksize=<span class=\"hljs-number\">16</span>\t\t\t\t\t<span class=\"hljs-comment\">//步长</span><br>echo <span class=\"hljs-string\">&quot;result=[&quot;</span><br>echo -e <span class=\"hljs-string\">&quot;%m\\t%n\\t%k\\t%MY_GFLOPS\\t%REF_GFLOPS&quot;</span><br><span class=\"hljs-keyword\">for</span> (( k=k_start; k&lt;=k_end; k+=k_blocksize ))<br><span class=\"hljs-keyword\">do</span><br>    ./test_bl_dgemm.x     $k $k $k <br>done<br>echo <span class=\"hljs-string\">&quot;];&quot;</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"12-dgemm手动指定参数测试\"><a href=\"#12-dgemm手动指定参数测试\" class=\"headerlink\" title=\"12.dgemm手动指定参数测试\"></a>12.dgemm手动指定参数测试</h3><p>Test目录下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">[root@hadoop1 test]# ./test_bl_dgemm.x <span class=\"hljs-number\">256</span> <span class=\"hljs-number\">256</span> <span class=\"hljs-number\">256</span> <br>  <span class=\"hljs-number\">256</span>\t   <span class=\"hljs-number\">256</span>\t   <span class=\"hljs-number\">256</span>\t  <span class=\"hljs-number\">5.00</span>\t  <span class=\"hljs-number\">0.84</span><br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">[root@hadoop1 test]# ./test_bl_dgemm.x <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">32</span> <span class=\"hljs-number\">128</span><br>   <span class=\"hljs-number\">16</span>\t    <span class=\"hljs-number\">32</span>\t   <span class=\"hljs-number\">128</span>\t  <span class=\"hljs-number\">8.77</span>\t  <span class=\"hljs-number\">1.02</span><br></code></pre></div></td></tr></table></figure>\n\n<p><strong>这里要注意哪个代表m,n,k?</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> *argv[] )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span>    m, n, k; <br><br>    <span class=\"hljs-keyword\">if</span> ( argc != <span class=\"hljs-number\">4</span> ) &#123;<br>        <span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">&quot;Error: require 3 arguments, but only %d provided.\\n&quot;</span>, argc - <span class=\"hljs-number\">1</span> );<br>        <span class=\"hljs-built_in\">exit</span>( <span class=\"hljs-number\">0</span> );<br>    &#125;<br><br>    <span class=\"hljs-built_in\">sscanf</span>( argv[ <span class=\"hljs-number\">1</span> ], <span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;m );<br>    <span class=\"hljs-built_in\">sscanf</span>( argv[ <span class=\"hljs-number\">2</span> ], <span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n );<br>    <span class=\"hljs-built_in\">sscanf</span>( argv[ <span class=\"hljs-number\">3</span> ], <span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;k );<br><br>    <span class=\"hljs-built_in\">test_bl_dgemm</span>( m, n, k );<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"13-计时区域\"><a href=\"#13-计时区域\" class=\"headerlink\" title=\"13.计时区域\"></a><strong>13.计时区域</strong></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span> ( i = <span class=\"hljs-number\">0</span>; i &lt; nrepeats; i ++ ) &#123;<br>        ref_beg = <span class=\"hljs-built_in\">bl_clock</span>();\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//blislib提供的封装</span><br>        &#123;<br>            <span class=\"hljs-built_in\">bl_dgemm_ref</span>(<br>                    m,<br>                    n,<br>                    k,<br>                    A,<br>                    lda,<br>                    B,<br>                    ldb,<br>                    C_ref,<br>                    ldc_ref<br>                    );<br>        &#125;<br>        ref_time = <span class=\"hljs-built_in\">bl_clock</span>() - ref_beg;<br><br>        <span class=\"hljs-keyword\">if</span> ( i == <span class=\"hljs-number\">0</span> ) &#123;<br>            ref_rectime = ref_time;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ref_rectime = ref_time &lt; ref_rectime ? ref_time : ref_rectime;\t\t\t\t\t<span class=\"hljs-comment\">//多次计时取最优</span><br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"14-正确性检验\"><a href=\"#14-正确性检验\" class=\"headerlink\" title=\"14.正确性检验\"></a>14.正确性检验</h3><p>Test目录下Test_bl_gemm.c</p>\n<p>结果比较：通过比较你的优化计算结果和参考计算结果对比</p>\n<p>Gflops的计算</p>\n<ul>\n<li>有效浮点次数 &#x3D; 2*m*n*k</li>\n<li>Gflops &#x3D; 有效浮点次数 &#x2F; 时间</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">computeError</span>(<br>        ldc,<br>        ldc_ref,<br>        m,<br>        n,<br>        C,<br>        C_ref<br>        );<br><br><span class=\"hljs-comment\">// Compute overall floating point operations.</span><br>flops = ( m * n / ( <span class=\"hljs-number\">1000.0</span> * <span class=\"hljs-number\">1000.0</span> * <span class=\"hljs-number\">1000.0</span> ) ) * ( <span class=\"hljs-number\">2</span> * k );<br><br><span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">&quot;%5d\\t %5d\\t %5d\\t %5.2lf\\t %5.2lf\\n&quot;</span>, <br>        m, n, k, flops / bl_dgemm_rectime, flops / ref_rectime );<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"15-课后作业\"><a href=\"#15-课后作业\" class=\"headerlink\" title=\"15.课后作业\"></a>15.课后作业</h3><p><strong>perf工具的用法</strong>：</p>\n<p><a href=\"https://xingyuanjie.top/2022/01/19/tool003/\">perf-系统级性能分析工具 - Amicoyuan (xingyuanjie.top)</a></p>\n<p><strong>分析不同的j,p,i循环顺序的性能：</strong></p>\n<p>原因cache miss造成的差异</p>\n<h2 id=\"Step1\"><a href=\"#Step1\" class=\"headerlink\" title=\"Step1\"></a>Step1</h2><h3 id=\"1-与Step0比较\"><a href=\"#1-与Step0比较\" class=\"headerlink\" title=\"1.与Step0比较\"></a>1.与Step0比较</h3><p><strong>左边是Step1右边是Step0</strong></p>\n<p><img src=\"/2023/02/02/blislab/image-20230202165659964.png\" alt=\"image-20230202165659964\"></p>\n<h3 id=\"2-基本分块\"><a href=\"#2-基本分块\" class=\"headerlink\" title=\"2.基本分块\"></a>2.基本分块</h3><p><img src=\"/2023/02/02/blislab/image-20230202170723811.png\" alt=\"image-20230202170723811\"></p>\n<h3 id=\"3-反汇编\"><a href=\"#3-反汇编\" class=\"headerlink\" title=\"3.反汇编\"></a>3.反汇编</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 dgemm]# objdump -d ./my_dgemm.o &gt; my_dgemm.S<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs assembly\">./my_dgemm.o：     文件格式 elf64-x86-64<br><br><br>Disassembly of section .text:<br><br>0000000000000000 &lt;AddDot&gt;:<br>   0:\t85 ff                \ttest   %edi,%edi<br>   2:\t7e 2e                \tjle    32 &lt;AddDot+0x32&gt;<br>   4:\t48 63 d2             \tmovslq %edx,%rdx<br>   7:\tc4 c1 7b 10 01       \tvmovsd (%r9),%xmm0<br>   c:\t31 c0                \txor    %eax,%eax<br>   e:\t48 c1 e2 03          \tshl    $0x3,%rdx<br>  12:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)<br>  18:\tc5 fb 10 0e          \tvmovsd (%rsi),%xmm1<br>  1c:\t48 01 d6             \tadd    %rdx,%rsi<br>  1f:\tc4 e2 f1 b9 04 c1    \tvfmadd231sd (%rcx,%rax,8),%xmm1,%xmm0<br>  25:\t48 83 c0 01          \tadd    $0x1,%rax<br>  29:\tc4 c1 7b 11 01       \tvmovsd %xmm0,(%r9)<br>  2e:\t39 c7                \tcmp    %eax,%edi<br>  30:\t7f e6                \tjg     18 &lt;AddDot+0x18&gt;<br>  32:\tf3 c3                \trepz retq <br>  34:\t66 90                \txchg   %ax,%ax<br>  36:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)<br>  3d:\t00 00 00 <br><br>0000000000000040 &lt;AddDot_MRxNR&gt;:<br>  40:\te9 00 00 00 00       \tjmpq   45 &lt;AddDot_MRxNR+0x5&gt;<br>  45:\t90                   \tnop<br>  46:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)<br>  4d:\t00 00 00 <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-反汇编（-fPIC引入的差异）\"><a href=\"#4-反汇编（-fPIC引入的差异）\" class=\"headerlink\" title=\"4.反汇编（-fPIC引入的差异）\"></a>4.反汇编（-fPIC引入的差异）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 test]# objdump -d ./test_bl_dgemm.x  &gt; test.S<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/02/02/blislab/image-20230202171234007.png\" alt=\"image-20230202171234007\"></p>\n<h3 id=\"5-Gcc生成汇编\"><a href=\"#5-Gcc生成汇编\" class=\"headerlink\" title=\"5.Gcc生成汇编\"></a>5.Gcc生成汇编</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@hadoop1 step1]# gcc -O3 -march=core-avx2 -fPIC -S dgemm/my_dgemm.c -o dgemm/my_dgemm1.S -I./include -I./kernels -I/u/jianyu/lib/openblas/include<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/02/02/blislab/image-20230202171758087.png\" alt=\"image-20230202171758087\"></p>\n<h3 id=\"6-Step0与Step1比较\"><a href=\"#6-Step0与Step1比较\" class=\"headerlink\" title=\"6.Step0与Step1比较\"></a>6.Step0与Step1比较</h3><p><img src=\"/2023/02/02/blislab/image-20230202172816584.png\" alt=\"image-20230202172816584\"></p>\n<h3 id=\"7-分块，修改MR，-NR为4×4\"><a href=\"#7-分块，修改MR，-NR为4×4\" class=\"headerlink\" title=\"7.分块，修改MR， NR为4×4\"></a>7.分块，修改MR， NR为4×4</h3><p><img src=\"/2023/02/02/blislab/image-20230202173132817.png\" alt=\"image-20230202173132817\"></p>\n<h3 id=\"8-分块（2×2）\"><a href=\"#8-分块（2×2）\" class=\"headerlink\" title=\"8.分块（2×2）\"></a>8.分块（2×2）</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> AddDot_2×<span class=\"hljs-number\">2</span>( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *A, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *B, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *C,<span class=\"hljs-keyword\">int</span> ldc ) &#123;<br>\t<span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> C00, C01, C10, C11;<br>    <span class=\"hljs-keyword\">int</span> p;<br>    C00=<span class=\"hljs-number\">0.0</span>;<br>    C01=<span class=\"hljs-number\">0.0</span>;<br>    C10=<span class=\"hljs-number\">0.0</span>;<br>    C11=<span class=\"hljs-number\">0.0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>( p=<span class=\"hljs-number\">0</span> ;p &lt; k; p++)<br>    &#123;<br>        C00 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span>);<br>        C01 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span>);<br>        C10 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span>);<br>        C11 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) +=C00;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) +=C01;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) +=C10;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) +=C11;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/02/02/blislab/image-20230202173645399.png\" alt=\"image-20230202173645399\"></p>\n<h3 id=\"9-AddDot-2x2汇编代码\"><a href=\"#9-AddDot-2x2汇编代码\" class=\"headerlink\" title=\"9.AddDot_2x2汇编代码\"></a>9.AddDot_2x2汇编代码</h3><p><img src=\"/2023/02/02/blislab/image-20230202191728644.png\" alt=\"image-20230202191728644\"></p>\n<h3 id=\"10-AddDot-2x2最内层循环展开\"><a href=\"#10-AddDot-2x2最内层循环展开\" class=\"headerlink\" title=\"10.AddDot_2x2最内层循环展开\"></a>10.AddDot_2x2最内层循环展开</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">void</span> AddDot_2×<span class=\"hljs-number\">2</span>( <span class=\"hljs-keyword\">int</span> k, <span class=\"hljs-keyword\">double</span> *A, <span class=\"hljs-keyword\">int</span> lda, <span class=\"hljs-keyword\">double</span> *B, <span class=\"hljs-keyword\">int</span> ldb, <span class=\"hljs-keyword\">double</span> *C,<span class=\"hljs-keyword\">int</span> ldc ) &#123;<br>\t<span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">double</span> C00, C01, C10, C11;<br>    <span class=\"hljs-keyword\">int</span> p;<br>    C00=<span class=\"hljs-number\">0.0</span>;<br>    C01=<span class=\"hljs-number\">0.0</span>;<br>    C10=<span class=\"hljs-number\">0.0</span>;<br>    C11=<span class=\"hljs-number\">0.0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>( p=<span class=\"hljs-number\">0</span> ;p &lt; k; p+=<span class=\"hljs-number\">2</span>)<br>    &#123;<br>        C00 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-built_in\">B</span>( p+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);<br>        C01 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">0</span>, p+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-built_in\">B</span>( p+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br>        C10 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-built_in\">B</span>( p+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);<br>        C11 += <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p) * <span class=\"hljs-built_in\">B</span>( p, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-built_in\">A</span>( <span class=\"hljs-number\">1</span>, p+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-built_in\">B</span>( p+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) +=C00;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) +=C01;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) +=C10;<br>    <span class=\"hljs-built_in\">C</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) +=C11;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/02/02/blislab/image-20230202192033816.png\" alt=\"image-20230202192033816\"></p>\n<h3 id=\"11-AddDot-2x2汇编代码【最内层循环展开】\"><a href=\"#11-AddDot-2x2汇编代码【最内层循环展开】\" class=\"headerlink\" title=\"11.AddDot_2x2汇编代码【最内层循环展开】\"></a>11.AddDot_2x2汇编代码【最内层循环展开】</h3><p><img src=\"/2023/02/02/blislab/image-20230202192319993.png\" alt=\"image-20230202192319993\"></p>\n<h2 id=\"Step2\"><a href=\"#Step2\" class=\"headerlink\" title=\"Step2\"></a>Step2</h2><h3 id=\"1-与Step1的性能比较\"><a href=\"#1-与Step1的性能比较\" class=\"headerlink\" title=\"1.与Step1的性能比较\"></a>1.与Step1的性能比较</h3><p><img src=\"/2023/02/02/blislab/image-20230206163219051.png\" alt=\"image-20230206163219051\"></p>\n<h3 id=\"2-优化kernel-x2F-bl-dgemm-ukr-c\"><a href=\"#2-优化kernel-x2F-bl-dgemm-ukr-c\" class=\"headerlink\" title=\"2.优化kernel&#x2F;bl_dgemm_ukr.c\"></a>2.优化kernel&#x2F;bl_dgemm_ukr.c</h3><p><img src=\"/2023/02/02/blislab/image-20230206163713966.png\" alt=\"image-20230206163713966\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206163803615.png\" alt=\"image-20230206163803615\"></p>\n<h3 id=\"3-优化后性能对比\"><a href=\"#3-优化后性能对比\" class=\"headerlink\" title=\"3.优化后性能对比\"></a>3.优化后性能对比</h3><p><img src=\"/2023/02/02/blislab/image-20230206163833950.png\" alt=\"image-20230206163833950\"></p>\n<h3 id=\"4-下降原因分析\"><a href=\"#4-下降原因分析\" class=\"headerlink\" title=\"4.下降原因分析\"></a>4.下降原因分析</h3><p><img src=\"/2023/02/02/blislab/image-20230206164335213.png\" alt=\"image-20230206164335213\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206164734050.png\" alt=\"image-20230206164734050\"></p>\n<h3 id=\"5-如何进行分块\"><a href=\"#5-如何进行分块\" class=\"headerlink\" title=\"5.如何进行分块\"></a>5.如何进行分块</h3><p><img src=\"/2023/02/02/blislab/image-20230206165017812.png\" alt=\"image-20230206165017812\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206165103417.png\" alt=\"image-20230206165103417\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170050450.png\" alt=\"image-20230206170050450\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170105998.png\" alt=\"image-20230206170105998\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170126588.png\" alt=\"image-20230206170126588\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170153251.png\" alt=\"image-20230206170153251\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170226248.png\" alt=\"image-20230206170226248\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170242872.png\" alt=\"image-20230206170242872\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170320842.png\" alt=\"image-20230206170320842\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206170334857.png\" alt=\"image-20230206170334857\"></p>\n<h3 id=\"6-Dgemm代码\"><a href=\"#6-Dgemm代码\" class=\"headerlink\" title=\"6.Dgemm代码\"></a>6.Dgemm代码</h3><p><img src=\"/2023/02/02/blislab/image-20230206171538013.png\" alt=\"image-20230206171538013\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206171556767.png\" alt=\"image-20230206171556767\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206171622104.png\" alt=\"image-20230206171622104\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206171639209.png\" alt=\"image-20230206171639209\"></p>\n<h3 id=\"7-Dgemm-macro-kenrel代码\"><a href=\"#7-Dgemm-macro-kenrel代码\" class=\"headerlink\" title=\"7.Dgemm macro kenrel代码\"></a>7.Dgemm macro kenrel代码</h3><p><img src=\"/2023/02/02/blislab/image-20230206171903844.png\" alt=\"image-20230206171903844\"></p>\n<p><img src=\"/2023/02/02/blislab/image-20230206171940282.png\" alt=\"image-20230206171940282\"></p>\n<h3 id=\"8-Gemm汇总\"><a href=\"#8-Gemm汇总\" class=\"headerlink\" title=\"8.Gemm汇总\"></a>8.Gemm汇总</h3><p><img src=\"/2023/02/02/blislab/image-20230206172351890.png\" alt=\"image-20230206172351890\"></p>\n<h3 id=\"9-拓展\"><a href=\"#9-拓展\" class=\"headerlink\" title=\"9.拓展\"></a>9.拓展</h3><p><img src=\"/2023/02/02/blislab/image-20230206172425329.png\" alt=\"image-20230206172425329\"></p>\n<h3 id=\"10-双缓冲优化\"><a href=\"#10-双缓冲优化\" class=\"headerlink\" title=\"10.双缓冲优化\"></a>10.双缓冲优化</h3><p><img src=\"/2023/02/02/blislab/image-20230206172846408.png\" alt=\"image-20230206172846408\"></p>\n",
            "tags": [
                "Linux",
                "dgemm"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/28/cuda006/",
            "url": "https://xingyuanjie.top/2023/01/28/cuda006/",
            "title": "CUDA线程管理",
            "date_published": "2023-01-28T07:41:55.000Z",
            "content_html": "<h3 id=\"1-线程管理\"><a href=\"#1-线程管理\" class=\"headerlink\" title=\"1.线程管理\"></a>1.线程管理</h3><p>当核函数在主机端启动时，它的执行会移动到设备上，此时设备中会产生大量的线程并且每个线程都执行由核函数指定的语句。了解如何组织线程是CUDA编程的一个关键部分。CUDA明确了线程层次抽象的概念以便于你组织线程。这是一个两层的线程层次结构，由线程块和线程块网格构成，如图2-5所示。</p>\n<p><img src=\"/2023/01/28/cuda006/image-20230128160011560.png\" alt=\"image-20230128160011560\"></p>\n<p>由一个内核启动所产生的所有线程统称为一个网格。同一网格中的所有线程共享相同的全局内存空间。一个网格由多个线程块构成，一个线程块包含一组线程，同一线程块内的线程协作可以通过以下方式来实现。</p>\n<p>​\t-同步</p>\n<p>​\t-共享内存</p>\n<p>不同块内的线程不能协作。</p>\n<p>线程依靠以下两个坐标变量来区分彼此。</p>\n<p>​\t-blockIdx(线程块在线程格内的索引)</p>\n<p>​\t-threadIdx(块内的线程索引)</p>\n<p>这些变量是核函数中需要预初始化的内置变量。当执行一个核函数时，CUDA运行时为每个线程分配坐标变量blockIdx和threadIdx。基于这些坐标，你可以将部分数据分配给不同的线程。</p>\n<p>该坐标变量是基于uint3定义的CUDA内置的向量类型，是一个包含3个无符号整数的结构，可以通过x,y,z三个字段来指定。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">blockIdx.x<br>blockIdx.y<br>blockIdx.z<br>threadIdx.x<br>threadIdx.y<br>threadIdx.z<br></code></pre></div></td></tr></table></figure>\n\n<p>CUDA可以组织三维的网格和块。图2-5展示了一个线程层次结构的示例，其结构是一个包含二维块的二维网格。网格和块的维度由下列两个内置变量指定。</p>\n<p>​\t-blockDim(线程块的维度，用每个线程块中的线程数来表示)</p>\n<p>​\t-gridDim(线程格的维度，用每个线程格中的线程数来表示)</p>\n<p>它们是dim3类型的变量，是基于uint3定义的整数型向量，用来表示维度。当定义一个dim3类型的变量时，所有未指定的元素都被初始化为1。dim3类型变量中的每个组件可以通过它的x,y,z字段获得。如下所示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">blockDim.x<br>blockDim.y<br>blockDim.z<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-网格和线程块的维度\"><a href=\"#2-网格和线程块的维度\" class=\"headerlink\" title=\"2.网格和线程块的维度\"></a>2.网格和线程块的维度</h3><p>通常，一个线程格会被组织成线程块的二维数组形式，一个线程块会被组织成线程的三维数组形式。</p>\n<p>线程格和线程块均使用3个dim3类型的无符号整型字段，而未使用的字段将被初始化为1且忽略不计。</p>\n<p>在CUDA程序中有两组不同的网格和块变量：手动定义的dim3数据类型和预定义的uint3数据类型。在主机端，作为内核调用的一部分，你可以使用dim3数据类型定义一个网格和块的维度。当执行核函数时，CUDA运行时会生成相应的内置预初始化的网格，块和线程变量，它们在核函数内均可被访问到且为unit3类型。手动定义的dim3类型的网络和块变量仅在主机端可见，而unit3类型的内置预初始化的网格和块变量仅在设备端可见。</p>\n<p>你可以通过代码清单2-2来验证这些变量如何使用。首先，定义程序所用的数据大小，为了对此进行说明，我们定义一个较小的数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">6</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>接下来，定义块的尺寸并基于块和数据的大小计算网格尺寸。在下面例子中，定义了一个包含3个线程的一维线程块，以及一个基于块和数据大小定义的一定数量线程块的一维线程网格。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span></span>;<br><span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">((nElem+block.x<span class=\"hljs-number\">-1</span>)/block.x)</span></span>;<br></code></pre></div></td></tr></table></figure>\n\n<p>你会发现网格大小是块大小的倍数。以下主机端上的程序段用来检查网格和块维度。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;grid.x %d grid.y %d grid.z %d\\n&quot;</span>,grid.x,grid.y,grid.z);<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;block.x %d block.y %d block.z %d\\n&quot;</span>,block.x,block.y,block.z);<br></code></pre></div></td></tr></table></figure>\n\n<p>在核函数中，每个线程都输出自己的线程索引，块索引，块维度和网格维度。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;threadIdx:(%d, %d, %d) blockIdx:(%d, %d, %d) blockDim:(%d, %d, %d) &quot;</span> <span class=\"hljs-string\">&quot;gridDim:(%d, %d, %d)\\n&quot;</span>, threadIdx.x, threadIdx,y, threadIdz.z,blockIdx.x, blockIdx.y, blockIdx.z, blockDim.x, blockDim.y, blockDim.z, gridDim.x,gridDim.y,gridDim.z);<br></code></pre></div></td></tr></table></figure>\n\n<p>把代码合并保存成名为checkDimension.cu的文件，如代码清单2-2所示。</p>\n<p><strong>代码清单2-2     检查网络和块的索引和维度（checkDimension.cu）</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cuda_runtime.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\">__global__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;threadIdx:(%d, %d, %d) blockIdx:(%d, %d, %d) blockDim:(%d, %d, %d) &quot;</span> <span class=\"hljs-string\">&quot;gridDim:(%d, %d, %d)\\n&quot;</span>, \t\tthreadIdx.x, threadIdx,y, threadIdz.z, blockIdx.x, blockIdx.y, blockIdx.z, blockDim.x, blockDim.y, \t\t\tblockDim.z, gridDim.x,gridDim.y,gridDim.z);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> **argv)</span></span>&#123;<br>    <span class=\"hljs-comment\">//define total data element</span><br>    <span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">6</span>;<br>    <span class=\"hljs-comment\">//define grid and block structure</span><br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span></span>;<br>\t<span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span><span class=\"hljs-params\">((nElem+block.x<span class=\"hljs-number\">-1</span>)/block.x)</span></span>;<br>    <br>    <span class=\"hljs-comment\">//check grid and block dimension from host side</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;grid.x %d grid.y %d grid.z %d\\n&quot;</span>,grid.x,grid.y,grid.z);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;block.x %d block.y %d block.z %d\\n&quot;</span>,block.x,block.y,block.z);<br>\t<br>    <span class=\"hljs-comment\">//check grid and block dimension from device side</span><br>    checkIndex&lt;&lt;&lt;grid, block&gt;&gt;&gt;();<br>    <br>    <span class=\"hljs-comment\">//reset device before you leave</span><br>    <span class=\"hljs-built_in\">cudaDeviceReset</span>();<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>现在开始编译和运行这段程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc -arch=sm_20 checkDimension.cu -o check<br>./check<br></code></pre></div></td></tr></table></figure>\n\n<p>因为printf函数只支持Fermi及以上版本的GPU架构，所以必须添加-arch&#x3D;sm_20编译器选项。默认情况下，nvcc会产生支持最低版本GPU架构的代码。这个应用程序的运行结果如下。可以看到，每个线程都有自己的坐标，所有的线程都有相同的块维度和网格维度。</p>\n<p><img src=\"/2023/01/28/cuda006/image-20230129172501750.png\" alt=\"image-20230129172501750\"></p>\n<h3 id=\"3-从主机端和设备端访问网格-x2F-块变量\"><a href=\"#3-从主机端和设备端访问网格-x2F-块变量\" class=\"headerlink\" title=\"3.从主机端和设备端访问网格&#x2F;块变量\"></a>3.从主机端和设备端访问网格&#x2F;块变量</h3><p>区别主机端和设备端的网格和块变量的访问是很重要的。例如，声明一个主机端的块变量，你按如下定义它的坐标并对其进行访问：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">block.x,block.y,block.z<br></code></pre></div></td></tr></table></figure>\n\n<p>在设备端，你已经预定义了内置块变量的大小：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">blockDim.x,blockDim.y,blockDim.z<br></code></pre></div></td></tr></table></figure>\n\n<p>总之，在启动内核之前就定义了主机端的网格和块变量，并从主机端通过由x,y,z三个字段决定的矢量结构来访问它们。当内核启动时，可以使用内核中预初始化的内置变量。</p>\n<p>对于一个给定的数据大小，确定网格和块尺寸的一般步骤为：</p>\n<p>​\t-确定块的大小</p>\n<p>​\t-在已知数据大小和块大小的基础上计算网格维度</p>\n<p>要确定块尺寸，通常需要考虑：</p>\n<p>​\t-内核的性能特性</p>\n<p>​\t-GPU资源的限制</p>\n<p>代码清单2-3使用了一个一维网格和一个一维块来说明当块的大小改变时，网格的尺寸也会随之改变。</p>\n<p><strong>代码清单2-3 在主机上定义网格和块的大小（defineGridBlock.cu）</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cuda_runtime.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> **argv)</span></span>&#123;<br>    <span class=\"hljs-comment\">//define total data element</span><br>    <span class=\"hljs-keyword\">int</span> nElem = <span class=\"hljs-number\">1024</span>;<br>    <br>    <span class=\"hljs-comment\">//define grid and block structure</span><br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">block</span>\t<span class=\"hljs-params\">(<span class=\"hljs-number\">1024</span>)</span></span>;<br>    <span class=\"hljs-function\">dim3 <span class=\"hljs-title\">grid</span> <span class=\"hljs-params\">((nElem+block.x<span class=\"hljs-number\">-1</span>)/block.x)</span></span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;grid.x %d block.x %d \\n&quot;</span>,grid.x, block.x);<br>    <br>    <span class=\"hljs-comment\">//reset block</span><br>    block.x = <span class=\"hljs-number\">512</span>;<br>    grid.x = (nElem+block.x<span class=\"hljs-number\">-1</span>)/block.x;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;grid.x %d block.x %d \\n&quot;</span>,grid.x, block.x);<br>    <br>    <span class=\"hljs-comment\">//reset block</span><br>    block.x = <span class=\"hljs-number\">256</span>;<br>    grid.x = (nElem+block.x<span class=\"hljs-number\">-1</span>)/block.x;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;grid.x %d block.x %d \\n&quot;</span>,grid.x, block.x);<br>    <br>    <span class=\"hljs-comment\">//reset block</span><br>    block.x = <span class=\"hljs-number\">128</span>;<br>    grid.x = (nElem+block.x<span class=\"hljs-number\">-1</span>)/block.x;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;grid.x %d block.x %d \\n&quot;</span>,grid.x, block.x);<br>    <br>    <span class=\"hljs-comment\">//reset device before you leave</span><br>    <span class=\"hljs-built_in\">cudaDeviceReset</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>用下列命令编译和运行这段程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc defineGridBlock.cu\t-o block<br>./block<br></code></pre></div></td></tr></table></figure>\n\n<p>下面是一个输出示例。由于应用程序中的数据大小是固定的，因此当块的大小发生改变时，相应的网格尺寸也会发生改变。</p>\n<p><img src=\"/2023/01/28/cuda006/image-20230129174300533.png\" alt=\"image-20230129174300533\"></p>\n<h3 id=\"4-线程层次结构\"><a href=\"#4-线程层次结构\" class=\"headerlink\" title=\"4.线程层次结构\"></a>4.线程层次结构</h3><p>CUDA的特点之一就是通过编程模型揭示了一个两层的线程层次结构。由于一个内核启动的网格和块的维数会影响性能，这一结构为程序员优化程序提供了一个额外的途径。</p>\n<p>网格和块的维度存在几个限制因素，对于块大小的一个主要限制因素就是可利用的计算资源，如寄存器，共享内存等。某些限制可以通过查询GPU设备撤回。</p>\n<p>网格和块从逻辑上代表了一个核函数的线程层次结构。</p>\n<h3 id=\"5-参考资料\"><a href=\"#5-参考资料\" class=\"headerlink\" title=\"5.参考资料\"></a>5.参考资料</h3><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/28/avx006/",
            "url": "https://xingyuanjie.top/2023/01/28/avx006/",
            "title": "如何使用AVX和AVX2处理数据(个人翻译)",
            "date_published": "2023-01-28T06:51:44.000Z",
            "content_html": "<h2 id=\"1-文章来源\"><a href=\"#1-文章来源\" class=\"headerlink\" title=\"1.文章来源\"></a>1.文章来源</h2><p><strong>Matt Scarpino（USA）</strong></p>\n<p><a href=\"https://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX\">Crunching Numbers with AVX and AVX2 - CodeProject</a></p>\n<h2 id=\"2-介绍\"><a href=\"#2-介绍\" class=\"headerlink\" title=\"2.介绍\"></a>2.介绍</h2><p>在2003年，<a href=\"https://www.codeproject.com/script/Membership/View.aspx?mid=22834\">Alex Fr</a>写了一篇优秀的<a href=\"https://www.codeproject.com/Articles/4522/Introduction-to-SSE-Programming\">文章</a>[该文章现在已经被原作者删除]，解释了如何使用Intel的流式SIMD扩展(SSE)执行SIMD(单指令，多数据)处理。SSE是英特尔处理器支持的一组指令，可对大量数据执行高速运算。</p>\n<p>2008年，英特尔推出了一套新的高性能指令，称为高级向量扩展(AVX)。AVX执行许多与SSE指令相同的操作，但以更快的速度对更大的数据块进行操作。最近，英特尔在AVX2和AVX512系列中发布了额外的指令。本文的重点是通过称为intrinsic funtions的特殊C函数访问AVX和AVX2指令。</p>\n<p>本文不介绍整个AVX&#x2F;AVX2 intrinsics，而是侧重于数学计算。特别地，目标是复数相乘。要使用AVX&#x2F;AVX2执行此操作，需要三种类型的intrinsic:</p>\n<ol>\n<li>Initialization intrinscis</li>\n<li>Arithmetic intrinsics</li>\n<li>Permute&#x2F;shuffle intrinsics</li>\n</ol>\n<p>\t\t</p>\n<p>本文讨论每个类别中的intrinsics，并解释如何在代码中使用它们。本文的最后将展示如何用这些intrinsic进行乘法复数运算。</p>\n<p>理解处理器指令和intrinsic function之间的区别是很重要的。AVX指令是执行不可分割操作的汇编命令。例如，AVX指令vaddps添加了两个操作数，并将结果放在第三个操作数中。</p>\n<p>要在C&#x2F;C++中执行操作，the intrinsic funtion _mm256_add_ps()直接映射到vaddps，将汇编的性能与高级函数的便利性结合起来。An intrinsic funtion不一定映射到单个指令，但与其他C&#x2F; C++函数相比，AVX&#x2F;AVX2 intrinsics提供了可靠的高性能。</p>\n<h2 id=\"3-基本要求\"><a href=\"#3-基本要求\" class=\"headerlink\" title=\"3.基本要求\"></a>3.基本要求</h2><p>要理解本文的内容，您需要基本熟悉C语言和SIMD处理。要执行代码，您需要一个支持AVX或AVX&#x2F;AVX2的CPU。以下是支持AVX的cpu:</p>\n<ul>\n<li>Intel’s Sandy Bridge&#x2F;Sandy Bridge E&#x2F;Ivy Bridge&#x2F;Ivy Bridge E</li>\n<li>Intel’s Haswell&#x2F;Haswell E&#x2F;Broadwell&#x2F;Broadwell E</li>\n<li>AMD’s Bulldozer&#x2F;Piledriver&#x2F;Steamroller&#x2F;Excavator</li>\n</ul>\n<p>支持AVX2的CPU也支持AVX。以下是这些设备:</p>\n<ul>\n<li>Intel’s Haswell&#x2F;Haswell E&#x2F;Broadwell&#x2F;Broadwell E</li>\n<li>AMD’s Excavator</li>\n</ul>\n<p>本文中讨论的大多数函数都是由AVX提供的。但也有一些是AVX2特有的。为了区分它们，在本文的表中，我在AVX2 intrinsic的名称前面加上(2)。</p>\n<p>[个人补充]</p>\n<p>判断自己电脑CPU是否支持AVX和AVX2，最简单的就是在命令行执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">lscpu<br></code></pre></div></td></tr></table></figure>\n\n<p>你会得到以下结果：</p>\n<p><img src=\"/2023/01/28/avx006/image-20230129153048825.png\" alt=\"image-20230129153048825\"></p>\n<p>在Flags里面你可以清楚的看到你的电脑是否支持AVX以及AVX2。</p>\n<h2 id=\"4-向量化概述\"><a href=\"#4-向量化概述\" class=\"headerlink\" title=\"4.向量化概述\"></a>4.向量化概述</h2><p>AVX指令通过同时处理大块值而不是单独处理值来提高应用程序的性能。这些值块称为向量，AVX向量最多可以包含256位数据。</p>\n<p>常见的AVX向量包含4个double (4 x 64位&#x3D; 256)，8个float (8 x 32位&#x3D; 256)或8个int (8 x 32位&#x3D; 256)。[double 8B, flout 4B, int 4B]</p>\n<p>一个示例将演示AVX&#x2F;AVX2处理的强大功能。假设一个函数需要将一个数组的8个浮点数乘以第二个数组的8个浮点数，并将结果添加到第三个数组。如果没有向量化，函数可能是这样的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">multiply_and_add</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* b, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span>* c, <span class=\"hljs-keyword\">float</span>* d) &#123;  <br><br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">8</span>; i++) &#123;<br>    d[i] = a[i] * b[i];<br>    d[i] = d[i] + c[i];<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>下面是使用AVX2函数的例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__m256 <span class=\"hljs-title\">multiply_and_add</span><span class=\"hljs-params\">(__m256 a, __m256 b, __m256 c)</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">return</span> _mm256_fmadd_ps(a, b, c);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>This AVX2 intrinsic funtion _mm256_fmadd_ps处理24个floats，但它不映射到单个指令。相反，它执行三个指令:vfmadd132ps、vfmadd213ps和vfmadd231ps。尽管如此，它执行得很快，比遍历单个元素快得多。尽管英特尔的intrinsics功能强大，但它们还是让许多程序员感到紧张。这通常有两个原因。首先，数据类型有奇怪的名字，比如__m256。其次，函数有奇怪的名称，如_mm256_fmadd_ps。因此，在详细讨论intrinsic funtions之前，我想先讨论一下Intel的数据类型和命名约定。</p>\n<h2 id=\"5-AVX编程基础\"><a href=\"#5-AVX编程基础\" class=\"headerlink\" title=\"5.AVX编程基础\"></a>5.AVX编程基础</h2><p>本文主要关注AVX和AVX2提供的与数学相关的intrinsic functions。但在看函数之前，有三点很重要:</p>\n<ul>\n<li>Data types</li>\n<li>Function naming conventions</li>\n<li>Compiling AVX applications</li>\n</ul>\n<p>本节涉及这些要点，并提供一个简单的应用程序，用于从一个向量减去另一个向量。</p>\n<h3 id=\"5-1数据类型\"><a href=\"#5-1数据类型\" class=\"headerlink\" title=\"5.1数据类型\"></a>5.1数据类型</h3><p>少数intrinsic接受传统的数据类型，如ints或floats，但大多数intrinsic操作有特定的AVX和AVX2的数据类型。有六种主要的向量类型，表1列出了它们。</p>\n<p><strong>Table 1:AVX&#x2F;AVX2 Data Types</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>__m128</code></td>\n<td>128-bit vector containing 4 <code>float</code>s</td>\n</tr>\n<tr>\n<td><code>__m128d</code></td>\n<td>128-bit vector containing 2 <code>double</code>s</td>\n</tr>\n<tr>\n<td><code>__m128i</code></td>\n<td>128-bit vector containing integers</td>\n</tr>\n<tr>\n<td><code>__m256</code></td>\n<td>256-bit vector containing 8 <code>float</code>s</td>\n</tr>\n<tr>\n<td><code>__m256d</code></td>\n<td>256-bit vector containing 4 <code>double</code>s</td>\n</tr>\n<tr>\n<td><code>__m256i</code></td>\n<td>256-bit vector containing integers</td>\n</tr>\n</tbody></table>\n<p>每种类型都以两个下划线、一个m和向量的宽度(以位为单位)开始。AVX512支持以_m512开头的512位向量类型，但AVX&#x2F;AVX2向量不超过256位。如果向量类型以d结尾，则代表double，如果没有后缀，则代表float。看起来_m128i和_m256i向量必须包含int型，但事实并非如此。整数向量类型可以包含任何类型的整数，from chars to shorts to unsigned long longs.That is, an _m256i may contain 32 chars, 16 shorts, 8 ints, or 4 longs.  These integers can be signed or unsigned.</p>\n<h3 id=\"5-3函数命名约定\"><a href=\"#5-3函数命名约定\" class=\"headerlink\" title=\"5.3函数命名约定\"></a>5.3函数命名约定</h3><p>AVX&#x2F;AVX2 intrinsics的名称一开始可能令人困惑，但命名约定确是非常直白的。一旦你理解了它，你就可以通过看它的名字来大致判断一个函数是做什么的。AVX&#x2F;AVX2 intrinsics的一般形式如下:</p>\n<p>_mm<bit_width>_<name>_<data_type></data_type></name></bit_width></p>\n<p>该格式的各部分如下所示:</p>\n<ol>\n<li><code>&lt;bit_width&gt;</code> identifies the size of the vector returned by the function. For 128-bit vectors, this is empty. For 256-bit vectors, this is set to <code>256</code>.</li>\n<li><code>&lt;name&gt;</code> describes the operation performed by the intrinsic</li>\n<li><code>&lt;data_type&gt;</code> identifies the data type of the function’s primary arguments</li>\n</ol>\n<p>最后一部分<data_type>有点复杂。它标识输入值的内容，可以设置为以下任何值:</data_type></p>\n<ul>\n<li><code>ps</code> - vectors contain <code>float</code>s (<code>ps</code> stands for packed single-precision)</li>\n<li><code>pd</code> - vectors contain <code>double</code>s (<code>pd</code> stands for packed double-precision)</li>\n<li><code>epi8/epi16/epi32/epi64</code> - vectors contain 8-bit&#x2F;16-bit&#x2F;32-bit&#x2F;64-bit signed integers</li>\n<li><code>epu8/epu16/epu32/epu64</code> - vectors contain 8-bit&#x2F;16-bit&#x2F;32-bit&#x2F;64-bit unsigned integers</li>\n<li><code>si128</code>&#x2F;<code>si256</code> - unspecified 128-bit vector or 256-bit vector</li>\n<li><code>m128/m128i/m128d/m256/m256i/m256d</code> - identifies input vector types when they’re different than the type of the returned vector</li>\n</ul>\n<p>例如，考虑_mm256_srlv_epi64。即使您不知道srlv是什么意思，_mm256前缀告诉您该函数返回一个256位向量，_epi64告诉您参数包含64位有符号整数。</p>\n<p>作为第二个示例，考虑_mm_testnzc_ps。_mm表示函数返回一个128位的向量。末尾的_ps表示参数向量包含浮点数。</p>\n<p>AVX数据类型以两个下划线和一个m开头。函数以一个下划线和两个ms开头。我很容易搞混这一点，所以我想出了一种方法来记住它们的区别:数据类型代表内存，函数代表多媒体操作。这是我能做的最好的了。</p>\n<h3 id=\"5-4构建AVX应用程序\"><a href=\"#5-4构建AVX应用程序\" class=\"headerlink\" title=\"5.4构建AVX应用程序\"></a>5.4构建AVX应用程序</h3><p>要构建使用AVX intrinsic的应用程序，不需要链接任何库。但是您需要包含imminrin .h头文件。此头文件包括将AVX&#x2F;AVX2函数映射到指令的其他头文件。</p>\n<p>hello_avx.c中的代码显示了一个基本的AVX应用程序的样子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  <span class=\"hljs-comment\">/* Initialize the two argument vectors */</span>\t\t\t<span class=\"hljs-comment\">//初始化</span><br>  __m256 evens = _mm256_set_ps(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">8.0</span>, <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">12.0</span>, <span class=\"hljs-number\">14.0</span>, <span class=\"hljs-number\">16.0</span>);<br>  __m256 odds = _mm256_set_ps(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">11.0</span>, <span class=\"hljs-number\">13.0</span>, <span class=\"hljs-number\">15.0</span>);<br><br>  <span class=\"hljs-comment\">/* Compute the difference between the two vectors */</span><br>  __m256 result = _mm256_sub_ps(evens, odds);\t\t\t<span class=\"hljs-comment\">//减法</span><br><br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">float</span>* f = (<span class=\"hljs-keyword\">float</span>*)&amp;result;\t\t\t\t\t<span class=\"hljs-comment\">//类型转换</span><br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%f %f %f %f %f %f %f %f\\n&quot;</span>,<br>    f[<span class=\"hljs-number\">0</span>], f[<span class=\"hljs-number\">1</span>], f[<span class=\"hljs-number\">2</span>], f[<span class=\"hljs-number\">3</span>], f[<span class=\"hljs-number\">4</span>], f[<span class=\"hljs-number\">5</span>], f[<span class=\"hljs-number\">6</span>], f[<span class=\"hljs-number\">7</span>]);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>要构建应用程序，需要告诉编译器该体系结构支持AVX。这个标志取决于编译器，gcc需要-mavx标志。因此，可以使用以下命令编译hello_avx.c源文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">gcc -mavx -o hello_avx hello_avx.c<br></code></pre></div></td></tr></table></figure>\n\n<p>在本例中，所有函数都以_mm256开始，以_ps结束，因此我希望所有操作都清楚地涉及包含floats的256位向量。我还希望结果向量中的每个元素都等于1.0。如果运行应用程序，您将看到情况就是这样。</p>\n<h3 id=\"5-5初始化intrinsics\"><a href=\"#5-5初始化intrinsics\" class=\"headerlink\" title=\"5.5初始化intrinsics\"></a>5.5初始化intrinsics</h3><p>在对AVX向量进行操作之前，需要用数据填充向量。因此，本文讨论的第一组intrinsics用数据初始化向量。有两种方法:用标量值初始化向量和用从内存加载的数据初始化向量。</p>\n<h4 id=\"5-5-1使用标量值初始化\"><a href=\"#5-5-1使用标量值初始化\" class=\"headerlink\" title=\"5.5.1使用标量值初始化\"></a>5.5.1使用标量值初始化</h4><p>AVX提供了将一个或多个值组合成256位向量的intrinsics funtions。表2列出了它们的名称，并提供了每个名称的描述。也有类似的intrinsics初始化128位向量，但它们是由SSE提供的，而不是AVX。函数名的唯一区别是_mm256_被替换为_mm_。</p>\n<p><strong>Table 2: Initialization Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_setzero_ps/pd</code></td>\n<td>Returns a floating-point vector filled with zeros</td>\n</tr>\n<tr>\n<td><code>_mm256_setzero_si256</code></td>\n<td>Returns an integer vector whose bytes are set to zero</td>\n</tr>\n<tr>\n<td><code>_mm256_set1_ps/pd</code></td>\n<td>Fill a vector with a floating-point value</td>\n</tr>\n<tr>\n<td><code>_mm256_set1_epi8/epi16</code> <code>_mm256_set1_epi32/epi64</code></td>\n<td>Fill a vector with an integer</td>\n</tr>\n<tr>\n<td><code>_mm256_set_ps/pd</code></td>\n<td>Initialize a vector with eight floats (ps) or four doubles (pd)</td>\n</tr>\n<tr>\n<td><code>_mm256_set_epi8/epi16</code> <code>_mm256_set_epi32/epi64</code></td>\n<td>Initialize a vector with integers</td>\n</tr>\n<tr>\n<td><code>_mm256_set_m128/m128d/</code> <code>_mm256_set_m128i</code></td>\n<td>Initialize a 256-bit vector with two 128-bit vectors</td>\n</tr>\n<tr>\n<td><code>_mm256_setr_ps/pd</code></td>\n<td>Initialize a vector with eight floats (ps) or four doubles (pd) in reverse order</td>\n</tr>\n<tr>\n<td><code>_mm256_setr_epi8/epi16</code> <code>_mm256_setr_epi32/epi64</code></td>\n<td>Initialize a vector with integers in reverse order</td>\n</tr>\n</tbody></table>\n<p>表中的第一个函数是最容易理解的。_m256_setzero_ps返回一个__m256向量，包含8个设置为0的浮点数。类似地，_m256_setzero_si256返回一个__m256i向量，其字节被设置为0。例如，下面这行代码创建了一个256位的向量，其中包含4个设为0的double:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256d dbl_vector = _m256_setzero_pd();<br></code></pre></div></td></tr></table></figure>\n\n<p>名称中包含set1的函数接受一个值，并在整个向量中重复该值。例如，下面这行代码创建了一个__m256i，它的16个short value被设置为47:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256i short_vector = _m256_set1_pd();<br></code></pre></div></td></tr></table></figure>\n\n<p>表2中的其他函数包含_set_或_setr_。这些函数接受一系列值，每个向量的元素对应一个值。这些值被放置在返回的向量中，理解顺序很重要。下面的函数调用返回一个包含8个整数的向量，其值范围为1到8:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">_m256i int_vector = _m256_set_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br></code></pre></div></td></tr></table></figure>\n\n<p>您可能希望值按照给定的顺序存储。但英特尔的架构是小端存储类型的，所以最低有效值(8)先存储，最高有效值(1)最后存储。您可以通过将int_vector转换为int指针并打印存储的值来验证这一点。如下代码所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i int_vector = _mm256_set_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br><span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span>*)&amp;int_vector;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, ptr[<span class=\"hljs-number\">0</span>], ptr[<span class=\"hljs-number\">1</span>], ptr[<span class=\"hljs-number\">2</span>], ptr[<span class=\"hljs-number\">3</span>], ptr[<span class=\"hljs-number\">4</span>], ptr[<span class=\"hljs-number\">5</span>], ptr[<span class=\"hljs-number\">6</span>], ptr[<span class=\"hljs-number\">7</span>]);<br>--&gt; <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br></code></pre></div></td></tr></table></figure>\n\n<p>如果希望值按给定顺序存储，可以使用_setr_函数之一创建向量，其中r可能代表reverse。下面的代码展示了它是如何工作的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">__m256i int_vector = _mm256_setr_epi32(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);<br><span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span>*)&amp;int_vector;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, ptr[<span class=\"hljs-number\">0</span>], ptr[<span class=\"hljs-number\">1</span>], ptr[<span class=\"hljs-number\">2</span>], ptr[<span class=\"hljs-number\">3</span>], ptr[<span class=\"hljs-number\">4</span>], ptr[<span class=\"hljs-number\">5</span>], ptr[<span class=\"hljs-number\">6</span>], ptr[<span class=\"hljs-number\">7</span>]);<br>--&gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">8</span><br></code></pre></div></td></tr></table></figure>\n\n<p>有趣的是，AVX和AVX2都没有提供用无符号整数初始化向量的intrinsic。但是，它们提供了对带无符号整数的向量进行操作的函数。</p>\n<h4 id=\"5-5-2从内存加载数据\"><a href=\"#5-5-2从内存加载数据\" class=\"headerlink\" title=\"5.5.2从内存加载数据\"></a>5.5.2从内存加载数据</h4><p>AVX&#x2F;AVX2的一个常见用法是将数据从内存加载到向量中，对向量进行处理，并将结果存储回内存。第一步是使用表3中列出的intrinsic funtions完成的。最后两个函数前面有(2)，因为它们是由AVX2而不是AVX提供的。</p>\n<p><strong>Table 3: Vector Load Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_load_ps/pd</code></td>\n<td>Loads a floating-point vector from an  aligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_load_si256</code></td>\n<td>Loads an integer vector from an aligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_loadu_ps/pd</code></td>\n<td>Loads a floating-point vector from an  unaligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm256_loadu_si256</code></td>\n<td>Loads an integer vector from an unaligned memory address</td>\n</tr>\n<tr>\n<td><code>_mm_maskload_ps/pd</code> <code>_mm256_maskload_ps/pd</code></td>\n<td>Load portions of a 128-bit&#x2F;256-bit floating-point vector according to a mask</td>\n</tr>\n<tr>\n<td><code>(2)_mm_maskload_epi32/64</code> <code>(2)_mm256_maskload_epi32/64</code></td>\n<td>Load portions of a 128-bit&#x2F;256-bit integer vector according to a mask</td>\n</tr>\n</tbody></table>\n<p>当将数据加载到向量中时，内存对齐变得特别重要。每个_mm256_load_* intrinsic接受一个必须在32字节边界上对齐的内存地址。即地址必须能被32整除。下面的代码展示了如何在实践中使用它:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">float</span>* aligned_floats = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">aligned_alloc</span>(<span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">64</span> * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>));\t\t<span class=\"hljs-comment\">//这里使用了内存对齐</span><br>... Initialize data ...<br>__m256 vec = _mm256_load_ps(aligned_floats);<br></code></pre></div></td></tr></table></figure>\n\n<p>【个人补充】关于内存对齐以及相关函数</p>\n<p><a href=\"https://xingyuanjie.top/2022/06/12/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/\">内存对齐 - Amicoyuan (xingyuanjie.top)</a></p>\n<p><a href=\"https://xingyuanjie.top/2022/06/12/AVX%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%A6%E4%B9%A0(%E4%BA%8C)-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E7%9A%84%E5%BA%94%E7%94%A8/\">AVX向量化学习(二)-内存对齐的应用 - Amicoyuan (xingyuanjie.top)</a></p>\n<p>任何使用_m256_load_*加载未对齐数据的尝试都会造成segmentation fault。如果数据不是在32位边界对齐，则应该使用_m256_loadu_*函数。如下代码所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">float</span>* unaligned_floats = (<span class=\"hljs-keyword\">float</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">64</span> * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>));\t\t\t\t<span class=\"hljs-comment\">//未使用内存对齐</span><br>... Initialize data ...<br>__m256 vec = _mm256_loadu_ps(unaligned_floats);<br></code></pre></div></td></tr></table></figure>\n\n<p>假设你想用AVX向量处理一个浮点数组(float)，但是数组的长度是11，不能被8整除。在这种情况下，第二个__m256向量的最后五个浮点数需要设置为0，这样它们就不会影响计算。这种选择性加载可以用表3底部的_maskload_函数来完成。</p>\n<p>每个_maskload_函数接受两个参数:一个内存地址和一个与返回向量元素数量相同的整数向量。对于整数向量中最高位为1的每个元素，将从内存中读取返回向量中相应的元素。如果整数向量中的最高位为零，则返回向量中的相应元素被设置为零。</p>\n<p>一个示例将说明如何使用这些函数。mask_load.c中的代码将8个整型读入一个向量，最后3个应该设置为0。要使用的函数是_mm256_maskload_epi32，它的第二个参数应该是__m256i掩码向量。这个掩码向量包含5个最高位为1的整数和3个最高位为0的整数。下面是代码的样子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">int</span> i;<br>  <br>  <span class=\"hljs-keyword\">int</span> int_array[<span class=\"hljs-number\">8</span>] = &#123;<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">600</span>, <span class=\"hljs-number\">700</span>, <span class=\"hljs-number\">800</span>&#125;;<br>  <br>  <span class=\"hljs-comment\">/* Initialize the mask vector */</span><br>  __m256i mask = _mm256_setr_epi32(<span class=\"hljs-number\">-20</span>, <span class=\"hljs-number\">-72</span>, <span class=\"hljs-number\">-48</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">-100</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>);\t<span class=\"hljs-comment\">//这里需要充分理解计算机组成原理中的补码</span><br><br>  <span class=\"hljs-comment\">/* Selectively load data into the vector */</span><br>  __m256i result = _mm256_maskload_epi32(int_array, mask);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">int</span>* res = (<span class=\"hljs-keyword\">int</span>*)&amp;result;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d %d %d\\n&quot;</span>, <br>    res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>], res[<span class=\"hljs-number\">4</span>], res[<span class=\"hljs-number\">5</span>], res[<span class=\"hljs-number\">6</span>], res[<span class=\"hljs-number\">7</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>如果您在支持AVX2的系统上运行此应用程序，它将打印以下结果:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">100</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">300</span> <span class=\"hljs-number\">400</span> <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span><br></code></pre></div></td></tr></table></figure>\n\n<p>有三点是需要注意的：</p>\n<ol>\n<li>代码使用_setr_函数而不是_set_来设置掩码向量的内容，因为它在将向量元素传递给函数时对它们进行排序。</li>\n<li>负整数的最高位总是1。这就是掩码向量包含五个负数和三个正数的原因。</li>\n<li>_mm256_maskload_epi32函数由AVX2提供，而不是AVX。因此，要用gcc编译这段代码，必须使用-mavx2标志而不是-mavx。</li>\n</ol>\n<p>除了表3中列出的函数之外，AVX2还提供了从内存加载索引数据的集合函数。</p>\n<h2 id=\"6-Arithmetic-Intrinsics\"><a href=\"#6-Arithmetic-Intrinsics\" class=\"headerlink\" title=\"6.Arithmetic Intrinsics\"></a>6.Arithmetic Intrinsics</h2><p>数学是AVX存在的主要原因，基本操作是加、减、乘和除。本节将介绍执行这些操作的intrinsic funtions，还将介绍AVX2提供的新的融合乘法和加法函数。</p>\n<h3 id=\"6-1加法和减法\"><a href=\"#6-1加法和减法\" class=\"headerlink\" title=\"6.1加法和减法\"></a>6.1加法和减法</h3><p>表4列出了执行加法和减法的AVX&#x2F;AVX2 intrinsic。由于考虑到饱和度，它们大多数都作用于包含整数的向量。</p>\n<p><strong>Table 4: Addition and Subtraction Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_add_ps/pd</code></td>\n<td>Add two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>_mm256_sub_ps/pd</code></td>\n<td>Subtract two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_add_epi8/16/32/64 </code></td>\n<td>Add two integer vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm236_sub_epi8/16/32/64</code></td>\n<td>Subtract two integer vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_adds_epi8/16</code> <code>(2)_mm256_adds_epu8/16 </code></td>\n<td>Add two integer vectors with saturation</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_subs_epi8/16</code> <code>(2)_mm256_subs_epu8/16</code></td>\n<td>Subtract two integer vectors with saturation</td>\n</tr>\n<tr>\n<td><code>_mm256_hadd_ps/pd</code></td>\n<td>Add two floating-point vectors horizontally</td>\n</tr>\n<tr>\n<td><code>_mm256_hsub_ps/pd</code></td>\n<td>Subtract two floating-point vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hadd_epi16/32</code></td>\n<td>Add two integer vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hsub_epi16/32</code></td>\n<td>Subtract two integer vectors horizontally</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hadds_epi16</code></td>\n<td>Add two vectors containing shorts horizontally with saturation</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_hsubs_epi16</code></td>\n<td>Subtract two vectors containing shorts horizontally with saturation</td>\n</tr>\n<tr>\n<td><code>_mm256_addsub_ps/pd</code></td>\n<td>Add and subtract two floating-point vectors</td>\n</tr>\n</tbody></table>\n<p>在加法和减法整数向量时，重要的是要查看_add_&#x2F;_sub_函数和_adds_&#x2F;_subs_函数之间的区别。额外的s代表饱和，当结果需要的内存超过向量可以存储的内存时，就会产生饱和。Functions that take saturation into account clamp the result to the minimum&#x2F;maximum value that can be stored.没有饱和的函数在发生饱和时忽略内存问题。</p>\n<p>例如，假设一个向量包含有符号字节，那么每个元素的最大值是127 (0x7F)。如果一个运算将98加到85，数学和是183 (0xB7)。</p>\n<ul>\n<li>如果使用_mm256_add_epi8添加这些值，饱和度将被忽略，存储的结果将是-73 (0xB7)。</li>\n<li>如果使用_mm256_adds_epi8添加这些值，结果将被固定为最大值127 (0x7F)。</li>\n</ul>\n<p>作为另一个例子，考虑两个包含有符号短整数的向量。最小值为-32,768。如果计算-18,000 - 19,000，数学结果是-37,000 (0xFFFF6F78作为32位整数)。</p>\n<ul>\n<li>如果用_mm256_sub_epi16减去这些值，饱和度将被忽略，存储的结果将是28,536 (0x6F78)。</li>\n<li>如果用_mm256_subs_epi16减去这些值，结果将被压缩到最小值-32,768 (0x8000)。</li>\n</ul>\n<p>_hadd_&#x2F;_hsub_函数水平执行加法和减法。也就是说，它们不是添加或减去不同向量的元素，而是在每个向量中添加或减去相邻的元素。结果以交错的方式存储。图1显示了_mm256_hadd_pd的工作原理，它水平地添加了两个向量A和B:</p>\n<p><img src=\"/2023/01/28/avx006/Fig1.jpg\" alt=\"Image 1\"></p>\n<p><strong>Figure 1: Horizontal Addition of Two Vectors</strong></p>\n<p>水平加减元素看起来可能很奇怪，但这些操作在复数相乘时很有用。本文稍后将对此进行解释。表4中的最后一个函数_mm256_addsub_ps&#x2F;pd交替减法和加法两个浮点向量的元素。也就是说，偶数元素被减去，奇数元素被加上。例如，如果vec_a包含(0.1,0.2,0.3,0.4)，vec_b包含(0.5,0.6,0.7,0.8)，则_mm256_addsub_pd(vec_a, vec_b)等于(-0.4,0.8，-0.4,1.2)。</p>\n<h3 id=\"6-2乘法和除法\"><a href=\"#6-2乘法和除法\" class=\"headerlink\" title=\"6.2乘法和除法\"></a>6.2乘法和除法</h3><p>表5列出了执行乘法和除法的AVX&#x2F;AVX2 intrinsic。与加法和减法一样，对整数进行运算也有一些特殊的特性。</p>\n<p><strong>Table 5: Multiplication and Division Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_mul_ps/pd</code></td>\n<td>Multiply two floating-point vectors</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mul_epi32/</code> <code>(2)_mm256_mul_epu32 </code></td>\n<td>Multiply the lowest four elements of vectors containing 32-bit integers</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mullo_epi16/32</code></td>\n<td>Multiply integers and store low halves</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mulhi_epi16/</code> <code>(2)_mm256_mulhi_epu16</code></td>\n<td>Multiply integers and store high halves</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_mulhrs_epi16</code></td>\n<td>Multiply 16-bit elements to form 32-bit elements</td>\n</tr>\n<tr>\n<td><code>_mm256_div_ps/pd</code></td>\n<td>Divide two floating-point vectors</td>\n</tr>\n</tbody></table>\n<p>如果两个N位的数字在计算机上相乘，结果可以占用2N位。因此，只有_mm256_mul_epi32和_mm256_mul_epu32的四个低元素被乘在一起，结果是一个包含四个长整数的向量。图2显示了它的工作原理:【动态图丢失】</p>\n<p><strong>图2:整数向量的低元素相乘</strong></p>\n<p>_mullo_函数类似于整数_mul_函数，但它们不是乘低元素，而是乘两个向量的每个元素，只存储每个乘积的低一半。图3显示了它的外观:【图片丢失】</p>\n<p><strong>图3:整数相乘和存储低二分之一</strong></p>\n<p>_mm256_mulhi_epi16和_mm256_mulhi_epu16 intrinsics类似，但是它们存储整数积的高一半。</p>\n<h3 id=\"6-3Fused-Multiply-and-Add-FMA\"><a href=\"#6-3Fused-Multiply-and-Add-FMA\" class=\"headerlink\" title=\"6.3Fused Multiply and Add (FMA)\"></a>6.3Fused Multiply and Add (FMA)</h3><p>如前所述，两个N位数字相乘的结果可以占用2N位。因此，当您将两个浮点值a和b相乘时，结果实际上是四舍五入(a * b)，其中四舍五入(x)返回最接近x的浮点值。随着进一步操作的执行，这种精度损失会增加。</p>\n<p>AVX2提供了将乘法和加法融合在一起的指令。也就是说，它们不是返回整数(整数(a * b) + c)，而是返回整数(a * b + c)。因此，这些指令比分别执行乘法和加法提供了更高的速度和准确性。</p>\n<p>表6列出了AVX2提供的FMA intrinsic，并包括对每个函数的描述。表中的每条指令都接受三个输入向量，我把它们分别称为a、b和c。</p>\n<p><strong>Table 6: FMA Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>(2)_mm_fmadd_ps/pd/</code> <code>(2)_mm256_fmadd_ps/pd</code></td>\n<td>Multiply two vectors and add the product to a third (res &#x3D; a * b + c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsub_ps/pd/</code> <code>(2)_mm256_fmsub_ps/pd</code></td>\n<td>Multiply two vectors and subtract a vector from the product (res &#x3D; a * b - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmadd_ss/sd </code></td>\n<td>Multiply and add the lowest element in the vectors (res[0] &#x3D; a[0] * b[0] + c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsub_ss/sd</code></td>\n<td>Multiply and subtract the lowest element in the vectors (res[0] &#x3D; a[0] * b[0] - c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmadd_ps/pd</code> <code>(2)_mm256_fnmadd_ps/pd </code></td>\n<td>Multiply two vectors and add the negated product to a third (res &#x3D; -(a * b) + c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmsub_ps/pd/</code> <code>(2)_mm256_fnmsub_ps/pd</code></td>\n<td>Multiply two vectors and add the negated product to a third (res &#x3D; -(a * b) - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmadd_ss/sd</code></td>\n<td>Multiply the two lowest elements and add the negated product to the lowest element of the third vector (res[0] &#x3D; -(a[0] * b[0]) + c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fnmsub_ss/sd</code></td>\n<td>Multiply the lowest elements and subtract the lowest element of the third vector from the negated product (res[0] &#x3D; -(a[0] * b[0]) - c[0])</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmaddsub_ps/pd/</code> <code>(2)_mm256_fmaddsub_ps/pd</code></td>\n<td>Multiply two vectors and alternately add and subtract from the product (res &#x3D; a * b - c)</td>\n</tr>\n<tr>\n<td><code>(2)_mm_fmsubadd_ps/pd/</code> <code>(2)_mmf256_fmsubadd_ps/pd </code></td>\n<td>Multiply two vectors and alternately subtract and add from the product (res &#x3D; a * b - c)</td>\n</tr>\n</tbody></table>\n<p>如果一个内征的名称以_ps或_pd结尾，则输入向量的每个元素都包含在运算中。如果intrinsic的名称以_ss或_sd结尾，则只包括最低的元素。输出向量中的其余元素被设置为与第一个输入向量中的元素相等。例如,假设vec_a &#x3D; (1.0, 2.0)， vec_b &#x3D; (5.0, 10.0)， vec_c &#x3D;(7.0, 14.0)。在本例中，_mm_fmadd_sd(vec_a, vec_b, vec_c)返回(12.0,2.0)，因为(1.0 * 5.0)+ 7.0 &#x3D; 12.0,2.0是vec_a的第二个元素。</p>\n<p>了解_fmadd_&#x2F;_fmsub_和_fnmadd_&#x2F;_fnmsub_ intrinsic之间的区别很重要。后一种函数在加上或减去第三个输入向量之前，对前两个输入向量的乘积求反。</p>\n<p>_fmaddsub_和_fmsubadd_内在函数在第三个向量的加法和减法元素之间交替使用。_fmaddsub_ intrinsic添加奇数元素并减去偶数元素。_fmsubadd_ intrinsic减去奇数元素并添加偶数元素。fmatest.c中的代码展示了如何在实践中使用_mm256_fmaddsub_pd intrinsic。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <br>  __m256d veca = _mm256_setr_pd(<span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">6.0</span>);<br><br>  __m256d vecb = _mm256_setr_pd(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">2.0</span>);<br>  <br>  __m256d vecc = _mm256_setr_pd(<span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>, <span class=\"hljs-number\">7.0</span>);<br>  <br>  <span class=\"hljs-comment\">/* Alternately subtract and add the third vector</span><br><span class=\"hljs-comment\">     from the product of the first and second vectors */</span><br>  __m256d result = _mm256_fmaddsub_pd(veca, vecb, vecc);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">double</span>* res = (<span class=\"hljs-keyword\">double</span>*)&amp;result;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf %lf %lf %lf\\n&quot;</span>, res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>当这段代码在支持AVX2的处理器上编译和执行时，打印的结果如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">5.000000</span> <span class=\"hljs-number\">19.000000</span> <span class=\"hljs-number\">5.000000</span> <span class=\"hljs-number\">19.000000</span><br></code></pre></div></td></tr></table></figure>\n\n<p>FMA指令是由AVX2提供的，因此您可能认为使用gcc构建应用程序需要使用-mavx2标志。但是我发现-mfma标志是必需的。否则，我会得到奇怪的编译错误。</p>\n<h2 id=\"7-Permuting-and-Shuffling\"><a href=\"#7-Permuting-and-Shuffling\" class=\"headerlink\" title=\"7.Permuting and Shuffling\"></a>7.Permuting and Shuffling</h2><p>许多应用程序必须重新排列向量元素，以确保正确执行操作。</p>\n<p>AVX&#x2F;AVX2为此目的提供了许多intrinsic funtion，其中两大类是_permute_函数和_shuffle_函数。本节介绍这两种类型的intrinsic。</p>\n<h3 id=\"7-1Permuting\"><a href=\"#7-1Permuting\" class=\"headerlink\" title=\"7.1Permuting\"></a>7.1Permuting</h3><p>AVX提供了返回一个向量的函数，该向量包含一个向量的重新排列的元素。表7列出了这些排列函数，并提供了对每个函数的描述。</p>\n<p><strong>Table 7: Permute Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm_permute_ps/pd/</code> <code>_mm256_permute_ps/pd</code></td>\n<td>Select elements from the input vector based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_permute4x64_pd/</code> <code>(2)_mm256_permute4x64_epi64</code></td>\n<td>Select 64-bit elements from the input vector based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm256_permute2f128_ps/pd</code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm256_permute2f128_si256 </code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n<tr>\n<td><code>_mm_permutevar_ps/pd</code> <code>_mm256_permutevar_ps/pd </code></td>\n<td>Select elements from the input vector based on bits in an integer vector</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_permutevar8x32_ps</code>&#x2F; <code>(2)_mm256_permutevar8x32_epi32</code></td>\n<td>Select 32-bit elements (<code>float</code>s and <code>int</code>s) using indices in an integer vector</td>\n</tr>\n</tbody></table>\n<p>_permute_ intrinsic接受两个参数:一个输入向量和一个8位控制值。控制值的位决定输入向量的哪个元素插入到输出中。</p>\n<p>对于_mm256_permute_ps，每对控制位通过选择输入向量中的一个上或下元素来确定一个上或下输出元素。这很复杂，所以我希望图4能让这个操作更清楚一些:【图片丢失】</p>\n<p><strong>Figure 4: Operation of the Permute Intrinsic Function</strong></p>\n<p>如图所示，输入向量的值可以在输出中重复多次。其他输入值可能根本不被选择。</p>\n<p>在_mm256_permute_pd中，控制值的低四位在相邻的双精度数对之间进行选择。_mm256_permute4x4_pd类似，但使用所有控制位来选择将哪个64位元素放在输出中。在_permute2f128_ intrinsic中，控制值从两个输入向量中选择128位块，而不是从一个输入向量中选择元素。</p>\n<p>_permutevar_ intrinsic执行与_permute_ intrinsic相同的操作。但是它们不是使用8位控制值来选择元素，而是依赖于与输入向量大小相同的整数向量。例如，_mm256_permute_ps的输入向量是_mm256，因此整数向量是_mm256i。整数向量的高位执行选择的方式与_permute_ intrinsic的8位控制值的位相同。</p>\n<h3 id=\"7-2Shuffling\"><a href=\"#7-2Shuffling\" class=\"headerlink\" title=\"7.2Shuffling\"></a>7.2Shuffling</h3><p>像_permute_ intrinsic一样，_shuffle_ intrinsic从一个或两个输入向量中选择元素，并将它们放在输出向量中。表8列出了这些功能，并提供了每个功能的描述。</p>\n<p><strong>Table 8: Shuffle Intrinsics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_mm256_shuffle_ps/pd</code></td>\n<td>Select floating-point elements according to an 8-bit value</td>\n</tr>\n<tr>\n<td><code>_mm256_shuffle_epi8/</code> <code>_mm256_shuffle_epi32</code></td>\n<td>Select integer elements according to an 8-bit value</td>\n</tr>\n<tr>\n<td><code>(2)_mm256_shufflelo_epi16/ </code> <code>(2)_mm256_shufflehi_epi16</code></td>\n<td>Select 128-bit chunks from two input vectors based on an 8-bit control value</td>\n</tr>\n</tbody></table>\n<p>所有的shuffle_ intrinsic运算于256位向量。在每种情况下，最后一个参数是一个8位的值，它决定哪些输入元素应该放在输出向量中。</p>\n<p>对于_mm256_shuffle_ps，只使用控件值的高四位。如果输入向量包含整型或浮点数，则使用所有控制位。对于_mm256_shuffle_ps，前两对位选择第一个向量中的元素，后两对位选择第二个向量中的元素。图5说明了这是如何工作的:【图片丢失】</p>\n<p><strong>Figure 5: Operation of the Shuffle Intrinsic Function</strong></p>\n<p>为了shuffle16位值，AVX2提供了_mm256_shufflelo_epi16和_mm256_shufflehi_epi16。与_mm256_shuffle_ps一样，控制值被分成四对从八个元素中选择的位。但是对于_mm256_shufflelo_epi16, 8个元素是从8个低的16位值中取出的。对于_mm256_shufflehi_epi16, 8个元素取自8个高的16位值。</p>\n<h2 id=\"8-Complex-Multiplication\"><a href=\"#8-Complex-Multiplication\" class=\"headerlink\" title=\"8.Complex Multiplication\"></a>8.Complex Multiplication</h2><p>在信号处理应用中，复杂乘法是一项必须反复执行的耗时操作。我不会深入讨论这个理论，但每个复数都可以表示为a + bi，其中a和b是浮点值，i是-1的平方根。A是实部，b是虚部。如果(a + bi)和(c + di)相乘，乘积等于(ac - bd) + (ad + bc)i。</p>\n<p>复数可以以交错的方式存储，这意味着每个实数部分后面跟着虚数部分。假设vec1是一个__m256d，存储两个复数(a + bi)和(x + yi)， vec2是一个__m256d，存储(c + di)和(z + wi)。图6说明了如何存储这些值。如图所示，prod向量存储了两个产物:(ac - bd) + (ad + bc)i和(xz - yw) + (xw + yz)i。</p>\n<p>【图片丢失】</p>\n<p><strong>Figure 6: Complex Multiplication Using Vectors</strong></p>\n<p>我不知道用AVX&#x2F;AVX2计算复杂乘积的最快方法。但我想出了一个方法，效果很好。它包括五个步骤:</p>\n<ol>\n<li>将vec1和vec2相乘，并将结果存储在vec3中。</li>\n<li>切换vec2的实&#x2F;虚值。</li>\n<li>求vec2的虚数的负数。</li>\n<li>将vec1和vec2相乘，并将结果存储在vec4中。</li>\n<li>对vec3和vec4进行水平相减，得到vec1中的答案。</li>\n</ol>\n<p>complex_multi .c中的代码展示了如何使用AVX intrinsic执行此操作:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;immintrin.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>  __m256d vec1 = _mm256_setr_pd(<span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">13.0</span>, <span class=\"hljs-number\">6.0</span>);<br>  __m256d vec2 = _mm256_setr_pd(<span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">7.0</span>);<br>  __m256d neg = _mm256_setr_pd(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>);<br>  <br>  <span class=\"hljs-comment\">/* Step 1: Multiply vec1 and vec2 */</span><br>  __m256d vec3 = _mm256_mul_pd(vec1, vec2);<br><br>  <span class=\"hljs-comment\">/* Step 2: Switch the real and imaginary elements of vec2 */</span><br>  vec2 = _mm256_permute_pd(vec2, <span class=\"hljs-number\">0x5</span>);<br>  <br>  <span class=\"hljs-comment\">/* Step 3: Negate the imaginary elements of vec2 */</span><br>  vec2 = _mm256_mul_pd(vec2, neg);  <br>  <br>  <span class=\"hljs-comment\">/* Step 4: Multiply vec1 and the modified vec2 */</span><br>  __m256d vec4 = _mm256_mul_pd(vec1, vec2);<br><br>  <span class=\"hljs-comment\">/* Horizontally subtract the elements in vec3 and vec4 */</span><br>  vec1 = _mm256_hsub_pd(vec3, vec4);<br>  <br>  <span class=\"hljs-comment\">/* Display the elements of the result vector */</span><br>  <span class=\"hljs-keyword\">double</span>* res = (<span class=\"hljs-keyword\">double</span>*)&amp;vec1;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf %lf %lf %lf\\n&quot;</span>, res[<span class=\"hljs-number\">0</span>], res[<span class=\"hljs-number\">1</span>], res[<span class=\"hljs-number\">2</span>], res[<span class=\"hljs-number\">3</span>]);<br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>这段代码作用于双向量，但是可以很容易地扩展该方法以支持浮点向量。</p>\n<h2 id=\"9-Points-of-Interest\"><a href=\"#9-Points-of-Interest\" class=\"headerlink\" title=\"9.Points of Interest\"></a>9.Points of Interest</h2><p>许多开发人员可能会避免学习AVX&#x2F;AVX2，希望编译器能够执行自动向量化。自动向量化是一个很好的特性，但是如果您了解本质，就可以重新安排算法以更好地利用SIMD处理。通过插入AVX&#x2F;AVX2 intrinsic，我极大地提高了信号处理应用程序的处理速度。</p>\n<h2 id=\"10-History\"><a href=\"#10-History\" class=\"headerlink\" title=\"10.History\"></a>10.History</h2><p>2&#x2F;20 - Fixed formatting and image links</p>\n<p>4&#x2F;2 - Fixed a couple typographical errors</p>\n<h2 id=\"11-License\"><a href=\"#11-License\" class=\"headerlink\" title=\"11.License\"></a>11.License</h2><p>This article, along with any associated source code and files, is licensed under <a href=\"http://www.codeproject.com/info/cpol10.aspx\">The Code Project Open License (CPOL)</a></p>\n<p>Written By</p>\n<p><strong><a href=\"https://www.codeproject.com/Members/mattscar\">Matt Scarpino</a></strong></p>\n<p><img src=\"/2023/01/28/avx006/US.gif\" alt=\"United States\"> United States</p>\n<p>I’ve been a programmer and engineer for over 20 years. I’m a certified Azure Developer Associate and an Azure IoT Developer Specialist.</p>\n",
            "tags": [
                "AVX",
                "AVX2"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/17/cuda005/",
            "url": "https://xingyuanjie.top/2023/01/17/cuda005/",
            "title": "CUDA内存管理",
            "date_published": "2023-01-17T14:03:10.000Z",
            "content_html": "<h3 id=\"1-内存管理\"><a href=\"#1-内存管理\" class=\"headerlink\" title=\"1.内存管理\"></a>1.内存管理</h3><p>CUDA编程模型假设系统是由一个主机和一个设备组成的，而且各自拥有独立的内存。核函数是在设备上运行的。为使你拥有充分的控制权并使系统达到最佳性能，CUDA运行时负责分配与释放设备内存，并且在主机内存和设备内存之间传输数据。表2-1列出了标准的C函数以及相应地针对内存操作的CUDA C函数。</p>\n<p>用于执行GPU内存分配的是cudaMalloc函数，其函数原型为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">cudaError_t <span class=\"hljs-title\">cudaMalloc</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>** devPtr, <span class=\"hljs-keyword\">size_t</span> size)</span></span><br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/01/17/cuda005/image-20230117223254853.png\" alt=\"image-20230117223254853\"></p>\n<p>该函数负责向设备分配一定字节的线性内存，并以devPtr的形式返回指向所分配内存的指针。cudaMalloc与标准C语言中的malloc函数几乎一样，只是此函数在GPU的内存里分配内存。通过充分保持与标准C语言运行库中的接口一致性，可以实现CUDA应用程序的轻松接入。</p>\n<p>cudaMemcpy函数负责主机和设备之间的数据传输，其函数原型为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">cudaError_t <span class=\"hljs-title\">cudaMencpy</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">void</span>* dst, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">void</span>* src, <span class=\"hljs-keyword\">size_t</span> count, cudaMemcpyKind kind)</span></span><br></code></pre></div></td></tr></table></figure>\n\n<p>此函数从src指向的源存储区复制一定数量的字节到dst指向的目标存储区。复制方向由kind指定，其中的kind有以下几种。</p>\n<ol>\n<li>cudaMemcpyHostToHost</li>\n<li>cudaMemcpyHostToDevice</li>\n<li>cudaMemcpyDeviceToHost</li>\n<li>cudaMemcpyDeviceToDevice</li>\n</ol>\n<p>这个函数以同步方式执行，因为在cudaMemcpy函数返回以及传输操作完成之前主机应用程序是阻塞的。除了内核启动之外的CUDA调用都会返回一个错误的枚举类型cudaError_t。如果GPU内存分配成功，函数返回：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">cudaSuccess<br></code></pre></div></td></tr></table></figure>\n\n<p>否则返回：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">cudaErrorMemoryAllocation<br></code></pre></div></td></tr></table></figure>\n\n<p>可以使用以下CUDA运行时函数将错误代码转化为可读的错误消息：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">char</span>* <span class=\"hljs-title\">cudaGetErroeString</span><span class=\"hljs-params\">(cudaError_t error)</span></span><br></code></pre></div></td></tr></table></figure>\n\n<p>cudaGetErrorString函数和C语言中的strerror函数类似。</p>\n<p>CUDA编程模型从GPU架构中抽象出一个内存层次结构，图2-3所示的是一个简化的GPU内存结构，它主要包含两部分：全局内存和共享内存。</p>\n<h3 id=\"2-内存层次结构\"><a href=\"#2-内存层次结构\" class=\"headerlink\" title=\"2.内存层次结构\"></a>2.内存层次结构</h3><p>CUDA编程模型最显著的一个特点就是揭示了内存层次结构。每一个GPU设备都有用于不同用途的存储类型。</p>\n<p>在GPU内存层次结构中，最主要的两种内存是全局内存和共享内存。全局类似于CPU的系统内存，而共享内存类似于CPU的缓存。然而GPU的共享内存可以由CUDA C的内核直接控制。</p>\n<p><img src=\"/2023/01/17/cuda005/image-20230128140743600.png\" alt=\"image-20230128140743600\"></p>\n<p>下面，我们将通过一个简单的两个数组相加的例子来学习如何在主机和设备之间进行数据传输，以及如何使用CUDA C编程。如图2-4所示，数组a的第一个元素与数组b的第一个元素相加，得到的结果作为数组c的第一个元素，重复这个过程直到数组中的所有元素都进行了一次运算。‘</p>\n<p><img src=\"/2023/01/17/cuda005/image-20230128141008674.png\" alt=\"image-20230128141008674\"></p>\n<p>首先，执行主机端代码使两个数组相加（如代码清单2-1所示）。</p>\n<h4 id=\"代码清单2-1-sumArraysOnHost-c\"><a href=\"#代码清单2-1-sumArraysOnHost-c\" class=\"headerlink\" title=\"代码清单2-1 sumArraysOnHost.c\"></a>代码清单2-1 sumArraysOnHost.c</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;time.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sumArraysOnHost</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *A, <span class=\"hljs-keyword\">float</span> *B, <span class=\"hljs-keyword\">float</span> *C, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> N)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> idx=<span class=\"hljs-number\">0</span>;idx&lt;n;idx++)<br>        C[idx]=A[idx]+B[idx];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initialData</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> *ip,<span class=\"hljs-keyword\">int</span> size)</span></span>&#123;<br>    <span class=\"hljs-comment\">//generate different seed for random number time_t t;</span><br>    <span class=\"hljs-built_in\">srand</span>((<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span>) <span class=\"hljs-built_in\">time</span> (&amp;t));<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;size;i++)&#123;<br>        ip[i]=(<span class=\"hljs-keyword\">float</span>)(<span class=\"hljs-built_in\">rand</span>() &amp; OxFF)/<span class=\"hljs-number\">10.0f</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> **argv)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> nElem =<span class=\"hljs-number\">1024</span>;<br>    <span class=\"hljs-keyword\">size_t</span> nBytes = nElem *<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">float</span>);<br>    <br>    <span class=\"hljs-keyword\">float</span> *h_A, *h_B, *h_C;<br>    h_A = (<span class=\"hljs-keyword\">float</span> *)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    h_B = (<span class=\"hljs-keyword\">float</span> *)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    h_C = (<span class=\"hljs-keyword\">float</span> *)<span class=\"hljs-built_in\">malloc</span>(nBytes);<br>    <br>    <span class=\"hljs-built_in\">initialData</span>(h_A, nElem);<br>    <span class=\"hljs-built_in\">initialData</span>(h_B, nElem);<br>    <br>    <span class=\"hljs-built_in\">sumArraysOnHost</span>(h_A, h_B, h_C, nElem);<br>    <br>    <span class=\"hljs-built_in\">free</span>(h_A);<br>    <span class=\"hljs-built_in\">free</span>(h_B);<br>    <span class=\"hljs-built_in\">free</span>(h_C);<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n\n<p>这是一个纯C语言编写的程序，你可以用C语言编译器进行编译，也可以像下面这样用nvcc进行编译。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc -Xcompiler -std=c99 sumArraysOnHost.c -o sum<br>./sum<br></code></pre></div></td></tr></table></figure>\n\n<p>nvcc封装了几种内部编译工具，CUDA编译器允许通过命令行选项在不同阶段启动不同的工具完成编译工作。-Xcompiler用于指定命令行选项是指向C编译器还是预处理器。在前面的例子中，将-std&#x3D;c99传递给编译器，因为这里的C程序是按照C99标准编写的。</p>\n<p>现在，你可以在GPU上修改代码来进行数组加法运算，用cudaMalloc在GPU上申请内存。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">float</span> *h_A, *h_B, *h_C;<br><span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_A, nBytes);<br><span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_B, nBytes);<br><span class=\"hljs-built_in\">cudaMalloc</span>((<span class=\"hljs-keyword\">float</span>**)&amp;d_C, nBytes);<br></code></pre></div></td></tr></table></figure>\n\n<p>使用cudaMemcpy函数把数据从主机内存拷贝到GPU的全局内存中，参考cudaMemcpyHostToDevice指定数据拷贝方向。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">cudaMemcpy</span>(d_A, h_A, nBytes, cudaMemcpyHostToDevice);<br><span class=\"hljs-built_in\">cudaMemcpy</span>(d_B, h_B, nBytes, cudaMemcpyHostToDevice);<br></code></pre></div></td></tr></table></figure>\n\n<p>当数据被转移到GPU的全局内存后，主机端调用核函数在GPU上进行数组求和。一旦内核被调用，控制权立刻被传回主机，这样的话，当核函数在GPU上运行时，主机可以执行其他函数。因此，内核与主机是异步的。</p>\n<p>当内核在GPU上完成了对所有数组元素的处理后，其结果将以数组d_C的形式存储在GPU的全局内存中，然后用cudaMemcpy函数把结果从GPU复制回到主机的数组gpuRef中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">cudaMemcpy</span>(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost);<br></code></pre></div></td></tr></table></figure>\n\n<p>cudaMemcpy的调用会导致主机运行阻塞。cudaMemcpyDeviceToHost的作用就是将存储在GPU上的数组d_C中的结果复制到gpuRef中。最后，调用cudaFree释放GPU的内存。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">cudaFree</span>(d_A);<br><span class=\"hljs-built_in\">cudaFree</span>(d_B);<br><span class=\"hljs-built_in\">cudaFree</span>(d_C);<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-不同的存储空间\"><a href=\"#3-不同的存储空间\" class=\"headerlink\" title=\"3.不同的存储空间\"></a>3.不同的存储空间</h3><p>使用CUDA C进行编程的人最常犯的错误就是对不同内存空间的不恰当引用。对于在GPU上被分配的内存来说，设备指针在主机代码中可能并没有被引用。如果你执行了错误的内存分配，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">gpuRef = d_C<br></code></pre></div></td></tr></table></figure>\n\n<p>而不是用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">cudaMemcpy</span>(gpuRef, d_C, nBytes, cudaMemcpyDeviceToHost);<br></code></pre></div></td></tr></table></figure>\n\n<p>应用程序在运行时将会崩溃。</p>\n<p>为了避免这类错误，CUDA6.0提出了统一寻址，使用一个指针来访问CPU和GPU的内存</p>\n<h3 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"4.参考资料\"></a>4.参考资料</h3><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/17/cuda004/",
            "url": "https://xingyuanjie.top/2023/01/17/cuda004/",
            "title": "CUDA编程结构",
            "date_published": "2023-01-17T13:36:04.000Z",
            "content_html": "<h2 id=\"CUDA编程结构\"><a href=\"#CUDA编程结构\" class=\"headerlink\" title=\"CUDA编程结构\"></a>CUDA编程结构</h2><p>CUDA编程模型使用由C语言扩展生成的注释代码在异构计算系统中执行应用程序。</p>\n<p>在一个异构环境中包含多个CPU和GPU，每个GPU和CPU的内存都由一条PCI-Express总线分隔开。因此，需要注意区别以下内容。</p>\n<ol>\n<li>主机：CPU及其内存（主机内存）</li>\n<li>设备：GPU及其内存（设备内存）</li>\n</ol>\n<p>为了清楚地指明不同的内存空间，在本书的示例代码中，主机内存中的变量名以h__为前缀，设备内存中的变量名以d__为前缀。</p>\n<p>从CUDA6.0开始，NVDIA提出了名为“统一寻址”（Unified Memory）的编程模型的改进，它连接了主机内存和设备内存空间，可使用单个指针访问CPU和GPU内存，无须彼此之间手动拷贝数据。现在，重要的是应学会如何为主机和设备分配内存空间以及如何在CPU和GPU之间拷贝共享数据。这种程序员管理模式控制下的内存和数据可以优化应用程序并实现硬件系统利用率的最大化。</p>\n<p>内核（kernel）是CUDA编程模型的一个重要组成部分，其代码在GPU上运行。作为一个开发人员，你可以串行的执行核函数。在此背景下，CUDA的调度管理程序员在GPU线程上编写核函数。在主机上，基于应用程序数据以及GPU的性能定义如何让设备实现算法功能。这样做的目的是使你专注于算法的逻辑（通过编写串行代码），且在创建和管理大量的GPU线程时不必拘泥于细节。</p>\n<p>多数情况下，主机可以独立地对设备进行操作。内核一旦被启动，端粒权立刻返回给主机，释放CPU来执行由设备上运行的并行代码实现的额外的任务。CUDA编程模型主要是异步的，因此在GPU上进行的运算可以与主机-设备通信重叠。一个典型的CUDA程序包括由并行代码互补的串行代码。如图2-2所示，串行代码（及任务并行代码）在主机CPU上执行，而并行代码在GPU上执行。主机代码按照ANSI C标准进行编写，而设备代码使用CUDA C进行编写。你可以将所有的代码统一放在一个源文件中，也可以使用多个源文件来构建应用程序和库。NVIDIA的C编译器(nvcc)为主机和设备生成可执行代码。</p>\n<p>一个典型的CUDA程序实现流程遵循以下模式</p>\n<ol>\n<li>把数据从CPU内存拷贝到GPU内存</li>\n<li>调用核函数对存储在GPU内存中的数据进行操作</li>\n<li>将数据从GPU内存传送回到CPU内存</li>\n</ol>\n<p>首先，你要学习的是内存管理及主机和设备之间的数据传输。</p>\n<p><img src=\"/2023/01/17/cuda004/image-20230117220146068.png\" alt=\"image-20230117220146068\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/17/cuda003/",
            "url": "https://xingyuanjie.top/2023/01/17/cuda003/",
            "title": "CUDA编程模型概述",
            "date_published": "2023-01-17T12:29:01.000Z",
            "content_html": "<h2 id=\"CUDA编程模型概述\"><a href=\"#CUDA编程模型概述\" class=\"headerlink\" title=\"CUDA编程模型概述\"></a>CUDA编程模型概述</h2><p>CUDA编程模型提供了一个计算机架构抽象作为应用程序和其可用硬件之间的桥梁。图2-1说明了程序和编程模型实现之间的抽象结构的重要。通信抽象是程序与编程模型实现之间的分界线，它通过专业的硬件原语和操作系统的编译器或库来实现。利用编程模型所编写的程序指定了程序的各组成部分是如何共享信息及相互协作的。编程模型从逻辑上提供了一个特定的计算机架构，通常它体现在编程语言或编程环境中。</p>\n<p><img src=\"/2023/01/17/cuda003/image-20230117203406633.png\" alt=\"image-20230117203406633\"></p>\n<p>除了与其他并行编程模型共有的抽象外，CUDA编程模型还利用GPU架构的计算能力提供了以下几个特有功能。</p>\n<ol>\n<li>一种通过层次结构在GPU中组织线程的方法</li>\n<li>一种通过层次结构在GPU中访问内存的方法</li>\n</ol>\n<p>以程序员的角度可以从以下几个不同的层面来看待并行计算。</p>\n<ol>\n<li>领域层</li>\n<li>逻辑层</li>\n<li>硬件层</li>\n</ol>\n<p>在编程与算法设计的过程中，你最关心的应是在领域层如何解析数据和函数，以便在并行环境中能正确，高效地解决问题。当进入编程阶段，你的关注点应转向如何组织并发线程。在这个阶段，你需要从逻辑层面来思考，以确保你的线程和计算能正确地解决问题。在C语言并行编程中，需要使用pthreads或OpenMP技术来显式地管理线程。CUDA提出了一个线程层次结构抽象的概念，以允许控制线程行为。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/16/cuda002/",
            "url": "https://xingyuanjie.top/2023/01/16/cuda002/",
            "title": "CUDA:一种异构计算平台",
            "date_published": "2023-01-16T09:46:48.000Z",
            "content_html": "<h2 id=\"CUDA-一种异构计算平台\"><a href=\"#CUDA-一种异构计算平台\" class=\"headerlink\" title=\"CUDA:一种异构计算平台\"></a>CUDA:一种异构计算平台</h2><h3 id=\"1-CUDA的简单介绍\"><a href=\"#1-CUDA的简单介绍\" class=\"headerlink\" title=\"1.CUDA的简单介绍\"></a>1.CUDA的简单介绍</h3><p>CUDA是一种通用的并行计算平台和编程模型，它利用NVIDIA GPU中的并行计算引擎能够有效地解决复杂的计算问题。通过使用CUDA，你可以像在CPU上，通过GPU来进行计算。</p>\n<p>CUDA平台可以通过CUDA加速库，编译器指令，应用编程接口以及行业标准程序语言的扩展（包括C,C++,Fortran，Python，如图1-12所示）来使用。</p>\n<p>CUDA C是标准ANSI C语言的一个扩展，它带有的少数语言扩展功能使异构编程成为可能，同时也能通过API来管理设备，内存和其他任务。CUDA还是一个可扩展的编程模型，它使程序能对有不同数量核的GPU明显地扩展其并行性，同时对熟悉C编程语言的程序员来说也比较容易上手。</p>\n<p><img src=\"/2023/01/16/cuda002/image-20230116175503342.png\" alt=\"image-20230116175503342\"></p>\n<p>CUDA提供了两层API来管理GPU设备和组织线程，如图1-13所示。</p>\n<p><img src=\"/2023/01/16/cuda002/image-20230116175610403.png\" alt=\"image-20230116175610403\"></p>\n<p>-CUDA驱动API</p>\n<p>-CUDA运行时API</p>\n<p>驱动API是一种低级API，它相对来说较难编程，但是它对于在GPU设备使用上提供了更多的控制。运行时API是一个高级API，他在驱动API的上层实现。每个运行时API函数都被分解为更多传给驱动API的基本运算。</p>\n<h3 id=\"2-运行时API与驱动API\"><a href=\"#2-运行时API与驱动API\" class=\"headerlink\" title=\"2.运行时API与驱动API\"></a>2.运行时API与驱动API</h3><p>运行时API和驱动API之间没有明显的性能差异。在设备端，内核是如何使用内存以及你是如何组织线程的，对性能有更显著的影响。</p>\n<p>这两种API是相互排斥的，你必须使用两者之一，从两者中混合函数调用是不可能的。本书中所有例子都使用运行时API。</p>\n<p>一个CUDA程序包含了以下两个部分的混合。</p>\n<p>-在CPU上运行的主机代码</p>\n<p>-在GPU上运行的设备代码</p>\n<p>NVIDIA的CUDA nvcc编译器在编译过程中将设备代码从主机代码中分离出来。如图1-14所示，主机代码是标准的C代码，使用C编译器进行编译。设备代码，也就是核函数，是用扩展的带有标记数据并行函数关键字的CUDA C语言编写的。设备代码通过nvcc进行编译。在链接阶段，在内核程序调用和显示GPU设备操作中添加CUDA运行时库。</p>\n<p><img src=\"/2023/01/16/cuda002/image-20230116180725596.png\" alt=\"image-20230116180725596\"></p>\n<p>CUDA nvcc编译器是以广泛使用LLVM开源编译系统为基础的。在GPU加速器的支持下，通过使用CUDA编译器SDK，你可以创建或扩展编程语言，如图1-15所示。</p>\n<p>CUDA平台也是支持多样化并行计算生态系统的基础，如图1-26所示。现在，随着越来越多的公司可以提供全球性的工具，服务和解决方案，CUDA生态系统迅速成长。如果你想在GPU上建立你的应用程序，强化GPU性能最简单方式是使用CUDA工具包（cuda-toolkit），它为C和C++开发人员提供了一个综合的开发环境。CUDA工具包包括编译器，数学库，以及调式和优化应用程序性能的工具。同时提供了代码样例，编程指南，用户手册，API参考文档和其他帮助你入门的文档。</p>\n<p><img src=\"/2023/01/16/cuda002/image-20230116181439404.png\" alt=\"image-20230116181439404\"></p>\n<p><img src=\"/2023/01/16/cuda002/image-20230116181447616.png\" alt=\"image-20230116181447616\"></p>\n<h3 id=\"3-参考资料\"><a href=\"#3-参考资料\" class=\"headerlink\" title=\"3.参考资料\"></a>3.参考资料</h3><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/16/cuda001/",
            "url": "https://xingyuanjie.top/2023/01/16/cuda001/",
            "title": "CUDA用GPU输出Hello World",
            "date_published": "2023-01-16T08:58:39.000Z",
            "content_html": "<h2 id=\"用GPU输出Hello-World\"><a href=\"#用GPU输出Hello-World\" class=\"headerlink\" title=\"用GPU输出Hello World\"></a>用GPU输出Hello World</h2><h3 id=\"1-检查环境\"><a href=\"#1-检查环境\" class=\"headerlink\" title=\"1.检查环境\"></a>1.检查环境</h3><p>学习一个新编程语言的最好方式就是使用这种语言来编写程序。在本节，你将开始编写在GPU上运行的第一个内核代码。像其他任何编程语言一样编写GPU上的第一个程序是输出字符串“Hello World”。</p>\n<p>如果这是你第一次使用CUDA,在Linux系统中，你可以想使用以下命令来检查CUDA编译器是否正确安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">which nvcc<br></code></pre></div></td></tr></table></figure>\n\n<p>通常的结果可能是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">/usr/local/cuda/bin/nvcc<br></code></pre></div></td></tr></table></figure>\n\n<p>你还需要检查你的机器上是否安装了GPU加速卡。对吃你可以在Linux系统上使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">ls -l /dev/nv*<br></code></pre></div></td></tr></table></figure>\n\n<p>通常的结果是：</p>\n<p><img src=\"/2023/01/16/cuda001/image-20230116170920773.png\" alt=\"image-20230116170920773\"></p>\n<p>在这个例子中，你发现了两个GPU卡（不同的用户配置可能有所不同，因此显示结果会有所差异）。</p>\n<h3 id=\"2-第一个CUDA-C程序\"><a href=\"#2-第一个CUDA-C程序\" class=\"headerlink\" title=\"2.第一个CUDA C程序\"></a>2.第一个CUDA C程序</h3><p>现在你要准备好写你的第一个CUDA C程序。写一个CUDA C程序，你需要以下几个步骤：</p>\n<ol>\n<li>用专用扩展名.cu来创建一个源文件。</li>\n<li>使用CUDA nvcc编译器来编译程序。</li>\n<li>从命令行运行可执行文件，这个文件有可在GPU上运行的内核代码。</li>\n</ol>\n<p>首先，我们编写一个C语言程序来输出“Hello World”,如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello World from CPU!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>把代码保存到hello.cu中，然后使用nvcc编译器来编译。CUDA nvcc编译器和gcc编译器及其他编译器有相似的语义</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc hello.cu -o hello<br></code></pre></div></td></tr></table></figure>\n\n<p>如果你运行可执行文件hello，将会输出：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs angelscript\">Hello World <span class=\"hljs-keyword\">from</span> CPU!<br></code></pre></div></td></tr></table></figure>\n\n<p>接下来，编写一个内核函数，命名为helloFromGPU，用它来输出字符串“Hello World from GPU!”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">__global__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">helloFromGPU</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello World from GPU!\\n&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>修饰符__global__告诉编译器这个函数将会从CPU中调用，然后在GPU上执行。用下面代码启用内核函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">helloFromGPU&lt;&lt;&lt;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>&gt;&gt;&gt;();<br></code></pre></div></td></tr></table></figure>\n\n<p>三重尖括号意味着从主线程到设备端代码的调用。一个内核函数通过一组线程来执行，所有线程执行相同的代码。三重尖括号里面的参数是执行配置，用来说明使用多少线程来执行内核函数。在这个例子中，有10个GPU线程被调用。综上所述，得到代码清单1-1所示的程序。</p>\n<h3 id=\"3-代码清单1-1Hello-World-from-GPU-hello-cu\"><a href=\"#3-代码清单1-1Hello-World-from-GPU-hello-cu\" class=\"headerlink\" title=\"3.代码清单1-1Hello World from GPU! (hello.cu)\"></a>3.代码清单1-1Hello World from GPU! (hello.cu)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\">__global__ <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">helloFromGPU</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello World from GPU!\\n&quot;</span>);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-comment\">//hello from cpu</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello World from CPU!\\n&quot;</span>);<br>    <br>    <br>    helloFromGPU&lt;&lt;&lt;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>&gt;&gt;&gt;();<br>    <span class=\"hljs-built_in\">cudaDeviceReset</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>函数cudaDeviceRest（）用来显式地释放和清空当前进程中与当前设别有关的所有资源。如下所示，在nvcc命令行中使用-arch sm_20进行编译：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nvcc -arch sm_20 hello.cu -o hello<br></code></pre></div></td></tr></table></figure>\n\n<p>开关语句-arch sm_20使编译器为Fermi架构生成设备代码。运行这个可执行文件，它将输出10条字符串“Hello World from CPU!”，每个线程输出一条。</p>\n<p><img src=\"/2023/01/16/cuda001/image-20230116173446169.png\" alt=\"image-20230116173446169\"></p>\n<h3 id=\"4-一个典型的CUDA编程结构包括5个主要步骤\"><a href=\"#4-一个典型的CUDA编程结构包括5个主要步骤\" class=\"headerlink\" title=\"4.一个典型的CUDA编程结构包括5个主要步骤\"></a>4.一个典型的CUDA编程结构包括5个主要步骤</h3><ol>\n<li>分配GPU内存</li>\n<li>从CPU内存中拷贝数据到GPU内存</li>\n<li>调用CUDA内核函数来完成程序指定的运算</li>\n<li>将数据从GPU拷回CPU内存</li>\n<li>释放GPU内存空间</li>\n</ol>\n<p>在hello.cu中，你只看到了第三步：调用内核。</p>\n<h3 id=\"5-参考资料\"><a href=\"#5-参考资料\" class=\"headerlink\" title=\"5.参考资料\"></a>5.参考资料</h3><p>CUDA C编程权威指南 程润伟，Max Grossman(美)，Ty Mckercher </p>\n",
            "tags": [
                "CUDA"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/14/openmp006/",
            "url": "https://xingyuanjie.top/2023/01/14/openmp006/",
            "title": "OpenMP生产者消费者问题(未完结)",
            "date_published": "2023-01-14T14:30:05.000Z",
            "content_html": "<h2 id=\"OpenMP生产者消费者问题\"><a href=\"#OpenMP生产者消费者问题\" class=\"headerlink\" title=\"OpenMP生产者消费者问题\"></a>OpenMP生产者消费者问题</h2><p><strong>本节将讨论一个不适合用parallel for指令或者for指令来并行化的问题。</strong></p>\n<h3 id=\"1-队列\"><a href=\"#1-队列\" class=\"headerlink\" title=\"1.队列\"></a>1.队列</h3><p>队列是一种抽象的数据结构，插入元素时将元素插入到队列“尾部”，而读取元素时，队列“头部”的元素被返回并从队列中被移除。队列可以看做是在超市中等待付款的消费者的抽象，队列中的元素是消费者。新的消费者到达时排在等待队列的尾部，下一个付款离开等待队列的是排在队列头部的消费者。</p>\n<p>当一个新的元素插入到队列的尾部时，通常称这个新的元素“入队”了；当一个元素从队列的头部被移除时，通常称这个元素“出队”了。</p>\n<p>队列在计算机科学中随处可见。例如，如果有多个进程，每个进程都试图向硬盘写入数据，为了确保每次只有一个进程在写硬盘，一种自然而然的方法是将进程组织为队列。换句话说，排在队列第一个的进程在当前进程结束对硬盘的使用后，第一个获得硬盘的访问权限；排在队列第二个的进程在排在队列第一个的进程使用完硬盘后获得硬盘的访问权限，依此类推。</p>\n<p>队列也是在多线程应用程序中经常使用到的数据结构。例如，我们有几个“生产者”线程和几个“消费者”线程。生产者线程“产生”对服务器数据的请求———例如当前股票的价格，而消费者线程通过发现和生成数据（例如，当前股票的价格）来“消费”请求。生产者线程将请求入队，而消费者线程将请求从队列中移除。在这个例子中，只有当消费者线程将请求的数据发送给生产者线程时，进程才会结束。</p>\n<h3 id=\"2-消息传递\"><a href=\"#2-消息传递\" class=\"headerlink\" title=\"2.消息传递\"></a>2.消息传递</h3><p>生产者和消费者问题模型的另外一个应用是在共享内存系统上实现消息传递。每一个线程有一个消息共享队列，当一个线程要向另一个线程“发送消息“时，他将消息放入目标线程的消息队列中。一个线程接受消息时只需从它的消息队列的头部取出消息。</p>\n<p>这里我们将实现一个简单的消息传递程序，在这个程序中，每个线程随机产生整数”消息“和消息的日志目标线程。当创建一条消息后，线程将消息加入到合适的消息队列中。当发送消息之后，该线程查看它自己的消息队列以获知它是否收到了消息，如果它收到了消息，它将从队首的消息出队并打印该消息。每个线程交替发送和接受消息，用户需要指定每个线程发送消息的数目。当一个线程发送完所有消息后，该线程不断接受消息直到所有的线程都已完成，此时所有的线程都结束了。每个线程的伪代码如下。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(send_msgs = <span class=\"hljs-number\">0</span>; sent_msgs &lt; send_max ;sent_msgs++)&#123;<br>    <span class=\"hljs-built_in\">Send_msg</span>();<br>    <span class=\"hljs-built_in\">Try_receive</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">Done</span>())<br>    <span class=\"hljs-built_in\">Try_receive</span>();<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-发送消息\"><a href=\"#3-发送消息\" class=\"headerlink\" title=\"3.发送消息\"></a>3.发送消息</h3><p>需要注意的是，访问消息队列并将消息入队，可能是一个临界区。尽管我们还没有深入地研究如何实现消息队列，但我们很有可能需要用一个变量来跟踪队列的尾部。例如，使用一个单链表来实现消息队列，链表的尾部对应着队列的尾部。然后，为了有效地进行入队操作，需要存储指向链表尾部的指针，当一条新消息入队时，需要检查和更新这个队尾指针。如果两个线程试图同时进行这些操作，那么可能会丢失一条已经由其中一个线程入队的消息.（画张图能够有助于理解这种情况！）两个操作的结果会发生冲突，因此入队操作形成了临界区。</p>\n<p>Send_msg()函数的伪代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">mesg = <span class=\"hljs-built_in\">random</span>();<br>dest = <span class=\"hljs-built_in\">random</span>() % thread_count;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp critical</span><br><span class=\"hljs-built_in\">Enqueue</span>(queue,dest,my_rank.mesg);<br></code></pre></div></td></tr></table></figure>\n\n<p>注意在上面的实现中，允许线程向它自己发送消息。</p>\n<h3 id=\"4-接受消息\"><a href=\"#4-接受消息\" class=\"headerlink\" title=\"4.接受消息\"></a>4.接受消息</h3><p>接受消息的同步问题与发送消息有些不同。只有消息队列的拥有者（即目标线程）可以从给定的消息队列中获取消息。如果消息队列中至少有两条消息，那么只要每次只出队一条消息，那么出队操作和入队操作就不可能冲突。因此如果队列中至少有两条消息，通过跟踪队列的大小就可以避免任何同步（例如critical指令）</p>\n<p>现在的问题是如何存储队列大小。如果只使用一个变量来存储队列的大小，那么对该变量的操作会形成临界区。然而可以使用两个变量：enqueued和dequeued，那么队列中消息的个数（队列的大小）就为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">queue_size = enqueued - dequeued<br></code></pre></div></td></tr></table></figure>\n\n<p>并且，唯一能够更新dequeued的线程是消息队列的拥有者。可以看到在一个线程使用enqueued计算队列大小queue_size的同时，另外一个线程可以更新enqueued。为了解释这种情况，假如进程q正在计算queue_size，那么它将可能得到enqueued新的或者旧的值。当queue_size实际值是1或者2时，线程q可能会得到queue_size是0或者1。但这只会引起程序一定的延迟，而不会引起程序错误。如果queue_size本应该是1，却误计算为0，那么线程q延迟一段时间后会试图重新计算队列的大小；如果queue_size本应该是2，却误计算为1，那么线程q将执行临界区指令，虽然这本来是不必要的。</p>\n<p>因此，可以按照如下的方式实现Try_receive:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">queue_size = enqueued - dequeued;<br><span class=\"hljs-keyword\">if</span>(queue_size == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(queue_size == <span class=\"hljs-number\">1</span>)<br>    \t<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp critical</span><br>    \t<span class=\"hljs-built_in\">Dequeue</span>(queue,&amp;src,&amp;mesg);<br>\t<span class=\"hljs-keyword\">else</span><br>    \t<span class=\"hljs-built_in\">Dequeue</span>(queue,&amp;src,&amp;mesg);<br>\t<span class=\"hljs-built_in\">Print_message</span>(src,mesg);<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-终止检测\"><a href=\"#5-终止检测\" class=\"headerlink\" title=\"5.终止检测\"></a>5.终止检测</h3><p>接下来，我们探讨如何实现Done函数。首先，我们给出一个”直接“的实现，但这个实现隐藏着问题：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">queue_size = enqueued - dequeued;<br><span class=\"hljs-keyword\">if</span>(queue_size == <span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-keyword\">return</span> True;<br><span class=\"hljs-keyword\">else</span><br>    <span class=\"hljs-keyword\">return</span> False;<br></code></pre></div></td></tr></table></figure>\n\n<p>如果线程u执行这段代码，那么很有可能有些线程，如线程v，在线程u计算出queue_size &#x3D; 0后向线程u发送一条消息。当然，线程u在得出queue_size &#x3D; 0后将终止，那么线程v发送给它的消息就永远不会被接受到。</p>\n<p>然而，在我们程序中，每个线程在执行完for循环后将不再发送任何消息。因此可以增加一个计数器done_sending，每个线程在for循环结束后将该计数器加1，Done的实现如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">queue_size = enqueued - dequeued;<br><span class=\"hljs-keyword\">if</span>(queue_size == <span class=\"hljs-number\">0</span> &amp;&amp; done_sending == thread_count)<br>    <span class=\"hljs-keyword\">return</span> TRUE;<br><span class=\"hljs-keyword\">else</span><br>    rerun FALSE;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6.启动\"></a>6.启动</h3><p>当程序开始执行时，主线程将得到命令行参数并且分配一个数组空间给消息队列，每个线程对应着一个消息队列。由于每个线程可以向其他任意的下次线程发送消息，所以这个数组应该被所有线程共享，而且每个线程可以向任何一个消息队列插入一条消息。消息队列（至少）可以存储：</p>\n<ol>\n<li>消息列表</li>\n<li>队尾指针或索引</li>\n<li>队首指针或索引</li>\n<li>入队消息的数目</li>\n<li>出队消息的数目</li>\n</ol>\n<p>最好将队列存在消息队列的结构体中，为了减少参数传递时复制的开销，最好用指向结构体的指针数组来实现消息队列。因此，一旦主线程分配了队列数组，就可以使用parallel指令开始执行线程，每个线程可以为自己的队列分配存储空间。</p>\n<p>这里一个重要的问题是：一个或者多个线程可能在其他线程之前完成它的队列分配。如果这种情况出现了，那么完成分配的线程可能会试图开始向那些还没有完成队列分配的线程发送消息，这将导致程序崩溃。因此，我们必须确保任何一个线程都必须在所有的线程都完成了队列分配后才开始发送消息。回想一下，之前我们见过一些OpenMP指令在结束时提供隐式路障，即任何一个线程都必须等到组中所有的线程完成了某个程序块后才可以接着执行后续代码。然而，在这个例子中，我们处于parallel块的中间，所以我们不能依赖于OpenMP提供的隐式路障——我们应当使用显式路障。幸运的是，OpenMP提供了相应的指令：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp barrier</span><br></code></pre></div></td></tr></table></figure>\n\n<p>当线程遇到路障时，它将被阻塞，直到组中所有的线程都到达了这个路障。当组中所有的线程都到达了这个路障时，这些线程就可以接着往下执行。</p>\n<h3 id=\"7-atomic指令\"><a href=\"#7-atomic指令\" class=\"headerlink\" title=\"7.atomic指令\"></a>7.atomic指令</h3><p>发送完所有的消息后，每个线程在执行最后的循环以便接受消息之前，需要对done_sending加1.显然，对done_sending的增量操作是临界区，可以通过critical指令来保护它。然后，OpenMP提供了另外一种可能更加高效的指令：atomic指令：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp atomic</span><br></code></pre></div></td></tr></table></figure>\n\n<p>与critical指令不同，它只能保护由一条C语言赋值语句所形成的临界区。此外，语句必须是一下几种形式之一：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">x &lt;op&gt; = &lt;expression&gt;<br>x++;<br>++x;<br>x--;<br>--x;<br></code></pre></div></td></tr></table></figure>\n\n<p><op>可以是以下任意的二元操作符：</op></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">+,*,-,/,&amp;,|,^,&lt;&lt;,<span class=\"hljs-keyword\">or</span> &gt;&gt;<br></code></pre></div></td></tr></table></figure>\n\n<p>这里要记住，<expression>不能引用x。</expression></p>\n<p>需要注意的是，只有x的装载和存储可以确保是受保护的，例如在下面的代码中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp atomic</span><br>x += y++;<br></code></pre></div></td></tr></table></figure>\n\n<p>其他线程对x的更新必须等到该线程对x的更新结束之后。但是对y的更新不受保护，因此程序的结果是不可预测的。</p>\n<p>atomic指令的思想是许多处理器提供专门的装载-修改-存储(load-modify-store)指令。使用这种专门的指令而不使用保护临界区的通用结构，可以更高效地保护临界区。</p>\n<h3 id=\"8-临界区和锁\"><a href=\"#8-临界区和锁\" class=\"headerlink\" title=\"8.临界区和锁\"></a>8.临界区和锁</h3><p>为了完成对消息传递程序的讨论，我们需要进一步仔细研究OpenMP critical指令的规范。在更早的例子中，程序最多只有一个临界区，critical指令强制所有的线程对该区域进行互斥访问。在这个程序中，临界区的使用将更加复杂。我们将在源代码中看到3个在critical或atomic指令后面的代码块：</p>\n<ol>\n<li>done_sending++</li>\n<li>Enqueue(q_p,my_rank,mesg);</li>\n<li>Dequeue(q_p,&amp;src,&amp;mesg);</li>\n</ol>\n<p>然而，我们不需要强制对3个代码块都进行互斥访问，甚至不需要强制对第二个和第三个代码块进行完全的互斥访问。例如，线程0在向线程1的消息队列写消息的同时，线程1可以向线程2的消息队列写消息。但是OpenMP的规定第二个和第三个代码块是被critical指令保护的代码块。在OpenMP看来，我们的程序有两个不同的临界区；被atomic指令保护的done_sending++和“复合”临界区。在“复合”临界区中，程序读取和发送消息。</p>\n<p>强制线程间的互斥会使程序的执行串行化。OpenMP默认的做法是将所有的临界区代码块作为复合临界区的一部分，这可能非常不利于程序的性能。OpenMP提供了向critical指令添加名字的选项：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp critical(name)</span><br></code></pre></div></td></tr></table></figure>\n\n<p>采取这种方式，两个用不同名字的critical指令保护的代码块就可以同时执行。我们想为每一个线程的消息队列的临界区提供不同的名字，但是临界区的名字是在程序编译过程中设置的。因此，我们需要在程序执行的过程中设置临界区的名字。但是按照为我们的设置，当我们想让访问不同队列的线程可以同时访问相同的代码块时，被命名的critical指令就不能满足我们的要求了。</p>\n<p>解决方案是使用锁（lock）。锁由一个数据结构和定义在这个数据结构上的函数组成，这些函数使得程序员可以显式地强制对临界区进行互斥访问。锁的使用可以大概用下面的伪代码描述：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/*Executed by one thread*/</span><br>initialize the lock data structure;<br>...<br><span class=\"hljs-comment\">/*Executed by multiple threads*/</span><br>Attempt to lock <span class=\"hljs-keyword\">or</span> set the lock data structure;<br>Critical section;<br>Unlock <span class=\"hljs-keyword\">or</span> unset the lock data structure;<br>...<br><span class=\"hljs-comment\">/*Executed by one thread*/</span><br>Destory the lock data structure;<br></code></pre></div></td></tr></table></figure>\n\n<p>锁的数据结构被执行临界区的线程所共享，这些线程中的某个线程（如主线程）会初始化锁。而当所有的线程都使用完锁后，某个线程应当负责销毁锁。</p>\n<p>在一个线程进入临界区前，它尝试通过调用锁函数来上锁（set）。如果没有其他的线程正在执行临界区代码，那么它将获得锁并进入临界区。当该线程执行完临界区代码后，它调用解锁函数释放（relinquish或者unset）锁，以便其他线程可以获得锁。</p>\n<p>当一个线程拥有锁时，其他线程都不能进入该临界区。其他线程尝试通过调用锁函数进入该临界区时会阻塞。如果有多个线程被锁函数阻塞，则当临界区的线程释放锁时，这些线程中的某个线程会获得锁，而其他线程仍被阻塞。</p>\n<p>OpenMP有两种锁：简单（simple）锁和嵌套（nested）锁。简单锁在被释放前只能获得一次，而一个嵌套锁在被释放前可以被同一个线程获得多次。OpenMP简单锁的类型是omp_lock_t，定义简单锁的函数包括：</p>\n<p><img src=\"/2023/01/14/openmp006/image-20230116165204803.png\" alt=\"image-20230116165204803\"></p>\n<p>相关的类型和函数在头文件omp.h中声明。第一个函数的作为是初始化锁，所以此时锁处于解锁状态，换句话说，此时没有线程拥有这个锁。第二个函数尝试获得锁，如果成功，调用该函数的线程可以继续执行；如果失败，调用该函数的线程将被阻塞，直到锁被其他线程释放。第三个函数释放锁，以便其他线程可以获得该锁。第四个函数销毁锁。</p>\n",
            "tags": [
                "OpenMP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/14/openmp005/",
            "url": "https://xingyuanjie.top/2023/01/14/openmp005/",
            "title": "OpenMP循环调度",
            "date_published": "2023-01-14T05:04:25.000Z",
            "content_html": "<h2 id=\"OpenMP循环调度\"><a href=\"#OpenMP循环调度\" class=\"headerlink\" title=\"OpenMP循环调度\"></a>OpenMP循环调度</h2><h3 id=\"1-循环调度\"><a href=\"#1-循环调度\" class=\"headerlink\" title=\"1.循环调度\"></a>1.循环调度</h3><p>当第一次遇到parallel for指令时，我们看到将各次循环分配给线程的操作是由系统完成的。然而，大部分OpenMP实现只是粗略地使用块分割：如果在串行循环中有n次迭代，那么在并行循环中，前n&#x2F;thread_count个迭代分配给线程0，接下来的n&#x2F;thread_count个迭代分配给线程1，依此类推。不难想到，这种分配方式肯定不是最优的。例如，假如我们想要并行化循环：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">sum = <span class=\"hljs-number\">0.0</span>;<br><span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>    sum+=<span class=\"hljs-built_in\">f</span>(i);<br></code></pre></div></td></tr></table></figure>\n\n<p>同时，假设对f函数调用所需要的时间与参数i的大小成正比，那么与分配给线程0的工作相比，分配给线程thread_count-1的工作量相对较大。一个更好的分配方案是轮流分配线程的工作（循环划分）。在循环划分中，各次迭代被“轮流”地一次一个地分配给线程。假如 t&#x3D;thread_count。那么一个循环划分将如下分配各次迭代：</p>\n<p><img src=\"/2023/01/14/openmp005/image-20230114132246596.png\" alt=\"image-20230114132246596\"></p>\n<p>为了了解这样分配是如何影响性能的，我们编写了如下程序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> j,start=i*(i+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>,finish=start+i;<br>    <span class=\"hljs-keyword\">double</span> return_val = <span class=\"hljs-number\">0.0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>(j = start; j&lt;=finish; j++)&#123;<br>        return_val += <span class=\"hljs-built_in\">sin</span>(j);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> return_val;<br>    <span class=\"hljs-comment\">/* f */</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>每当函数f（i）调用i次sin函数。例如，执行f（2i）的时间几乎是执行f（i）的时间的两倍。</p>\n<p>当n&#x3D;10000并且只用一个线程运行程序时，运行时间是3.67秒。当用两个线程和缺省分配方式（第0-5000次迭代分配给线程0，第5001-10000次迭代分配给线程1），运行程序时，运行时间为2.76秒。加速比仅为1.33.然而，当运行两个线程并采用循环划分时，运行时间减少到1.84秒。与单线程运行相比，加速比为1.99；与双线程，块分割相比，加速比为1.5！</p>\n<p>我们看到一个好的迭代分配能够对性能有很大的影响。再OpenMP中，将循环分配给线程称为调度，schedule子句用于在parallel for或者for指令中进行迭代分配。</p>\n<h3 id=\"2-schedule子句\"><a href=\"#2-schedule子句\" class=\"headerlink\" title=\"2.schedule子句\"></a>2.schedule子句</h3><p>在例子中，我们已经知道如何乎获取缺省调度：只需要添加parallel for指令和reduction子句：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">sum=<span class=\"hljs-number\">0.0</span>;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp parallel for num_threads(thread_count) reduction(+:sum)</span><br><span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)&#123;<br>    sum+=<span class=\"hljs-built_in\">f</span>(i);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>为了对线程进行调度，可以添加一个schedule子句到parallel for指令中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">sum=<span class=\"hljs-number\">0.0</span>;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp parallel for num_threads(thread_count) reduction(+:sum)\tschedule(static,1)</span><br><span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)&#123;<br>    sum+=<span class=\"hljs-built_in\">f</span>(i);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>一般而言，schedule子句有如下形式：</p>\n<p>schedule（<type>[.<chunksize>]）</chunksize></type></p>\n<p>type可以是下列任意一个：</p>\n<ol>\n<li>static：迭代能够在循环执行前分配给线程</li>\n<li>dynamic或guided：迭代在循环执行时被分配给线程，因此在一个线程完成了它的当前迭代集合后，它能从运行时系统中请求更多</li>\n<li>auto：编译器和运行时系统决定调度方式</li>\n<li>runtime：调度在运行时决定</li>\n</ol>\n<p>chunksize是一个正整数。在OpenMP中，迭代块是在顺序循环中连续执行的一块迭代语句，块中的迭代次数是chunksize。只有static，dynamic和guided调度有chunksize。这虽然决定了调度的细节，但准确的解释还是依赖于type。</p>\n<h3 id=\"3-stastic调度类型\"><a href=\"#3-stastic调度类型\" class=\"headerlink\" title=\"3.stastic调度类型\"></a>3.stastic调度类型</h3><p>对于static调度，系统以轮转的方式分配chunksize块个迭代给每个线程。例如，假如有12个迭代，0，1，—，11和3个线程，如果在parallel for或for指令中使用schedule（static，1）迭代将如下分配：</p>\n<p><img src=\"/2023/01/14/openmp005/image-20230114141741424.png\" alt=\"image-20230114141741424\"></p>\n<p>如果使用schedule（static，2），迭代将如下进行分配：</p>\n<p><img src=\"/2023/01/14/openmp005/image-20230114141830866.png\" alt=\"image-20230114141830866\"></p>\n<p>如果使用schedule（static，4），迭代将如下分配：</p>\n<p><img src=\"/2023/01/14/openmp005/image-20230114141909092.png\" alt=\"image-20230114141909092\"></p>\n<p>因此，子句schedule（static,total_iterations&#x2F;thread_count）就相当于被大部分OpenMP实现所使用的缺省调度。</p>\n<p>这里，chunksize可以被忽略。如果他被忽略了，chunksize就近似等于total_iterations&#x2F;thread_count。</p>\n<h3 id=\"4-dynamic和guided调度类型\"><a href=\"#4-dynamic和guided调度类型\" class=\"headerlink\" title=\"4.dynamic和guided调度类型\"></a>4.dynamic和guided调度类型</h3><p>在dynamic调度中，迭代也被分成chunksize个连续迭代的块。每个线程执行一块，并且当一个线程完成一块时，它将从运行时系统请求另一块，直到所有的迭代完成。chunksize可以被忽略。当它被忽略时，chunksize为1。</p>\n<p>在guided调度中，每个线程也执行一块，并且当一个线程完成一块时，将请求另一块。然而，在guided调度中，当块完成后，新块的大小会变小。例如，在我们的系统中，如果用parallel for指令和schedule（guided）子句来运行梯形积分法程序，那么当n&#x3D;10000并且thread_count&#x3D;2时。迭代将如表5-3那样分配。块的大小近似等于剩下的迭代数除以线程数。第一个块的大小9999&#x2F;2≈5000，因为有9999个迭代未被分配的迭代。第二个块的大小为4999&#x2F;2≈2500，一次类推。</p>\n<p><img src=\"/2023/01/14/openmp005/image-20230114143233692.png\" alt=\"image-20230114143233692\"></p>\n<p>在guided调度中，如果没有指定chunksize，那么块的大小为1；如果指定了chunksize，那么块的大小就是chunksize，除了最后一块的大小可以比chunksize小。</p>\n<h3 id=\"5-runtime调度类型\"><a href=\"#5-runtime调度类型\" class=\"headerlink\" title=\"5.runtime调度类型\"></a>5.runtime调度类型</h3><p>为了理解schedule（runtime），我们需要离题一会儿，讨论一下环境变量。正如名字所暗示的，环境变量是能够被运行时系统所访问的命名值，即它们在程序的环境中是可得的。一些经常被使用的环境变量是PATH,HOME和SHELL。PATH变量明确了当寻找一个可执行文件时shell应该搜索哪些目录。它通常在UNIX和Windows系统中定义。HOME变量指定用户主目录的位置，而SHELL变量指定用户shell的可执行位置。这样通常在UNIX系统中。在类UNIX系统（例如Linux和Mac OS X）和Windows，环境变量能够在命令行中检查和指定。在类UNIX系统中，能使用shell命令行；在windows中，能使用集成开发环境的命令行。</p>\n<p>例如，如果我们正使用bash shell，要检查一个环境变量的值只需要输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$PATH</span></span><br></code></pre></div></td></tr></table></figure>\n\n<p>我们能够使用export命令来设置一个环境变量的值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-built_in\">export</span> TEST_VAR = <span class=\"hljs-string\">&quot;hello&quot;</span></span><br></code></pre></div></td></tr></table></figure>\n\n<p>如何检查和设置特定系统的环境变量，请咨询本地系统的专家。</p>\n<p>当schedule（runtime）指定时，系统使用环境变量OMP_SCHEDULE在运行时来决定如何调度循环。OMP_SCHEDULE环境变量会呈现任何能够被static，dynamic或guided调度所使用的值。例如，假设在程序中有一条parallel for指令，并且它已经被schedule（runtime）修改了。那么如果使用bash shell，就能通过执行以下命令将一个循环分配所得到的迭代分配给线程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-built_in\">export</span> OMP_SCHEDULE=<span class=\"hljs-string\">&quot;static,1&quot;</span></span><br></code></pre></div></td></tr></table></figure>\n\n<p>现在，当开始执行程序时，系统将调度for循环的迭代，就如同使用子句schedule（static，1）修改了parallel for指令那样。</p>\n<h3 id=\"6-调度选择\"><a href=\"#6-调度选择\" class=\"headerlink\" title=\"6.调度选择\"></a>6.调度选择</h3><p>如果需要并行化一个for循环，那么我们如何决定使用哪一种电镀和chuncksize的大小？实际上，每一中schedule子句有不同的系统开销。dynamic调度的系统开销要大于static调度，而guided调度的系统开销是三种方式中最大的。因此，如果不使用schedule子句就已经达到了令人满意的性能，就不需要进行多余的工作。但是，如果我们怀疑调度的性能可以提升，那么我们可以对各种调度进行试验。</p>\n<p>在本节开始提供的例子中，在程序使用两个线程的情况下，使用schedule（static，1）代替默认调度时，加速比从1.33提升到1.99。因为在两个线程的条件下，加速比几乎不可能比1.99更好，所以我们可以不用再尝试其他的调度方式，至少在只用两个线程并且迭代数为10000的情况下是这样。如果做更多的试验，改变线程的个数和迭代的次数，我们可能会发现：最优的调度方式是由线程的个数和迭代的次数共同决定的。</p>\n<p>如果我们断定默认的调度方式性能低下，那么我们会做大量的实验来寻找最优的调度方式和迭代次数。在进行了大量的工作以后，我们可能发现，这些循环没有得到很好的并行化，没有哪一种调度可以带来比较显著的性能提升。编程作业5.4就是这样一个例子。</p>\n<p>但在某些情况下，应该优先考虑有些调度：</p>\n<ol>\n<li>如果循环的每次迭代需要几乎相同的计算量，那么可能默认的调度方式能提供最好的性能</li>\n<li>如果随着循环的进行，迭代的计算量线性猛增（或递减），那么采用比较小的chuncksize的static调度可能会提供最好的性能</li>\n<li>如果每次迭代的开销事先不能确定，那么就可能需要尝试使用多种不同的调度策略。在这种情况下，应当使用schedule（runtime）子句，通过富裕环境变量OMP_SCHEDULE不同的值来比较不同调度策略下程序的性能</li>\n</ol>\n<h3 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7.总结\"></a>7.总结</h3><ol>\n<li>调度方式对加速效果的重要性</li>\n<li>合理分析任务特性，选择最适合的调度方式</li>\n</ol>\n<h3 id=\"8-参考资料\"><a href=\"#8-参考资料\" class=\"headerlink\" title=\"8.参考资料\"></a>8.参考资料</h3><p>并行程序导论 （美）Peter S.Pacheco</p>\n",
            "tags": [
                "OpenMP"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/01/13/openmp004/",
            "url": "https://xingyuanjie.top/2023/01/13/openmp004/",
            "title": "OpenMP排序",
            "date_published": "2023-01-13T08:26:51.000Z",
            "content_html": "<h2 id=\"OpenMP排序\"><a href=\"#OpenMP排序\" class=\"headerlink\" title=\"OpenMP排序\"></a>OpenMP排序</h2><h3 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1.冒泡排序\"></a>1.冒泡排序</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(list_length = n; list.length &gt;= <span class=\"hljs-number\">2</span>; list_length--)\t\t\t\t<span class=\"hljs-comment\">//升序排列</span><br>    <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>;i &lt; list_length<span class=\"hljs-number\">-1</span>; i++)<br>        <span class=\"hljs-keyword\">if</span>(a[i] &gt; a[i+<span class=\"hljs-number\">1</span>])&#123;<br>            tmp = a[i];<br>            a[i] = a[i+<span class=\"hljs-number\">1</span>];<br>            a[i+<span class=\"hljs-number\">1</span>] = tmp;<br>        &#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>​\t\t显然，在外部循环中有一个循环依赖，在外部循环的任何一次迭代中，当前列表的内容依赖于外部循环的前一次迭代。例如，如果在算法开始时，a&#x3D;3,4,1,2，那么外部循环的第二次迭代将对列表3，1，2进行操作，因为4在第一次迭代中应该已经被移动到列表的最后了。但如果前两次迭代同时执行，则可能第二次迭代的有效列表包含4。\t</p>\n<p>​\t\t内部循环的循环依赖也很容易发现。在第i次迭代中，被比较的元素依赖于第i-1次迭代。如果在第i-1次迭代中a[i-1]和a[i]没有交换，那么第i次迭代将比较a[i]和a[i+1]。另一方面，如果第i-1次迭代交换了a[i-1]和a[i]，那么第i次迭代将比较原始的a[i-1] (现在是a[i]和a[i+1])。例如，假如当前列表是{3，1，2}。那么当i&#x3D;1时，我们将比较3和2，但如果i&#x3D;0和i&#x3D;1次迭代同时发生，则完全有可能i&#x3D;1次迭代回比较1和2。</p>\n<p>​\t\t我们完全不清楚怎样在不完全重写算法的情况下一处任何一个循环依赖。记住。即使我们总能找到循环依赖，但可能很难甚至不可能移除它。对于并行化for循环而言，parallel for指令不是一个通用的解决方法。</p>\n<h3 id=\"2-奇偶交换排序\"><a href=\"#2-奇偶交换排序\" class=\"headerlink\" title=\"2.奇偶交换排序\"></a>2.奇偶交换排序</h3><p>​\t\t奇偶交换排序是一个与冒泡排序相似的算法，但它相对来说更容易并行化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(phase = <span class=\"hljs-number\">0</span>;phase &lt; n ; phase++)<br>    <span class=\"hljs-keyword\">if</span>(phase % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">1</span>; i &lt; n ;i += <span class=\"hljs-number\">2</span>)<br>            <span class=\"hljs-keyword\">if</span>(a[i<span class=\"hljs-number\">-1</span>] &gt; a[i]) <span class=\"hljs-built_in\">swap</span>(a[i<span class=\"hljs-number\">-1</span>],a[i]);<br>\t<span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">1</span>;i &lt; n<span class=\"hljs-number\">-1</span> ;i += <span class=\"hljs-number\">2</span>)<br>            <span class=\"hljs-keyword\">if</span>(a[i] &gt; a[i+<span class=\"hljs-number\">1</span>]) <span class=\"hljs-built_in\">swap</span>(a[i],a[i+<span class=\"hljs-number\">1</span>]);<br></code></pre></div></td></tr></table></figure>\n\n<p>列表a存储n个整数，算法对他们进行升序排列。在一个“偶阶段”（phase %2 &#x3D;&#x3D;0 ）里，每个偶下标元素a[i]与它左边的元素a[i-1]相比较。如果他们是没有排好序的，就交换它们。在一个“奇阶段”里，每个奇下标元素与它右边的元素相比较。如果他们是没有排好序的，则交换他们。有定理证明：在n个阶段后，列表可以完成排序。</p>\n<p>​\t\t作为一个简单的例子，假设a&#x3D;{9,7,8,6}。表5-1显示了各个阶段的情况。在这个例子中，最后的阶段不是必要的，但算法并不在执行每个阶段前检查列表是否已经有序。</p>\n<p><img src=\"/2023/01/13/openmp004/image-20230113174202896.png\" alt=\"image-20230113174202896\"></p>\n<p>​\t\t不难看到外部循环有一个循环依赖。例如在a &#x3D; {9，7，8，6}之前。在阶段0中，内部循环将比较（9，7）和（8，6）这两对中的元素，这两对都会被交换。因此对于阶段1，列表将是{7，9，6，8}，并在阶段1中（9，6）中的元素被比较并交换。然而，如果阶段0和阶段1同时执行，则在阶段1中被检查可能是（7，8），是有序的。此外，我们尚不清楚如何消除这个循环依赖，因此并行化外部for循环不是一个好的选择。</p>\n<p>​\t\t但是，内部for循环并没有任何循环依赖。例如，在偶阶段循环中，变量i是奇数，所以对于两个不同的i值，例如，i&#x3D;j和i&#x3D;k，{j-1,j}和{k-1,k}将是不同的。（a[j-1],a[j]）和（a[k-1],a[k]）所产生的比较和可能的交换能够同时进行。</p>\n<p>​\t\t所以，我们试图使用程序5-4的代码并行化奇偶变化排序，但还是会有一些潜在的问题，首先，尽管任何一个偶阶段迭代并不依赖任何这个阶段的其他迭代，但是还需要注意，对p阶段和p+1阶段却并不是这样的。我们需要确定在任何一个线程开始p+1阶段之前，所有的线程必须先完成p阶段。然而，像parallel指令那样，parallel for指令在循环结束处有一个隐式的路障，因此，在所有的线程完成当前阶段（即阶段P之前），没有线程能够进入下一阶段，即p+1阶段。【这里需要注意在MPI中并没有隐式的路障来实现这个功能，需要程序员手动设置路障点】</p>\n<p>​\t\t其次，是创建和合并线程的开销。OpenMP实现可能会在每一遍外部循环都创建和合并thread__count个线程。表5-2的第一行显示了当输入列表包含20000个元素时，在我们系统上运行1，2，3，4个线程的运行时间。</p>\n<h3 id=\"3-程序5-4奇偶排序的第一个OpenMP实现\"><a href=\"#3-程序5-4奇偶排序的第一个OpenMP实现\" class=\"headerlink\" title=\"3.程序5-4\t奇偶排序的第一个OpenMP实现\"></a>3.程序5-4\t奇偶排序的第一个OpenMP实现</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(phase = <span class=\"hljs-number\">0</span>;phase &lt; n; phase++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(phase %<span class=\"hljs-number\">2</span> ==<span class=\"hljs-number\">0</span>)<br>    \t<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp parallel for num_threads(thread_count) default(none) shared(a,n) private(i,tmp)</span><br>        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>;i&lt;n;i+=<span class=\"hljs-number\">2</span>)&#123;<br>            <span class=\"hljs-keyword\">if</span>(a[i<span class=\"hljs-number\">-1</span>]&gt;a[i])&#123;<br>                tmp = a[i<span class=\"hljs-number\">-1</span>];<br>                a[i<span class=\"hljs-number\">-1</span>] = a[i];<br>                a[i] =tmp;<br>            &#125;<br>        &#125;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp parallel for num_threads(thread_count) default(none) shared(a,n) private(i,tmp)</span><br>        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>;i&lt;n<span class=\"hljs-number\">-1</span>;i+=<span class=\"hljs-number\">2</span>)&#123;<br>            <span class=\"hljs-keyword\">if</span>(a[i] &gt; a[i+<span class=\"hljs-number\">1</span>])&#123;<br>                tmp = a[i+<span class=\"hljs-number\">1</span>];<br>                a[i+<span class=\"hljs-number\">1</span>] = a[i];<br>                a[i] = tmp;<br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p><img src=\"/2023/01/13/openmp004/image-20230113225724364.png\" alt=\"image-20230113225724364\"></p>\n<p>​\t\t这些时间耗费并不非常糟糕，但是我们想看看是否能做得更好。每次执行内部循环时，使用同样数量的线程。因此只创建一次线程，并在每次内部循环的执行中重用它们，这样做可能更好。幸运的是，OpenMP提供了允许这样做的指令。用parallel指令在外部循环前创建thread__count个线程的集合。然后，我们不在每次内部循环执行时创建一组新的线程，而是使用一个for指令，告诉OpenMP用已有的线程组来并行化for循环，对原有OpenMP实现的改动显示在程序5-5中。</p>\n<h3 id=\"4-程序5-5奇偶排序的第二个OpenMP实现\"><a href=\"#4-程序5-5奇偶排序的第二个OpenMP实现\" class=\"headerlink\" title=\"4.程序5-5\t奇偶排序的第二个OpenMP实现\"></a>4.程序5-5\t奇偶排序的第二个OpenMP实现</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp parallel for num_threads(thread_count) default(none) shared(a,n) private(i,tmp,phase)</span><br><span class=\"hljs-keyword\">for</span>(phase = <span class=\"hljs-number\">0</span>;phase &lt; n; phase++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(phase %<span class=\"hljs-number\">2</span> ==<span class=\"hljs-number\">0</span>)<br>\t\t<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp for</span><br>        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>;i&lt;n;i+=<span class=\"hljs-number\">2</span>)&#123;<br>            <span class=\"hljs-keyword\">if</span>(a[i<span class=\"hljs-number\">-1</span>]&gt;a[i])&#123;<br>                tmp = a[i<span class=\"hljs-number\">-1</span>];<br>                a[i<span class=\"hljs-number\">-1</span>] = a[i];<br>                a[i] =tmp;<br>            &#125;<br>        &#125;<br>    <span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> omp for</span><br>        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>;i&lt;n<span class=\"hljs-number\">-1</span>;i+=<span class=\"hljs-number\">2</span>)&#123;<br>            <span class=\"hljs-keyword\">if</span>(a[i] &gt; a[i+<span class=\"hljs-number\">1</span>])&#123;<br>                tmp = a[i+<span class=\"hljs-number\">1</span>];<br>                a[i+<span class=\"hljs-number\">1</span>] = a[i];<br>                a[i] = tmp;<br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>与parallel for指令不同的是，for指令并不创建任何线程。它使用已经在parallel块中创建的线程。在循环的末尾有一个隐式的路障。代码的结果（最终列表）将因此与原有的并行化代码所取得到的结果一样。</p>\n<p>​\t\t奇偶排序的第二个版本的运行时间显示在表5-2的第二行。当使用两个或更多线程时，使用两条for指令的版本要比使用两条parallel for指令的版本快17%。因此对于这个系统而言，为这点改变所做的小小努力是值得的。</p>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h3><ol>\n<li>循环依赖总会出现，我们可能会很难去解决它甚至根本无法解决。</li>\n<li>在构造并行区时要尽量减少创建和合并线程的开销</li>\n</ol>\n<h3 id=\"6-参考文献\"><a href=\"#6-参考文献\" class=\"headerlink\" title=\"6.参考文献\"></a>6.参考文献</h3><p>并行程序导论 （美）Peter S.Pacheco</p>\n",
            "tags": [
                "OpenMP"
            ]
        }
    ]
}