<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xingyuanjie.top</id>
    <title>Amicoyuan • Posts by &#34;operating system&#34; category</title>
    <link href="https://xingyuanjie.top" />
    <updated>2023-02-28T11:45:09.000Z</updated>
    <category term="AVX" />
    <category term="Data Structure" />
    <category term="String" />
    <category term="Find" />
    <category term="STL" />
    <category term="C++" />
    <category term="Set" />
    <category term="团体程序设计天梯赛" />
    <category term="Sort" />
    <category term="LinkList" />
    <category term="双向链表" />
    <category term="Graph" />
    <category term="邻接表" />
    <category term="Vector" />
    <category term="Binary tree" />
    <category term="BFS" />
    <category term="模拟" />
    <category term="邻接矩阵" />
    <category term="DFS" />
    <category term="结构体" />
    <category term="贪心" />
    <category term="并查集" />
    <category term="Double类型相等比较" />
    <category term="Map" />
    <category term="Pair" />
    <category term="CMU" />
    <category term="CSAPP" />
    <category term="CUDA" />
    <category term="Linux" />
    <category term="Tensorflow" />
    <category term="Machine Learning" />
    <category term="MPI" />
    <category term="Matrix" />
    <category term="GEMM" />
    <category term="AVX2" />
    <category term="blas" />
    <category term="gemm" />
    <category term="gemv" />
    <category term="dgemm" />
    <category term="Cache" />
    <category term="Blocking" />
    <category term="C/C++" />
    <category term="Intel" />
    <category term="LeetCode" />
    <category term="双指针" />
    <category term="数组翻转" />
    <category term="哈希表" />
    <category term="前缀和" />
    <category term="Travel" />
    <category term="Mirror" />
    <category term="牛客" />
    <category term="Numactl" />
    <category term="OpenMP" />
    <category term="register" />
    <category term="Slurm" />
    <category term="性能分析工具" />
    <category term="gcov" />
    <category term="bool" />
    <entry>
        <id>https://xingyuanjie.top/2023/02/28/Linux004/</id>
        <title>C/C++关键字之restrict</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/28/Linux004/"/>
        <content type="html">&lt;h1 id=&#34;C-x2F-C-关键字之restrict&#34;&gt;&lt;a href=&#34;#C-x2F-C-关键字之restrict&#34; class=&#34;headerlink&#34; title=&#34;C&amp;#x2F;C++关键字之restrict&#34;&gt;&lt;/a&gt;C&amp;#x2F;C++关键字之restrict&lt;/h1&gt;&lt;p&gt;在C语言中，restrict关键字用于修饰指针（C99标准）。通过加上restrict关键字，程序员可提示编译器：在该指针的生命周期内，其指向的对象不会被别的指针所引用。&lt;/p&gt;
&lt;p&gt;需要注意的是，在C++中，并无明确统一的标准支持restrict关键字。但是很多编译器实现了功能相同的关键字，例如gcc和clang中的__restrict关键字。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;add1函数的返回值会永远是10 + 12 &amp;#x3D; 22吗？&lt;/p&gt;
&lt;p&gt;答案是不一定。在指针a和b的地址不同时，返回22没有问题。但是当指针a与b指向的是同一个int对象时，该对象先被赋值为10，后被赋值为12，因此a和b都返回12，因此add1函数最终返回24。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* c;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* d;&lt;br&gt;    d=(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)*&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    c=(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;)*&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    *c=&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *d=&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    *d=&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c:&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;*c&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d:&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;*d&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;When Pointers a and b have different addresses&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;add1&lt;/span&gt;(c,d)&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;When Pointers a and b have the same address&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;endl;&lt;br&gt;    cout&amp;lt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;add1&lt;/span&gt;(c,c)&amp;lt;&amp;lt;endl;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;程序输出：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;c:&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;d:&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;When Pointers a &lt;span class=&#34;hljs-keyword&#34;&gt;and&lt;/span&gt; b have different addresses&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;&lt;br&gt;When Pointers a &lt;span class=&#34;hljs-keyword&#34;&gt;and&lt;/span&gt; b have the same address&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;开启-O3优化，add1对应的汇编代码如下:&lt;/p&gt;
&lt;p&gt;为了得到&lt;code&gt;*a&lt;/code&gt;的值访问了1次内存，而不管在何种条件下(&lt;code&gt;a == b&lt;/code&gt; or &lt;code&gt;a != b&lt;/code&gt;)，&lt;code&gt;*b&lt;/code&gt;的值都是12。因此编译器将&lt;code&gt;*a&lt;/code&gt;的值载入&lt;code&gt;eax&lt;/code&gt;寄存器后，直接加上立即数12，而无需再访问内存获取&lt;code&gt;*b&lt;/code&gt;的值。在无法确定指针a和b是否相同的情况下，编译器只能帮你优化到这里了。&lt;/p&gt;
&lt;figure class=&#34;highlight fortran&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs fortran&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000000000400&lt;/span&gt;a10 &amp;lt;_Z4add1PiS_&amp;gt;:&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a10:   c7 &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;a &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xa,(%rdi) ; *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a16:   c7 &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xc,(%rsi) ; *b = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a1c:   &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;b &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt;                   mov    (%rdi),%eax ; 结果 = *a&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a1e:   &lt;span class=&#34;hljs-number&#34;&gt;83&lt;/span&gt; c0 &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c                add    $&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;xc,%eax   ; 结果 += &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt; &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a21:   c3                      retq&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;加上了restrict关键字过后，同样开启-O3优化，add1对应的汇编代码如下：&lt;/p&gt;
&lt;p&gt;加上关键字restrict后，编译器能够确认指针a和b不可能指向同一个内存地址，因此在求*a + *b时，无虚访问内存，因为*a必然等于立即数10，*b必然等于立即数12。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;add2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* __restrict  a, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;* __restrict b)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;    *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; *a + *b ;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000000000400&lt;/span&gt;a30 &amp;lt;_Z4add2PiS_&amp;gt;:&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a30:   c7 &lt;span class=&#34;hljs-number&#34;&gt;07&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;a &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0xa&lt;/span&gt;,(%rdi) ; *a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a36:   b8 &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;          mov    $&lt;span class=&#34;hljs-number&#34;&gt;0x16&lt;/span&gt;,%eax  ; 结果 = &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a3b:   c7 &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;c &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;       movl   $&lt;span class=&#34;hljs-number&#34;&gt;0xc&lt;/span&gt;,(%rsi) ; *b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;a41:   c3  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有无restrict关键字的两种情况下的汇编指令可看到，后者比前者少访问一次内存，且少执行一条指令。就是因为没加restruct关键字时，编译器不能确定别的地方是不是会修改此值，所以会去相应的地址查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样当我们明确知道两个指针不可能指向同一个地址时，我们就可以通过使用restrict关键字来进行性能优化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意使用restrict的时候，程序员必须确保不会出现&lt;strong&gt;pointer aliasing&lt;/strong&gt;，即同一块内存无法通过两个或以上的指针变量名访问。不满足这个条件强行指定restrict，将会出现&lt;strong&gt;underfined behavior&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常编写代码时会忽略pointer aliasing的问题。更常见是在性能分析时，通过反汇编看到很多冗余的读取指令，才会想到加入restrict关键字来提升性能。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/349726808&#34;&gt;C&amp;#x2F;C++关键字之restrict - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ClickHouse/ClickHouse/pull/19946&#34;&gt;Improve performance of aggregate functions by alexey-milovidov · Pull Request #19946 · ClickHouse&amp;#x2F;ClickHouse (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/c/language/restrict&#34;&gt;restrict type qualifier - cppreference.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/41653775/answer/2535730128&#34;&gt;如何理解C语言关键字restrict？ - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41822235/article/details/83479562&#34;&gt;(65条消息) 关键字_restrict___restrict_楚楚可薇的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41950508/article/details/126619881?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126619881-blog-102577325.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126619881-blog-102577325.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=1&#34;&gt;(65条消息) 【C++】关键字restrict的作用_restrict关键字的作用_不知所措的渣渣辉的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2023-02-28T11:45:09.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2023/02/24/Linux003/</id>
        <title>基于GDB的程序调试</title>
        <link rel="alternate" href="https://xingyuanjie.top/2023/02/24/Linux003/"/>
        <content type="html">&lt;h2 id=&#34;基于GDB的程序调试&#34;&gt;&lt;a href=&#34;#基于GDB的程序调试&#34; class=&#34;headerlink&#34; title=&#34;基于GDB的程序调试&#34;&gt;&lt;/a&gt;基于GDB的程序调试&lt;/h2&gt;&lt;h3 id=&#34;程序调试工具GDB&#34;&gt;&lt;a href=&#34;#程序调试工具GDB&#34; class=&#34;headerlink&#34; title=&#34;程序调试工具GDB&#34;&gt;&lt;/a&gt;程序调试工具GDB&lt;/h3&gt;&lt;p&gt;编译器GCC，项目构建工具Make（又称gmake），以及GDB。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224165344672.png&#34; alt=&#34;image-20230224165344672&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GDB：GNU symbolic debugger是Linux下常用的程序调试器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB可以做什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224165606636.png&#34; alt=&#34;image-20230224165606636&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB官网：&lt;/strong&gt;&lt;a href=&#34;https://www.sourceware.org/gdb/&#34;&gt;GDB: The GNU Project Debugger (sourceware.org)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试案例一&#34;&gt;&lt;a href=&#34;#调试案例一&#34; class=&#34;headerlink&#34; title=&#34;调试案例一&#34;&gt;&lt;/a&gt;调试案例一&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; n,sum;&lt;br&gt;    n = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    sum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;( n &amp;lt;= &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        sum = sum + n;&lt;br&gt;        n = n + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在编译程序的时候，需要加调试选项： -g&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;gcc gdb001.c -g -o ex1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用gdb启动程序：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;gdb ./ex1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;进入gdb调试环境&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170419171.png&#34; alt=&#34;image-20230224170419171&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在调试环境中：使用l选项会显示带行号的源代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170620617.png&#34; alt=&#34;image-20230224170620617&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是默认情况下，l选项只显示10行源代码，如果查看后续代码，在调试界面Enter回车即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224170804048.png&#34; alt=&#34;image-20230224170804048&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在第7行源代码处打断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224171858691.png&#34; alt=&#34;image-20230224171858691&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行程序，遇到断点停止：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172105514.png&#34; alt=&#34;image-20230224172105514&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看代码中变量n的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172200662.png&#34; alt=&#34;image-20230224172200662&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前n的值为1，$1表示该变量所在存储区的名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在程序第12行处打断点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172321002.png&#34; alt=&#34;image-20230224172321002&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继续执行程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172356622.png&#34; alt=&#34;image-20230224172356622&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看当前n变量的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172422998.png&#34; alt=&#34;image-20230224172422998&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前n的值为101&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;退出调试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172456626.png&#34; alt=&#34;image-20230224172456626&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看调试环境所有断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172650422.png&#34; alt=&#34;image-20230224172650422&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除第7行的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172745323.png&#34; alt=&#34;image-20230224172745323&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;禁用编号为2的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224172832507.png&#34; alt=&#34;image-20230224172832507&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意断点状态Enb(enable)由y变成n，代表禁用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;恢复编号为2的断点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224173006975.png&#34; alt=&#34;image-20230224173006975&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;GDB有三种调试模式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试执行程序：&lt;/strong&gt;（前面的案例），注意编译加调试信息(-g)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试core文件   ：&lt;/strong&gt;需要对系统设置的core文件大小作调整（ulimit - c unlimlited），否则可能无法							  产生core文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试正在执行的程序（gdb attach） ：&lt;/strong&gt;Top找到进程编号pid，Gdb attach pid&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDB结构组成：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/02/24/Linux003/image-20230224173613247.png&#34; alt=&#34;image-20230224173613247&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;常用调试指令：&#34;&gt;&lt;a href=&#34;#常用调试指令：&#34; class=&#34;headerlink&#34; title=&#34;常用调试指令：&#34;&gt;&lt;/a&gt;常用调试指令：&lt;/h3&gt;&lt;h4 id=&#34;启动指令&#34;&gt;&lt;a href=&#34;#启动指令&#34; class=&#34;headerlink&#34; title=&#34;启动指令&#34;&gt;&lt;/a&gt;启动指令&lt;/h4&gt;&lt;p&gt;调试程序：gdb program&lt;/p&gt;
&lt;p&gt;根据core文件调试程序：gdb program corefile&lt;/p&gt;
&lt;p&gt;跟踪调试进程：gdb attach pid&lt;/p&gt;
&lt;h4 id=&#34;程序运行&#34;&gt;&lt;a href=&#34;#程序运行&#34; class=&#34;headerlink&#34; title=&#34;程序运行&#34;&gt;&lt;/a&gt;程序运行&lt;/h4&gt;&lt;p&gt;run，该命令会运行至程序结束，除非遇到断点或报错&lt;/p&gt;
&lt;h4 id=&#34;单步执行&#34;&gt;&lt;a href=&#34;#单步执行&#34; class=&#34;headerlink&#34; title=&#34;单步执行&#34;&gt;&lt;/a&gt;单步执行&lt;/h4&gt;&lt;p&gt;步进执行不进栈？next&lt;/p&gt;
&lt;p&gt;步进执行，进栈step&lt;/p&gt;
&lt;h4 id=&#34;代码查看&#34;&gt;&lt;a href=&#34;#代码查看&#34; class=&#34;headerlink&#34; title=&#34;代码查看&#34;&gt;&lt;/a&gt;代码查看&lt;/h4&gt;&lt;p&gt;列出断点附近或程序所有代码list&lt;/p&gt;
&lt;p&gt;设置现实代码的行数 set listsize &amp;lt;n&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;退出调试&#34;&gt;&lt;a href=&#34;#退出调试&#34; class=&#34;headerlink&#34; title=&#34;退出调试&#34;&gt;&lt;/a&gt;退出调试&lt;/h4&gt;&lt;p&gt;quit&lt;/p&gt;
&lt;h4 id=&#34;查看栈信息&#34;&gt;&lt;a href=&#34;#查看栈信息&#34; class=&#34;headerlink&#34; title=&#34;查看栈信息&#34;&gt;&lt;/a&gt;查看栈信息&lt;/h4&gt;&lt;p&gt;bt	打印当前的函数调用栈的所有信息&lt;/p&gt;
&lt;p&gt;bt &amp;lt;n&amp;gt;	n是一个正整数，表示只打印栈顶上n层的栈信息&lt;/p&gt;
&lt;p&gt;bt &amp;lt;-n&amp;gt;	表示只打印栈底下n层的栈信息&lt;/p&gt;
&lt;h4 id=&#34;设置断点&#34;&gt;&lt;a href=&#34;#设置断点&#34; class=&#34;headerlink&#34; title=&#34;设置断点&#34;&gt;&lt;/a&gt;设置断点&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;代码断点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;break lineNumber | functionName&lt;/li&gt;
&lt;li&gt;break lineNumber | functionName if condition&lt;/li&gt;
&lt;li&gt;tbreak lineNumber | functionName  临时断点，仅能使用一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内存断点（观察点）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控内存值改变 watch expr [if condition]&lt;/li&gt;
&lt;li&gt;监控内存值被读取 rwatch expr [if condition]&lt;/li&gt;
&lt;li&gt;监控内存值被读取和写入 awatch wxpr [if condition]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;事件断点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ exception，使用catch exception [name]&lt;/li&gt;
&lt;li&gt;Ada exception，使用catch handlers [name]&lt;/li&gt;
&lt;li&gt;exec事件，使用catch exec&lt;/li&gt;
&lt;li&gt;fork事件，使用catch fork 或者 catch vfork&lt;/li&gt;
&lt;li&gt;加载和卸载动态so事件，使用catch load|unload [regexp]&lt;/li&gt;
&lt;li&gt;监听系统信号，使用catch signal [signal]&lt;/li&gt;
&lt;li&gt;监听系统调用，使用catch syscall[name|number|group:groupname|g:groupname]…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;打印变量：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Print [file | func]::variable 查看局部变量或全局变量&lt;/li&gt;
&lt;li&gt;Print *array@len  数组首地址@查看长度&lt;/li&gt;
&lt;li&gt;x&amp;#x2F;[n | u] &amp;lt;addr&amp;gt;	x命令查看内存地址钟的值，n：表示显示内存的长度，u：表示从当前地址往后请求的字节数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;打印寄存器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;info register	查看寄存器（除了浮点寄存器）&lt;/p&gt;
&lt;p&gt;all-registers	查看所有寄存器&lt;/p&gt;
&lt;p&gt;info registers &amp;lt;reg_name …&amp;gt;查看所指定寄存器&lt;/p&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;来源培训PPT 作者：Relax  邮箱：&lt;a href=&#34;mailto:&amp;#x77;&amp;#97;&amp;#110;&amp;#x67;&amp;#x77;&amp;#x31;&amp;#49;&amp;#49;&amp;#x40;&amp;#105;&amp;#99;&amp;#108;&amp;#x6f;&amp;#117;&amp;#x64;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&#34;&gt;&amp;#x77;&amp;#97;&amp;#110;&amp;#x67;&amp;#x77;&amp;#x31;&amp;#49;&amp;#49;&amp;#x40;&amp;#105;&amp;#99;&amp;#108;&amp;#x6f;&amp;#117;&amp;#x64;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2023-02-24T08:50:20.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2022/05/20/Linux002/</id>
        <title>linux的jobs,fg,bg命令</title>
        <link rel="alternate" href="https://xingyuanjie.top/2022/05/20/Linux002/"/>
        <content type="html">&lt;h3 id=&#34;linux让前台程序脱离终端运行&#34;&gt;&lt;a href=&#34;#linux让前台程序脱离终端运行&#34; class=&#34;headerlink&#34; title=&#34;linux让前台程序脱离终端运行&#34;&gt;&lt;/a&gt;linux让前台程序脱离终端运行&lt;/h3&gt;&lt;p&gt;1.首先运行你的程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/05/20/Linux002/image-20220520171436032.png&#34; alt=&#34;image-20220520171436032&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.随后使用Ctrl + z，挂起你的进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/05/20/Linux002/image-20220520171510946.png&#34; alt=&#34;image-20220520171510946&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.然后使用jobs查看所有的进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/05/20/Linux002/image-20220520171913979.png&#34; alt=&#34;image-20220520171913979&#34;&gt;&lt;/p&gt;
&lt;p&gt;4.随后使用bg+id，表示该任务为后台1号任务&lt;/p&gt;
&lt;p&gt;bg命令用于将作业放到后台运行，使前台可以执行其他任务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/05/20/Linux002/image-20220520172110992.png&#34; alt=&#34;image-20220520172110992&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux让后台程序移动到前台终端&#34;&gt;&lt;a href=&#34;#linux让后台程序移动到前台终端&#34; class=&#34;headerlink&#34; title=&#34;linux让后台程序移动到前台终端&#34;&gt;&lt;/a&gt;linux让后台程序移动到前台终端&lt;/h3&gt;&lt;p&gt;Linux常用命令fg主要用于将后台作业移动到前台终端运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/05/20/Linux002/image-20220520172358345.png&#34; alt=&#34;image-20220520172358345&#34;&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2022-05-20T09:13:08.000Z</updated>
    </entry>
    <entry>
        <id>https://xingyuanjie.top/2022/05/20/Linux001/</id>
        <title>Linux常用指令</title>
        <link rel="alternate" href="https://xingyuanjie.top/2022/05/20/Linux001/"/>
        <content type="html">&lt;h2 id=&#34;Linux常用指令&#34;&gt;&lt;a href=&#34;#Linux常用指令&#34; class=&#34;headerlink&#34; title=&#34;Linux常用指令&#34;&gt;&lt;/a&gt;Linux常用指令&lt;/h2&gt;&lt;h4 id=&#34;杀死进程&#34;&gt;&lt;a href=&#34;#杀死进程&#34; class=&#34;headerlink&#34; title=&#34;杀死进程&#34;&gt;&lt;/a&gt;杀死进程&lt;/h4&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;kill &lt;span class=&#34;hljs-number&#34;&gt;-9&lt;/span&gt; id&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2022/05/20/Linux001/image-20220520171246860.png&#34; alt=&#34;image-20220520171246860&#34;&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2022-05-20T09:08:45.000Z</updated>
    </entry>
</feed>
