<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Amicoyuan • Posts by &#34;computer organization&#34; category</title>
        <link>https://xingyuanjie.top</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 13 Mar 2023 20:29:35 +0800</pubDate>
        <lastBuildDate>Mon, 13 Mar 2023 20:29:35 +0800</lastBuildDate>
        <category>AVX</category>
        <category>Data Structure</category>
        <category>String</category>
        <category>Find</category>
        <category>STL</category>
        <category>C++</category>
        <category>Set</category>
        <category>团体程序设计天梯赛</category>
        <category>Sort</category>
        <category>LinkList</category>
        <category>双向链表</category>
        <category>Graph</category>
        <category>邻接表</category>
        <category>Vector</category>
        <category>Binary tree</category>
        <category>BFS</category>
        <category>模拟</category>
        <category>邻接矩阵</category>
        <category>DFS</category>
        <category>结构体</category>
        <category>贪心</category>
        <category>Double类型相等比较</category>
        <category>并查集</category>
        <category>Map</category>
        <category>Pair</category>
        <category>CMU</category>
        <category>CSAPP</category>
        <category>CUDA</category>
        <category>Linux</category>
        <category>Tensorflow</category>
        <category>Machine Learning</category>
        <category>MPI</category>
        <category>Matrix</category>
        <category>GEMM</category>
        <category>dgemm</category>
        <category>AVX2</category>
        <category>Cache</category>
        <category>Blocking</category>
        <category>Intel</category>
        <category>LeetCode</category>
        <category>双指针</category>
        <category>数组翻转</category>
        <category>哈希表</category>
        <category>前缀和</category>
        <category>Travel</category>
        <category>Mirror</category>
        <category>牛客</category>
        <category>Numactl</category>
        <category>OpenMP</category>
        <category>C/C++</category>
        <category>register</category>
        <category>Slurm</category>
        <category>性能分析工具</category>
        <category>gcov</category>
        <category>bool</category>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/03/13/CMU15-213001/</guid>
            <title>CMU 15-213 Lecture 01:Course Overview</title>
            <link>https://xingyuanjie.top/2023/03/13/CMU15-213001/</link>
            <category>CMU</category>
            <category>CSAPP</category>
            <pubDate>Mon, 13 Mar 2023 20:29:35 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;2015-CMU-15-213-CSAPP-深入理解计算机系统-Lecture-01-Course-Overview&#34;&gt;&lt;a href=&#34;#2015-CMU-15-213-CSAPP-深入理解计算机系统-Lecture-01-Course-Overview&#34; class=&#34;headerlink&#34; title=&#34;2015 CMU 15-213 CSAPP 深入理解计算机系统 Lecture 01: Course Overview&#34;&gt;&lt;/a&gt;2015 CMU 15-213 CSAPP 深入理解计算机系统 Lecture 01: Course Overview&lt;/h2&gt;&lt;h3 id=&#34;例子一：&#34;&gt;&lt;a href=&#34;#例子一：&#34; class=&#34;headerlink&#34; title=&#34;例子一：&#34;&gt;&lt;/a&gt;例子一：&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; d;&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;struct_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;struct_t&lt;/span&gt; s;   &lt;span class=&#34;hljs-comment&#34;&gt;//volatile关键字&lt;/span&gt;&lt;br&gt;    s.d = &lt;span class=&#34;hljs-number&#34;&gt;3.14&lt;/span&gt;;&lt;br&gt;    s.a[i] = &lt;span class=&#34;hljs-number&#34;&gt;1073741824&lt;/span&gt;;   &lt;span class=&#34;hljs-comment&#34;&gt;/*Possibly out of bounds*/&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; s.d;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;fun(0)   -&amp;gt;   3.14&lt;br&gt;fun(1)   -&amp;gt;   3.14&lt;br&gt;fun(2)   -&amp;gt;   3.1399998664856&lt;br&gt;fun(3)   -&amp;gt;   2.00000061035156&lt;br&gt;fun(4)   -&amp;gt;   3.14&lt;br&gt;fun(6)   -&amp;gt;   Segmentation falut&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2023/03/13/CMU15-213001/image-20230313201550219.png&#34; alt=&#34;image-20230313201550219&#34;&gt;&lt;/p&gt;
&lt;p&gt;【图中假设memory line大小为4B】根据结构体可知我们拥有一个int型的数组大小为2，一个double型的变量。因为int数组的大小为2，当fun(0),fun(1)时，s.a[i]访问是正确的，所以fun(0),fun(1)返回正确值s.d及3.14。而当fun(i):i&amp;gt;1时，就会返回奇怪的结果，这是因为数组大小为2，我们越界了，实际上s.a[i]写的是double的内存空间，如图中的2，3。而6代表程序状态，我们去修改它就会造成程序状态的改变，导致Segmentation fault。这里提醒我们在写C代码的时候一定要注意边界处理。【这里需要清楚C语言中堆区和栈区存的是什么】&lt;/p&gt;
&lt;h3 id=&#34;例子二：&#34;&gt;&lt;a href=&#34;#例子二：&#34; class=&#34;headerlink&#34; title=&#34;例子二：&#34;&gt;&lt;/a&gt;例子二：&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2023/03/13/CMU15-213001/image-20230313202535864.png&#34; alt=&#34;image-20230313202535864&#34;&gt;&lt;/p&gt;
&lt;p&gt;【src和dst是大小2048*2048的二维数组】上面的图片，我们可以十分清楚代码的逻辑。他想把src数组的值拷贝到dst。而左右代码的功能完全一样，仅仅是for循环顺序不一样，但是却会有这么大的性能差距，这是什么原因呢？总的来说就是左边代码cache命中率高，右边cache命中率的。cache命中和cache miss的速度差距很大甚至是数量级别的差距，这是导致两者差距巨大的原因。【注意这里还可以更细致的分析，但是会有很多其他因素会影响】&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/index.html&#34;&gt;15-213: Introduction to Computer Systems (cmu.edu)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2023/03/13/CMU15-213/</guid>
            <title>2015 CMU 15-213 CSAPP 深入理解计算机系统</title>
            <link>https://xingyuanjie.top/2023/03/13/CMU15-213/</link>
            <category>CMU</category>
            <category>CSAPP</category>
            <pubDate>Mon, 13 Mar 2023 18:29:35 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;2015-CMU-15-213-CSAPP-深入理解计算机系统&#34;&gt;&lt;a href=&#34;#2015-CMU-15-213-CSAPP-深入理解计算机系统&#34; class=&#34;headerlink&#34; title=&#34;2015 CMU 15-213 CSAPP 深入理解计算机系统&#34;&gt;&lt;/a&gt;2015 CMU 15-213 CSAPP 深入理解计算机系统&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;项目地址：&lt;/strong&gt;&lt;a href=&#34;https://github.com/EugeneLiu/translationCSAPP&#34;&gt;EugeneLiu&amp;#x2F;translationCSAPP: 为 CSAPP 视频课程提供字幕，翻译 PPT，Lab。 (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bilibili翻译：&lt;/strong&gt;&lt;a href=&#34;https://www.bilibili.com/video/av31289365/&#34;&gt;【精校中英字幕】2015 CMU 15-213 CSAPP 深入理解计算机系统 课程视频_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;CSAPP-3e-官方链接&#34;&gt;&lt;a href=&#34;#CSAPP-3e-官方链接&#34; class=&#34;headerlink&#34; title=&#34;CSAPP:3e 官方链接&#34;&gt;&lt;/a&gt;CSAPP:3e 官方链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://csapp.cs.cmu.edu/&#34;&gt;课程主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/schedule.html&#34;&gt;课件下载链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://csapp.cs.cmu.edu/3e/labs.html&#34;&gt;课程 Lab 页面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22b96d90ae-9871-4fae-91e2-b1627b43e25e%22&amp;sortColumn=0&amp;sortAscending=true&#34;&gt;课程视频地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xingyuanjie.top/2022/06/12/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
            <title>内存对齐</title>
            <link>https://xingyuanjie.top/2022/06/12/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
            <pubDate>Sun, 12 Jun 2022 15:11:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;内存对齐&#34;&gt;&lt;a href=&#34;#内存对齐&#34; class=&#34;headerlink&#34; title=&#34;内存对齐&#34;&gt;&lt;/a&gt;内存对齐&lt;/h1&gt;&lt;h2 id=&#34;CPU读取内存的方式&#34;&gt;&lt;a href=&#34;#CPU读取内存的方式&#34; class=&#34;headerlink&#34; title=&#34;CPU读取内存的方式&#34;&gt;&lt;/a&gt;CPU读取内存的方式&lt;/h2&gt;&lt;p&gt;CPU读取内存的方式其实非常复杂，为了更进一步的了解相关的原理，需要对计算机组成原理进行深度学习。&lt;/p&gt;
&lt;h3 id=&#34;Memory-access-granularity-内存读取粒度&#34;&gt;&lt;a href=&#34;#Memory-access-granularity-内存读取粒度&#34; class=&#34;headerlink&#34; title=&#34;Memory access granularity(内存读取粒度)&#34;&gt;&lt;/a&gt;Memory access granularity(内存读取粒度)&lt;/h3&gt;&lt;p&gt;However, your computer’s processor does not read from and write to memory in byte-sized chunks. Instead, it accesses memory in two-, four-, eight- 16- or even 32-byte chunks. We’ll call the size in which a processor accesses memory its memory access granularity.&lt;/p&gt;
&lt;p&gt;CPU把内存当成是一块一块的，块的大小可以是2，4，8，16字节大小，因此CPU在读取内存时是一块一块进行读取的。块大小成为&lt;em&gt;memory access granularity（粒度）&lt;/em&gt; 本人把它翻译为“内存读取粒度” 。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/feng9exe/p/10059543.html&#34;&gt;https://www.cnblogs.com/feng9exe/p/10059543.html&lt;/a&gt; ”内存对齐“&lt;/p&gt;
&lt;h2 id=&#34;内存对齐举例&#34;&gt;&lt;a href=&#34;#内存对齐举例&#34; class=&#34;headerlink&#34; title=&#34;内存对齐举例&#34;&gt;&lt;/a&gt;内存对齐举例&lt;/h2&gt;&lt;p&gt;假设此计算机的内存读取粒度是4。&lt;/p&gt;
&lt;h3 id=&#34;如果内存对齐时&#34;&gt;&lt;a href=&#34;#如果内存对齐时&#34; class=&#34;headerlink&#34; title=&#34;如果内存对齐时&#34;&gt;&lt;/a&gt;如果内存对齐时&lt;/h3&gt;&lt;p&gt;前提知识：&lt;/p&gt;
&lt;p&gt;1 Byte &amp;#x3D; 8bit &lt;/p&gt;
&lt;p&gt;1 int8 占用 1 Byte&lt;/p&gt;
&lt;p&gt;1 int16 占用 2 Byte&lt;/p&gt;
&lt;p&gt;1 int32 占用 4 Byte&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//一个结构体的定义如下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    int8 a;&lt;br&gt;    int32 b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;int8 a&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;int32 b&lt;/td&gt;
&lt;td&gt;int32 b&lt;/td&gt;
&lt;td&gt;int32 b&lt;/td&gt;
&lt;td&gt;int32 b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;我们可以发现int8 a储存在0号内存上，占用1个Byte，1-3号内存空下了3个Byte。int32 b储存在了4-7号内存，一共4个Byte。&lt;/p&gt;
&lt;p&gt;由于此计算机的内存读取粒度时是4&lt;/p&gt;
&lt;p&gt;当需要读取a(0号内存)时，计算机会读取0-3号一组内存，然后去掉1-3号内存。访问次数1次。&lt;/p&gt;
&lt;p&gt;当需要读取b(4-7号内存时)，计算机会读取4-7号内存，访问次数1次。&lt;/p&gt;
&lt;h3 id=&#34;如果内存没有对齐时&#34;&gt;&lt;a href=&#34;#如果内存没有对齐时&#34; class=&#34;headerlink&#34; title=&#34;如果内存没有对齐时&#34;&gt;&lt;/a&gt;如果内存没有对齐时&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;int8 a&lt;/td&gt;
&lt;td&gt;int32 b&lt;/td&gt;
&lt;td&gt;int32 b&lt;/td&gt;
&lt;td&gt;int32 b&lt;/td&gt;
&lt;td&gt;int32 b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;我们可以发现int8 a储存在0号内存上，占用了1个Byte。int32 b储存在1-4号内存上，一共4个Byte。&lt;/p&gt;
&lt;p&gt;由于此计算机的内存读取粒度时是4&lt;/p&gt;
&lt;p&gt;当需要读取a(0号内存)时，计算机会读取0-3号一组内存，然后去掉1-3号内存。访问次数1次。&lt;/p&gt;
&lt;p&gt;当需要读取b(1-4号内存)时，计算机会先读取0-3号一组内存，去掉0号内存，再读取4-7号一组内存，去掉5-7号内存，随后再拼接1-3号内存和4号内存组成完整的b。访问次数2次。&lt;/p&gt;
&lt;h2 id=&#34;内存对齐的目的&#34;&gt;&lt;a href=&#34;#内存对齐的目的&#34; class=&#34;headerlink&#34; title=&#34;内存对齐的目的&#34;&gt;&lt;/a&gt;内存对齐的目的&lt;/h2&gt;&lt;p&gt;合理的内存对齐可以高效的利用硬件性能，减少处理器内存访问次数。&lt;/p&gt;
&lt;h2 id=&#34;相关链接&#34;&gt;&lt;a href=&#34;#相关链接&#34; class=&#34;headerlink&#34; title=&#34;相关链接&#34;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Vt4y1m7DP?from=search&amp;amp;amp;seid=13964421962700904405&amp;amp;amp;spm_id_from=333.337.0.0&#34;&gt;https://www.bilibili.com/video/BV1Vt4y1m7DP?from=search&amp;amp;amp;seid=13964421962700904405&amp;amp;amp;spm_id_from=333.337.0.0&lt;/a&gt; “内存对齐”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1v64y1X7YP?spm_id_from=333.999.0.0&#34;&gt;https://www.bilibili.com/video/BV1v64y1X7YP?spm_id_from=333.999.0.0&lt;/a&gt; “内存对齐对程序性能的影响”&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
