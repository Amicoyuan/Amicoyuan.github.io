{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"algorithm\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/07/31/DS005/",
            "url": "http://example.com/2022/07/31/DS005/",
            "title": "数组的应用题",
            "date_published": "2022-07-31T07:55:24.000Z",
            "content_html": "<h1 id=\"数组的应用题\"><a href=\"#数组的应用题\" class=\"headerlink\" title=\"数组的应用题\"></a>数组的应用题</h1><p><strong>特别提醒：理解对称矩阵，三角矩阵，三对角矩阵的图形和区域的划分，需会手推这三种矩阵的一位数组的公式！</strong></p>\n<p><strong>特别提醒：注意题目中数组的开始起始下标是0还是1！</strong></p>\n<h2 id=\"1-对称矩阵\"><a href=\"#1-对称矩阵\" class=\"headerlink\" title=\"1.对称矩阵\"></a>1.对称矩阵</h2><p><img src=\"/2022/07/31/DS005/image-20220731155906163.png\" alt=\"image-20220731155906163\"></p>\n<p><img src=\"/2022/07/31/DS005/image-20220731155922230.png\" alt=\"image-20220731155922230\"></p>\n<h2 id=\"2-三角矩阵\"><a href=\"#2-三角矩阵\" class=\"headerlink\" title=\"2.三角矩阵\"></a>2.三角矩阵</h2><p><img src=\"/2022/07/31/DS005/image-20220731155953294.png\" alt=\"image-20220731155953294\"></p>\n<p><img src=\"/2022/07/31/DS005/image-20220731160009059.png\" alt=\"image-20220731160009059\"></p>\n<h2 id=\"3-三角矩阵\"><a href=\"#3-三角矩阵\" class=\"headerlink\" title=\"3.三角矩阵\"></a>3.三角矩阵</h2><p><img src=\"/2022/07/31/DS005/image-20220731160030225.png\" alt=\"image-20220731160030225\"></p>\n<h2 id=\"4-稀疏矩阵\"><a href=\"#4-稀疏矩阵\" class=\"headerlink\" title=\"4.稀疏矩阵\"></a>4.稀疏矩阵</h2><p><strong>特别提醒：稀疏矩阵压缩储存后便失去了随机出去特性！</strong></p>\n<p><img src=\"/2022/07/31/DS005/image-20220731160115967.png\" alt=\"image-20220731160115967\"></p>\n",
            "tags": [
                "Data Structure",
                "Array"
            ]
        },
        {
            "id": "http://example.com/2022/07/30/DS004/",
            "url": "http://example.com/2022/07/30/DS004/",
            "title": "队列应用题",
            "date_published": "2022-07-30T06:23:10.000Z",
            "content_html": "<h1 id=\"队列应用题\"><a href=\"#队列应用题\" class=\"headerlink\" title=\"队列应用题\"></a>队列应用题</h1><h2 id=\"1-队列的顺序存储结构\"><a href=\"#1-队列的顺序存储结构\" class=\"headerlink\" title=\"1.队列的顺序存储结构\"></a>1.队列的顺序存储结构</h2><h3 id=\"图像描述\"><a href=\"#图像描述\" class=\"headerlink\" title=\"图像描述\"></a>图像描述</h3><p><strong>特别提醒：注意头尾指针初始位置，以及队列满时的位置！</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730143027917.png\" alt=\"image-20220730143027917\"></p>\n<h3 id=\"队列的顺序储存类型描述\"><a href=\"#队列的顺序储存类型描述\" class=\"headerlink\" title=\"队列的顺序储存类型描述\"></a>队列的顺序储存类型描述</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 100\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//定义队列中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> data[MaxSize];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//存放队列指针</span><br>    <span class=\"hljs-keyword\">int</span> rear,front;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//对头元素和队尾指针</span><br>&#125;SqQueue; <br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"2-循环队列\"><a href=\"#2-循环队列\" class=\"headerlink\" title=\"2.循环队列\"></a>2.循环队列</h2><h3 id=\"1-图像描述\"><a href=\"#1-图像描述\" class=\"headerlink\" title=\"1.图像描述\"></a>1.图像描述</h3><p><strong>特别提醒：方案一的本质就是牺牲掉一个储存单位来区分是队空还是队满！</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730143502062.png\" alt=\"image-20220730143502062\"></p>\n<h3 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    Q.front=Q.rear=<span class=\"hljs-number\">0</span>;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始化队首、队尾指针</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-判断空\"><a href=\"#3-判断空\" class=\"headerlink\" title=\"3.判断空\"></a>3.判断空</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">(SqQueue &amp;Q)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\t\t\t\t<span class=\"hljs-comment\">//队空条件</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-入队\"><a href=\"#4-入队\" class=\"headerlink\" title=\"4.入队\"></a>4.入队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">EnQueue</span><span class=\"hljs-params\">(SqQueue &amp;Q,Elemtype x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>((Q.rear+<span class=\"hljs-number\">1</span>)%MaxSize == Q.front ) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t\t<span class=\"hljs-comment\">//队满则报错</span><br>    Q.data=[Q.rear]=x;<br>    Q.rear=(Q.rear+<span class=\"hljs-number\">1</span>)%Maxsize;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队尾指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-出队\"><a href=\"#5-出队\" class=\"headerlink\" title=\"5.出队\"></a>5.出队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(Squeue &amp;Q,Elemtype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear == Q.front )  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//队空则报错</span><br>    x=Q.data[Q.front];<br>    Q.front=(Q.front+<span class=\"hljs-number\">1</span>)%MaxSize;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//对头指针加1取模</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"3-队列的链式储存结构\"><a href=\"#3-队列的链式储存结构\" class=\"headerlink\" title=\"3.队列的链式储存结构\"></a>3.队列的链式储存结构</h2><h3 id=\"1-图像描述-1\"><a href=\"#1-图像描述-1\" class=\"headerlink\" title=\"1.图像描述\"></a>1.图像描述</h3><p><strong>不带头节点：</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730144635084.png\" alt=\"image-20220730144635084\"></p>\n<p><strong>带头节点：</strong></p>\n<p><img src=\"/2022/07/30/DS004/image-20220730144714656.png\" alt=\"image-20220730144714656\"></p>\n<h3 id=\"2-队列的链式储存类型描述为\"><a href=\"#2-队列的链式储存类型描述为\" class=\"headerlink\" title=\"2.队列的链式储存类型描述为\"></a>2.队列的链式储存类型描述为</h3><p><strong>特别提醒：这里需要强加掌握！</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span>&#123;</span>\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列结点</span><br>    <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span> *<span class=\"hljs-title\">next</span>;</span><br>&#125;LinkNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//链式队列</span><br>    linkNode *front,*rear;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//队列的队头和队尾指针</span><br>&#125;LinkQueue;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3.初始化\"></a>3.初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q)</span></span>&#123;<br>    Q.front=Q.rear=(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));\t\t\t\t<span class=\"hljs-comment\">//建立头结点</span><br>    Q.front-&gt;next =<span class=\"hljs-literal\">NULL</span>;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//初始为空</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-判队空\"><a href=\"#4-判队空\" class=\"headerlink\" title=\"4.判队空\"></a>4.判队空</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">IsEmpty</span><span class=\"hljs-params\">(LinkQueue &amp;Q)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-入队\"><a href=\"#5-入队\" class=\"headerlink\" title=\"5.入队\"></a>5.入队</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Enqueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,Elentype x)</span></span>&#123;<br>    LinkNode *s =(LinkNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(LinkNode));<br>    s&gt;data = x;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//创建新结点，插入到表尾</span><br>    s-&gt;next =<span class=\"hljs-literal\">NULL</span>;<br>    Q.rear-&gt;next = s;<br>    Q.rear = s;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"6-出队\"><a href=\"#6-出队\" class=\"headerlink\" title=\"6.出队\"></a>6.出队</h3><p><strong>特别提醒：这里需要注意如果删除后变为空队列需要怎么处理！</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">DeQueue</span><span class=\"hljs-params\">(LinkQueue &amp;Q,Elentype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(Q.front == Q.rear)  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>   \tLinkNode *p=Q.front-&gt;next;<br>    x=p-&gt;data;<br>    Q.front-&gt;next = p-&gt;next;<br>    <span class=\"hljs-keyword\">if</span>(Q.rear = p)<br>        Q.rear = Q.front;\t\t\t\t\t\t<span class=\"hljs-comment\">//若原队列中只有一个结点，删除后变空</span><br>    <span class=\"hljs-built_in\">free</span>(p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Queue"
            ]
        },
        {
            "id": "http://example.com/2022/07/29/DS003/",
            "url": "http://example.com/2022/07/29/DS003/",
            "title": "栈应用题",
            "date_published": "2022-07-29T08:31:44.000Z",
            "content_html": "<h2 id=\"栈应用题\"><a href=\"#栈应用题\" class=\"headerlink\" title=\"栈应用题\"></a>栈应用题</h2><h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><h4 id=\"1-顺序栈\"><a href=\"#1-顺序栈\" class=\"headerlink\" title=\"1.顺序栈\"></a>1.顺序栈</h4><h5 id=\"顺序栈的图像\"><a href=\"#顺序栈的图像\" class=\"headerlink\" title=\"顺序栈的图像\"></a>顺序栈的图像</h5><p><strong>特别注意：top指针的初值！</strong></p>\n<p><img src=\"/2022/07/29/DS003/image-20220729163738618.png\" alt=\"image-20220729163738618\"></p>\n<h5 id=\"栈的顺序存储类型描述\"><a href=\"#栈的顺序存储类型描述\" class=\"headerlink\" title=\"栈的顺序存储类型描述\"></a>栈的顺序存储类型描述</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//定义栈中元素的最大个数</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    Elemtype data[MaxSize];\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//存放栈中元素</span><br>    <span class=\"hljs-keyword\">int</span> top;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈顶指针</span><br>&#125;SqStack;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InitStack</span><span class=\"hljs-params\">(SqStack &amp;S)</span></span>&#123;<br>\tS.top=<span class=\"hljs-number\">-1</span>                  \t\t\t\t\t\t<span class=\"hljs-comment\">//初始化栈顶指针</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"判栈空\"><a href=\"#判栈空\" class=\"headerlink\" title=\"判栈空\"></a>判栈空</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">StackEmpty</span><span class=\"hljs-params\">(SqStack &amp;S)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈空</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\t\t\t\t<br>    <span class=\"hljs-keyword\">else</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//不空</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"进栈\"><a href=\"#进栈\" class=\"headerlink\" title=\"进栈\"></a>进栈</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Push</span><span class=\"hljs-params\">(SqStack &amp;S,Elemtype x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top == MaxSize<span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈满，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        S.data[++S.top]=x;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//指针先加1，再入栈</span><br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"出栈\"><a href=\"#出栈\" class=\"headerlink\" title=\"出栈\"></a>出栈</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Pop</span><span class=\"hljs-params\">(SqStack &amp;S,Elemtype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top ==<span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈空，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        x=S.data[S.top--];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//先入栈，指针再减1</span><br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"读栈顶元素\"><a href=\"#读栈顶元素\" class=\"headerlink\" title=\"读栈顶元素\"></a>读栈顶元素</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">GetTop</span><span class=\"hljs-params\">(SqStack &amp;S,Elemtype &amp;x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(S.top == <span class=\"hljs-number\">-1</span>)\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈空，报错</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        x = S.data[S.top];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//x记录栈顶元素</span><br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-共享栈\"><a href=\"#2-共享栈\" class=\"headerlink\" title=\"2.共享栈\"></a>2.共享栈</h4><p><strong>特别注意：top0指针和top1指针的初始化的问题！</strong></p>\n<p><img src=\"/2022/07/29/DS003/image-20220729165150586.png\" alt=\"image-20220729165150586\"></p>\n<h4 id=\"3-链栈\"><a href=\"#3-链栈\" class=\"headerlink\" title=\"3.链栈\"></a>3.链栈</h4><h5 id=\"链栈的图像\"><a href=\"#链栈的图像\" class=\"headerlink\" title=\"链栈的图像\"></a>链栈的图像</h5><p><strong>特别注意：此链栈不带头结点，且所有操作都是在表头进行！</strong></p>\n<p><img src=\"/2022/07/29/DS003/image-20220729165541592.png\" alt=\"image-20220729165541592\"></p>\n<h5 id=\"栈的链式存储类型描述\"><a href=\"#栈的链式存储类型描述\" class=\"headerlink\" title=\"栈的链式存储类型描述\"></a>栈的链式存储类型描述</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Linknode</span> *<span class=\"hljs-title\">next</span>;</span>\t\t\t\t\t\t\t<span class=\"hljs-comment\">//指针域</span><br>&#125;*LiStack;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//栈类型定义</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Stack"
            ]
        },
        {
            "id": "http://example.com/2022/07/25/DS002/",
            "url": "http://example.com/2022/07/25/DS002/",
            "title": "快速排序",
            "date_published": "2022-07-25T08:54:55.000Z",
            "content_html": "<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">QuickSort</span><span class=\"hljs-params\">(ElemType A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(low&lt;high)&#123;\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//递归跳出的条件</span><br>        <span class=\"hljs-comment\">//Partition()就是划分操作，将表A[low...high]划分为满足上述条件的两个子表</span><br>        \t\t\t<span class=\"hljs-keyword\">int</span> pivotpos = <span class=\"hljs-built_in\">Partition</span>(A,low,high);\t\t\t<span class=\"hljs-comment\">//划分</span><br>        \t\t\t<span class=\"hljs-built_in\">QuickSort</span>(A,low,pivotpos<span class=\"hljs-number\">-1</span>);\t\t\t\t\t<span class=\"hljs-comment\">//依次对两个子表进行递归排序</span><br>        \t\t\t<span class=\"hljs-built_in\">QuickSort</span>(A,pivotpos+<span class=\"hljs-number\">1</span>,high);\t\t\t\t\t<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Partition</span><span class=\"hljs-params\">(ElemType A[],<span class=\"hljs-keyword\">int</span> low,<span class=\"hljs-keyword\">int</span> high)</span></span>&#123;\t\t\t<span class=\"hljs-comment\">//一趟划分</span><br>\t\tElemType pivot = A[low];\t\t\t<span class=\"hljs-comment\">//将当前表中第一个元素设为枢轴，对表进行划分</span><br>    \t<span class=\"hljs-keyword\">while</span>(low&lt;high)&#123;\t\t\t\t\t<span class=\"hljs-comment\">//循环跳出条件</span><br>            <span class=\"hljs-keyword\">while</span>(low&lt;high&amp;&amp;A[high]&gt;=pivot)     --high;<br>           \tA[low]=A[high];\t\t\t\t\t<span class=\"hljs-comment\">//将比枢轴小的元素移动到左侧</span><br>            <span class=\"hljs-keyword\">while</span>(low&lt;high&amp;&amp;A[low]&lt;=pivot)  ++low;<br>            A[high]=A[low];\t\t\t\t\t<span class=\"hljs-comment\">//将比枢轴大的元素移动到右侧</span><br>        &#125;<br>    \tA[low]=pivot;\t\t\t\t\t\t<span class=\"hljs-comment\">//枢轴元素存放到最终位置</span><br>    \t<span class=\"hljs-keyword\">return</span> low;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//返回存放枢轴的最终位置</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "QuickSort"
            ]
        },
        {
            "id": "http://example.com/2022/06/24/DS001/",
            "url": "http://example.com/2022/06/24/DS001/",
            "title": "数据结构第一章绪论",
            "date_published": "2022-06-24T08:25:52.000Z",
            "content_html": "<h1 id=\"数据结构第一章绪论\"><a href=\"#数据结构第一章绪论\" class=\"headerlink\" title=\"数据结构第一章绪论\"></a>数据结构第一章绪论</h1><h2 id=\"知识总览\"><a href=\"#知识总览\" class=\"headerlink\" title=\"知识总览\"></a>知识总览</h2><p><img src=\"/2022/06/24/DS001/image-20220628155551705.png\" alt=\"image-20220628155551705\"></p>\n<h3 id=\"1-1-1基本概念和术语\"><a href=\"#1-1-1基本概念和术语\" class=\"headerlink\" title=\"1.1.1基本概念和术语\"></a>1.1.1基本概念和术语</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1.数据\"></a>1.数据</h4><p>​\t\t数据是信息的载体，是描述客观事物属性的数，字符及所有能输入到计算机中并被计算机程序识别和处理的集合。</p>\n<p>数据是计算机程序加工的原料</p>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2.数据元素\"></a>2.数据元素</h4><p>​\t\t数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。\t</p>\n<h4 id=\"3-数据对象\"><a href=\"#3-数据对象\" class=\"headerlink\" title=\"3.数据对象\"></a>3.数据对象</h4><p>​\t\t数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</p>\n<h4 id=\"4-数据类型是一个值的集合和定义在此集合上的一组操作的总称\"><a href=\"#4-数据类型是一个值的集合和定义在此集合上的一组操作的总称\" class=\"headerlink\" title=\"4.数据类型是一个值的集合和定义在此集合上的一组操作的总称\"></a>4.数据类型是一个值的集合和定义在此集合上的一组操作的总称</h4><ol>\n<li>原子类型：其值不可再分的数据类型</li>\n<li>结构类型：其值可以再分解的数据类型</li>\n<li>抽象数据类型：抽象数据组织及与之相关的操作</li>\n</ol>\n<h3 id=\"1-1-2数据结构三要素\"><a href=\"#1-1-2数据结构三要素\" class=\"headerlink\" title=\"1.1.2数据结构三要素\"></a>1.1.2数据结构三要素</h3><h4 id=\"1-数据的逻辑结构\"><a href=\"#1-数据的逻辑结构\" class=\"headerlink\" title=\"1.数据的逻辑结构\"></a>1.数据的逻辑结构</h4><p><img src=\"/2022/06/24/DS001/image-20220628155609948.png\" alt=\"image-20220628155609948\"></p>\n<h4 id=\"2-数据的存储结构\"><a href=\"#2-数据的存储结构\" class=\"headerlink\" title=\"2.数据的存储结构\"></a>2.数据的存储结构</h4><p><img src=\"/2022/06/24/DS001/image-20220628155615386.png\" alt=\"image-20220628155615386\"></p>\n<h4 id=\"3-数据的运算\"><a href=\"#3-数据的运算\" class=\"headerlink\" title=\"3.数据的运算\"></a>3.数据的运算</h4><p>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能;运算的实现是针对存储结构的，指出运算的具体步骤</p>\n<h3 id=\"知识回顾与重要考点\"><a href=\"#知识回顾与重要考点\" class=\"headerlink\" title=\"知识回顾与重要考点\"></a>知识回顾与重要考点</h3><p><img src=\"/2022/06/24/DS001/image-20220628155619678.png\" alt=\"image-20220628155619678\"></p>\n<p><img src=\"/2022/06/24/DS001/image-20220628155623998.png\" alt=\"image-20220628155623998\"></p>\n<h3 id=\"1-2-1算法的基本概念\"><a href=\"#1-2-1算法的基本概念\" class=\"headerlink\" title=\"1.2.1算法的基本概念\"></a>1.2.1算法的基本概念</h3><p>算法是对特定问题求解步骤的一种描述。他是指令的有限序列，其中的每条指令表示一个或多个操作。</p>\n<h3 id=\"知识回顾与重要考点-1\"><a href=\"#知识回顾与重要考点-1\" class=\"headerlink\" title=\"知识回顾与重要考点\"></a>知识回顾与重要考点</h3><p><img src=\"/2022/06/24/DS001/image-20220628155630085.png\" alt=\"image-20220628155630085\"></p>\n<h3 id=\"1-2-2算法效率的度量\"><a href=\"#1-2-2算法效率的度量\" class=\"headerlink\" title=\"1.2.2算法效率的度量\"></a>1.2.2算法效率的度量</h3><h4 id=\"1-时间复杂度\"><a href=\"#1-时间复杂度\" class=\"headerlink\" title=\"1.时间复杂度\"></a>1.时间复杂度</h4><p>一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频数之和记为T(n)，它是该算法问题规模n的函数，时间复杂度主要分析T(n)的数量级。</p>\n<p><img src=\"/2022/06/24/DS001/image-20220628155634291.png\" alt=\"image-20220628155634291\"></p>\n<h4 id=\"2-空间复杂度\"><a href=\"#2-空间复杂度\" class=\"headerlink\" title=\"2.空间复杂度\"></a>2.空间复杂度</h4><p>算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它是问题规模n的函数。</p>\n<p><img src=\"/2022/06/24/DS001/image-20220628155639858.png\" alt=\"image-20220628155639858\"></p>\n",
            "tags": [
                "Data Structure"
            ]
        },
        {
            "id": "http://example.com/2022/05/06/Algorithm037/",
            "url": "http://example.com/2022/05/06/Algorithm037/",
            "title": "图的存储",
            "date_published": "2022-05-06T08:38:38.000Z",
            "content_html": "<h2 id=\"图的存储\"><a href=\"#图的存储\" class=\"headerlink\" title=\"图的存储\"></a>图的存储</h2><h3 id=\"邻接矩阵法\"><a href=\"#邻接矩阵法\" class=\"headerlink\" title=\"邻接矩阵法\"></a>邻接矩阵法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点数目的最大值</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">char</span> VertexType;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点的数据类型</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> EdgeType;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//带权图中边上权值的数据类型</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    VertexType Vex[MaxVertexNum];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点表</span><br>    EdgeType Edge[MaxVertexNum][MaxVertexNum];\t\t\t\t<span class=\"hljs-comment\">//邻接矩阵，边表</span><br>    <span class=\"hljs-keyword\">int</span> vexnum,arcnum;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//图中当前顶点数和弧数</span><br>&#125;MGraph;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"邻接表法\"><a href=\"#邻接表法\" class=\"headerlink\" title=\"邻接表法\"></a>邻接表法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//图中顶点数目的最大值</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcNode</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//边表结点</span><br>    <span class=\"hljs-keyword\">int</span> adjvex;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//该弧所指向的顶点的位置</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcNode</span> *<span class=\"hljs-title\">next</span>;</span>\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//指向下一条弧的指针</span><br>    <span class=\"hljs-comment\">//InfoType infp;\t\t\t\t\t\t\t\t\t\t//网的边权值</span><br>&#125;ArcNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">VNode</span>&#123;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点表结点</span><br>    VertexType data;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//顶点信息</span><br>    ArcNode *first;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//指向第一条依附该顶点的弧的指针</span><br>&#125;VNode,AdjList[MaxVertexNum];<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    AdjList vertices;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//邻接表</span><br>    <span class=\"hljs-keyword\">int</span> vexnum,arcnum;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//图的顶点数和弧数</span><br>&#125;ALGraph;\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//ALGraph是以邻接表存储的图的类型</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Graph"
            ]
        },
        {
            "id": "http://example.com/2022/05/05/Algorithm036/",
            "url": "http://example.com/2022/05/05/Algorithm036/",
            "title": "树、森林",
            "date_published": "2022-05-05T08:58:34.000Z",
            "content_html": "<h2 id=\"树、森林\"><a href=\"#树、森林\" class=\"headerlink\" title=\"树、森林\"></a>树、森林</h2><h3 id=\"树的存储结构\"><a href=\"#树的存储结构\" class=\"headerlink\" title=\"树的存储结构\"></a>树的存储结构</h3><h4 id=\"双亲表示法\"><a href=\"#双亲表示法\" class=\"headerlink\" title=\"双亲表示法\"></a>双亲表示法</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX_TREE_SIZE 100\t\t\t\t\t<span class=\"hljs-comment\">//树中最多节点数\t</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//树的结点定义</span><br>    ElemType data;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据元素\t</span><br>    <span class=\"hljs-keyword\">int</span> parent;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//双亲位置域</span><br>&#125;PTNode;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//树的类型定义</span><br>    PTNode nodes[MAX_TREE_SIZE];\t\t\t<span class=\"hljs-comment\">//双亲表示</span><br>    <span class=\"hljs-keyword\">int</span> n;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//节点数</span><br>&#125;PTree;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"孩子兄弟法\"><a href=\"#孩子兄弟法\" class=\"headerlink\" title=\"孩子兄弟法\"></a>孩子兄弟法</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">CSNode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//数据域</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">CSNode</span> *<span class=\"hljs-title\">firstchild</span>,*<span class=\"hljs-title\">nextsibling</span>;</span>\t\t\t\t\t<span class=\"hljs-comment\">//第一个孩子和右兄弟指针</span><br>&#125;CSNode,*CSTree;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Tree",
                "森林"
            ]
        },
        {
            "id": "http://example.com/2022/05/04/Algorithm035/",
            "url": "http://example.com/2022/05/04/Algorithm035/",
            "title": "线索二叉树",
            "date_published": "2022-05-04T12:05:19.000Z",
            "content_html": "<h2 id=\"线索二叉树\"><a href=\"#线索二叉树\" class=\"headerlink\" title=\"线索二叉树\"></a>线索二叉树</h2><h3 id=\"线索二叉树的存储结构\"><a href=\"#线索二叉树的存储结构\" class=\"headerlink\" title=\"线索二叉树的存储结构\"></a>线索二叉树的存储结构</h3><p>线索二叉树的存储结构描述如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">ltag = <span class=\"hljs-number\">0</span> lchild域指示结点的左孩子<br>ltag = <span class=\"hljs-number\">1</span> lchild域指示结点的前驱<br><span class=\"hljs-comment\">//</span><br>rtag = <span class=\"hljs-number\">0</span> rchild域指示结点的右孩子<br>rtag = <span class=\"hljs-number\">1</span> rchild域指示结点的后继<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span>&#123;</span><br>    ElemType data;\t\t\t\t\t\t<span class=\"hljs-comment\">//数据元素</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>\t\t\t\t<span class=\"hljs-comment\">//左右孩子指针</span><br>    <span class=\"hljs-keyword\">int</span> ltag,rtag;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//左右线索标志</span><br>&#125;ThreadNode，*ThreadTree;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"中序线索二叉树的构造\"><a href=\"#中序线索二叉树的构造\" class=\"headerlink\" title=\"中序线索二叉树的构造\"></a>中序线索二叉树的构造</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InThread</span><span class=\"hljs-params\">(ThreadTree &amp;p,ThreadNode &amp;pre)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(p!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-built_in\">InThread</span>(p-&gt;lchild,pre);\t\t\t<span class=\"hljs-comment\">//递归，线索化左子树</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(p-&gt;lchild==<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t<span class=\"hljs-comment\">//左子树为空，建立前驱线索</span><br>                p-&gt;lchild=pre;<br>                p-&gt;ltag=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(pre!=<span class=\"hljs-literal\">NULL</span>&amp;&amp;pre-&gt;rchild==<span class=\"hljs-literal\">NULL</span>)&#123;<br>                pre-&gt;rchild=p;\t\t\t\t<span class=\"hljs-comment\">//建立前驱结点的后继线索</span><br>                pre-&gt;rtag=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            pre=p;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//标记当前结点成为刚刚访问过的结点</span><br>            <span class=\"hljs-built_in\">InThread</span>(p-&gt;rchild,pre);\t\t<span class=\"hljs-comment\">//递归，线索化右子树</span><br>        &#125;<span class=\"hljs-comment\">//if(p!=NULL)</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CreateInThread</span><span class=\"hljs-params\">(ThreadTree T)</span></span>&#123;<br>    ThreadTree pre = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">if</span>(T!=<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//非空二叉树。线索化</span><br>        <span class=\"hljs-built_in\">InThread</span>(T,pre);\t\t\t\t<span class=\"hljs-comment\">//线索化二叉树</span><br>        pre-&gt;rchild=<span class=\"hljs-literal\">NULL</span>;\t\t\t\t<span class=\"hljs-comment\">//处理遍历的最后一个结点</span><br>        pre-&gt;rtag=<span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"中序线索二叉树的遍历\"><a href=\"#中序线索二叉树的遍历\" class=\"headerlink\" title=\"中序线索二叉树的遍历\"></a>中序线索二叉树的遍历</h3><p>1)求中序线索二叉树中中序序列下的第一个结点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">Thread *<span class=\"hljs-title\">Firstnode</span><span class=\"hljs-params\">(ThreadNode *p)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(p-&gt;ltag==<span class=\"hljs-number\">0</span>) p=p-&gt;lchild;\t\t<span class=\"hljs-comment\">//最左下结点（不一定是叶结点）</span><br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>2)求中序线索二叉树中结点p在中序序列下的后继</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">ThreadNode *<span class=\"hljs-title\">Nextnode</span><span class=\"hljs-params\">(ThreadNode *p)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(p-&gt;rtag==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Firstnode</span>(p-&gt;rchild);<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> p-&gt;rchild;\t\t\t<span class=\"hljs-comment\">//rtag==1直接返回后继线索</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>3)利用上面两个算法，可以写出不含头节点的中序线索二叉树的中序遍历算法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Inorder</span><span class=\"hljs-params\">(ThreadNode *T)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(ThreadNode *p=Firstnode;p!=<span class=\"hljs-literal\">NULL</span>;p=<span class=\"hljs-built_in\">Nextnode</span>(p))<br>        <span class=\"hljs-built_in\">visit</span>(p);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "Binary tree",
                "线索二叉树"
            ]
        },
        {
            "id": "http://example.com/2022/04/27/Algorithm034/",
            "url": "http://example.com/2022/04/27/Algorithm034/",
            "title": "串的模式匹配算法-KMP算法",
            "date_published": "2022-04-27T11:39:05.000Z",
            "content_html": "<h2 id=\"串的模式匹配算法-KMP算法\"><a href=\"#串的模式匹配算法-KMP算法\" class=\"headerlink\" title=\"串的模式匹配算法-KMP算法\"></a>串的模式匹配算法-KMP算法</h2><h3 id=\"求next数组\"><a href=\"#求next数组\" class=\"headerlink\" title=\"求next数组\"></a>求next数组</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">get_next</span><span class=\"hljs-params\">(SSting t,<span class=\"hljs-keyword\">int</span> next[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">0</span>;<br>    next[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(i&lt;t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>||t.ch[i]==t.ch[j])<br>        &#123;<br>            i++;<br>            j++;<br>            next[i]=j;      <span class=\"hljs-comment\">//若pi=pj,则next[j+i]=next[j]+1</span><br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            j=next[j];      <span class=\"hljs-comment\">//否则令j=next[j]，循环继续</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"KMP匹配算法\"><a href=\"#KMP匹配算法\" class=\"headerlink\" title=\"KMP匹配算法\"></a>KMP匹配算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Index_KMP</span><span class=\"hljs-params\">(SSting s,SSting t,<span class=\"hljs-keyword\">int</span> next[])</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i&lt;=s.length&amp;&amp;j&lt;=t.length)&#123;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>||s.ch[i]==t.ch[j])<br>        &#123;<br>            j++;                    <span class=\"hljs-comment\">//继续比较后续字符</span><br>            i++;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            j=next[j];              <span class=\"hljs-comment\">//模式串向右移动</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(j&gt;t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> i-t.length;          <span class=\"hljs-comment\">//匹配成功</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAXLEN 255\t\t\t\t\t<span class=\"hljs-comment\">//预定义最大串长</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">char</span> ch[MAXLEN];\t\t\t\t<span class=\"hljs-comment\">//每个分量存储一个字符</span><br>    <span class=\"hljs-keyword\">int</span> length;\t\t\t\t\t\t<span class=\"hljs-comment\">//串的实际长度</span><br>&#125;SSting;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">get_next</span><span class=\"hljs-params\">(SSting t,<span class=\"hljs-keyword\">int</span> next[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">0</span>;<br>    next[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(i&lt;t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>||t.ch[i]==t.ch[j])<br>        &#123;<br>            i++;<br>            j++;<br>            next[i]=j;      <span class=\"hljs-comment\">//若pi=pj,则next[j+i]=next[j]+1</span><br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            j=next[j];      <span class=\"hljs-comment\">//否则令j=next[j]，循环继续</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Index_KMP</span><span class=\"hljs-params\">(SSting s,SSting t,<span class=\"hljs-keyword\">int</span> next[])</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i&lt;=s.length&amp;&amp;j&lt;=t.length)&#123;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">0</span>||s.ch[i]==t.ch[j])<br>        &#123;<br>            j++;                    <span class=\"hljs-comment\">//继续比较后续字符</span><br>            i++;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            j=next[j];              <span class=\"hljs-comment\">//模式串向右移动</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(j&gt;t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> i-t.length;          <span class=\"hljs-comment\">//匹配成功</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    SSting a,b;<br>    string s1=<span class=\"hljs-string\">&quot;ababcabcacbab&quot;</span>;<br>    string s2=<span class=\"hljs-string\">&quot;abcac&quot;</span>;<br>    a.length=s1.<span class=\"hljs-built_in\">size</span>();<br>    b.length=s2.<span class=\"hljs-built_in\">size</span>();<br>    <span class=\"hljs-keyword\">int</span> next[s2.<span class=\"hljs-built_in\">size</span>()+<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-built_in\">get_next</span>(b,next);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;s1.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;\t<span class=\"hljs-comment\">//初始化</span><br>        a.ch[i+<span class=\"hljs-number\">1</span>]=s1[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;s2.<span class=\"hljs-built_in\">size</span>() ; ++j) &#123;\t<span class=\"hljs-comment\">//初始化</span><br>        b.ch[j+<span class=\"hljs-number\">1</span>]=s2[j];<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> x=<span class=\"hljs-built_in\">Index_KMP</span>(a,b,next);<br>    <span class=\"hljs-keyword\">if</span>(x!=<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;找到了位置是：&quot;</span>&lt;&lt;x&lt;&lt;endl;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;没有找到&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">找到了位置是：<span class=\"hljs-number\">6</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "String",
                "KMP"
            ]
        },
        {
            "id": "http://example.com/2022/04/27/Algorithm033/",
            "url": "http://example.com/2022/04/27/Algorithm033/",
            "title": "串-简单的模式匹配算法",
            "date_published": "2022-04-27T09:11:18.000Z",
            "content_html": "<h2 id=\"串-简单的模式匹配算法\"><a href=\"#串-简单的模式匹配算法\" class=\"headerlink\" title=\"串-简单的模式匹配算法\"></a>串-简单的模式匹配算法</h2><h3 id=\"简单的模式匹配算法\"><a href=\"#简单的模式匹配算法\" class=\"headerlink\" title=\"简单的模式匹配算法\"></a>简单的模式匹配算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Index</span><span class=\"hljs-params\">(SSting s,SSting t)</span>        <span class=\"hljs-comment\">//简单的模式匹配算法</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(i&lt;=s.length &amp;&amp; j&lt;= t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(s.ch[i]==t.ch[j])<br>        &#123;<br>            i++;                      <span class=\"hljs-comment\">//继续比较后继字符</span><br>            j++;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;                        <span class=\"hljs-comment\">//指针后退重新开始匹配</span><br>            i=i-j+<span class=\"hljs-number\">2</span>;                  <span class=\"hljs-comment\">//每次匹配失败后，都把模式t后移一位</span><br>            j=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(j&gt;t.length) <span class=\"hljs-keyword\">return</span> i-t.length;           <span class=\"hljs-comment\">//返回与模式t中第一个字符相等的字符在主串s中的序号</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"完整程序源代码\"><a href=\"#完整程序源代码\" class=\"headerlink\" title=\"完整程序源代码\"></a>完整程序源代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAXLEN 255\t\t\t\t\t<span class=\"hljs-comment\">//预定义最大串长</span></span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span><br>    <span class=\"hljs-keyword\">char</span> ch[MAXLEN];\t\t\t\t<span class=\"hljs-comment\">//每个分量存储一个字符</span><br>    <span class=\"hljs-keyword\">int</span> length;\t\t\t\t\t\t<span class=\"hljs-comment\">//串的实际长度</span><br>&#125;SSting;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Index</span><span class=\"hljs-params\">(SSting s,SSting t)</span>        <span class=\"hljs-comment\">//简单的模式匹配算法</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(i&lt;=s.length &amp;&amp; j&lt;= t.length)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(s.ch[i]==t.ch[j])<br>        &#123;<br>            i++;                      <span class=\"hljs-comment\">//继续比较后继字符</span><br>            j++;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;                        <span class=\"hljs-comment\">//指针后退重新开始匹配</span><br>            i=i-j+<span class=\"hljs-number\">2</span>;                  <span class=\"hljs-comment\">//每次匹配失败后，都把模式t后移一位</span><br>            j=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(j&gt;t.length) <span class=\"hljs-keyword\">return</span> i-t.length;           <span class=\"hljs-comment\">//返回与模式t中第一个字符相等的字符在主串s中的序号</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    SSting a,b;<br>    string s1=<span class=\"hljs-string\">&quot;ababcabcacbab&quot;</span>;<br>    string s2=<span class=\"hljs-string\">&quot;abcac&quot;</span>;<br>    a.length=s1.<span class=\"hljs-built_in\">size</span>();<br>    b.length=s2.<span class=\"hljs-built_in\">size</span>();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;s1.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;\t<span class=\"hljs-comment\">//初始化</span><br>        a.ch[i+<span class=\"hljs-number\">1</span>]=s1[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;s2.<span class=\"hljs-built_in\">size</span>() ; ++j) &#123;\t<span class=\"hljs-comment\">//初始化</span><br>        b.ch[j+<span class=\"hljs-number\">1</span>]=s2[j];<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> x=<span class=\"hljs-built_in\">Index</span>(a,b);<br>    <span class=\"hljs-keyword\">if</span>(x!=<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;找到了位置是：&quot;</span>&lt;&lt;x&lt;&lt;endl;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;没有找到&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序输出\"><a href=\"#程序输出\" class=\"headerlink\" title=\"程序输出\"></a>程序输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">找到了位置是：<span class=\"hljs-number\">6</span><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "Data Structure",
                "String"
            ]
        },
        {
            "id": "http://example.com/2022/04/23/Algorithm032/",
            "url": "http://example.com/2022/04/23/Algorithm032/",
            "title": "L2-036 网红点打卡攻略 (25 分)",
            "date_published": "2022-04-23T13:50:27.000Z",
            "content_html": "<h2 id=\"L2-036-网红点打卡攻略-25-分\"><a href=\"#L2-036-网红点打卡攻略-25-分\" class=\"headerlink\" title=\"L2-036 网红点打卡攻略 (25 分)\"></a>L2-036 网红点打卡攻略 (25 分)</h2><p>一个旅游景点，如果被带火了的话，就被称为“网红点”。大家来网红点游玩，俗称“打卡”。在各个网红点打卡的快（省）乐（钱）方法称为“攻略”。你的任务就是从一大堆攻略中，找出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>首先第一行给出两个正整数：网红点的个数 <em>N</em>（1&lt;<em>N</em>≤200）和网红点之间通路的条数 <em>M</em>。随后 <em>M</em> 行，每行给出有通路的两个网红点、以及这条路上的旅行花费（为正整数），格式为“网红点1 网红点2 费用”，其中网红点从 1 到 <em>N</em> 编号；同时也给出你家到某些网红点的花费，格式相同，其中你家的编号固定为 <code>0</code>。</p>\n<p>再下一行给出一个正整数 <em>K</em>，是待检验的攻略的数量。随后 <em>K</em> 行，每行给出一条待检攻略，格式为：</p>\n<p><em>n</em> <em>V</em>1 <em>V</em>2 ⋯ Vn</p>\n<p>其中 <em>n</em>(≤200) 是攻略中的网红点数，<em>Vi</em> 是路径上的网红点编号。这里假设你从家里出发，从 <em>V</em>1 开始打卡，最后从 <em>Vn</em> 回家。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在第一行输出满足要求的攻略的个数。</p>\n<p>在第二行中，首先输出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略的序号（从 1 开始），然后输出这个攻略的总路费，其间以一个空格分隔。如果这样的攻略不唯一，则输出序号最小的那个。</p>\n<p>题目保证至少存在一个有效攻略，并且总路费不超过 109。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">6 13<br>0 5 2<br>6 2 2<br>6 0 1<br>3 4 2<br>1 5 2<br>2 5 1<br>3 1 1<br>4 1 2<br>1 6 1<br>6 3 2<br>1 2 1<br>4 5 3<br>2 0 2<br>7<br>6 5 1 4 3 6 2<br>6 5 2 1 6 3 4<br>8 6 2 1 6 3 4 5 2<br>3 2 1 5<br>6 6 1 3 4 5 2<br>7 6 2 1 3 4 5 2<br>6 5 2 1 4 3 6<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">3<br>5 11<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"样例说明：\"><a href=\"#样例说明：\" class=\"headerlink\" title=\"样例说明：\"></a>样例说明：</h3><p>第 2、3、4、6 条都不满足攻略的基本要求，即不能做到从家里出发，在每个网红点打卡仅一次，且能回到家里。所以满足条件的攻略有 3 条。</p>\n<p>第 1 条攻略的总路费是：(0-&gt;5) 2 + (5-&gt;1) 2 + (1-&gt;4) 2 + (4-&gt;3) 2 + (3-&gt;6) 2 + (6-&gt;2) 2 + (2-&gt;0) 2 &#x3D; 14；</p>\n<p>第 5 条攻略的总路费同理可算得：1 + 1 + 1 + 2 + 3 + 1 + 2 &#x3D; 11，是一条更省钱的攻略；</p>\n<p>第 7 条攻略的总路费同理可算得：2 + 1 + 1 + 2 + 2 + 2 + 1 &#x3D; 11，与第 5 条花费相同，但序号较大，所以不输出。</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">205</span>][<span class=\"hljs-number\">205</span>];<br><span class=\"hljs-keyword\">int</span> minsize=INT_MAX;\t\t\t<span class=\"hljs-comment\">//初始化为INT_MAX</span><br><span class=\"hljs-keyword\">int</span> minid=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b,c;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=c;<br>        g[b][a]=c;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> time;<br>    cin&gt;&gt;time;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class=\"hljs-keyword\">int</span> roll[k+<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-keyword\">int</span> has[k+<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-built_in\">memset</span>(has,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(has));<br>        roll[<span class=\"hljs-number\">0</span>]=roll[k+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;\t\t\t\t\t<span class=\"hljs-comment\">//起点和终点必定是家</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=k ; ++i) &#123;<br>            cin&gt;&gt;roll[i];<br>            <span class=\"hljs-keyword\">if</span>(has[roll[i]]) has[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//每个打卡点仅能打卡一次</span><br>            <span class=\"hljs-keyword\">else</span> has[roll[i]]=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> flag=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">int</span> tmpsize=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span>(k!=n||has[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">continue</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=k+<span class=\"hljs-number\">1</span> ; ++l) &#123;<br>            <span class=\"hljs-keyword\">if</span>(g[roll[l<span class=\"hljs-number\">-1</span>]][roll[l]]==<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                flag=<span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            tmpsize+=g[roll[l<span class=\"hljs-number\">-1</span>]][roll[l]];<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(tmpsize&lt;minsize)&#123;<br>                minsize=tmpsize;<br>                minid=j+<span class=\"hljs-number\">1</span>;<br><br>            &#125;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt&lt;&lt;endl;<br>    cout&lt;&lt;minid&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;minsize&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482059\">题目详情 - L2-036 网红点打卡攻略 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵"
            ]
        },
        {
            "id": "http://example.com/2022/04/23/Algorithm031/",
            "url": "http://example.com/2022/04/23/Algorithm031/",
            "title": "L2-039 清点代码库 (25 分)",
            "date_published": "2022-04-23T13:44:47.000Z",
            "content_html": "<h2 id=\"L2-039-清点代码库-25-分\"><a href=\"#L2-039-清点代码库-25-分\" class=\"headerlink\" title=\"L2-039 清点代码库 (25 分)\"></a>L2-039 清点代码库 (25 分)</h2><p><img src=\"/2022/04/23/Algorithm031/58e6a034-993d-4049-8deb-23d769c8597e.jpg\" alt=\"code.jpg\"></p>\n<p>上图转自新浪微博：“阿里代码库有几亿行代码，但其中有很多功能重复的代码，比如单单快排就被重写了几百遍。请设计一个程序，能够将代码库中所有功能重复的代码找出。各位大佬有啥想法，我当时就懵了，然后就挂了。。。”</p>\n<p>这里我们把问题简化一下：首先假设两个功能模块如果接受同样的输入，总是给出同样的输出，则它们就是功能重复的；其次我们把每个模块的输出都简化为一个整数（在 <strong>int</strong> 范围内）。于是我们可以设计一系列输入，检查所有功能模块的对应输出，从而查出功能重复的代码。你的任务就是设计并实现这个简化问题的解决方案。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出 2 个正整数，依次为 <em>N</em>（≤104）和 <em>M</em>（≤102），对应功能模块的个数和系列测试输入的个数。</p>\n<p>随后 <em>N</em> 行，每行给出一个功能模块的 <em>M</em> 个对应输出，数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在第一行输出不同功能的个数 <em>K</em>。随后 <em>K</em> 行，每行给出具有这个功能的模块的个数，以及这个功能的对应输出。数字间以 1 个空格分隔，行首尾不得有多余空格。输出首先按模块个数非递增顺序，如果有并列，则按输出序列的递增序给出。</p>\n<p>注：所谓数列 { <em>A</em>1, …, <em>A</em>M } 比 { <em>B</em>1, …, <em>B</em>M } 大，是指存在 1≤i&lt;*M*，使得 *A*1&#x3D;*B*1，…，*Ai*&#x3D;*Bi* 成立，且 *Ai*+1&gt;<em>B</em>+1。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7 3<br>35 28 74<br>-1 -1 22<br>28 74 35<br>-1 -1 22<br>11 66 0<br>35 28 74<br>35 28 74<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">4<br>3 35 28 74<br>2 -1 -1 22<br>1 11 66 0<br>1 28 74 35<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>利用map的映射关系</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>map&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; mp;   <span class=\"hljs-comment\">//key，value</span><br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; tmp;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; a,pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(a.second==b.second)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> a.first&lt;b.first;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a.second&gt;b.second;<br><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; m; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            tmp.<span class=\"hljs-built_in\">push_back</span>(num);<br>        &#125;<br>        mp[tmp]++;<br>        tmp.<span class=\"hljs-built_in\">clear</span>();<br>    &#125;<br>    vector&lt;pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt;&gt; <span class=\"hljs-built_in\">v</span>(mp.<span class=\"hljs-built_in\">begin</span>(),mp.<span class=\"hljs-built_in\">end</span>());\t\t<span class=\"hljs-comment\">//把map类型转化成vector</span><br>    cout&lt;&lt;v.<span class=\"hljs-built_in\">size</span>()&lt;&lt;endl;<br>    <span class=\"hljs-built_in\">sort</span>(v.<span class=\"hljs-built_in\">begin</span>(),v.<span class=\"hljs-built_in\">end</span>(),cmp);\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//sort排序，注意终点和起点</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt;v.<span class=\"hljs-built_in\">size</span>() ; ++k) &#123;<br>        cout&lt;&lt;v[k].second&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span>(i!=m<span class=\"hljs-number\">-1</span>)&#123;<br>                cout&lt;&lt;v[k].first[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span>&#123;<br>                cout&lt;&lt;v[k].first[i]&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652362\">题目详情 - L2-039 清点代码库 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "Vector",
                "Map",
                "Pair"
            ]
        },
        {
            "id": "http://example.com/2022/04/23/Algorithm030/",
            "url": "http://example.com/2022/04/23/Algorithm030/",
            "title": "L2-005 集合相似度 (25 分)",
            "date_published": "2022-04-23T13:39:53.000Z",
            "content_html": "<h2 id=\"L2-005-集合相似度-25-分\"><a href=\"#L2-005-集合相似度-25-分\" class=\"headerlink\" title=\"L2-005 集合相似度 (25 分)\"></a>L2-005 集合相似度 (25 分)</h2><p>给定两个整数集合，它们的相似度定义为：Nc&#x2F;Nt×100%。其中Nc是两个集合都有的不相等整数的个数，Nt是两个集合一共有的不相等整数的个数。你的任务就是计算任意一对给定集合的相似度。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤50），是集合的个数。随后<em>N</em>行，每行对应一个集合。每个集合首先给出一个正整数<em>M</em>（≤104），是集合中元素的个数；然后跟<em>M</em>个[0,109]区间内的整数。</p>\n<p>之后一行给出一个正整数<em>K</em>（≤2000），随后<em>K</em>行，每行对应一对需要计算相似度的集合的编号（集合从1到<em>N</em>编号）。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每一对需要计算的集合，在一行中输出它们的相似度，为保留小数点后2位的百分比数字。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">3<br>3 99 87 101<br>4 87 101 5 87<br>7 99 101 18 5 135 18 99<br>2<br>1 2<br>1 3<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">50.00%<br>33.33%<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>双set模拟</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    set&lt;<span class=\"hljs-keyword\">int</span>&gt; s[<span class=\"hljs-number\">55</span>];<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> time;<br>        cin&gt;&gt;time;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            s[i].<span class=\"hljs-built_in\">insert</span>(num);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> find;<br>    cin&gt;&gt;find;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>; l &lt;find ; ++l) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class=\"hljs-keyword\">int</span> sum=<span class=\"hljs-number\">0</span>;<br>        set&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//迭代器</span><br>        <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (it=s[a<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">begin</span>(); it!=s[a<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">end</span>() ; it++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(s[b<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">find</span>(*it)!=s[b<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">end</span>())&#123;\t\t\t\t<span class=\"hljs-comment\">//找到了</span><br>                cnt++;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//Nc</span><br>            &#125;<br>        &#125;<br>        sum=s[a<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">size</span>()+s[b<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">size</span>()-cnt;\t\t\t\t<span class=\"hljs-comment\">//Nt=两个集合的总个数-相同个数</span><br>        <span class=\"hljs-keyword\">double</span> ans=<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">double</span></span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">double</span></span>(cnt)/<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">double</span></span>(sum))*<span class=\"hljs-number\">100.0</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf%\\n&quot;</span>,ans);<br><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805070149828608\">题目详情 - L2-005 集合相似度 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "Set",
                "团体程序设计天梯赛",
                "模拟"
            ]
        },
        {
            "id": "http://example.com/2022/04/16/Algorithm029/",
            "url": "http://example.com/2022/04/16/Algorithm029/",
            "title": "STL中map的使用",
            "date_published": "2022-04-16T08:26:03.000Z",
            "content_html": "<h2 id=\"STL中map的使用\"><a href=\"#STL中map的使用\" class=\"headerlink\" title=\"STL中map的使用\"></a>STL中map的使用</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>map 是 STL 的一个关联容器，它提供一对一的数据处理能力。</p>\n<p>map 对象是<strong>模板类</strong>，需要<strong>关键字</strong>和<strong>存储对象</strong>两个模板参数：其中第一个参数称为关键字，每个关键字只能在 map 中出现一次；第二个参数称为该关键字的值。可以将关键字和存储对象理解为“{键，值}对”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">map&lt;<span class=\"hljs-keyword\">int</span>,string&gt; mp;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"map的数据插入操作\"><a href=\"#map的数据插入操作\" class=\"headerlink\" title=\"map的数据插入操作\"></a>map的数据插入操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//使用insert函数插入pair数据</span><br>mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">3</span>,<span class=\"hljs-string\">&quot;xingyuanjie&quot;</span>));<br><span class=\"hljs-comment\">//使用数组方式插入数据</span><br>mp[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-string\">&quot;wangzhouyang&quot;</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>说明：上面的两种方法是有区别的，用 insert 函数插入数据，涉及到集合的唯一性这个概念，即当 map 中有这个关键字时，insert 操作是不能实现数据插入的；但是数组方式能够插入数据，插入的数据会覆盖该关键字之前对应的值。</strong></p>\n<h3 id=\"map中数据的遍历\"><a href=\"#map中数据的遍历\" class=\"headerlink\" title=\"map中数据的遍历\"></a>map中数据的遍历</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">map&lt;<span class=\"hljs-keyword\">int</span>,string&gt;::iterator it;\t\t\t\t\t<span class=\"hljs-comment\">//迭代器</span><br><span class=\"hljs-keyword\">for</span> (it=mp.<span class=\"hljs-built_in\">begin</span>();it!=mp.<span class=\"hljs-built_in\">end</span>();it++) &#123;<br>    cout&lt;&lt;it-&gt;first&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"map中数据的查找\"><a href=\"#map中数据的查找\" class=\"headerlink\" title=\"map中数据的查找\"></a>map中数据的查找</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">map&lt;<span class=\"hljs-keyword\">int</span>,string&gt;::iterator it;\t\t\t\t\t<span class=\"hljs-comment\">//迭代器</span><br>it=mp.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-keyword\">if</span>(it!=mp.<span class=\"hljs-built_in\">end</span>())&#123;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;Find it, the relative value is: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>&#125;<br><span class=\"hljs-keyword\">else</span>&#123;<br>       \tcout &lt;&lt; <span class=\"hljs-string\">&quot;Can not find the relative value.&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"map中数据的删除\"><a href=\"#map中数据的删除\" class=\"headerlink\" title=\"map中数据的删除\"></a>map中数据的删除</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">map&lt;<span class=\"hljs-keyword\">int</span>,string&gt;::iterator it;\t\t\t\t\t<span class=\"hljs-comment\">//迭代器</span><br>it = mp.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-number\">2</span>);<br>mp.<span class=\"hljs-built_in\">erase</span>(it);<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"map中数据的排序\"><a href=\"#map中数据的排序\" class=\"headerlink\" title=\"map中数据的排序\"></a>map中数据的排序</h3><p><strong>map 中的所有元素都会根据元素的键值，自动进行升序排序。</strong></p>\n<h3 id=\"完整操作\"><a href=\"#完整操作\" class=\"headerlink\" title=\"完整操作\"></a>完整操作</h3><h4 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>map&lt;<span class=\"hljs-keyword\">int</span>,string&gt; mp;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//使用insert函数插入pair数据</span><br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">3</span>,<span class=\"hljs-string\">&quot;xingyuanjie&quot;</span>));<br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;shicheng&quot;</span>));<br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">4</span>,<span class=\"hljs-string\">&quot;tanghaipeng&quot;</span>));<br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">6</span>,<span class=\"hljs-string\">&quot;zhouyuhao&quot;</span>));<br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">&quot;heqichuan&quot;</span>));<br>    <span class=\"hljs-comment\">//使用数组方式插入数据</span><br>    mp[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-string\">&quot;wangzhouyang&quot;</span>;<br>    <span class=\"hljs-comment\">//map的遍历</span><br>    map&lt;<span class=\"hljs-keyword\">int</span>,string&gt;::iterator it;<br>    <span class=\"hljs-keyword\">for</span> (it=mp.<span class=\"hljs-built_in\">begin</span>();it!=mp.<span class=\"hljs-built_in\">end</span>();it++) &#123;<br>        cout&lt;&lt;it-&gt;first&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-comment\">//查找操作</span><br>    it=mp.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span>(it!=mp.<span class=\"hljs-built_in\">end</span>())&#123;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;Find it, the relative value is: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;Can not find the relative value.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class=\"hljs-comment\">//删除操作</span><br>    it = mp.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-number\">2</span>);<br>    mp.<span class=\"hljs-built_in\">erase</span>(it);<br>    <span class=\"hljs-keyword\">for</span> (it=mp.<span class=\"hljs-built_in\">begin</span>();it!=mp.<span class=\"hljs-built_in\">end</span>();it++) &#123;<br>        cout&lt;&lt;it-&gt;first&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">1</span> shicheng<br><span class=\"hljs-number\">2</span> wangzhouyang<br><span class=\"hljs-number\">3</span> xingyuanjie<br><span class=\"hljs-number\">4</span> tanghaipeng<br><span class=\"hljs-number\">5</span> heqichuan<br><span class=\"hljs-number\">6</span> zhouyuhao<br>Find it, the relative value is: shicheng<br><span class=\"hljs-number\">1</span> shicheng<br><span class=\"hljs-number\">3</span> xingyuanjie<br><span class=\"hljs-number\">4</span> tanghaipeng<br><span class=\"hljs-number\">5</span> heqichuan<br><span class=\"hljs-number\">6</span> zhouyuhao<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/liitdar/article/details/80009712\">(20条消息) STL中map介绍_liitdar的博客-CSDN博客_stlmap</a></p>\n",
            "tags": [
                "STL",
                "Map"
            ]
        },
        {
            "id": "http://example.com/2022/04/16/Algorithm028/",
            "url": "http://example.com/2022/04/16/Algorithm028/",
            "title": "L2-010 排座位 (25 分)",
            "date_published": "2022-04-16T06:57:46.000Z",
            "content_html": "<h2 id=\"L2-010-排座位-25-分\"><a href=\"#L2-010-排座位-25-分\" class=\"headerlink\" title=\"L2-010 排座位 (25 分)\"></a><strong>L2-010 排座位 (25 分)</strong></h2><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1 宾客2 关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p>\n<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OK but...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7 8 4<br>5 6 1<br>2 7 -1<br>1 3 1<br>3 4 1<br>6 7 -1<br>1 2 1<br>1 4 1<br>2 3 -1<br>3 4<br>5 7<br>2 3<br>7 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">No problem<br>OK<br>OK but...<br>No way<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵 + 并查集</strong></p>\n<p><strong>并查集具体链接：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/01/04/Algorithm004/\">并查集 - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> pre[<span class=\"hljs-number\">100</span>];\t\t\t\t<span class=\"hljs-comment\">//父节点</span><br><span class=\"hljs-keyword\">int</span> deep[<span class=\"hljs-number\">100</span>];\t\t\t\t<span class=\"hljs-comment\">//深度</span><br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">101</span>][<span class=\"hljs-number\">101</span>];\t\t\t<span class=\"hljs-comment\">//邻接矩阵建图</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        pre[i]=i;<br>        deep[i]=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(pre[x]==x)&#123;<br>        <span class=\"hljs-keyword\">return</span> x;<br>    &#125; <span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> pre[x]=<span class=\"hljs-built_in\">find</span>(pre[x]);<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x,<span class=\"hljs-keyword\">int</span> y)</span></span>&#123;<br>    x=<span class=\"hljs-built_in\">find</span>(x);<br>    y=<span class=\"hljs-built_in\">find</span>(y);<br>    <span class=\"hljs-keyword\">if</span>(x==y) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">if</span>(deep[x]&lt;deep[y])&#123;<br>        pre[x]=y;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        pre[y]=x;<br>        <span class=\"hljs-keyword\">if</span>(deep[x]==deep[y])&#123;<br>            deep[x]++;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n,m,k;<br>    <span class=\"hljs-built_in\">init</span>(<span class=\"hljs-number\">105</span>);<br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b,c;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=g[b][a]=c;<br>        <span class=\"hljs-keyword\">if</span>(c==<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">unit</span>(a,b);\t\t\t\t\t<span class=\"hljs-comment\">//如果是朋友则合并</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;k ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">1</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;No problem&quot;</span>&lt;&lt;endl;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">0</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">0</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;OK&quot;</span>&lt;&lt;endl;\t\t\t<span class=\"hljs-comment\">//两人毫无关系</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">-1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">-1</span>&amp;&amp;<span class=\"hljs-built_in\">find</span>(a)==<span class=\"hljs-built_in\">find</span>(b)) cout&lt;&lt;<span class=\"hljs-string\">&quot;OK but...&quot;</span>&lt;&lt;endl;\t<span class=\"hljs-comment\">//敌对且有共同朋友</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">-1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">-1</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;No way&quot;</span>&lt;&lt;endl;\t\t<span class=\"hljs-comment\">//仅敌对</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/weixin_45260385/article/details/109752008\">(20条消息) 【PTA】 L2-010 排座位 (25分) 【简单并查集】_黑桃️的博客-CSDN博客</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066135879680\">题目详情 - L2-010 排座位 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "并查集"
            ]
        },
        {
            "id": "http://example.com/2022/04/16/Algorithm027/",
            "url": "http://example.com/2022/04/16/Algorithm027/",
            "title": "L2-009 抢红包 (25 分)",
            "date_published": "2022-04-16T06:57:38.000Z",
            "content_html": "<h2 id=\"L2-009-抢红包-25-分\"><a href=\"#L2-009-抢红包-25-分\" class=\"headerlink\" title=\"L2-009 抢红包 (25 分)\"></a><strong>L2-009 抢红包 (25 分)</strong></h2><p>没有人没抢过红包吧…… 这里给出<em>N</em>个人之间互相发红包、抢红包的记录，请你统计一下他们抢红包的收获。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤104），即参与发红包和抢红包的总人数，则这些人从1到<em>N</em>编号。随后<em>N</em>行，第<em>i</em>行给出编号为<em>i</em>的人发红包的记录，格式如下：</p>\n<p><em>K     N</em>1 <em>P</em>1⋯ NK PK</p>\n<p>其中<em>K</em>（0≤<em>K</em>≤20）是发出去的红包个数，<em>N</em>i<em>是抢到红包的人的编号，</em>Pi（&gt;0）是其抢到的红包金额（以分为单位）。注意：对于同一个人发出的红包，每人最多只能抢1次，不能重复抢。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>按照收入金额从高到低的递减顺序输出每个人的编号和收入金额（以元为单位，输出小数点后2位）。每个人的信息占一行，两数字间有1个空格。如果收入金额有并列，则按抢到红包的个数递减输出；如果还有并列，则按个人编号递增输出。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">10<br>3 2 22 10 58 8 125<br>5 1 345 3 211 5 233 7 13 8 101<br>1 7 8800<br>2 1 1000 2 1000<br>2 4 250 10 320<br>6 5 11 9 22 8 33 7 44 10 55 4 2<br>1 3 8800<br>2 1 23 2 123<br>1 8 250<br>4 2 121 4 516 7 112 9 10<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">1 11.63<br>2 3.63<br>8 3.63<br>3 2.11<br>7 1.69<br>6 -1.67<br>9 -2.18<br>10 -3.26<br>5 -3.26<br>4 -12.32<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>结构体 + Sort</strong></p>\n<p><strong>需要注意的就是double类型相等的比较</strong></p>\n<p><strong>首先，浮点数在计算机中并不能精确的表示，所以在判断两个double类型的数时需要其他的手段，而不是直接 a&#x3D;&#x3D; b</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> id=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">double</span> money=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>&#125;;<br><span class=\"hljs-keyword\">double</span> dis=<span class=\"hljs-number\">1e-6</span>;\t\t\t\t<span class=\"hljs-comment\">//定义一个误差</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(student a,student b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(a.money-b.money)&lt;dis)&#123;\t\t\t\t<span class=\"hljs-comment\">//如果两个double型相减在误差的范围内，我们认定这两个double类型相等</span><br>        <span class=\"hljs-keyword\">if</span>(a.cnt==b.cnt)&#123;<br>            <span class=\"hljs-keyword\">return</span> a.id&lt;b.id;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> a.cnt&gt;b.cnt;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a.money&gt;b.money;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    cin&gt;&gt;n;<br>    student st[n+<span class=\"hljs-number\">5</span>];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> time;<br>        cin&gt;&gt;time;<br>        st[i].id=i+<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> p;<br>            <span class=\"hljs-keyword\">double</span> x;<br>            cin&gt;&gt;p&gt;&gt;x;<br>            st[p<span class=\"hljs-number\">-1</span>].money+=x/<span class=\"hljs-number\">100</span>;<br>            st[i].money-=x/<span class=\"hljs-number\">100</span>;<br>            st[p<span class=\"hljs-number\">-1</span>].cnt++;\t\t\t\t\t<span class=\"hljs-comment\">//记录抢到的红包数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">sort</span>(st,st+n,cmp);\t\t\t\t\t\t<span class=\"hljs-comment\">//sort从数组下标0开始排序，左闭右开</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt;n ; ++k) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %.2lf\\n&quot;</span>,st[k].id,st[k].money);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/dingpiao190/article/details/73512811?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=1\">(20条消息) double类型是否相等的判断方法_dingpiao190的博客-CSDN博客_double判断相等</a></p>\n<p><a href=\"https://blog.csdn.net/patrick_star_cowboy/article/details/82083392\">(20条消息) 如何判断两个double类型的数是否相等？_Patrick-Star的博客-CSDN博客_两个double怎么判断相等</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066890854400\">题目详情 - L2-009 抢红包 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "结构体",
                "Double类型相等比较"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/Algorithm026/",
            "url": "http://example.com/2022/04/15/Algorithm026/",
            "title": "L2-003 月饼 (25 分)",
            "date_published": "2022-04-15T14:03:52.000Z",
            "content_html": "<h2 id=\"L2-003-月饼-25-分\"><a href=\"#L2-003-月饼-25-分\" class=\"headerlink\" title=\"L2-003 月饼 (25 分)\"></a>L2-003 月饼 (25 分)</h2><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p>\n<p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45&#x2F;2 &#x3D; 94.5（亿元）。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em> 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 <em>D</em> 表示市场最大需求量。随后一行给出 <em>N</em> 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 <em>N</em> 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">3 20<br>18 15 10<br>75 72 45<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">94.50<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>贪心 + Sort</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">mooncake</span>&#123;</span><br>    <span class=\"hljs-keyword\">double</span> pow;<br>    <span class=\"hljs-keyword\">double</span> price;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(mooncake a,mooncake b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a.price*<span class=\"hljs-number\">1.0</span>/a.pow&gt;b.price*<span class=\"hljs-number\">1.0</span>/b.pow;\t\t\t\t<span class=\"hljs-comment\">//返回单价高的</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    <span class=\"hljs-keyword\">double</span> d;<br>    cin&gt;&gt;n&gt;&gt;d;<br>    mooncake m[n];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123;<br>        cin&gt;&gt;m[i].pow;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;n ; ++j) &#123;<br>        cin&gt;&gt;m[j].price;<br>    &#125;<br>    <span class=\"hljs-built_in\">sort</span>(m,m+n,cmp);<br>    <span class=\"hljs-keyword\">double</span> price=<span class=\"hljs-number\">0.0</span>;<br>    <span class=\"hljs-keyword\">double</span> tmpd=d;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt;n ; ++k) &#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//模拟求解</span><br>        <span class=\"hljs-keyword\">if</span>(m[k].pow&lt;=tmpd)&#123;<br>            tmpd-=m[k].pow;<br>            price+=m[k].price;<br>        &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(m[k].pow&gt;tmpd)&#123;<br>            price+=tmpd*(m[k].price/m[k].pow);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2f\\n&quot;</span>,price);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805071789801472\">题目详情 - L2-003 月饼 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "结构体",
                "贪心"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/Algorithm025/",
            "url": "http://example.com/2022/04/15/Algorithm025/",
            "title": "L2-013 红色警报 (25 分)",
            "date_published": "2022-04-15T13:09:30.000Z",
            "content_html": "<h2 id=\"L2-013-红色警报-25-分\"><a href=\"#L2-013-红色警报-25-分\" class=\"headerlink\" title=\"L2-013 红色警报 (25 分)\"></a>L2-013 红色警报 (25 分)</h2><p>战争中保持各个城市间的连通性非常重要。本题要求你编写一个报警程序，当失去一个城市导致国家被分裂为多个无法连通的区域时，就发出红色警报。注意：若该国本来就不完全连通，是分裂的k个区域，而失去一个城市并不改变其他城市之间的连通性，则不要发出警报。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出两个整数<code>N</code>（0 &lt; <code>N</code> ≤ 500）和<code>M</code>（≤ 5000），分别为城市个数（于是默认城市从0到<code>N</code>-1编号）和连接两城市的通路条数。随后<code>M</code>行，每行给出一条通路所连接的两个城市的编号，其间以1个空格分隔。在城市信息之后给出被攻占的信息，即一个正整数<code>K</code>和随后的<code>K</code>个被攻占的城市的编号。</p>\n<p>注意：输入保证给出的被攻占的城市编号都是合法的且无重复，但并不保证给出的通路没有重复。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个被攻占的城市，如果它会改变整个国家的连通性，则输出<code>Red Alert: City k is lost!</code>，其中<code>k</code>是该城市的编号；否则只输出<code>City k is lost.</code>即可。如果该国失去了最后一个城市，则增加一行输出<code>Game Over.</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">5 4<br>0 1<br>1 3<br>3 0<br>0 4<br>5<br>1 2 0 4 3<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">City 1 is lost.<br>City 2 is lost.<br>Red Alert: City 0 is lost!<br>City 4 is lost.<br>City 3 is lost.<br>Game Over.<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵建图 + DFS统计连通分量数</strong></p>\n<p><strong>对于无向图来说，dfstrave()中dfs()或bfstrave()中bfs()的调用次数等于该图的连通分量数</strong></p>\n<p><strong>无向图中的极大连通子图称为连通分量</strong></p>\n<p><strong>极大连通子图必须连通，且包含尽可能多的顶点和边</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">505</span>][<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t<span class=\"hljs-comment\">//邻接矩阵存图</span><br><span class=\"hljs-keyword\">int</span> visit[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//标记访问数组</span><br><span class=\"hljs-keyword\">int</span> lost[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//记录被攻占的城市</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> node)</span></span>&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//正常的DFS</span><br>    visit[node]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>&amp;&amp;g[node][i]==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">dfstrave</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(visit,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(visit));\t\t\t<span class=\"hljs-comment\">//初始化访问数组</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(lost[i]==<span class=\"hljs-number\">1</span>) visit[i]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//如果该城市被攻占，则标记他为以访问</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>            cnt++;      \t\t\t\t\t<span class=\"hljs-comment\">//统计连通分量数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> cnt;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-built_in\">memset</span>(lost,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(lost));\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));\t\t\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++)&#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        g[a][b]=g[b][a]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//存储无向图</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t\t\t<span class=\"hljs-comment\">//获得初始的连通分量数</span><br>    <span class=\"hljs-keyword\">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> w=<span class=\"hljs-number\">0</span>;w&lt;k;w++)&#123;<br>        <span class=\"hljs-keyword\">int</span> city;<br>        cin&gt;&gt;city;<br>        lost[city]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//记录该城市被攻占</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(g[city][i]==<span class=\"hljs-number\">1</span>)&#123;\t\t\t\t<br>                g[city][i]=g[i][city]=<span class=\"hljs-number\">0</span>;\t<span class=\"hljs-comment\">//标记和他相连的城市不再相连</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> tempcnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t<span class=\"hljs-comment\">//当前的连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(tempcnt&lt;=cnt)&#123;\t\t\t\t\t<span class=\"hljs-comment\">//如果当前的连通分量小于等于原来的连通分量，说明图的连通性没有被改变</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;City %d is lost.\\n&quot;</span>, city);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//否则，连通性被改变了</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Red Alert: City %d is lost!\\n&quot;</span>, city);<br>        &#125;<br>        cnt=tempcnt;\t\t\t\t\t\t<span class=\"hljs-comment\">//更新连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(w==n<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//城市已经被攻占完毕</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Game Over.\\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805063963230208\">题目详情 - L2-013 红色警报 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "DFS"
            ]
        },
        {
            "id": "http://example.com/2022/04/14/Algorithm024/",
            "url": "http://example.com/2022/04/14/Algorithm024/",
            "title": "L2-011 玩转二叉树 (25 分)",
            "date_published": "2022-04-14T06:01:10.000Z",
            "content_html": "<h2 id=\"L2-011-玩转二叉树-25-分\"><a href=\"#L2-011-玩转二叉树-25-分\" class=\"headerlink\" title=\"L2-011 玩转二叉树 (25 分)\"></a><strong>L2-011 玩转二叉树 (25 分)</strong></h2><p>给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<code>N</code>（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7<br>1 2 3 4 5 6 7<br>4 1 3 2 6 5 7<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">4 6 1 7 5 3 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>镜面反转即为在层序遍历时交换左右子树的遍历顺序，左-&gt;右变成右-&gt;左</strong></p>\n<p><strong>前序 + 中序 建树 + BFS</strong></p>\n<p><strong>建树详细过程：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/04/07/Algorithm014/\">由遍历顺序构建二叉树(前序+中序;后序+中序) - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span><br>&#125;BiTNode,*BiTree;<br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-keyword\">int</span> in[<span class=\"hljs-number\">35</span>];<br><span class=\"hljs-keyword\">int</span> pre[<span class=\"hljs-number\">35</span>];<br><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">PostCreate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> prel,<span class=\"hljs-keyword\">int</span> prer,<span class=\"hljs-keyword\">int</span> inl,<span class=\"hljs-keyword\">int</span> inr)</span></span>&#123;\t\t\t\t\t<span class=\"hljs-comment\">//前序加中序建树</span><br>    <span class=\"hljs-keyword\">if</span>(prel&gt;prer)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    BiTNode *root;<br>    root=(BiTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BiTNode));<br>    root-&gt;data=pre[prel];<br>    <span class=\"hljs-keyword\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = inl; i &lt;=inr; ++i) &#123;<br>        <span class=\"hljs-keyword\">if</span>(pre[prel]==in[i])&#123;<br>            index=i;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> numleft=index-inl;<br>    root-&gt;lchild=<span class=\"hljs-built_in\">PostCreate</span>(prel+<span class=\"hljs-number\">1</span>,prel+numleft,inl,index<span class=\"hljs-number\">-1</span>);<br>    root-&gt;rchild=<span class=\"hljs-built_in\">PostCreate</span>(prel+numleft+<span class=\"hljs-number\">1</span>,prer,index+<span class=\"hljs-number\">1</span>,inr);<br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    queue&lt;BiTree&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(T);<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>())&#123;<br>        BiTNode *tmp =q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-keyword\">if</span>(i!=n<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//输出格式控制</span><br>            cout&lt;&lt;tmp-&gt;data&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;tmp-&gt;data;<br>        &#125;<br>        i++;<br>        <span class=\"hljs-keyword\">if</span>(tmp-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//镜面反转，左-&gt;右变成右-&gt;左</span><br>            q.<span class=\"hljs-built_in\">push</span>(tmp-&gt;rchild);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(tmp-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>            q.<span class=\"hljs-built_in\">push</span>(tmp-&gt;lchild);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    BiTree tree;<br>    tree=<span class=\"hljs-literal\">NULL</span>;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;n ; ++j) &#123;<br>        cin&gt;&gt;pre[j];<br>    &#125;<br>    tree=<span class=\"hljs-built_in\">PostCreate</span>(<span class=\"hljs-number\">0</span>,n<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>,n<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-built_in\">LevelOrder</span>(tree);<br>    cout&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805065406070784\">题目详情 - L2-011 玩转二叉树 (25 分) (pintia.cn)</a></p>\n<p><a href=\"https://xingyuanjie.top/2022/04/07/Algorithm014/\">由遍历顺序构建二叉树(前序+中序;后序+中序) - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree",
                "BFS"
            ]
        },
        {
            "id": "http://example.com/2022/04/14/Algorithm023/",
            "url": "http://example.com/2022/04/14/Algorithm023/",
            "title": "L2-035 完全二叉树的层序遍历 (25 分)",
            "date_published": "2022-04-14T06:01:05.000Z",
            "content_html": "<h2 id=\"L2-035-完全二叉树的层序遍历-25-分\"><a href=\"#L2-035-完全二叉树的层序遍历-25-分\" class=\"headerlink\" title=\"L2-035 完全二叉树的层序遍历 (25 分)\"></a>L2-035 完全二叉树的层序遍历 (25 分)</h2><p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是<strong>完美二叉树</strong>。对于深度为 <em>D</em> 的，有 <em>N</em> 个结点的二叉树，若其结点对应于相同深度完美二叉树的层序遍历的前 <em>N</em> 个结点，这样的树就是<strong>完全二叉树</strong>。</p>\n<p>给定一棵完全二叉树的后序遍历，请你给出这棵树的层序遍历结果。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出正整数 <em>N</em>（≤30），即树中结点个数。第二行给出后序遍历序列，为 <em>N</em> 个不超过 100 的正整数。同一行中所有数字都以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出该树的层序遍历序列。所有数字都以 1 个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">8<br>91 71 2 34 10 15 55 18<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">18 34 55 71 2 10 15 91<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>后序遍历建树 + 完全二叉树性质</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> tree[<span class=\"hljs-number\">10001</span>];<br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">post</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;\t\t<span class=\"hljs-comment\">//根据后序遍历建树</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span>*i&lt;=n)&#123;\t\t\t<span class=\"hljs-comment\">//当2*i&lt;=n时，结点i的左孩子编号为2*i，否则无左孩子</span><br>        <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">2</span>*i);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span>*i+<span class=\"hljs-number\">1</span>&lt;=n)&#123;\t\t<span class=\"hljs-comment\">//当2*i+1&lt;=n时，结点i的右孩子编号为2*i+1，否则无右孩子</span><br>        <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">2</span>*i+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    cin&gt;&gt;tree[i];<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br><br>    cin&gt;&gt;n;<br>    <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">1</span>);           <span class=\"hljs-comment\">//后序遍历建树</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//顺序输出即为层序遍历</span><br>        <span class=\"hljs-keyword\">if</span>(i!=n)&#123;<br>            cout&lt;&lt;tree[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;tree[i];<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482058\">https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482058</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree"
            ]
        }
    ]
}