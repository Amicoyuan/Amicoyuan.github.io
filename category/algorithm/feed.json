{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amicoyuan • All posts by \"algorithm\" category",
    "description": "",
    "home_page_url": "https://xingyuanjie.top",
    "items": [
        {
            "id": "https://xingyuanjie.top/2023/02/28/vectorbool/",
            "url": "https://xingyuanjie.top/2023/02/28/vectorbool/",
            "title": "vector<bool>与vector<T>",
            "date_published": "2023-02-28T12:59:01.000Z",
            "content_html": "<h1 id=\"vector-lt-bool-gt-与vector-lt-T-gt\"><a href=\"#vector-lt-bool-gt-与vector-lt-T-gt\" class=\"headerlink\" title=\"vector&lt;bool&gt;与vector&lt;T&gt;\"></a>vector&lt;bool&gt;与vector&lt;T&gt;</h1><p>vector&lt;bool&gt; 不像其他容器一样按Byte存储的，它是按bit存储的，也就是说一个正常的bool类型的空间可以存放vector&lt;bool&gt;中的8个，空间上确实优化了很多，然而，c++是不能直接取对bit操作的（因为C++的最小可寻址值通常以byte为单位），对其使用operator[]其实返回的不是bool的引用而是一个”proxy reference”是”std::vector&lt; bool&gt;:reference”类型的对象。</p>\n<p>正因为如此，vector&lt;bool&gt;通过代理对象进行存取访问时需要执行逐位处理，访问通常比int之类的普通类型操作要慢很多。</p>\n<p>因此，对vecotr&lt;bool&gt;的使用需慎重考虑以下几点：<br>(1)是否需要牺牲速度来获取空间上的优化<br>(2)算法中会否有对vecotr地址进行解引用操作的可能。</p>\n<p>如果不满足以上条件，建议使用deque&lt;bool&gt;来取代vector&lt;bool&gt;，功能基本相同，但deque&lt;bool&gt;未对其进行特殊处理。</p>\n<p>下面是vector&lt;bool&gt;与vector&lt;T&gt;简单的对比例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>\tvector&lt;<span class=\"hljs-keyword\">char</span>&gt; ch;<br>\tvector&lt;<span class=\"hljs-keyword\">int</span>&gt; in;<br>\tvector&lt;<span class=\"hljs-keyword\">bool</span>&gt; bo;<br> <br>\t<span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">1e6</span>;<br>\t<span class=\"hljs-keyword\">clock_t</span> t1, t2, t3;<br> <br>\tt1 = <span class=\"hljs-built_in\">clock</span>();<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>\t\tch.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t&#125;<br>\tt1 = <span class=\"hljs-built_in\">clock</span>() - t1;<br> <br>\tt2 = <span class=\"hljs-built_in\">clock</span>();<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>\t\tin.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-number\">0</span>);<br>\t&#125;<br>\tt2 = <span class=\"hljs-built_in\">clock</span>() - t2;<br> <br>\tt3 = <span class=\"hljs-built_in\">clock</span>();<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)&#123;<br>\t\tbo.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-literal\">true</span>);<br>\t&#125;<br>\tt3 = <span class=\"hljs-built_in\">clock</span>() - t3;<br> <br>\tcout &lt;&lt;<span class=\"hljs-string\">&quot;vector&lt;char&gt; &quot;</span>&lt;&lt; t1 &lt;&lt; <span class=\"hljs-string\">&quot;\\n vector&lt;int&gt; &quot;</span> &lt;&lt; t2 &lt;&lt; <span class=\"hljs-string\">&quot;\\nvector&lt;bool&gt; &quot;</span> &lt;&lt; t3 &lt;&lt; endl;<br>\tcout &lt;&lt; endl;<br> <br>\t<span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs cpp\">vector&lt;<span class=\"hljs-keyword\">char</span>&gt; <span class=\"hljs-number\">216</span><br>vextor&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-number\">229</span><br>vector&lt;<span class=\"hljs-keyword\">bool</span>&gt; <span class=\"hljs-number\">16535</span><br></code></pre></div></td></tr></table></figure>\n\n<p>这里发现vector&lt;bool&gt;相较于其他vector&lt;T&gt;速度要慢的多！</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/qq_52134928/article/details/121066304?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121066304-blog-86603050.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121066304-blog-86603050.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=1\">(65条消息) 【C++】vector＜bool＞的特别之处_小陶同学_的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/u013249689/article/details/25297657\">(65条消息) 不使用vector的原因和替代方法_jackycmu的博客-CSDN博客</a></p>\n",
            "tags": [
                "STL",
                "Vector",
                "C/C++",
                "bool"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/18/leetcode11/",
            "url": "https://xingyuanjie.top/2023/02/18/leetcode11/",
            "title": "11. 盛最多水的容器",
            "date_published": "2023-02-18T08:27:01.000Z",
            "content_html": "<h2 id=\"11-盛最多水的容器\"><a href=\"#11-盛最多水的容器\" class=\"headerlink\" title=\"11.盛最多水的容器\"></a>11.盛最多水的容器</h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><h4 id=\"11-盛最多水的容器-1\"><a href=\"#11-盛最多水的容器-1\" class=\"headerlink\" title=\"11. 盛最多水的容器\"></a><a href=\"https://leetcode.cn/problems/container-with-most-water/\">11. 盛最多水的容器</a></h4><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">maxArea</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//双指针；</span><br>        <span class=\"hljs-keyword\">int</span> ans =<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">int</span> left=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">int</span> right=height.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">while</span>(left&lt;right)&#123;<br>            <span class=\"hljs-keyword\">int</span> temp=<span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">if</span>(height[left]&lt;=height[right])&#123;<br>                temp = height[left]*(right-left);<br>                ans = std::<span class=\"hljs-built_in\">max</span>(ans,temp);<br>                left++;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                temp = height[right]*(right-left);<br>                ans = std::<span class=\"hljs-built_in\">max</span>(ans,temp);<br>                right--;<br>            &#125;<br>            <br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>        <br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://leetcode.cn/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/\">盛最多水的容器 - 盛最多水的容器 - 力扣（LeetCode）</a></p>\n",
            "tags": [
                "C++",
                "LeetCode",
                "双指针"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/17/leetcode001/",
            "url": "https://xingyuanjie.top/2023/02/17/leetcode001/",
            "title": "146.LRU cache",
            "date_published": "2023-02-17T06:31:45.000Z",
            "content_html": "<h2 id=\"146-LRU-cache\"><a href=\"#146-LRU-cache\" class=\"headerlink\" title=\"146.LRU cache\"></a>146.LRU cache</h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://leetcode.cn/problems/lru-cache/\">146. LRU 缓存 - 力扣（LeetCode）</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LRUCache</span> &#123;</span><br><span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-keyword\">int</span> cap=<span class=\"hljs-number\">0</span>;<br>    list&lt;pair&lt;<span class=\"hljs-keyword\">int</span>,<span class=\"hljs-keyword\">int</span>&gt;&gt; lru;   <span class=\"hljs-comment\">//真正的cache</span><br>    unordered_map&lt;<span class=\"hljs-keyword\">int</span>,list&lt;pair&lt;<span class=\"hljs-keyword\">int</span>,<span class=\"hljs-keyword\">int</span>&gt;&gt;::iterator&gt; mp;   <span class=\"hljs-comment\">//主要用处就是查找</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-built_in\">LRUCache</span>(<span class=\"hljs-keyword\">int</span> capacity) &#123;<br>        cap = capacity;\t\t\t\t\t\t<span class=\"hljs-comment\">//容量</span><br>    &#125;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> key)</span> </span>&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//作为就是把最近访问的放在表头</span><br>        <span class=\"hljs-keyword\">if</span>(mp.<span class=\"hljs-built_in\">find</span>(key)!=mp.<span class=\"hljs-built_in\">end</span>())&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//有这个元素</span><br>            lru.<span class=\"hljs-built_in\">splice</span>(lru.<span class=\"hljs-built_in\">begin</span>(),lru,mp[key]);\t\t\t<span class=\"hljs-comment\">//将一个 list 容器中的元素插入到另一个容器的指定位置</span><br>            <span class=\"hljs-keyword\">return</span> lru.<span class=\"hljs-built_in\">begin</span>()-&gt;second;\t\t\t\t<span class=\"hljs-comment\">//返回元素</span><br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//没有这个元素</span><br>        &#125;<br>    &#125;<br><br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">put</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> key, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">get</span>(key)!=<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t<span class=\"hljs-comment\">//cache中有key，调用get后自动插入到表头【key存在】</span><br>            lru.<span class=\"hljs-built_in\">begin</span>()-&gt;second = value;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;\t\t\t<span class=\"hljs-comment\">//【key不存在】</span><br>            <span class=\"hljs-keyword\">if</span>(lru.<span class=\"hljs-built_in\">size</span>()==cap)&#123;\t\t\t<span class=\"hljs-comment\">//如果容量满了</span><br>                <span class=\"hljs-keyword\">int</span> delkey = lru.<span class=\"hljs-built_in\">back</span>().first;\t\t <span class=\"hljs-comment\">//记录最久未访问的key</span><br>                lru.<span class=\"hljs-built_in\">pop_back</span>();\t\t\t\t\t\t <span class=\"hljs-comment\">//pop掉，置换</span><br>                mp.<span class=\"hljs-built_in\">erase</span>(delkey);\t\t\t\t\t <span class=\"hljs-comment\">//查找表中也删除\t</span><br>            &#125;<br>            lru.<span class=\"hljs-built_in\">emplace_front</span>(key,value);\t\t\t<span class=\"hljs-comment\">//头部生成一个元素</span><br>            mp[key]=lru.<span class=\"hljs-built_in\">begin</span>();\t\t\t\t\t<span class=\"hljs-comment\">//加入查找表</span><br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your LRUCache object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * LRUCache* obj = new LRUCache(capacity);</span><br><span class=\"hljs-comment\"> * int param_1 = obj-&gt;get(key);</span><br><span class=\"hljs-comment\"> * obj-&gt;put(key,value);</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.jianshu.com/p/bbea4b2410e6\">C++实现LRU缓存——LeetCode146 - 简书 (jianshu.com)</a></p>\n",
            "tags": [
                "C++",
                "LeetCode"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/07/niuke003/",
            "url": "https://xingyuanjie.top/2023/02/07/niuke003/",
            "title": "JZ6 从尾到头打印链表",
            "date_published": "2023-02-07T10:21:41.000Z",
            "content_html": "<h2 id=\"JZ6-从尾到头打印链表\"><a href=\"#JZ6-从尾到头打印链表\" class=\"headerlink\" title=\"JZ6 从尾到头打印链表\"></a><strong>JZ6</strong> <strong>从尾到头打印链表</strong></h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=265&tqId=39210&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?page=1&tpId=13&type=265&difficulty=undefined&judgeStatus=undefined&tags=&title=\">从尾到头打印链表_牛客题霸_牛客网 (nowcoder.com)</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">*  struct ListNode &#123;</span><br><span class=\"hljs-comment\">*        int val;</span><br><span class=\"hljs-comment\">*        struct ListNode *next;</span><br><span class=\"hljs-comment\">*        ListNode(int x) :</span><br><span class=\"hljs-comment\">*              val(x), next(NULL) &#123;</span><br><span class=\"hljs-comment\">*        &#125;</span><br><span class=\"hljs-comment\">*  &#125;;</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">printListFromTailToHead</span><span class=\"hljs-params\">(ListNode* head)</span> </span>&#123;<br>        vector&lt;<span class=\"hljs-keyword\">int</span>&gt; s;<br>        <span class=\"hljs-keyword\">while</span> (head!=<span class=\"hljs-literal\">NULL</span>) &#123;<br>            s.<span class=\"hljs-built_in\">insert</span>(s.<span class=\"hljs-built_in\">begin</span>(),head-&gt;val);\t\t\t\t<span class=\"hljs-comment\">//利用迭代器头插</span><br>            head=head-&gt;next;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> s;<br>    &#125;<br>&#125;;<br><br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "C++",
                "牛客"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/07/niuke002/",
            "url": "https://xingyuanjie.top/2023/02/07/niuke002/",
            "title": "JZ5 替换空格",
            "date_published": "2023-02-07T10:05:25.000Z",
            "content_html": "<h2 id=\"JZ5-替换空格\"><a href=\"#JZ5-替换空格\" class=\"headerlink\" title=\"JZ5 替换空格\"></a><strong>JZ5</strong> <strong>替换空格</strong></h2><h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"https://www.nowcoder.com/practice/0e26e5551f2b489b9f58bc83aa4b6c68?tpId=265&tqId=39209&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=13&difficulty=undefined&judgeStatus=undefined&tags=&title=\">替换空格_牛客题霸_牛客网 (nowcoder.com)</a></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * </span><br><span class=\"hljs-comment\">     * @param s string字符串 </span><br><span class=\"hljs-comment\">     * @return string字符串</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-function\">string <span class=\"hljs-title\">replaceSpace</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-comment\">// write code here</span><br>        string str2 =<span class=\"hljs-string\">&quot;%20&quot;</span>;<br>        string str3;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;s.<span class=\"hljs-built_in\">size</span>(); i++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(s[i]!=<span class=\"hljs-string\">&#x27; &#x27;</span>)\t\t\t\t\t<span class=\"hljs-comment\">//不是空格就插入到str3</span><br>                str3.<span class=\"hljs-built_in\">push_back</span>(s[i]);<br>            <span class=\"hljs-keyword\">else</span><br>                str3.<span class=\"hljs-built_in\">append</span>(str2);\t\t\t<span class=\"hljs-comment\">//如果是空格就把str2插入到str3</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> str3;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n",
            "tags": [
                "C++",
                "牛客"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/07/niuke001/",
            "url": "https://xingyuanjie.top/2023/02/07/niuke001/",
            "title": "JZ3 数组中重复的数字",
            "date_published": "2023-02-07T08:58:01.000Z",
            "content_html": "<h2 id=\"JZ3-数组中重复的数字\"><a href=\"#JZ3-数组中重复的数字\" class=\"headerlink\" title=\"JZ3 数组中重复的数字\"></a>JZ3 数组中重复的数字</h2><h2 id=\"题目链接：\"><a href=\"#题目链接：\" class=\"headerlink\" title=\"题目链接：\"></a>题目链接：</h2><p><a href=\"https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524?tpId=265&tqId=39207&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=13&difficulty=undefined&judgeStatus=undefined&tags=&title=\">数组中重复的数字_牛客题霸_牛客网 (nowcoder.com)</a></p>\n<h2 id=\"完整解答：\"><a href=\"#完整解答：\" class=\"headerlink\" title=\"完整解答：\"></a>完整解答：</h2><p>set::count()是C++ STL中的内置函数，它返回元素在集合中出现的次数。由于set容器仅包含唯一元素，因此只能返回1或0。</p>\n<ul>\n<li>用法：set_name.count(element)</li>\n<li>参数：该函数接受一个强制性参数element，该元素指定要返回其计数的元素。</li>\n<li>返回值：该函数返回1或0，因为该集合仅包含唯一元素。如果设置的容器中存在该值，则返回1。如果容器中不存在它，则返回0。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * </span><br><span class=\"hljs-comment\">     * @param numbers int整型vector </span><br><span class=\"hljs-comment\">     * @return int整型</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">duplicate</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; numbers)</span> </span>&#123;<br>        <span class=\"hljs-comment\">// write code here</span><br>        set&lt;<span class=\"hljs-keyword\">int</span>&gt; s;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;numbers.<span class=\"hljs-built_in\">size</span>();i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(s.<span class=\"hljs-built_in\">count</span>(numbers[i])&gt;<span class=\"hljs-number\">0</span>) \t\t\t\t<span class=\"hljs-comment\">//此元素重复，则返回</span><br>                <span class=\"hljs-keyword\">return</span> numbers[i];<br>            <span class=\"hljs-keyword\">else</span><br>                s.<span class=\"hljs-built_in\">insert</span>(numbers[i]);\t\t\t\t<span class=\"hljs-comment\">//不重复则加入集合</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><a href=\"https://blog.csdn.net/cmehppc/article/details/121712019\">(64条消息) 【c++】set.count()用法_杳杳捞到月亮了吗的博客-CSDN博客_c++set count</a></p>\n",
            "tags": [
                "C++",
                "牛客"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2023/02/02/register/",
            "url": "https://xingyuanjie.top/2023/02/02/register/",
            "title": "register关键字",
            "date_published": "2023-02-02T11:57:01.000Z",
            "content_html": "<h2 id=\"register关键字\"><a href=\"#register关键字\" class=\"headerlink\" title=\"register关键字\"></a>register关键字</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">int</span> val = <span class=\"hljs-number\">100</span>;<br>\t<span class=\"hljs-comment\">//寄存器变量没有地址，不能取地址</span><br>\tval = <span class=\"hljs-number\">200</span>; <span class=\"hljs-comment\">//可以被写入</span><br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, val);<br>\t<span class=\"hljs-comment\">// 在gcc编译器下 也不允许取地址</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-comment\">//由于使用register关键字，直接将val存在寄存器内，因此val没有内存地址，因此不能进行取地址操作。</span><br></code></pre></div></td></tr></table></figure>\n\n<ol>\n<li>我们通常采用局部变量采用 register 的，全局变量会导致 CPU 当中的寄存器被长时间占用。</li>\n<li>一个变量被存放到寄存器当中，那么这个变量的效率就会大大的提高,因为不用访存读取</li>\n<li>register关键字可以与指针变量一起使用。</li>\n<li>寄存器是一个存储类，并且C不允许变量使用多个存储类说明符。因此，register不能与static一起使用。</li>\n<li>寄存器只能在一个块内使用（局部），而不能在全局范围内（在主外部）使用</li>\n<li>寄存器数量有限</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://xie.infoq.cn/article/f6093f4eebd3664c0a1514e26\">【C语言】register 关键字_11月月更_謓泽_InfoQ写作社区</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/263575137\">一步带您了解C语言中的“register”关键字 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.ab62.cn/article/5406.html\">C语言关键字之auto register详解_C 语言_AB教程网 (ab62.cn)</a></p>\n",
            "tags": [
                "C/C++",
                "register"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/23/Algorithm032/",
            "url": "https://xingyuanjie.top/2022/04/23/Algorithm032/",
            "title": "L2-036 网红点打卡攻略 (25 分)",
            "date_published": "2022-04-23T13:50:27.000Z",
            "content_html": "<h2 id=\"L2-036-网红点打卡攻略-25-分\"><a href=\"#L2-036-网红点打卡攻略-25-分\" class=\"headerlink\" title=\"L2-036 网红点打卡攻略 (25 分)\"></a>L2-036 网红点打卡攻略 (25 分)</h2><p>一个旅游景点，如果被带火了的话，就被称为“网红点”。大家来网红点游玩，俗称“打卡”。在各个网红点打卡的快（省）乐（钱）方法称为“攻略”。你的任务就是从一大堆攻略中，找出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>首先第一行给出两个正整数：网红点的个数 <em>N</em>（1&lt;<em>N</em>≤200）和网红点之间通路的条数 <em>M</em>。随后 <em>M</em> 行，每行给出有通路的两个网红点、以及这条路上的旅行花费（为正整数），格式为“网红点1 网红点2 费用”，其中网红点从 1 到 <em>N</em> 编号；同时也给出你家到某些网红点的花费，格式相同，其中你家的编号固定为 <code>0</code>。</p>\n<p>再下一行给出一个正整数 <em>K</em>，是待检验的攻略的数量。随后 <em>K</em> 行，每行给出一条待检攻略，格式为：</p>\n<p><em>n</em> <em>V</em>1 <em>V</em>2 ⋯ Vn</p>\n<p>其中 <em>n</em>(≤200) 是攻略中的网红点数，<em>Vi</em> 是路径上的网红点编号。这里假设你从家里出发，从 <em>V</em>1 开始打卡，最后从 <em>Vn</em> 回家。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在第一行输出满足要求的攻略的个数。</p>\n<p>在第二行中，首先输出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略的序号（从 1 开始），然后输出这个攻略的总路费，其间以一个空格分隔。如果这样的攻略不唯一，则输出序号最小的那个。</p>\n<p>题目保证至少存在一个有效攻略，并且总路费不超过 109。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">6 13<br>0 5 2<br>6 2 2<br>6 0 1<br>3 4 2<br>1 5 2<br>2 5 1<br>3 1 1<br>4 1 2<br>1 6 1<br>6 3 2<br>1 2 1<br>4 5 3<br>2 0 2<br>7<br>6 5 1 4 3 6 2<br>6 5 2 1 6 3 4<br>8 6 2 1 6 3 4 5 2<br>3 2 1 5<br>6 6 1 3 4 5 2<br>7 6 2 1 3 4 5 2<br>6 5 2 1 4 3 6<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">3<br>5 11<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"样例说明：\"><a href=\"#样例说明：\" class=\"headerlink\" title=\"样例说明：\"></a>样例说明：</h3><p>第 2、3、4、6 条都不满足攻略的基本要求，即不能做到从家里出发，在每个网红点打卡仅一次，且能回到家里。所以满足条件的攻略有 3 条。</p>\n<p>第 1 条攻略的总路费是：(0-&gt;5) 2 + (5-&gt;1) 2 + (1-&gt;4) 2 + (4-&gt;3) 2 + (3-&gt;6) 2 + (6-&gt;2) 2 + (2-&gt;0) 2 &#x3D; 14；</p>\n<p>第 5 条攻略的总路费同理可算得：1 + 1 + 1 + 2 + 3 + 1 + 2 &#x3D; 11，是一条更省钱的攻略；</p>\n<p>第 7 条攻略的总路费同理可算得：2 + 1 + 1 + 2 + 2 + 2 + 1 &#x3D; 11，与第 5 条花费相同，但序号较大，所以不输出。</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">205</span>][<span class=\"hljs-number\">205</span>];<br><span class=\"hljs-keyword\">int</span> minsize=INT_MAX;\t\t\t<span class=\"hljs-comment\">//初始化为INT_MAX</span><br><span class=\"hljs-keyword\">int</span> minid=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b,c;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=c;<br>        g[b][a]=c;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> time;<br>    cin&gt;&gt;time;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> k;<br>        cin&gt;&gt;k;<br>        <span class=\"hljs-keyword\">int</span> roll[k+<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-keyword\">int</span> has[k+<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-built_in\">memset</span>(has,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(has));<br>        roll[<span class=\"hljs-number\">0</span>]=roll[k+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;\t\t\t\t\t<span class=\"hljs-comment\">//起点和终点必定是家</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=k ; ++i) &#123;<br>            cin&gt;&gt;roll[i];<br>            <span class=\"hljs-keyword\">if</span>(has[roll[i]]) has[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//每个打卡点仅能打卡一次</span><br>            <span class=\"hljs-keyword\">else</span> has[roll[i]]=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> flag=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">int</span> tmpsize=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span>(k!=n||has[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">continue</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=k+<span class=\"hljs-number\">1</span> ; ++l) &#123;<br>            <span class=\"hljs-keyword\">if</span>(g[roll[l<span class=\"hljs-number\">-1</span>]][roll[l]]==<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                flag=<span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            tmpsize+=g[roll[l<span class=\"hljs-number\">-1</span>]][roll[l]];<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(tmpsize&lt;minsize)&#123;<br>                minsize=tmpsize;<br>                minid=j+<span class=\"hljs-number\">1</span>;<br><br>            &#125;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt&lt;&lt;endl;<br>    cout&lt;&lt;minid&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;minsize&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482059\">题目详情 - L2-036 网红点打卡攻略 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/23/Algorithm031/",
            "url": "https://xingyuanjie.top/2022/04/23/Algorithm031/",
            "title": "L2-039 清点代码库 (25 分)",
            "date_published": "2022-04-23T13:44:47.000Z",
            "content_html": "<h2 id=\"L2-039-清点代码库-25-分\"><a href=\"#L2-039-清点代码库-25-分\" class=\"headerlink\" title=\"L2-039 清点代码库 (25 分)\"></a>L2-039 清点代码库 (25 分)</h2><p><img src=\"/2022/04/23/Algorithm031/58e6a034-993d-4049-8deb-23d769c8597e.jpg\" alt=\"code.jpg\"></p>\n<p>上图转自新浪微博：“阿里代码库有几亿行代码，但其中有很多功能重复的代码，比如单单快排就被重写了几百遍。请设计一个程序，能够将代码库中所有功能重复的代码找出。各位大佬有啥想法，我当时就懵了，然后就挂了。。。”</p>\n<p>这里我们把问题简化一下：首先假设两个功能模块如果接受同样的输入，总是给出同样的输出，则它们就是功能重复的；其次我们把每个模块的输出都简化为一个整数（在 <strong>int</strong> 范围内）。于是我们可以设计一系列输入，检查所有功能模块的对应输出，从而查出功能重复的代码。你的任务就是设计并实现这个简化问题的解决方案。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出 2 个正整数，依次为 <em>N</em>（≤104）和 <em>M</em>（≤102），对应功能模块的个数和系列测试输入的个数。</p>\n<p>随后 <em>N</em> 行，每行给出一个功能模块的 <em>M</em> 个对应输出，数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先在第一行输出不同功能的个数 <em>K</em>。随后 <em>K</em> 行，每行给出具有这个功能的模块的个数，以及这个功能的对应输出。数字间以 1 个空格分隔，行首尾不得有多余空格。输出首先按模块个数非递增顺序，如果有并列，则按输出序列的递增序给出。</p>\n<p>注：所谓数列 { <em>A</em>1, …, <em>A</em>M } 比 { <em>B</em>1, …, <em>B</em>M } 大，是指存在 1≤i&lt;*M*，使得 *A*1&#x3D;*B*1，…，*Ai*&#x3D;*Bi* 成立，且 *Ai*+1&gt;<em>B</em>+1。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7 3<br>35 28 74<br>-1 -1 22<br>28 74 35<br>-1 -1 22<br>11 66 0<br>35 28 74<br>35 28 74<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">4<br>3 35 28 74<br>2 -1 -1 22<br>1 11 66 0<br>1 28 74 35<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>利用map的映射关系</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>map&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; mp;   <span class=\"hljs-comment\">//key，value</span><br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; tmp;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; a,pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt; b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(a.second==b.second)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> a.first&lt;b.first;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a.second&gt;b.second;<br><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; m; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            tmp.<span class=\"hljs-built_in\">push_back</span>(num);<br>        &#125;<br>        mp[tmp]++;<br>        tmp.<span class=\"hljs-built_in\">clear</span>();<br>    &#125;<br>    vector&lt;pair&lt;vector&lt;<span class=\"hljs-keyword\">int</span>&gt;,<span class=\"hljs-keyword\">int</span>&gt;&gt; <span class=\"hljs-built_in\">v</span>(mp.<span class=\"hljs-built_in\">begin</span>(),mp.<span class=\"hljs-built_in\">end</span>());\t\t<span class=\"hljs-comment\">//把map类型转化成vector</span><br>    cout&lt;&lt;v.<span class=\"hljs-built_in\">size</span>()&lt;&lt;endl;<br>    <span class=\"hljs-built_in\">sort</span>(v.<span class=\"hljs-built_in\">begin</span>(),v.<span class=\"hljs-built_in\">end</span>(),cmp);\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//sort排序，注意终点和起点</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt;v.<span class=\"hljs-built_in\">size</span>() ; ++k) &#123;<br>        cout&lt;&lt;v[k].second&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span>(i!=m<span class=\"hljs-number\">-1</span>)&#123;<br>                cout&lt;&lt;v[k].first[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span>&#123;<br>                cout&lt;&lt;v[k].first[i]&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652362\">题目详情 - L2-039 清点代码库 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "Vector",
                "Map",
                "Pair"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/23/Algorithm030/",
            "url": "https://xingyuanjie.top/2022/04/23/Algorithm030/",
            "title": "L2-005 集合相似度 (25 分)",
            "date_published": "2022-04-23T13:39:53.000Z",
            "content_html": "<h2 id=\"L2-005-集合相似度-25-分\"><a href=\"#L2-005-集合相似度-25-分\" class=\"headerlink\" title=\"L2-005 集合相似度 (25 分)\"></a>L2-005 集合相似度 (25 分)</h2><p>给定两个整数集合，它们的相似度定义为：Nc&#x2F;Nt×100%。其中Nc是两个集合都有的不相等整数的个数，Nt是两个集合一共有的不相等整数的个数。你的任务就是计算任意一对给定集合的相似度。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤50），是集合的个数。随后<em>N</em>行，每行对应一个集合。每个集合首先给出一个正整数<em>M</em>（≤104），是集合中元素的个数；然后跟<em>M</em>个[0,109]区间内的整数。</p>\n<p>之后一行给出一个正整数<em>K</em>（≤2000），随后<em>K</em>行，每行对应一对需要计算相似度的集合的编号（集合从1到<em>N</em>编号）。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每一对需要计算的集合，在一行中输出它们的相似度，为保留小数点后2位的百分比数字。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">3<br>3 99 87 101<br>4 87 101 5 87<br>7 99 101 18 5 135 18 99<br>2<br>1 2<br>1 3<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">50.00%<br>33.33%<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>双set模拟</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    set&lt;<span class=\"hljs-keyword\">int</span>&gt; s[<span class=\"hljs-number\">55</span>];<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> time;<br>        cin&gt;&gt;time;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            s[i].<span class=\"hljs-built_in\">insert</span>(num);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> find;<br>    cin&gt;&gt;find;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>; l &lt;find ; ++l) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class=\"hljs-keyword\">int</span> sum=<span class=\"hljs-number\">0</span>;<br>        set&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//迭代器</span><br>        <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (it=s[a<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">begin</span>(); it!=s[a<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">end</span>() ; it++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(s[b<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">find</span>(*it)!=s[b<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">end</span>())&#123;\t\t\t\t<span class=\"hljs-comment\">//找到了</span><br>                cnt++;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//Nc</span><br>            &#125;<br>        &#125;<br>        sum=s[a<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">size</span>()+s[b<span class=\"hljs-number\">-1</span>].<span class=\"hljs-built_in\">size</span>()-cnt;\t\t\t\t<span class=\"hljs-comment\">//Nt=两个集合的总个数-相同个数</span><br>        <span class=\"hljs-keyword\">double</span> ans=<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">double</span></span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">double</span></span>(cnt)/<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">double</span></span>(sum))*<span class=\"hljs-number\">100.0</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf%\\n&quot;</span>,ans);<br><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805070149828608\">题目详情 - L2-005 集合相似度 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "Set",
                "团体程序设计天梯赛",
                "模拟"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/16/Algorithm029/",
            "url": "https://xingyuanjie.top/2022/04/16/Algorithm029/",
            "title": "STL中map的使用",
            "date_published": "2022-04-16T08:26:03.000Z",
            "content_html": "<h2 id=\"STL中map的使用\"><a href=\"#STL中map的使用\" class=\"headerlink\" title=\"STL中map的使用\"></a>STL中map的使用</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>map 是 STL 的一个关联容器，它提供一对一的数据处理能力。</p>\n<p>map 对象是<strong>模板类</strong>，需要<strong>关键字</strong>和<strong>存储对象</strong>两个模板参数：其中第一个参数称为关键字，每个关键字只能在 map 中出现一次；第二个参数称为该关键字的值。可以将关键字和存储对象理解为“{键，值}对”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">map&lt;<span class=\"hljs-keyword\">int</span>,string&gt; mp;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"map的数据插入操作\"><a href=\"#map的数据插入操作\" class=\"headerlink\" title=\"map的数据插入操作\"></a>map的数据插入操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//使用insert函数插入pair数据</span><br>mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">3</span>,<span class=\"hljs-string\">&quot;xingyuanjie&quot;</span>));<br><span class=\"hljs-comment\">//使用数组方式插入数据</span><br>mp[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-string\">&quot;wangzhouyang&quot;</span>;<br></code></pre></div></td></tr></table></figure>\n\n<p><strong>说明：上面的两种方法是有区别的，用 insert 函数插入数据，涉及到集合的唯一性这个概念，即当 map 中有这个关键字时，insert 操作是不能实现数据插入的；但是数组方式能够插入数据，插入的数据会覆盖该关键字之前对应的值。</strong></p>\n<h3 id=\"map中数据的遍历\"><a href=\"#map中数据的遍历\" class=\"headerlink\" title=\"map中数据的遍历\"></a>map中数据的遍历</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">map&lt;<span class=\"hljs-keyword\">int</span>,string&gt;::iterator it;\t\t\t\t\t<span class=\"hljs-comment\">//迭代器</span><br><span class=\"hljs-keyword\">for</span> (it=mp.<span class=\"hljs-built_in\">begin</span>();it!=mp.<span class=\"hljs-built_in\">end</span>();it++) &#123;<br>    cout&lt;&lt;it-&gt;first&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"map中数据的查找\"><a href=\"#map中数据的查找\" class=\"headerlink\" title=\"map中数据的查找\"></a>map中数据的查找</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">map&lt;<span class=\"hljs-keyword\">int</span>,string&gt;::iterator it;\t\t\t\t\t<span class=\"hljs-comment\">//迭代器</span><br>it=mp.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-keyword\">if</span>(it!=mp.<span class=\"hljs-built_in\">end</span>())&#123;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;Find it, the relative value is: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>&#125;<br><span class=\"hljs-keyword\">else</span>&#123;<br>       \tcout &lt;&lt; <span class=\"hljs-string\">&quot;Can not find the relative value.&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"map中数据的删除\"><a href=\"#map中数据的删除\" class=\"headerlink\" title=\"map中数据的删除\"></a>map中数据的删除</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\">map&lt;<span class=\"hljs-keyword\">int</span>,string&gt;::iterator it;\t\t\t\t\t<span class=\"hljs-comment\">//迭代器</span><br>it = mp.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-number\">2</span>);<br>mp.<span class=\"hljs-built_in\">erase</span>(it);<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"map中数据的排序\"><a href=\"#map中数据的排序\" class=\"headerlink\" title=\"map中数据的排序\"></a>map中数据的排序</h3><p><strong>map 中的所有元素都会根据元素的键值，自动进行升序排序。</strong></p>\n<h3 id=\"完整操作\"><a href=\"#完整操作\" class=\"headerlink\" title=\"完整操作\"></a>完整操作</h3><h4 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>map&lt;<span class=\"hljs-keyword\">int</span>,string&gt; mp;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//使用insert函数插入pair数据</span><br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">3</span>,<span class=\"hljs-string\">&quot;xingyuanjie&quot;</span>));<br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;shicheng&quot;</span>));<br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">4</span>,<span class=\"hljs-string\">&quot;tanghaipeng&quot;</span>));<br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">6</span>,<span class=\"hljs-string\">&quot;zhouyuhao&quot;</span>));<br>    mp.<span class=\"hljs-built_in\">insert</span>(pair&lt;<span class=\"hljs-keyword\">int</span>,string&gt;(<span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">&quot;heqichuan&quot;</span>));<br>    <span class=\"hljs-comment\">//使用数组方式插入数据</span><br>    mp[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-string\">&quot;wangzhouyang&quot;</span>;<br>    <span class=\"hljs-comment\">//map的遍历</span><br>    map&lt;<span class=\"hljs-keyword\">int</span>,string&gt;::iterator it;<br>    <span class=\"hljs-keyword\">for</span> (it=mp.<span class=\"hljs-built_in\">begin</span>();it!=mp.<span class=\"hljs-built_in\">end</span>();it++) &#123;<br>        cout&lt;&lt;it-&gt;first&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-comment\">//查找操作</span><br>    it=mp.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span>(it!=mp.<span class=\"hljs-built_in\">end</span>())&#123;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;Find it, the relative value is: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;Can not find the relative value.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class=\"hljs-comment\">//删除操作</span><br>    it = mp.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-number\">2</span>);<br>    mp.<span class=\"hljs-built_in\">erase</span>(it);<br>    <span class=\"hljs-keyword\">for</span> (it=mp.<span class=\"hljs-built_in\">begin</span>();it!=mp.<span class=\"hljs-built_in\">end</span>();it++) &#123;<br>        cout&lt;&lt;it-&gt;first&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"程序输出：\"><a href=\"#程序输出：\" class=\"headerlink\" title=\"程序输出：\"></a>程序输出：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-number\">1</span> shicheng<br><span class=\"hljs-number\">2</span> wangzhouyang<br><span class=\"hljs-number\">3</span> xingyuanjie<br><span class=\"hljs-number\">4</span> tanghaipeng<br><span class=\"hljs-number\">5</span> heqichuan<br><span class=\"hljs-number\">6</span> zhouyuhao<br>Find it, the relative value is: shicheng<br><span class=\"hljs-number\">1</span> shicheng<br><span class=\"hljs-number\">3</span> xingyuanjie<br><span class=\"hljs-number\">4</span> tanghaipeng<br><span class=\"hljs-number\">5</span> heqichuan<br><span class=\"hljs-number\">6</span> zhouyuhao<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/liitdar/article/details/80009712\">(20条消息) STL中map介绍_liitdar的博客-CSDN博客_stlmap</a></p>\n",
            "tags": [
                "STL",
                "Map"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/16/Algorithm028/",
            "url": "https://xingyuanjie.top/2022/04/16/Algorithm028/",
            "title": "L2-010 排座位 (25 分)",
            "date_published": "2022-04-16T06:57:46.000Z",
            "content_html": "<h2 id=\"L2-010-排座位-25-分\"><a href=\"#L2-010-排座位-25-分\" class=\"headerlink\" title=\"L2-010 排座位 (25 分)\"></a><strong>L2-010 排座位 (25 分)</strong></h2><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1 宾客2 关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p>\n<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OK but...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7 8 4<br>5 6 1<br>2 7 -1<br>1 3 1<br>3 4 1<br>6 7 -1<br>1 2 1<br>1 4 1<br>2 3 -1<br>3 4<br>5 7<br>2 3<br>7 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">No problem<br>OK<br>OK but...<br>No way<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵 + 并查集</strong></p>\n<p><strong>并查集具体链接：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/01/04/Algorithm004/\">并查集 - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> pre[<span class=\"hljs-number\">100</span>];\t\t\t\t<span class=\"hljs-comment\">//父节点</span><br><span class=\"hljs-keyword\">int</span> deep[<span class=\"hljs-number\">100</span>];\t\t\t\t<span class=\"hljs-comment\">//深度</span><br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">101</span>][<span class=\"hljs-number\">101</span>];\t\t\t<span class=\"hljs-comment\">//邻接矩阵建图</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        pre[i]=i;<br>        deep[i]=<span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(pre[x]==x)&#123;<br>        <span class=\"hljs-keyword\">return</span> x;<br>    &#125; <span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> pre[x]=<span class=\"hljs-built_in\">find</span>(pre[x]);<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x,<span class=\"hljs-keyword\">int</span> y)</span></span>&#123;<br>    x=<span class=\"hljs-built_in\">find</span>(x);<br>    y=<span class=\"hljs-built_in\">find</span>(y);<br>    <span class=\"hljs-keyword\">if</span>(x==y) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">if</span>(deep[x]&lt;deep[y])&#123;<br>        pre[x]=y;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        pre[y]=x;<br>        <span class=\"hljs-keyword\">if</span>(deep[x]==deep[y])&#123;<br>            deep[x]++;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n,m,k;<br>    <span class=\"hljs-built_in\">init</span>(<span class=\"hljs-number\">105</span>);<br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;m ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b,c;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=g[b][a]=c;<br>        <span class=\"hljs-keyword\">if</span>(c==<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">unit</span>(a,b);\t\t\t\t\t<span class=\"hljs-comment\">//如果是朋友则合并</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;k ; ++j) &#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">1</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;No problem&quot;</span>&lt;&lt;endl;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">0</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">0</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;OK&quot;</span>&lt;&lt;endl;\t\t\t<span class=\"hljs-comment\">//两人毫无关系</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">-1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">-1</span>&amp;&amp;<span class=\"hljs-built_in\">find</span>(a)==<span class=\"hljs-built_in\">find</span>(b)) cout&lt;&lt;<span class=\"hljs-string\">&quot;OK but...&quot;</span>&lt;&lt;endl;\t<span class=\"hljs-comment\">//敌对且有共同朋友</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(g[a][b]==<span class=\"hljs-number\">-1</span>&amp;&amp;g[b][a]==<span class=\"hljs-number\">-1</span>) cout&lt;&lt;<span class=\"hljs-string\">&quot;No way&quot;</span>&lt;&lt;endl;\t\t<span class=\"hljs-comment\">//仅敌对</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/weixin_45260385/article/details/109752008\">(20条消息) 【PTA】 L2-010 排座位 (25分) 【简单并查集】_黑桃️的博客-CSDN博客</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066135879680\">题目详情 - L2-010 排座位 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "并查集"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/16/Algorithm027/",
            "url": "https://xingyuanjie.top/2022/04/16/Algorithm027/",
            "title": "L2-009 抢红包 (25 分)",
            "date_published": "2022-04-16T06:57:38.000Z",
            "content_html": "<h2 id=\"L2-009-抢红包-25-分\"><a href=\"#L2-009-抢红包-25-分\" class=\"headerlink\" title=\"L2-009 抢红包 (25 分)\"></a><strong>L2-009 抢红包 (25 分)</strong></h2><p>没有人没抢过红包吧…… 这里给出<em>N</em>个人之间互相发红包、抢红包的记录，请你统计一下他们抢红包的收获。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤104），即参与发红包和抢红包的总人数，则这些人从1到<em>N</em>编号。随后<em>N</em>行，第<em>i</em>行给出编号为<em>i</em>的人发红包的记录，格式如下：</p>\n<p><em>K     N</em>1 <em>P</em>1⋯ NK PK</p>\n<p>其中<em>K</em>（0≤<em>K</em>≤20）是发出去的红包个数，<em>N</em>i<em>是抢到红包的人的编号，</em>Pi（&gt;0）是其抢到的红包金额（以分为单位）。注意：对于同一个人发出的红包，每人最多只能抢1次，不能重复抢。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>按照收入金额从高到低的递减顺序输出每个人的编号和收入金额（以元为单位，输出小数点后2位）。每个人的信息占一行，两数字间有1个空格。如果收入金额有并列，则按抢到红包的个数递减输出；如果还有并列，则按个人编号递增输出。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">10<br>3 2 22 10 58 8 125<br>5 1 345 3 211 5 233 7 13 8 101<br>1 7 8800<br>2 1 1000 2 1000<br>2 4 250 10 320<br>6 5 11 9 22 8 33 7 44 10 55 4 2<br>1 3 8800<br>2 1 23 2 123<br>1 8 250<br>4 2 121 4 516 7 112 9 10<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">1 11.63<br>2 3.63<br>8 3.63<br>3 2.11<br>7 1.69<br>6 -1.67<br>9 -2.18<br>10 -3.26<br>5 -3.26<br>4 -12.32<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>结构体 + Sort</strong></p>\n<p><strong>需要注意的就是double类型相等的比较</strong></p>\n<p><strong>首先，浮点数在计算机中并不能精确的表示，所以在判断两个double类型的数时需要其他的手段，而不是直接 a&#x3D;&#x3D; b</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> id=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">double</span> money=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>&#125;;<br><span class=\"hljs-keyword\">double</span> dis=<span class=\"hljs-number\">1e-6</span>;\t\t\t\t<span class=\"hljs-comment\">//定义一个误差</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(student a,student b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(a.money-b.money)&lt;dis)&#123;\t\t\t\t<span class=\"hljs-comment\">//如果两个double型相减在误差的范围内，我们认定这两个double类型相等</span><br>        <span class=\"hljs-keyword\">if</span>(a.cnt==b.cnt)&#123;<br>            <span class=\"hljs-keyword\">return</span> a.id&lt;b.id;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> a.cnt&gt;b.cnt;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> a.money&gt;b.money;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    cin&gt;&gt;n;<br>    student st[n+<span class=\"hljs-number\">5</span>];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> time;<br>        cin&gt;&gt;time;<br>        st[i].id=i+<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;time ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> p;<br>            <span class=\"hljs-keyword\">double</span> x;<br>            cin&gt;&gt;p&gt;&gt;x;<br>            st[p<span class=\"hljs-number\">-1</span>].money+=x/<span class=\"hljs-number\">100</span>;<br>            st[i].money-=x/<span class=\"hljs-number\">100</span>;<br>            st[p<span class=\"hljs-number\">-1</span>].cnt++;\t\t\t\t\t<span class=\"hljs-comment\">//记录抢到的红包数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">sort</span>(st,st+n,cmp);\t\t\t\t\t\t<span class=\"hljs-comment\">//sort从数组下标0开始排序，左闭右开</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt;n ; ++k) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %.2lf\\n&quot;</span>,st[k].id,st[k].money);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://blog.csdn.net/dingpiao190/article/details/73512811?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=1\">(20条消息) double类型是否相等的判断方法_dingpiao190的博客-CSDN博客_double判断相等</a></p>\n<p><a href=\"https://blog.csdn.net/patrick_star_cowboy/article/details/82083392\">(20条消息) 如何判断两个double类型的数是否相等？_Patrick-Star的博客-CSDN博客_两个double怎么判断相等</a></p>\n<p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805066890854400\">题目详情 - L2-009 抢红包 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "结构体",
                "Double类型相等比较"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/15/Algorithm026/",
            "url": "https://xingyuanjie.top/2022/04/15/Algorithm026/",
            "title": "L2-003 月饼 (25 分)",
            "date_published": "2022-04-15T14:03:52.000Z",
            "content_html": "<h2 id=\"L2-003-月饼-25-分\"><a href=\"#L2-003-月饼-25-分\" class=\"headerlink\" title=\"L2-003 月饼 (25 分)\"></a>L2-003 月饼 (25 分)</h2><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p>\n<p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45&#x2F;2 &#x3D; 94.5（亿元）。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em> 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 <em>D</em> 表示市场最大需求量。随后一行给出 <em>N</em> 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 <em>N</em> 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">3 20<br>18 15 10<br>75 72 45<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">94.50<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>贪心 + Sort</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">mooncake</span>&#123;</span><br>    <span class=\"hljs-keyword\">double</span> pow;<br>    <span class=\"hljs-keyword\">double</span> price;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(mooncake a,mooncake b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a.price*<span class=\"hljs-number\">1.0</span>/a.pow&gt;b.price*<span class=\"hljs-number\">1.0</span>/b.pow;\t\t\t\t<span class=\"hljs-comment\">//返回单价高的</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    <span class=\"hljs-keyword\">double</span> d;<br>    cin&gt;&gt;n&gt;&gt;d;<br>    mooncake m[n];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123;<br>        cin&gt;&gt;m[i].pow;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;n ; ++j) &#123;<br>        cin&gt;&gt;m[j].price;<br>    &#125;<br>    <span class=\"hljs-built_in\">sort</span>(m,m+n,cmp);<br>    <span class=\"hljs-keyword\">double</span> price=<span class=\"hljs-number\">0.0</span>;<br>    <span class=\"hljs-keyword\">double</span> tmpd=d;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt;n ; ++k) &#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//模拟求解</span><br>        <span class=\"hljs-keyword\">if</span>(m[k].pow&lt;=tmpd)&#123;<br>            tmpd-=m[k].pow;<br>            price+=m[k].price;<br>        &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(m[k].pow&gt;tmpd)&#123;<br>            price+=tmpd*(m[k].price/m[k].pow);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2f\\n&quot;</span>,price);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805071789801472\">题目详情 - L2-003 月饼 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "C++",
                "团体程序设计天梯赛",
                "Sort",
                "结构体",
                "贪心"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/15/Algorithm025/",
            "url": "https://xingyuanjie.top/2022/04/15/Algorithm025/",
            "title": "L2-013 红色警报 (25 分)",
            "date_published": "2022-04-15T13:09:30.000Z",
            "content_html": "<h2 id=\"L2-013-红色警报-25-分\"><a href=\"#L2-013-红色警报-25-分\" class=\"headerlink\" title=\"L2-013 红色警报 (25 分)\"></a>L2-013 红色警报 (25 分)</h2><p>战争中保持各个城市间的连通性非常重要。本题要求你编写一个报警程序，当失去一个城市导致国家被分裂为多个无法连通的区域时，就发出红色警报。注意：若该国本来就不完全连通，是分裂的k个区域，而失去一个城市并不改变其他城市之间的连通性，则不要发出警报。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出两个整数<code>N</code>（0 &lt; <code>N</code> ≤ 500）和<code>M</code>（≤ 5000），分别为城市个数（于是默认城市从0到<code>N</code>-1编号）和连接两城市的通路条数。随后<code>M</code>行，每行给出一条通路所连接的两个城市的编号，其间以1个空格分隔。在城市信息之后给出被攻占的信息，即一个正整数<code>K</code>和随后的<code>K</code>个被攻占的城市的编号。</p>\n<p>注意：输入保证给出的被攻占的城市编号都是合法的且无重复，但并不保证给出的通路没有重复。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每个被攻占的城市，如果它会改变整个国家的连通性，则输出<code>Red Alert: City k is lost!</code>，其中<code>k</code>是该城市的编号；否则只输出<code>City k is lost.</code>即可。如果该国失去了最后一个城市，则增加一行输出<code>Game Over.</code>。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">5 4<br>0 1<br>1 3<br>3 0<br>0 4<br>5<br>1 2 0 4 3<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">City 1 is lost.<br>City 2 is lost.<br>Red Alert: City 0 is lost!<br>City 4 is lost.<br>City 3 is lost.<br>Game Over.<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接矩阵建图 + DFS统计连通分量数</strong></p>\n<p><strong>对于无向图来说，dfstrave()中dfs()或bfstrave()中bfs()的调用次数等于该图的连通分量数</strong></p>\n<p><strong>无向图中的极大连通子图称为连通分量</strong></p>\n<p><strong>极大连通子图必须连通，且包含尽可能多的顶点和边</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> n,m;<br><span class=\"hljs-keyword\">int</span> g[<span class=\"hljs-number\">505</span>][<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t<span class=\"hljs-comment\">//邻接矩阵存图</span><br><span class=\"hljs-keyword\">int</span> visit[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//标记访问数组</span><br><span class=\"hljs-keyword\">int</span> lost[<span class=\"hljs-number\">505</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//记录被攻占的城市</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> node)</span></span>&#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//正常的DFS</span><br>    visit[node]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>&amp;&amp;g[node][i]==<span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">dfstrave</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(visit,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(visit));\t\t\t<span class=\"hljs-comment\">//初始化访问数组</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(lost[i]==<span class=\"hljs-number\">1</span>) visit[i]=<span class=\"hljs-number\">1</span>;\t\t\t<span class=\"hljs-comment\">//如果该城市被攻占，则标记他为以访问</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(visit[i]==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-built_in\">dfs</span>(i);<br>            cnt++;      \t\t\t\t\t<span class=\"hljs-comment\">//统计连通分量数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> cnt;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-built_in\">memset</span>(lost,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(lost));\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-built_in\">memset</span>(g,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(g));\t\t\t\t\t<span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++)&#123;<br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        g[a][b]=g[b][a]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//存储无向图</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> cnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t\t\t<span class=\"hljs-comment\">//获得初始的连通分量数</span><br>    <span class=\"hljs-keyword\">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> w=<span class=\"hljs-number\">0</span>;w&lt;k;w++)&#123;<br>        <span class=\"hljs-keyword\">int</span> city;<br>        cin&gt;&gt;city;<br>        lost[city]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//记录该城市被攻占</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(g[city][i]==<span class=\"hljs-number\">1</span>)&#123;\t\t\t\t<br>                g[city][i]=g[i][city]=<span class=\"hljs-number\">0</span>;\t<span class=\"hljs-comment\">//标记和他相连的城市不再相连</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> tempcnt=<span class=\"hljs-built_in\">dfstrave</span>();\t\t\t\t<span class=\"hljs-comment\">//当前的连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(tempcnt&lt;=cnt)&#123;\t\t\t\t\t<span class=\"hljs-comment\">//如果当前的连通分量小于等于原来的连通分量，说明图的连通性没有被改变</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;City %d is lost.\\n&quot;</span>, city);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//否则，连通性被改变了</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Red Alert: City %d is lost!\\n&quot;</span>, city);<br>        &#125;<br>        cnt=tempcnt;\t\t\t\t\t\t<span class=\"hljs-comment\">//更新连通分量</span><br>        <span class=\"hljs-keyword\">if</span>(w==n<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//城市已经被攻占完毕</span><br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Game Over.\\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805063963230208\">题目详情 - L2-013 红色警报 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Graph",
                "邻接矩阵",
                "DFS"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/14/Algorithm024/",
            "url": "https://xingyuanjie.top/2022/04/14/Algorithm024/",
            "title": "L2-011 玩转二叉树 (25 分)",
            "date_published": "2022-04-14T06:01:10.000Z",
            "content_html": "<h2 id=\"L2-011-玩转二叉树-25-分\"><a href=\"#L2-011-玩转二叉树-25-分\" class=\"headerlink\" title=\"L2-011 玩转二叉树 (25 分)\"></a><strong>L2-011 玩转二叉树 (25 分)</strong></h2><p>给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行给出一个正整数<code>N</code>（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">7<br>1 2 3 4 5 6 7<br>4 1 3 2 6 5 7<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">4 6 1 7 5 3 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>镜面反转即为在层序遍历时交换左右子树的遍历顺序，左-&gt;右变成右-&gt;左</strong></p>\n<p><strong>前序 + 中序 建树 + BFS</strong></p>\n<p><strong>建树详细过程：</strong></p>\n<p><a href=\"https://xingyuanjie.top/2022/04/07/Algorithm014/\">由遍历顺序构建二叉树(前序+中序;后序+中序) - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span><br>&#125;BiTNode,*BiTree;<br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-keyword\">int</span> in[<span class=\"hljs-number\">35</span>];<br><span class=\"hljs-keyword\">int</span> pre[<span class=\"hljs-number\">35</span>];<br><span class=\"hljs-function\">BiTree <span class=\"hljs-title\">PostCreate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> prel,<span class=\"hljs-keyword\">int</span> prer,<span class=\"hljs-keyword\">int</span> inl,<span class=\"hljs-keyword\">int</span> inr)</span></span>&#123;\t\t\t\t\t<span class=\"hljs-comment\">//前序加中序建树</span><br>    <span class=\"hljs-keyword\">if</span>(prel&gt;prer)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br>    BiTNode *root;<br>    root=(BiTNode*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BiTNode));<br>    root-&gt;data=pre[prel];<br>    <span class=\"hljs-keyword\">int</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = inl; i &lt;=inr; ++i) &#123;<br>        <span class=\"hljs-keyword\">if</span>(pre[prel]==in[i])&#123;<br>            index=i;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> numleft=index-inl;<br>    root-&gt;lchild=<span class=\"hljs-built_in\">PostCreate</span>(prel+<span class=\"hljs-number\">1</span>,prel+numleft,inl,index<span class=\"hljs-number\">-1</span>);<br>    root-&gt;rchild=<span class=\"hljs-built_in\">PostCreate</span>(prel+numleft+<span class=\"hljs-number\">1</span>,prer,index+<span class=\"hljs-number\">1</span>,inr);<br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    queue&lt;BiTree&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(T);<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>())&#123;<br>        BiTNode *tmp =q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-keyword\">if</span>(i!=n<span class=\"hljs-number\">-1</span>)&#123;\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//输出格式控制</span><br>            cout&lt;&lt;tmp-&gt;data&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;tmp-&gt;data;<br>        &#125;<br>        i++;<br>        <span class=\"hljs-keyword\">if</span>(tmp-&gt;rchild!=<span class=\"hljs-literal\">NULL</span>)&#123;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//镜面反转，左-&gt;右变成右-&gt;左</span><br>            q.<span class=\"hljs-built_in\">push</span>(tmp-&gt;rchild);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(tmp-&gt;lchild!=<span class=\"hljs-literal\">NULL</span>)&#123;<br>            q.<span class=\"hljs-built_in\">push</span>(tmp-&gt;lchild);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    BiTree tree;<br>    tree=<span class=\"hljs-literal\">NULL</span>;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;n ; ++i) &#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;n ; ++j) &#123;<br>        cin&gt;&gt;pre[j];<br>    &#125;<br>    tree=<span class=\"hljs-built_in\">PostCreate</span>(<span class=\"hljs-number\">0</span>,n<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>,n<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-built_in\">LevelOrder</span>(tree);<br>    cout&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805065406070784\">题目详情 - L2-011 玩转二叉树 (25 分) (pintia.cn)</a></p>\n<p><a href=\"https://xingyuanjie.top/2022/04/07/Algorithm014/\">由遍历顺序构建二叉树(前序+中序;后序+中序) - 计算机奇妙之旅 (xingyuanjie.top)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree",
                "BFS"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/14/Algorithm023/",
            "url": "https://xingyuanjie.top/2022/04/14/Algorithm023/",
            "title": "L2-035 完全二叉树的层序遍历 (25 分)",
            "date_published": "2022-04-14T06:01:05.000Z",
            "content_html": "<h2 id=\"L2-035-完全二叉树的层序遍历-25-分\"><a href=\"#L2-035-完全二叉树的层序遍历-25-分\" class=\"headerlink\" title=\"L2-035 完全二叉树的层序遍历 (25 分)\"></a>L2-035 完全二叉树的层序遍历 (25 分)</h2><p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是<strong>完美二叉树</strong>。对于深度为 <em>D</em> 的，有 <em>N</em> 个结点的二叉树，若其结点对应于相同深度完美二叉树的层序遍历的前 <em>N</em> 个结点，这样的树就是<strong>完全二叉树</strong>。</p>\n<p>给定一棵完全二叉树的后序遍历，请你给出这棵树的层序遍历结果。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行中给出正整数 <em>N</em>（≤30），即树中结点个数。第二行给出后序遍历序列，为 <em>N</em> 个不超过 100 的正整数。同一行中所有数字都以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出该树的层序遍历序列。所有数字都以 1 个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">8<br>91 71 2 34 10 15 55 18<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">18 34 55 71 2 10 15 91<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>后序遍历建树 + 完全二叉树性质</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">int</span> tree[<span class=\"hljs-number\">10001</span>];<br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">post</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span></span>&#123;\t\t<span class=\"hljs-comment\">//根据后序遍历建树</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span>*i&lt;=n)&#123;\t\t\t<span class=\"hljs-comment\">//当2*i&lt;=n时，结点i的左孩子编号为2*i，否则无左孩子</span><br>        <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">2</span>*i);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span>*i+<span class=\"hljs-number\">1</span>&lt;=n)&#123;\t\t<span class=\"hljs-comment\">//当2*i+1&lt;=n时，结点i的右孩子编号为2*i+1，否则无右孩子</span><br>        <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">2</span>*i+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    cin&gt;&gt;tree[i];<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br><br>    cin&gt;&gt;n;<br>    <span class=\"hljs-built_in\">post</span>(<span class=\"hljs-number\">1</span>);           <span class=\"hljs-comment\">//后序遍历建树</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;\t\t\t\t\t\t<span class=\"hljs-comment\">//顺序输出即为层序遍历</span><br>        <span class=\"hljs-keyword\">if</span>(i!=n)&#123;<br>            cout&lt;&lt;tree[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            cout&lt;&lt;tree[i];<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482058\">https://pintia.cn/problem-sets/994805046380707840/problems/1336215880692482058</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/13/Algorithm022/",
            "url": "https://xingyuanjie.top/2022/04/13/Algorithm022/",
            "title": "L2-031 深入虎穴 (25 分)",
            "date_published": "2022-04-13T11:09:46.000Z",
            "content_html": "<p>著名的王牌间谍 007 需要执行一次任务，获取敌方的机密情报。已知情报藏在一个地下迷宫里，迷宫只有一个入口，里面有很多条通路，每条路通向一扇门。每一扇门背后或者是一个房间，或者又有很多条路，同样是每条路通向一扇门…… 他的手里有一张表格，是其他间谍帮他收集到的情报，他们记下了每扇门的编号，以及这扇门背后的每一条通路所到达的门的编号。007 发现不存在两条路通向同一扇门。</p>\n<p>内线告诉他，情报就藏在迷宫的最深处。但是这个迷宫太大了，他需要你的帮助 —— 请编程帮他找出距离入口最远的那扇门。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入首先在一行中给出正整数 <em>N</em>（&lt;105），是门的数量。最后 <em>N</em> 行，第 <em>i</em> 行（1≤<em>i</em>≤<em>N</em>）按以下格式描述编号为 <em>i</em> 的那扇门背后能通向的门：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs mathematica\"><span class=\"hljs-built_in\">K</span> <span class=\"hljs-built_in\">D</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-built_in\">D</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">...</span> <span class=\"hljs-built_in\">D</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">]</span><br></code></pre></div></td></tr></table></figure>\n\n<p>其中 <code>K</code> 是通道的数量，其后是每扇门的编号。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">13<br>3 2 3 4<br>2 5 6<br>1 7<br>1 8<br>1 9<br>0<br>2 11 10<br>1 13<br>0<br>0<br>1 12<br>0<br>0<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">12<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表 + BFS</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v[<span class=\"hljs-number\">100005</span>];<br><span class=\"hljs-keyword\">int</span> book[<span class=\"hljs-number\">100005</span>];<br><span class=\"hljs-keyword\">int</span> start=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">()</span></span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//BFS</span><br>    queue&lt;<span class=\"hljs-keyword\">int</span>&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(start);\t\t\t\t\t\t<span class=\"hljs-comment\">//根节点入队</span><br>    <span class=\"hljs-keyword\">int</span> x;<br>    <span class=\"hljs-keyword\">while</span>(!q.<span class=\"hljs-built_in\">empty</span>())&#123;<br>        x=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;v[x].<span class=\"hljs-built_in\">size</span>() ; ++i) &#123;\t\t\t\t<br>            q.<span class=\"hljs-built_in\">push</span>(v[x][i]);<br>        &#125;<br>    &#125;\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。</span><br>    <span class=\"hljs-keyword\">return</span> x;\t\t\t\t\t\t\t<span class=\"hljs-comment\">//所以最后一层只有一个结点，所以BFS最后一个元素，即为最远的门</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> time;<br>        cin&gt;&gt;time;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;=time ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> num;<br>            cin&gt;&gt;num;<br>            book[num]=<span class=\"hljs-number\">1</span>;<br>            v[i].<span class=\"hljs-built_in\">push_back</span>(num);<br><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">1</span>; k &lt;=n ; ++k) &#123;\t\t\t<span class=\"hljs-comment\">//找入口</span><br>        <span class=\"hljs-keyword\">if</span>(book[k]==<span class=\"hljs-number\">0</span>) start=k;\t\t\t\t<span class=\"hljs-comment\">//没有门通向的门，即为入口</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> ans=<span class=\"hljs-built_in\">bfs</span>();<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1111914599412858888\">题目详情 - L2-031 深入虎穴 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree",
                "邻接表",
                "Vector",
                "BFS"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/13/Algorithm021/",
            "url": "https://xingyuanjie.top/2022/04/13/Algorithm021/",
            "title": "L2-040 哲哲打游戏 (25 分)",
            "date_published": "2022-04-13T11:09:41.000Z",
            "content_html": "<h2 id=\"L2-040-哲哲打游戏-25-分\"><a href=\"#L2-040-哲哲打游戏-25-分\" class=\"headerlink\" title=\"L2-040 哲哲打游戏 (25 分)\"></a><strong>L2-040 哲哲打游戏 (25 分)</strong></h2><p>哲哲是一位硬核游戏玩家。最近一款名叫《达诺达诺》的新游戏刚刚上市，哲哲自然要快速攻略游戏，守护硬核游戏玩家的一切！</p>\n<p>为简化模型，我们不妨假设游戏有 <em>N</em> 个剧情点，通过游戏里不同的操作或选择可以从某个剧情点去往另外一个剧情点。此外，游戏还设置了一些<strong>存档</strong>，在某个剧情点可以将玩家的游戏进度保存在一个档位上，读取存档后可以回到剧情点，重新进行操作或者选择，到达不同的剧情点。</p>\n<p>为了追踪硬核游戏玩家哲哲的攻略进度，你打算写一个程序来完成这个工作。假设你已经知道了游戏的全部剧情点和流程，以及哲哲的游戏操作，请你输出哲哲的游戏进度。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行是两个正整数 <em>N</em> 和 <em>M</em> (1≤<em>N</em>,<em>M</em>≤105)，表示总共有 <em>N</em> 个剧情点，哲哲有 <em>M</em> 个游戏操作。</p>\n<p>接下来的 <em>N</em> 行，每行对应一个剧情点的发展设定。第 <em>i</em> 行的第一个数字是 <em>K**i</em>，表示剧情点 <em>i</em> 通过一些操作或选择能去往下面 <em>K**i</em> 个剧情点；接下来有 <em>K**i</em> 个数字，第 <em>k</em> 个数字表示做第 <em>k</em> 个操作或选择可以去往的剧情点编号。</p>\n<p>最后有 <em>M</em> 行，每行第一个数字是 0、1 或 2，分别表示：</p>\n<ul>\n<li>0 表示哲哲做出了某个操作或选择，后面紧接着一个数字 <em>j</em>，表示哲哲在当前剧情点做出了第 <em>j</em> 个选择。我们保证哲哲的选择永远是合法的。</li>\n<li>1 表示哲哲进行了一次存档，后面紧接着是一个数字 <em>j</em>，表示存档放在了第 <em>j</em> 个档位上。</li>\n<li>2 表示哲哲进行了一次读取存档的操作，后面紧接着是一个数字 <em>j</em>，表示读取了放在第 <em>j</em> 个位置的存档。</li>\n</ul>\n<p>约定：所有操作或选择以及剧情点编号都从 1 号开始。存档的档位不超过 100 个，编号也从 1 开始。游戏默认从 1 号剧情点开始。总的选项数（即 ∑<em>K**i</em>）不超过 106。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对于每个 1（即存档）操作，在一行中输出存档的剧情点编号。</p>\n<p>最后一行输出哲哲最后到达的剧情点编号。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">10 11<br>3 2 3 4<br>1 6<br>3 4 7 5<br>1 3<br>1 9<br>2 3 5<br>3 1 8 5<br>1 9<br>2 8 10<br>0<br>1 1<br>0 3<br>0 1<br>1 2<br>0 2<br>0 2<br>2 2<br>0 3<br>0 1<br>1 1<br>0 2<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">1<br>3<br>9<br>10<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"样例解释：\"><a href=\"#样例解释：\" class=\"headerlink\" title=\"样例解释：\"></a>样例解释：</h3><p>简单给出样例中经过的剧情点顺序：</p>\n<p>1 -&gt; 4 -&gt; 3 -&gt; 7 -&gt; 8 -&gt; 3 -&gt; 5 -&gt; 9 -&gt; 10。</p>\n<p>档位 1 开始存的是 1 号剧情点；档位 2 存的是 3 号剧情点；档位 1 后来又存了 9 号剧情点。</p>\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表 + 模拟，主要是理解题意</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n,k;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v[n+<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">int</span> save[<span class=\"hljs-number\">105</span>];\t\t\t\t\t\t\t<span class=\"hljs-comment\">//存档点</span><br>    <span class=\"hljs-keyword\">int</span> now=<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//当前剧情点</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;<br>        <span class=\"hljs-keyword\">int</span> num;<br>        cin&gt;&gt;num;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;num ; ++j) &#123;<br>            <span class=\"hljs-keyword\">int</span> x;<br>            cin&gt;&gt;x;<br>            v[i].<span class=\"hljs-built_in\">push_back</span>(x);\t\t\t\t<span class=\"hljs-comment\">//邻接表存操作数</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>; l &lt;k ; ++l) &#123;\t\t\t<span class=\"hljs-comment\">//模拟过程</span><br>        <span class=\"hljs-keyword\">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class=\"hljs-keyword\">if</span>(a==<span class=\"hljs-number\">1</span>)&#123;<br>            save[b]=now;<br>            cout&lt;&lt;now&lt;&lt;endl;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(a==<span class=\"hljs-number\">0</span>)&#123;<br>            now=v[now][b<span class=\"hljs-number\">-1</span>];<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(a==<span class=\"hljs-number\">2</span>)&#123;<br>            now=save[b];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;now&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/1386335159927652363\">题目详情 - L2-040 哲哲打游戏 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "邻接表",
                "Vector",
                "模拟"
            ]
        },
        {
            "id": "https://xingyuanjie.top/2022/04/13/Algorithm019/",
            "url": "https://xingyuanjie.top/2022/04/13/Algorithm019/",
            "title": "L2-026 小字辈 (25 分)",
            "date_published": "2022-04-13T01:45:49.000Z",
            "content_html": "<h2 id=\"L2-026-小字辈-25-分\"><a href=\"#L2-026-小字辈-25-分\" class=\"headerlink\" title=\"L2-026 小字辈 (25 分)\"></a><strong>L2-026 小字辈 (25 分)</strong></h2><p>本题给定一个庞大家族的家谱，要请你给出最小一辈的名单。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在第一行给出家族人口总数 N（不超过 100 000 的正整数） —— 简单起见，我们把家族成员从 1 到 N 编号。随后第二行给出 N 个编号，其中第 i 个编号对应第 i 位成员的父&#x2F;母。家谱中辈分最高的老祖宗对应的父&#x2F;母编号为 -1。一行中的数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>首先输出最小的辈分（老祖宗的辈分为 1，以下逐级递增）。然后在第二行按递增顺序输出辈分最小的成员的编号。编号间以一个空格分隔，行首尾不得有多余空格。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs in\">9<br>2 6 5 5 -1 5 6 4 7<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs out\">4<br>1 9<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"程序源代码：\"><a href=\"#程序源代码：\" class=\"headerlink\" title=\"程序源代码：\"></a>程序源代码：</h3><p><strong>邻接表建树+BFS</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>vector&lt;<span class=\"hljs-keyword\">int</span>&gt; tree[<span class=\"hljs-number\">100005</span>];\t\t\t\t<span class=\"hljs-comment\">//邻接表建树</span><br><span class=\"hljs-keyword\">int</span> deeptree[<span class=\"hljs-number\">100005</span>];\t\t\t\t\t<span class=\"hljs-comment\">//记录树的深度</span><br><span class=\"hljs-keyword\">int</span> n;<br><span class=\"hljs-keyword\">int</span> root;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//根节点</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">()</span></span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//bfs</span><br>    queue&lt;<span class=\"hljs-keyword\">int</span>&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(root);\t\t\t\t\t\t<span class=\"hljs-comment\">//根节点入队</span><br>    <span class=\"hljs-keyword\">int</span> x;\t\t\t\t\t\t\t\t<br>    <span class=\"hljs-keyword\">while</span>(!q.<span class=\"hljs-built_in\">empty</span>())&#123;<br>        x=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;tree[x].<span class=\"hljs-built_in\">size</span>() ; ++i) &#123;<br>            deeptree[tree[x][i]]=deeptree[x]+<span class=\"hljs-number\">1</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//每一层的深度为上一层加1</span><br>            q.<span class=\"hljs-built_in\">push</span>(tree[x][i]);<br><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> deeptree[x];\t\t\t\t<span class=\"hljs-comment\">//返回最后一个结点的深度，即深度的最大值</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    n;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">int</span> a[n];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;=n ; ++i) &#123;<br>        cin&gt;&gt;a[i];<br>        <span class=\"hljs-keyword\">if</span>(a[i]==<span class=\"hljs-number\">-1</span>)&#123;<br>            root=i;\t\t\t\t<span class=\"hljs-comment\">//找根节点</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;=n ; ++j) &#123;\t\t\t\t\t<span class=\"hljs-comment\">//建树</span><br>        tree[a[j]].<span class=\"hljs-built_in\">push_back</span>(j);\t\t\t\t\t<span class=\"hljs-comment\">//j是a[j]的孩子节点</span><br>        <span class=\"hljs-keyword\">if</span>(a[j]==<span class=\"hljs-number\">-1</span>) deeptree[j]=<span class=\"hljs-number\">1</span>;\t\t\t\t\t<span class=\"hljs-comment\">//初始化根节点深度为1</span><br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> ans=<span class=\"hljs-built_in\">bfs</span>();<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">int</span> maxdeepcnt=<span class=\"hljs-number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//记录最大深度的个数</span><br>    <span class=\"hljs-keyword\">int</span> tmp[n];\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//找最大深度的id</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">1</span>; k &lt;=n ; ++k) &#123;\t\t\t\t\t<br>        <span class=\"hljs-keyword\">if</span>(ans==deeptree[k])&#123;<br>            maxdeepcnt++;<br>            tmp[maxdeepcnt]=k;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//输出格式控制</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt;=maxdeepcnt ; ++l) &#123;<br>        <span class=\"hljs-keyword\">if</span>(l!=maxdeepcnt) cout&lt;&lt;tmp[l]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>        <span class=\"hljs-keyword\">else</span> cout&lt;&lt;tmp[l]&lt;&lt;endl;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://pintia.cn/problem-sets/994805046380707840/problems/994805055679479808\">题目详情 - L2-026 小字辈 (25 分) (pintia.cn)</a></p>\n",
            "tags": [
                "Data Structure",
                "C++",
                "团体程序设计天梯赛",
                "Binary tree",
                "邻接表",
                "Vector",
                "BFS"
            ]
        }
    ]
}